// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"html/template"
)

var (
	_ = template.Must
	_ = fmt.Sprint
	_ = json.Marshal
)

func isNull(js []byte) bool {
	js = bytes.Trim(js, " \t\r\n") // Trim JS whitespace
	return string(js) == "null"
}

// AbortQueuedMigrationsInput (INPUT_OBJECT): Autogenerated input type of AbortQueuedMigrations.
type AbortQueuedMigrationsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The ID of the organization that is running the migrations.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`
}

// AbortQueuedMigrationsPayload (OBJECT): Autogenerated return type of AbortQueuedMigrations.
type AbortQueuedMigrationsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Success: Did the operation succeed?.
	Success bool `json:"success,omitempty"`
}

func (x *AbortQueuedMigrationsPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AbortQueuedMigrationsPayload) GetSuccess() bool            { return x.Success }

// AbortRepositoryMigrationInput (INPUT_OBJECT): Autogenerated input type of AbortRepositoryMigration.
type AbortRepositoryMigrationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// MigrationId: The ID of the migration to be aborted.
	//
	// GraphQL type: ID!
	MigrationId ID `json:"migrationId,omitempty"`
}

// AbortRepositoryMigrationPayload (OBJECT): Autogenerated return type of AbortRepositoryMigration.
type AbortRepositoryMigrationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Success: Did the operation succeed?.
	Success bool `json:"success,omitempty"`
}

func (x *AbortRepositoryMigrationPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AbortRepositoryMigrationPayload) GetSuccess() bool            { return x.Success }

// AcceptEnterpriseAdministratorInvitationInput (INPUT_OBJECT): Autogenerated input type of AcceptEnterpriseAdministratorInvitation.
type AcceptEnterpriseAdministratorInvitationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// InvitationId: The id of the invitation being accepted.
	//
	// GraphQL type: ID!
	InvitationId ID `json:"invitationId,omitempty"`
}

// AcceptEnterpriseAdministratorInvitationPayload (OBJECT): Autogenerated return type of AcceptEnterpriseAdministratorInvitation.
type AcceptEnterpriseAdministratorInvitationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Invitation: The invitation that was accepted.
	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`

	// Message: A message confirming the result of accepting an administrator invitation.
	Message string `json:"message,omitempty"`
}

func (x *AcceptEnterpriseAdministratorInvitationPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *AcceptEnterpriseAdministratorInvitationPayload) GetInvitation() *EnterpriseAdministratorInvitation {
	return x.Invitation
}
func (x *AcceptEnterpriseAdministratorInvitationPayload) GetMessage() string { return x.Message }

// AcceptEnterpriseMemberInvitationInput (INPUT_OBJECT): Autogenerated input type of AcceptEnterpriseMemberInvitation.
type AcceptEnterpriseMemberInvitationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// InvitationId: The id of the invitation being accepted.
	//
	// GraphQL type: ID!
	InvitationId ID `json:"invitationId,omitempty"`
}

// AcceptEnterpriseMemberInvitationPayload (OBJECT): Autogenerated return type of AcceptEnterpriseMemberInvitation.
type AcceptEnterpriseMemberInvitationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Invitation: The invitation that was accepted.
	Invitation *EnterpriseMemberInvitation `json:"invitation,omitempty"`

	// Message: A message confirming the result of accepting an unaffiliated member invitation.
	Message string `json:"message,omitempty"`
}

func (x *AcceptEnterpriseMemberInvitationPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *AcceptEnterpriseMemberInvitationPayload) GetInvitation() *EnterpriseMemberInvitation {
	return x.Invitation
}
func (x *AcceptEnterpriseMemberInvitationPayload) GetMessage() string { return x.Message }

// AcceptTopicSuggestionInput (INPUT_OBJECT): Autogenerated input type of AcceptTopicSuggestion.
type AcceptTopicSuggestionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// **Upcoming Change on 2024-04-01 UTC**
	// **Description:** `repositoryId` will be removed.
	// **Reason:** Suggested topics are no longer supported
	// .
	//
	// GraphQL type: ID
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The name of the suggested topic.
	//
	// **Upcoming Change on 2024-04-01 UTC**
	// **Description:** `name` will be removed.
	// **Reason:** Suggested topics are no longer supported
	// .
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`
}

// AcceptTopicSuggestionPayload (OBJECT): Autogenerated return type of AcceptTopicSuggestion.
type AcceptTopicSuggestionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Topic: The accepted topic.
	//
	// Deprecated: The accepted topic.
	Topic *Topic `json:"topic,omitempty"`
}

func (x *AcceptTopicSuggestionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AcceptTopicSuggestionPayload) GetTopic() *Topic            { return x.Topic }

// AccessUserNamespaceRepositoryInput (INPUT_OBJECT): Autogenerated input type of AccessUserNamespaceRepository.
type AccessUserNamespaceRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise owning the user namespace repository.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// RepositoryId: The ID of the user namespace repository to access.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// AccessUserNamespaceRepositoryPayload (OBJECT): Autogenerated return type of AccessUserNamespaceRepository.
type AccessUserNamespaceRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ExpiresAt: The time that repository access expires at.
	ExpiresAt DateTime `json:"expiresAt,omitempty"`

	// Repository: The repository that is temporarily accessible.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *AccessUserNamespaceRepositoryPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *AccessUserNamespaceRepositoryPayload) GetExpiresAt() DateTime     { return x.ExpiresAt }
func (x *AccessUserNamespaceRepositoryPayload) GetRepository() *Repository { return x.Repository }

// Actor (INTERFACE): Represents an object which can take actions on GitHub. Typically a User or Bot.
// Actor_Interface: Represents an object which can take actions on GitHub. Typically a User or Bot.
//
// Possible types:
//
//   - *Bot
//   - *EnterpriseUserAccount
//   - *Mannequin
//   - *Organization
//   - *User
type Actor_Interface interface {
	isActor()
	GetAvatarUrl() URI
	GetLogin() string
	GetResourcePath() URI
	GetUrl() URI
}

func (*Bot) isActor()                   {}
func (*EnterpriseUserAccount) isActor() {}
func (*Mannequin) isActor()             {}
func (*Organization) isActor()          {}
func (*User) isActor()                  {}

type Actor struct {
	Interface Actor_Interface
}

func (x *Actor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Actor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Actor", info.Typename)
	case "Bot":
		x.Interface = new(Bot)
	case "EnterpriseUserAccount":
		x.Interface = new(EnterpriseUserAccount)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ActorLocation (OBJECT): Location information for an actor.
type ActorLocation struct {
	// City: City.
	City string `json:"city,omitempty"`

	// Country: Country name.
	Country string `json:"country,omitempty"`

	// CountryCode: Country code.
	CountryCode string `json:"countryCode,omitempty"`

	// Region: Region name.
	Region string `json:"region,omitempty"`

	// RegionCode: Region or state code.
	RegionCode string `json:"regionCode,omitempty"`
}

func (x *ActorLocation) GetCity() string        { return x.City }
func (x *ActorLocation) GetCountry() string     { return x.Country }
func (x *ActorLocation) GetCountryCode() string { return x.CountryCode }
func (x *ActorLocation) GetRegion() string      { return x.Region }
func (x *ActorLocation) GetRegionCode() string  { return x.RegionCode }

// ActorType (ENUM): The actor's type.
type ActorType string

// ActorType_USER: Indicates a user actor.
const ActorType_USER ActorType = "USER"

// ActorType_TEAM: Indicates a team actor.
const ActorType_TEAM ActorType = "TEAM"

// AddAssigneesToAssignableInput (INPUT_OBJECT): Autogenerated input type of AddAssigneesToAssignable.
type AddAssigneesToAssignableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// AssignableId: The id of the assignable object to add assignees to.
	//
	// GraphQL type: ID!
	AssignableId ID `json:"assignableId,omitempty"`

	// AssigneeIds: The id of users to add as assignees.
	//
	// GraphQL type: [ID!]!
	AssigneeIds []ID `json:"assigneeIds,omitempty"`
}

// AddAssigneesToAssignablePayload (OBJECT): Autogenerated return type of AddAssigneesToAssignable.
type AddAssigneesToAssignablePayload struct {
	// Assignable: The item that was assigned.
	Assignable Assignable `json:"assignable,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *AddAssigneesToAssignablePayload) GetAssignable() Assignable   { return x.Assignable }
func (x *AddAssigneesToAssignablePayload) GetClientMutationId() string { return x.ClientMutationId }

// AddCommentInput (INPUT_OBJECT): Autogenerated input type of AddComment.
type AddCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the subject to modify.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`

	// Body: The contents of the comment.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// AddCommentPayload (OBJECT): Autogenerated return type of AddComment.
type AddCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// CommentEdge: The edge from the subject's comment connection.
	CommentEdge *IssueCommentEdge `json:"commentEdge,omitempty"`

	// Subject: The subject.
	Subject Node `json:"subject,omitempty"`

	// TimelineEdge: The edge from the subject's timeline connection.
	TimelineEdge *IssueTimelineItemEdge `json:"timelineEdge,omitempty"`
}

func (x *AddCommentPayload) GetClientMutationId() string             { return x.ClientMutationId }
func (x *AddCommentPayload) GetCommentEdge() *IssueCommentEdge       { return x.CommentEdge }
func (x *AddCommentPayload) GetSubject() Node                        { return x.Subject }
func (x *AddCommentPayload) GetTimelineEdge() *IssueTimelineItemEdge { return x.TimelineEdge }

// AddDiscussionCommentInput (INPUT_OBJECT): Autogenerated input type of AddDiscussionComment.
type AddDiscussionCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DiscussionId: The Node ID of the discussion to comment on.
	//
	// GraphQL type: ID!
	DiscussionId ID `json:"discussionId,omitempty"`

	// ReplyToId: The Node ID of the discussion comment within this discussion to reply to.
	//
	// GraphQL type: ID
	ReplyToId ID `json:"replyToId,omitempty"`

	// Body: The contents of the comment.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// AddDiscussionCommentPayload (OBJECT): Autogenerated return type of AddDiscussionComment.
type AddDiscussionCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Comment: The newly created discussion comment.
	Comment *DiscussionComment `json:"comment,omitempty"`
}

func (x *AddDiscussionCommentPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *AddDiscussionCommentPayload) GetComment() *DiscussionComment { return x.Comment }

// AddDiscussionPollVoteInput (INPUT_OBJECT): Autogenerated input type of AddDiscussionPollVote.
type AddDiscussionPollVoteInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PollOptionId: The Node ID of the discussion poll option to vote for.
	//
	// GraphQL type: ID!
	PollOptionId ID `json:"pollOptionId,omitempty"`
}

// AddDiscussionPollVotePayload (OBJECT): Autogenerated return type of AddDiscussionPollVote.
type AddDiscussionPollVotePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PollOption: The poll option that a vote was added to.
	PollOption *DiscussionPollOption `json:"pollOption,omitempty"`
}

func (x *AddDiscussionPollVotePayload) GetClientMutationId() string          { return x.ClientMutationId }
func (x *AddDiscussionPollVotePayload) GetPollOption() *DiscussionPollOption { return x.PollOption }

// AddEnterpriseOrganizationMemberInput (INPUT_OBJECT): Autogenerated input type of AddEnterpriseOrganizationMember.
type AddEnterpriseOrganizationMemberInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise which owns the organization.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// OrganizationId: The ID of the organization the users will be added to.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// UserIds: The IDs of the enterprise members to add.
	//
	// GraphQL type: [ID!]!
	UserIds []ID `json:"userIds,omitempty"`

	// Role: The role to assign the users in the organization.
	//
	// GraphQL type: OrganizationMemberRole
	Role OrganizationMemberRole `json:"role,omitempty"`
}

// AddEnterpriseOrganizationMemberPayload (OBJECT): Autogenerated return type of AddEnterpriseOrganizationMember.
type AddEnterpriseOrganizationMemberPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Users: The users who were added to the organization.
	Users []*User `json:"users,omitempty"`
}

func (x *AddEnterpriseOrganizationMemberPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *AddEnterpriseOrganizationMemberPayload) GetUsers() []*User { return x.Users }

// AddEnterpriseSupportEntitlementInput (INPUT_OBJECT): Autogenerated input type of AddEnterpriseSupportEntitlement.
type AddEnterpriseSupportEntitlementInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the Enterprise which the admin belongs to.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of a member who will receive the support entitlement.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`
}

// AddEnterpriseSupportEntitlementPayload (OBJECT): Autogenerated return type of AddEnterpriseSupportEntitlement.
type AddEnterpriseSupportEntitlementPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of adding the support entitlement.
	Message string `json:"message,omitempty"`
}

func (x *AddEnterpriseSupportEntitlementPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *AddEnterpriseSupportEntitlementPayload) GetMessage() string { return x.Message }

// AddLabelsToLabelableInput (INPUT_OBJECT): Autogenerated input type of AddLabelsToLabelable.
type AddLabelsToLabelableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LabelableId: The id of the labelable object to add labels to.
	//
	// GraphQL type: ID!
	LabelableId ID `json:"labelableId,omitempty"`

	// LabelIds: The ids of the labels to add.
	//
	// GraphQL type: [ID!]!
	LabelIds []ID `json:"labelIds,omitempty"`
}

// AddLabelsToLabelablePayload (OBJECT): Autogenerated return type of AddLabelsToLabelable.
type AddLabelsToLabelablePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Labelable: The item that was labeled.
	Labelable Labelable `json:"labelable,omitempty"`
}

func (x *AddLabelsToLabelablePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AddLabelsToLabelablePayload) GetLabelable() Labelable     { return x.Labelable }

// AddProjectCardInput (INPUT_OBJECT): Autogenerated input type of AddProjectCard.
type AddProjectCardInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectColumnId: The Node ID of the ProjectColumn.
	//
	// GraphQL type: ID!
	ProjectColumnId ID `json:"projectColumnId,omitempty"`

	// ContentId: The content of the card. Must be a member of the ProjectCardItem union.
	//
	// GraphQL type: ID
	ContentId ID `json:"contentId,omitempty"`

	// Note: The note on the card.
	//
	// GraphQL type: String
	Note string `json:"note,omitempty"`
}

// AddProjectCardPayload (OBJECT): Autogenerated return type of AddProjectCard.
type AddProjectCardPayload struct {
	// CardEdge: The edge from the ProjectColumn's card connection.
	CardEdge *ProjectCardEdge `json:"cardEdge,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectColumn: The ProjectColumn.
	ProjectColumn *ProjectColumn `json:"projectColumn,omitempty"`
}

func (x *AddProjectCardPayload) GetCardEdge() *ProjectCardEdge    { return x.CardEdge }
func (x *AddProjectCardPayload) GetClientMutationId() string      { return x.ClientMutationId }
func (x *AddProjectCardPayload) GetProjectColumn() *ProjectColumn { return x.ProjectColumn }

// AddProjectColumnInput (INPUT_OBJECT): Autogenerated input type of AddProjectColumn.
type AddProjectColumnInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The Node ID of the project.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// Name: The name of the column.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`
}

// AddProjectColumnPayload (OBJECT): Autogenerated return type of AddProjectColumn.
type AddProjectColumnPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ColumnEdge: The edge from the project's column connection.
	ColumnEdge *ProjectColumnEdge `json:"columnEdge,omitempty"`

	// Project: The project.
	Project *Project `json:"project,omitempty"`
}

func (x *AddProjectColumnPayload) GetClientMutationId() string       { return x.ClientMutationId }
func (x *AddProjectColumnPayload) GetColumnEdge() *ProjectColumnEdge { return x.ColumnEdge }
func (x *AddProjectColumnPayload) GetProject() *Project              { return x.Project }

// AddProjectV2DraftIssueInput (INPUT_OBJECT): Autogenerated input type of AddProjectV2DraftIssue.
type AddProjectV2DraftIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to add the draft issue to.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// Title: The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// Body: The body of the draft issue.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// AssigneeIds: The IDs of the assignees of the draft issue.
	//
	// GraphQL type: [ID!]
	AssigneeIds []ID `json:"assigneeIds,omitempty"`
}

// AddProjectV2DraftIssuePayload (OBJECT): Autogenerated return type of AddProjectV2DraftIssue.
type AddProjectV2DraftIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectItem: The draft issue added to the project.
	ProjectItem *ProjectV2Item `json:"projectItem,omitempty"`
}

func (x *AddProjectV2DraftIssuePayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *AddProjectV2DraftIssuePayload) GetProjectItem() *ProjectV2Item { return x.ProjectItem }

// AddProjectV2ItemByIdInput (INPUT_OBJECT): Autogenerated input type of AddProjectV2ItemById.
type AddProjectV2ItemByIdInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to add the item to.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ContentId: The id of the Issue or Pull Request to add.
	//
	// GraphQL type: ID!
	ContentId ID `json:"contentId,omitempty"`
}

// AddProjectV2ItemByIdPayload (OBJECT): Autogenerated return type of AddProjectV2ItemById.
type AddProjectV2ItemByIdPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Item: The item added to the project.
	Item *ProjectV2Item `json:"item,omitempty"`
}

func (x *AddProjectV2ItemByIdPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AddProjectV2ItemByIdPayload) GetItem() *ProjectV2Item     { return x.Item }

// AddPullRequestReviewCommentInput (INPUT_OBJECT): Autogenerated input type of AddPullRequestReviewComment.
type AddPullRequestReviewCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The node ID of the pull request reviewing
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: ID
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// PullRequestReviewId: The Node ID of the review to modify.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: ID
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`

	// CommitOID: The SHA of the commit to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: GitObjectID
	CommitOID GitObjectID `json:"commitOID,omitempty"`

	// Body: The text of the comment. This field is required
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Path: The relative path of the file to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: String
	Path string `json:"path,omitempty"`

	// Position: The line index in the diff to comment on.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: Int
	Position int `json:"position,omitempty"`

	// InReplyTo: The comment id to reply to.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
	// **Reason:** We are deprecating the addPullRequestReviewComment mutation
	// .
	//
	// GraphQL type: ID
	InReplyTo ID `json:"inReplyTo,omitempty"`
}

// AddPullRequestReviewCommentPayload (OBJECT): Autogenerated return type of AddPullRequestReviewComment.
type AddPullRequestReviewCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Comment: The newly created comment.
	Comment *PullRequestReviewComment `json:"comment,omitempty"`

	// CommentEdge: The edge from the review's comment connection.
	CommentEdge *PullRequestReviewCommentEdge `json:"commentEdge,omitempty"`
}

func (x *AddPullRequestReviewCommentPayload) GetClientMutationId() string           { return x.ClientMutationId }
func (x *AddPullRequestReviewCommentPayload) GetComment() *PullRequestReviewComment { return x.Comment }
func (x *AddPullRequestReviewCommentPayload) GetCommentEdge() *PullRequestReviewCommentEdge {
	return x.CommentEdge
}

// AddPullRequestReviewInput (INPUT_OBJECT): Autogenerated input type of AddPullRequestReview.
type AddPullRequestReviewInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Node ID of the pull request to modify.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// CommitOID: The commit OID the review pertains to.
	//
	// GraphQL type: GitObjectID
	CommitOID GitObjectID `json:"commitOID,omitempty"`

	// Body: The contents of the review body comment.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Event: The event to perform on the pull request review.
	//
	// GraphQL type: PullRequestReviewEvent
	Event PullRequestReviewEvent `json:"event,omitempty"`

	// Comments: The review line comments.
	//
	// **Upcoming Change on 2023-10-01 UTC**
	// **Description:** `comments` will be removed. use the `threads` argument instead
	// **Reason:** We are deprecating comment fields that use diff-relative positioning
	// .
	//
	// GraphQL type: [DraftPullRequestReviewComment]
	Comments []*DraftPullRequestReviewComment `json:"comments,omitempty"`

	// Threads: The review line comment threads.
	//
	// GraphQL type: [DraftPullRequestReviewThread]
	Threads []*DraftPullRequestReviewThread `json:"threads,omitempty"`
}

// AddPullRequestReviewPayload (OBJECT): Autogenerated return type of AddPullRequestReview.
type AddPullRequestReviewPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReview: The newly created pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`

	// ReviewEdge: The edge from the pull request's review connection.
	ReviewEdge *PullRequestReviewEdge `json:"reviewEdge,omitempty"`
}

func (x *AddPullRequestReviewPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AddPullRequestReviewPayload) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}
func (x *AddPullRequestReviewPayload) GetReviewEdge() *PullRequestReviewEdge { return x.ReviewEdge }

// AddPullRequestReviewThreadInput (INPUT_OBJECT): Autogenerated input type of AddPullRequestReviewThread.
type AddPullRequestReviewThreadInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Path: Path to the file being commented on.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`

	// Body: Body of the thread's first comment.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`

	// PullRequestId: The node ID of the pull request reviewing.
	//
	// GraphQL type: ID
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// PullRequestReviewId: The Node ID of the review to modify.
	//
	// GraphQL type: ID
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`

	// Line: The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments.
	//
	// GraphQL type: Int
	Line int `json:"line,omitempty"`

	// Side: The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
	//
	// GraphQL type: DiffSide
	Side DiffSide `json:"side,omitempty"`

	// StartLine: The first line of the range to which the comment refers.
	//
	// GraphQL type: Int
	StartLine int `json:"startLine,omitempty"`

	// StartSide: The side of the diff on which the start line resides.
	//
	// GraphQL type: DiffSide
	StartSide DiffSide `json:"startSide,omitempty"`

	// SubjectType: The level at which the comments in the corresponding thread are targeted, can be a diff line or a file.
	//
	// GraphQL type: PullRequestReviewThreadSubjectType
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType,omitempty"`
}

// AddPullRequestReviewThreadPayload (OBJECT): Autogenerated return type of AddPullRequestReviewThread.
type AddPullRequestReviewThreadPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Thread: The newly created thread.
	Thread *PullRequestReviewThread `json:"thread,omitempty"`
}

func (x *AddPullRequestReviewThreadPayload) GetClientMutationId() string         { return x.ClientMutationId }
func (x *AddPullRequestReviewThreadPayload) GetThread() *PullRequestReviewThread { return x.Thread }

// AddPullRequestReviewThreadReplyInput (INPUT_OBJECT): Autogenerated input type of AddPullRequestReviewThreadReply.
type AddPullRequestReviewThreadReplyInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReviewId: The Node ID of the pending review to which the reply will belong.
	//
	// GraphQL type: ID
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`

	// PullRequestReviewThreadId: The Node ID of the thread to which this reply is being written.
	//
	// GraphQL type: ID!
	PullRequestReviewThreadId ID `json:"pullRequestReviewThreadId,omitempty"`

	// Body: The text of the reply.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// AddPullRequestReviewThreadReplyPayload (OBJECT): Autogenerated return type of AddPullRequestReviewThreadReply.
type AddPullRequestReviewThreadReplyPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Comment: The newly created reply.
	Comment *PullRequestReviewComment `json:"comment,omitempty"`
}

func (x *AddPullRequestReviewThreadReplyPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *AddPullRequestReviewThreadReplyPayload) GetComment() *PullRequestReviewComment {
	return x.Comment
}

// AddReactionInput (INPUT_OBJECT): Autogenerated input type of AddReaction.
type AddReactionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the subject to modify.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`

	// Content: The name of the emoji to react with.
	//
	// GraphQL type: ReactionContent!
	Content ReactionContent `json:"content,omitempty"`
}

// AddReactionPayload (OBJECT): Autogenerated return type of AddReaction.
type AddReactionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Reaction: The reaction object.
	Reaction *Reaction `json:"reaction,omitempty"`

	// ReactionGroups: The reaction groups for the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Subject: The reactable subject.
	Subject Reactable `json:"subject,omitempty"`
}

func (x *AddReactionPayload) GetClientMutationId() string         { return x.ClientMutationId }
func (x *AddReactionPayload) GetReaction() *Reaction              { return x.Reaction }
func (x *AddReactionPayload) GetReactionGroups() []*ReactionGroup { return x.ReactionGroups }
func (x *AddReactionPayload) GetSubject() Reactable               { return x.Subject }

// AddStarInput (INPUT_OBJECT): Autogenerated input type of AddStar.
type AddStarInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// StarrableId: The Starrable ID to star.
	//
	// GraphQL type: ID!
	StarrableId ID `json:"starrableId,omitempty"`
}

// AddStarPayload (OBJECT): Autogenerated return type of AddStar.
type AddStarPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Starrable: The starrable.
	Starrable Starrable `json:"starrable,omitempty"`
}

func (x *AddStarPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AddStarPayload) GetStarrable() Starrable     { return x.Starrable }

// AddSubIssueInput (INPUT_OBJECT): Autogenerated input type of AddSubIssue.
type AddSubIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The id of the issue.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`

	// SubIssueId: The id of the sub-issue.
	//
	// GraphQL type: ID
	SubIssueId ID `json:"subIssueId,omitempty"`

	// SubIssueUrl: The url of the sub-issue.
	//
	// GraphQL type: String
	SubIssueUrl string `json:"subIssueUrl,omitempty"`

	// ReplaceParent: Option to replace parent issue if one already exists.
	//
	// GraphQL type: Boolean
	ReplaceParent bool `json:"replaceParent,omitempty"`
}

// AddSubIssuePayload (OBJECT): Autogenerated return type of AddSubIssue.
type AddSubIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The parent issue that the sub-issue was added to.
	Issue *Issue `json:"issue,omitempty"`

	// SubIssue: The sub-issue of the parent.
	SubIssue *Issue `json:"subIssue,omitempty"`
}

func (x *AddSubIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AddSubIssuePayload) GetIssue() *Issue            { return x.Issue }
func (x *AddSubIssuePayload) GetSubIssue() *Issue         { return x.SubIssue }

// AddUpvoteInput (INPUT_OBJECT): Autogenerated input type of AddUpvote.
type AddUpvoteInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the discussion or comment to upvote.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`
}

// AddUpvotePayload (OBJECT): Autogenerated return type of AddUpvote.
type AddUpvotePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Subject: The votable subject.
	Subject Votable `json:"subject,omitempty"`
}

func (x *AddUpvotePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *AddUpvotePayload) GetSubject() Votable         { return x.Subject }

// AddVerifiableDomainInput (INPUT_OBJECT): Autogenerated input type of AddVerifiableDomain.
type AddVerifiableDomainInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The ID of the owner to add the domain to.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// Domain: The URL of the domain.
	//
	// GraphQL type: URI!
	Domain URI `json:"domain,omitempty"`
}

// AddVerifiableDomainPayload (OBJECT): Autogenerated return type of AddVerifiableDomain.
type AddVerifiableDomainPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Domain: The verifiable domain that was added.
	Domain *VerifiableDomain `json:"domain,omitempty"`
}

func (x *AddVerifiableDomainPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *AddVerifiableDomainPayload) GetDomain() *VerifiableDomain { return x.Domain }

// AddedToMergeQueueEvent (OBJECT): Represents an 'added_to_merge_queue' event on a given pull request.
type AddedToMergeQueueEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enqueuer: The user who added this Pull Request to the merge queue.
	Enqueuer *User `json:"enqueuer,omitempty"`

	// Id: The Node ID of the AddedToMergeQueueEvent object.
	Id ID `json:"id,omitempty"`

	// MergeQueue: The merge queue where this pull request was added to.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AddedToMergeQueueEvent) GetActor() Actor              { return x.Actor }
func (x *AddedToMergeQueueEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AddedToMergeQueueEvent) GetEnqueuer() *User           { return x.Enqueuer }
func (x *AddedToMergeQueueEvent) GetId() ID                    { return x.Id }
func (x *AddedToMergeQueueEvent) GetMergeQueue() *MergeQueue   { return x.MergeQueue }
func (x *AddedToMergeQueueEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// AddedToProjectEvent (OBJECT): Represents a 'added_to_project' event on a given issue or pull request.
type AddedToProjectEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the AddedToProjectEvent object.
	Id ID `json:"id,omitempty"`

	// Project: Project referenced by event.
	Project *Project `json:"project,omitempty"`

	// ProjectCard: Project card referenced by this project event.
	//
	// Deprecated: Project card referenced by this project event.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`

	// ProjectColumnName: Column name referenced by this project event.
	//
	// Deprecated: Column name referenced by this project event.
	ProjectColumnName string `json:"projectColumnName,omitempty"`
}

func (x *AddedToProjectEvent) GetActor() Actor              { return x.Actor }
func (x *AddedToProjectEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AddedToProjectEvent) GetDatabaseId() int           { return x.DatabaseId }
func (x *AddedToProjectEvent) GetId() ID                    { return x.Id }
func (x *AddedToProjectEvent) GetProject() *Project         { return x.Project }
func (x *AddedToProjectEvent) GetProjectCard() *ProjectCard { return x.ProjectCard }
func (x *AddedToProjectEvent) GetProjectColumnName() string { return x.ProjectColumnName }

// AnnouncementBanner (OBJECT): An announcement banner for an enterprise or organization.
type AnnouncementBanner struct {
	// CreatedAt: The date the announcement was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// ExpiresAt: The expiration date of the announcement, if any.
	ExpiresAt DateTime `json:"expiresAt,omitempty"`

	// IsUserDismissible: Whether the announcement can be dismissed by the user.
	IsUserDismissible bool `json:"isUserDismissible,omitempty"`

	// Message: The text of the announcement.
	Message string `json:"message,omitempty"`
}

func (x *AnnouncementBanner) GetCreatedAt() DateTime     { return x.CreatedAt }
func (x *AnnouncementBanner) GetExpiresAt() DateTime     { return x.ExpiresAt }
func (x *AnnouncementBanner) GetIsUserDismissible() bool { return x.IsUserDismissible }
func (x *AnnouncementBanner) GetMessage() string         { return x.Message }

// AnnouncementBannerI (INTERFACE): Represents an announcement banner.
// AnnouncementBannerI_Interface: Represents an announcement banner.
//
// Possible types:
//
//   - *Enterprise
//   - *Organization
type AnnouncementBannerI_Interface interface {
	isAnnouncementBannerI()
	GetAnnouncement() string
	GetAnnouncementCreatedAt() DateTime
	GetAnnouncementExpiresAt() DateTime
	GetAnnouncementUserDismissible() bool
}

func (*Enterprise) isAnnouncementBannerI()   {}
func (*Organization) isAnnouncementBannerI() {}

type AnnouncementBannerI struct {
	Interface AnnouncementBannerI_Interface
}

func (x *AnnouncementBannerI) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *AnnouncementBannerI) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for AnnouncementBannerI", info.Typename)
	case "Enterprise":
		x.Interface = new(Enterprise)
	case "Organization":
		x.Interface = new(Organization)
	}
	return json.Unmarshal(js, x.Interface)
}

// App (OBJECT): A GitHub App.
type App struct {
	// ClientId: The client ID of the app.
	ClientId string `json:"clientId,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: The description of the app.
	Description string `json:"description,omitempty"`

	// Id: The Node ID of the App object.
	Id ID `json:"id,omitempty"`

	// IpAllowListEntries: The IP addresses of the app.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy IpAllowListEntryOrder
	IpAllowListEntries *IpAllowListEntryConnection `json:"ipAllowListEntries,omitempty"`

	// LogoBackgroundColor: The hex color code, without the leading '#', for the logo background.
	LogoBackgroundColor string `json:"logoBackgroundColor,omitempty"`

	// LogoUrl: A URL pointing to the app's logo.
	//
	// Query arguments:
	//   - size Int
	LogoUrl URI `json:"logoUrl,omitempty"`

	// Name: The name of the app.
	Name string `json:"name,omitempty"`

	// Slug: A slug based on the name of the app for use in URLs.
	Slug string `json:"slug,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The URL to the app's homepage.
	Url URI `json:"url,omitempty"`
}

func (x *App) GetClientId() string                                { return x.ClientId }
func (x *App) GetCreatedAt() DateTime                             { return x.CreatedAt }
func (x *App) GetDatabaseId() int                                 { return x.DatabaseId }
func (x *App) GetDescription() string                             { return x.Description }
func (x *App) GetId() ID                                          { return x.Id }
func (x *App) GetIpAllowListEntries() *IpAllowListEntryConnection { return x.IpAllowListEntries }
func (x *App) GetLogoBackgroundColor() string                     { return x.LogoBackgroundColor }
func (x *App) GetLogoUrl() URI                                    { return x.LogoUrl }
func (x *App) GetName() string                                    { return x.Name }
func (x *App) GetSlug() string                                    { return x.Slug }
func (x *App) GetUpdatedAt() DateTime                             { return x.UpdatedAt }
func (x *App) GetUrl() URI                                        { return x.Url }

// ApproveDeploymentsInput (INPUT_OBJECT): Autogenerated input type of ApproveDeployments.
type ApproveDeploymentsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// WorkflowRunId: The node ID of the workflow run containing the pending deployments.
	//
	// GraphQL type: ID!
	WorkflowRunId ID `json:"workflowRunId,omitempty"`

	// EnvironmentIds: The ids of environments to reject deployments.
	//
	// GraphQL type: [ID!]!
	EnvironmentIds []ID `json:"environmentIds,omitempty"`

	// Comment: Optional comment for approving deployments.
	//
	// GraphQL type: String
	Comment string `json:"comment,omitempty"`
}

// ApproveDeploymentsPayload (OBJECT): Autogenerated return type of ApproveDeployments.
type ApproveDeploymentsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Deployments: The affected deployments.
	Deployments []*Deployment `json:"deployments,omitempty"`
}

func (x *ApproveDeploymentsPayload) GetClientMutationId() string   { return x.ClientMutationId }
func (x *ApproveDeploymentsPayload) GetDeployments() []*Deployment { return x.Deployments }

// ApproveVerifiableDomainInput (INPUT_OBJECT): Autogenerated input type of ApproveVerifiableDomain.
type ApproveVerifiableDomainInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the verifiable domain to approve.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// ApproveVerifiableDomainPayload (OBJECT): Autogenerated return type of ApproveVerifiableDomain.
type ApproveVerifiableDomainPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Domain: The verifiable domain that was approved.
	Domain *VerifiableDomain `json:"domain,omitempty"`
}

func (x *ApproveVerifiableDomainPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *ApproveVerifiableDomainPayload) GetDomain() *VerifiableDomain { return x.Domain }

// ArchiveProjectV2ItemInput (INPUT_OBJECT): Autogenerated input type of ArchiveProjectV2Item.
type ArchiveProjectV2ItemInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to archive the item from.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ItemId: The ID of the ProjectV2Item to archive.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`
}

// ArchiveProjectV2ItemPayload (OBJECT): Autogenerated return type of ArchiveProjectV2Item.
type ArchiveProjectV2ItemPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Item: The item archived from the project.
	Item *ProjectV2Item `json:"item,omitempty"`
}

func (x *ArchiveProjectV2ItemPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ArchiveProjectV2ItemPayload) GetItem() *ProjectV2Item     { return x.Item }

// ArchiveRepositoryInput (INPUT_OBJECT): Autogenerated input type of ArchiveRepository.
type ArchiveRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The ID of the repository to mark as archived.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// ArchiveRepositoryPayload (OBJECT): Autogenerated return type of ArchiveRepository.
type ArchiveRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository that was marked as archived.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *ArchiveRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ArchiveRepositoryPayload) GetRepository() *Repository  { return x.Repository }

// Assignable (INTERFACE): An object that can have users assigned to it.
// Assignable_Interface: An object that can have users assigned to it.
//
// Possible types:
//
//   - *Issue
//   - *PullRequest
type Assignable_Interface interface {
	isAssignable()
	GetAssignees() *UserConnection
}

func (*Issue) isAssignable()       {}
func (*PullRequest) isAssignable() {}

type Assignable struct {
	Interface Assignable_Interface
}

func (x *Assignable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Assignable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Assignable", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// AssignedEvent (OBJECT): Represents an 'assigned' event on any assignable object.
type AssignedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Assignable: Identifies the assignable associated with the event.
	Assignable Assignable `json:"assignable,omitempty"`

	// Assignee: Identifies the user or mannequin that was assigned.
	Assignee Assignee `json:"assignee,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the AssignedEvent object.
	Id ID `json:"id,omitempty"`

	// User: Identifies the user who was assigned.
	//
	// Deprecated: Identifies the user who was assigned.
	User *User `json:"user,omitempty"`
}

func (x *AssignedEvent) GetActor() Actor           { return x.Actor }
func (x *AssignedEvent) GetAssignable() Assignable { return x.Assignable }
func (x *AssignedEvent) GetAssignee() Assignee     { return x.Assignee }
func (x *AssignedEvent) GetCreatedAt() DateTime    { return x.CreatedAt }
func (x *AssignedEvent) GetId() ID                 { return x.Id }
func (x *AssignedEvent) GetUser() *User            { return x.User }

// Assignee (UNION): Types that can be assigned to issues.
// Assignee_Interface: Types that can be assigned to issues.
//
// Possible types:
//
//   - *Bot
//   - *Mannequin
//   - *Organization
//   - *User
type Assignee_Interface interface {
	isAssignee()
}

func (*Bot) isAssignee()          {}
func (*Mannequin) isAssignee()    {}
func (*Organization) isAssignee() {}
func (*User) isAssignee()         {}

type Assignee struct {
	Interface Assignee_Interface
}

func (x *Assignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Assignee) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Assignee", info.Typename)
	case "Bot":
		x.Interface = new(Bot)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// AuditEntry (INTERFACE): An entry in the audit log.
// AuditEntry_Interface: An entry in the audit log.
//
// Possible types:
//
//   - *MembersCanDeleteReposClearAuditEntry
//   - *MembersCanDeleteReposDisableAuditEntry
//   - *MembersCanDeleteReposEnableAuditEntry
//   - *OauthApplicationCreateAuditEntry
//   - *OrgAddBillingManagerAuditEntry
//   - *OrgAddMemberAuditEntry
//   - *OrgBlockUserAuditEntry
//   - *OrgConfigDisableCollaboratorsOnlyAuditEntry
//   - *OrgConfigEnableCollaboratorsOnlyAuditEntry
//   - *OrgCreateAuditEntry
//   - *OrgDisableOauthAppRestrictionsAuditEntry
//   - *OrgDisableSamlAuditEntry
//   - *OrgDisableTwoFactorRequirementAuditEntry
//   - *OrgEnableOauthAppRestrictionsAuditEntry
//   - *OrgEnableSamlAuditEntry
//   - *OrgEnableTwoFactorRequirementAuditEntry
//   - *OrgInviteMemberAuditEntry
//   - *OrgInviteToBusinessAuditEntry
//   - *OrgOauthAppAccessApprovedAuditEntry
//   - *OrgOauthAppAccessBlockedAuditEntry
//   - *OrgOauthAppAccessDeniedAuditEntry
//   - *OrgOauthAppAccessRequestedAuditEntry
//   - *OrgOauthAppAccessUnblockedAuditEntry
//   - *OrgRemoveBillingManagerAuditEntry
//   - *OrgRemoveMemberAuditEntry
//   - *OrgRemoveOutsideCollaboratorAuditEntry
//   - *OrgRestoreMemberAuditEntry
//   - *OrgUnblockUserAuditEntry
//   - *OrgUpdateDefaultRepositoryPermissionAuditEntry
//   - *OrgUpdateMemberAuditEntry
//   - *OrgUpdateMemberRepositoryCreationPermissionAuditEntry
//   - *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
//   - *PrivateRepositoryForkingDisableAuditEntry
//   - *PrivateRepositoryForkingEnableAuditEntry
//   - *RepoAccessAuditEntry
//   - *RepoAddMemberAuditEntry
//   - *RepoAddTopicAuditEntry
//   - *RepoArchivedAuditEntry
//   - *RepoChangeMergeSettingAuditEntry
//   - *RepoConfigDisableAnonymousGitAccessAuditEntry
//   - *RepoConfigDisableCollaboratorsOnlyAuditEntry
//   - *RepoConfigDisableContributorsOnlyAuditEntry
//   - *RepoConfigDisableSockpuppetDisallowedAuditEntry
//   - *RepoConfigEnableAnonymousGitAccessAuditEntry
//   - *RepoConfigEnableCollaboratorsOnlyAuditEntry
//   - *RepoConfigEnableContributorsOnlyAuditEntry
//   - *RepoConfigEnableSockpuppetDisallowedAuditEntry
//   - *RepoConfigLockAnonymousGitAccessAuditEntry
//   - *RepoConfigUnlockAnonymousGitAccessAuditEntry
//   - *RepoCreateAuditEntry
//   - *RepoDestroyAuditEntry
//   - *RepoRemoveMemberAuditEntry
//   - *RepoRemoveTopicAuditEntry
//   - *RepositoryVisibilityChangeDisableAuditEntry
//   - *RepositoryVisibilityChangeEnableAuditEntry
//   - *TeamAddMemberAuditEntry
//   - *TeamAddRepositoryAuditEntry
//   - *TeamChangeParentTeamAuditEntry
//   - *TeamRemoveMemberAuditEntry
//   - *TeamRemoveRepositoryAuditEntry
type AuditEntry_Interface interface {
	isAuditEntry()
	GetAction() string
	GetActor() AuditEntryActor
	GetActorIp() string
	GetActorLocation() *ActorLocation
	GetActorLogin() string
	GetActorResourcePath() URI
	GetActorUrl() URI
	GetCreatedAt() PreciseDateTime
	GetOperationType() OperationType
	GetUser() *User
	GetUserLogin() string
	GetUserResourcePath() URI
	GetUserUrl() URI
}

func (*MembersCanDeleteReposClearAuditEntry) isAuditEntry()                    {}
func (*MembersCanDeleteReposDisableAuditEntry) isAuditEntry()                  {}
func (*MembersCanDeleteReposEnableAuditEntry) isAuditEntry()                   {}
func (*OauthApplicationCreateAuditEntry) isAuditEntry()                        {}
func (*OrgAddBillingManagerAuditEntry) isAuditEntry()                          {}
func (*OrgAddMemberAuditEntry) isAuditEntry()                                  {}
func (*OrgBlockUserAuditEntry) isAuditEntry()                                  {}
func (*OrgConfigDisableCollaboratorsOnlyAuditEntry) isAuditEntry()             {}
func (*OrgConfigEnableCollaboratorsOnlyAuditEntry) isAuditEntry()              {}
func (*OrgCreateAuditEntry) isAuditEntry()                                     {}
func (*OrgDisableOauthAppRestrictionsAuditEntry) isAuditEntry()                {}
func (*OrgDisableSamlAuditEntry) isAuditEntry()                                {}
func (*OrgDisableTwoFactorRequirementAuditEntry) isAuditEntry()                {}
func (*OrgEnableOauthAppRestrictionsAuditEntry) isAuditEntry()                 {}
func (*OrgEnableSamlAuditEntry) isAuditEntry()                                 {}
func (*OrgEnableTwoFactorRequirementAuditEntry) isAuditEntry()                 {}
func (*OrgInviteMemberAuditEntry) isAuditEntry()                               {}
func (*OrgInviteToBusinessAuditEntry) isAuditEntry()                           {}
func (*OrgOauthAppAccessApprovedAuditEntry) isAuditEntry()                     {}
func (*OrgOauthAppAccessBlockedAuditEntry) isAuditEntry()                      {}
func (*OrgOauthAppAccessDeniedAuditEntry) isAuditEntry()                       {}
func (*OrgOauthAppAccessRequestedAuditEntry) isAuditEntry()                    {}
func (*OrgOauthAppAccessUnblockedAuditEntry) isAuditEntry()                    {}
func (*OrgRemoveBillingManagerAuditEntry) isAuditEntry()                       {}
func (*OrgRemoveMemberAuditEntry) isAuditEntry()                               {}
func (*OrgRemoveOutsideCollaboratorAuditEntry) isAuditEntry()                  {}
func (*OrgRestoreMemberAuditEntry) isAuditEntry()                              {}
func (*OrgUnblockUserAuditEntry) isAuditEntry()                                {}
func (*OrgUpdateDefaultRepositoryPermissionAuditEntry) isAuditEntry()          {}
func (*OrgUpdateMemberAuditEntry) isAuditEntry()                               {}
func (*OrgUpdateMemberRepositoryCreationPermissionAuditEntry) isAuditEntry()   {}
func (*OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) isAuditEntry() {}
func (*PrivateRepositoryForkingDisableAuditEntry) isAuditEntry()               {}
func (*PrivateRepositoryForkingEnableAuditEntry) isAuditEntry()                {}
func (*RepoAccessAuditEntry) isAuditEntry()                                    {}
func (*RepoAddMemberAuditEntry) isAuditEntry()                                 {}
func (*RepoAddTopicAuditEntry) isAuditEntry()                                  {}
func (*RepoArchivedAuditEntry) isAuditEntry()                                  {}
func (*RepoChangeMergeSettingAuditEntry) isAuditEntry()                        {}
func (*RepoConfigDisableAnonymousGitAccessAuditEntry) isAuditEntry()           {}
func (*RepoConfigDisableCollaboratorsOnlyAuditEntry) isAuditEntry()            {}
func (*RepoConfigDisableContributorsOnlyAuditEntry) isAuditEntry()             {}
func (*RepoConfigDisableSockpuppetDisallowedAuditEntry) isAuditEntry()         {}
func (*RepoConfigEnableAnonymousGitAccessAuditEntry) isAuditEntry()            {}
func (*RepoConfigEnableCollaboratorsOnlyAuditEntry) isAuditEntry()             {}
func (*RepoConfigEnableContributorsOnlyAuditEntry) isAuditEntry()              {}
func (*RepoConfigEnableSockpuppetDisallowedAuditEntry) isAuditEntry()          {}
func (*RepoConfigLockAnonymousGitAccessAuditEntry) isAuditEntry()              {}
func (*RepoConfigUnlockAnonymousGitAccessAuditEntry) isAuditEntry()            {}
func (*RepoCreateAuditEntry) isAuditEntry()                                    {}
func (*RepoDestroyAuditEntry) isAuditEntry()                                   {}
func (*RepoRemoveMemberAuditEntry) isAuditEntry()                              {}
func (*RepoRemoveTopicAuditEntry) isAuditEntry()                               {}
func (*RepositoryVisibilityChangeDisableAuditEntry) isAuditEntry()             {}
func (*RepositoryVisibilityChangeEnableAuditEntry) isAuditEntry()              {}
func (*TeamAddMemberAuditEntry) isAuditEntry()                                 {}
func (*TeamAddRepositoryAuditEntry) isAuditEntry()                             {}
func (*TeamChangeParentTeamAuditEntry) isAuditEntry()                          {}
func (*TeamRemoveMemberAuditEntry) isAuditEntry()                              {}
func (*TeamRemoveRepositoryAuditEntry) isAuditEntry()                          {}

type AuditEntry struct {
	Interface AuditEntry_Interface
}

func (x *AuditEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *AuditEntry) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for AuditEntry", info.Typename)
	case "MembersCanDeleteReposClearAuditEntry":
		x.Interface = new(MembersCanDeleteReposClearAuditEntry)
	case "MembersCanDeleteReposDisableAuditEntry":
		x.Interface = new(MembersCanDeleteReposDisableAuditEntry)
	case "MembersCanDeleteReposEnableAuditEntry":
		x.Interface = new(MembersCanDeleteReposEnableAuditEntry)
	case "OauthApplicationCreateAuditEntry":
		x.Interface = new(OauthApplicationCreateAuditEntry)
	case "OrgAddBillingManagerAuditEntry":
		x.Interface = new(OrgAddBillingManagerAuditEntry)
	case "OrgAddMemberAuditEntry":
		x.Interface = new(OrgAddMemberAuditEntry)
	case "OrgBlockUserAuditEntry":
		x.Interface = new(OrgBlockUserAuditEntry)
	case "OrgConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigDisableCollaboratorsOnlyAuditEntry)
	case "OrgConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigEnableCollaboratorsOnlyAuditEntry)
	case "OrgCreateAuditEntry":
		x.Interface = new(OrgCreateAuditEntry)
	case "OrgDisableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgDisableOauthAppRestrictionsAuditEntry)
	case "OrgDisableSamlAuditEntry":
		x.Interface = new(OrgDisableSamlAuditEntry)
	case "OrgDisableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgDisableTwoFactorRequirementAuditEntry)
	case "OrgEnableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgEnableOauthAppRestrictionsAuditEntry)
	case "OrgEnableSamlAuditEntry":
		x.Interface = new(OrgEnableSamlAuditEntry)
	case "OrgEnableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgEnableTwoFactorRequirementAuditEntry)
	case "OrgInviteMemberAuditEntry":
		x.Interface = new(OrgInviteMemberAuditEntry)
	case "OrgInviteToBusinessAuditEntry":
		x.Interface = new(OrgInviteToBusinessAuditEntry)
	case "OrgOauthAppAccessApprovedAuditEntry":
		x.Interface = new(OrgOauthAppAccessApprovedAuditEntry)
	case "OrgOauthAppAccessBlockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessBlockedAuditEntry)
	case "OrgOauthAppAccessDeniedAuditEntry":
		x.Interface = new(OrgOauthAppAccessDeniedAuditEntry)
	case "OrgOauthAppAccessRequestedAuditEntry":
		x.Interface = new(OrgOauthAppAccessRequestedAuditEntry)
	case "OrgOauthAppAccessUnblockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessUnblockedAuditEntry)
	case "OrgRemoveBillingManagerAuditEntry":
		x.Interface = new(OrgRemoveBillingManagerAuditEntry)
	case "OrgRemoveMemberAuditEntry":
		x.Interface = new(OrgRemoveMemberAuditEntry)
	case "OrgRemoveOutsideCollaboratorAuditEntry":
		x.Interface = new(OrgRemoveOutsideCollaboratorAuditEntry)
	case "OrgRestoreMemberAuditEntry":
		x.Interface = new(OrgRestoreMemberAuditEntry)
	case "OrgUnblockUserAuditEntry":
		x.Interface = new(OrgUnblockUserAuditEntry)
	case "OrgUpdateDefaultRepositoryPermissionAuditEntry":
		x.Interface = new(OrgUpdateDefaultRepositoryPermissionAuditEntry)
	case "OrgUpdateMemberAuditEntry":
		x.Interface = new(OrgUpdateMemberAuditEntry)
	case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryCreationPermissionAuditEntry)
	case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryInvitationPermissionAuditEntry)
	case "PrivateRepositoryForkingDisableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingDisableAuditEntry)
	case "PrivateRepositoryForkingEnableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingEnableAuditEntry)
	case "RepoAccessAuditEntry":
		x.Interface = new(RepoAccessAuditEntry)
	case "RepoAddMemberAuditEntry":
		x.Interface = new(RepoAddMemberAuditEntry)
	case "RepoAddTopicAuditEntry":
		x.Interface = new(RepoAddTopicAuditEntry)
	case "RepoArchivedAuditEntry":
		x.Interface = new(RepoArchivedAuditEntry)
	case "RepoChangeMergeSettingAuditEntry":
		x.Interface = new(RepoChangeMergeSettingAuditEntry)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigDisableAnonymousGitAccessAuditEntry)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableCollaboratorsOnlyAuditEntry)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableContributorsOnlyAuditEntry)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigDisableSockpuppetDisallowedAuditEntry)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigEnableAnonymousGitAccessAuditEntry)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableCollaboratorsOnlyAuditEntry)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableContributorsOnlyAuditEntry)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigEnableSockpuppetDisallowedAuditEntry)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigLockAnonymousGitAccessAuditEntry)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigUnlockAnonymousGitAccessAuditEntry)
	case "RepoCreateAuditEntry":
		x.Interface = new(RepoCreateAuditEntry)
	case "RepoDestroyAuditEntry":
		x.Interface = new(RepoDestroyAuditEntry)
	case "RepoRemoveMemberAuditEntry":
		x.Interface = new(RepoRemoveMemberAuditEntry)
	case "RepoRemoveTopicAuditEntry":
		x.Interface = new(RepoRemoveTopicAuditEntry)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeDisableAuditEntry)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeEnableAuditEntry)
	case "TeamAddMemberAuditEntry":
		x.Interface = new(TeamAddMemberAuditEntry)
	case "TeamAddRepositoryAuditEntry":
		x.Interface = new(TeamAddRepositoryAuditEntry)
	case "TeamChangeParentTeamAuditEntry":
		x.Interface = new(TeamChangeParentTeamAuditEntry)
	case "TeamRemoveMemberAuditEntry":
		x.Interface = new(TeamRemoveMemberAuditEntry)
	case "TeamRemoveRepositoryAuditEntry":
		x.Interface = new(TeamRemoveRepositoryAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// AuditEntryActor (UNION): Types that can initiate an audit log event.
// AuditEntryActor_Interface: Types that can initiate an audit log event.
//
// Possible types:
//
//   - *Bot
//   - *Organization
//   - *User
type AuditEntryActor_Interface interface {
	isAuditEntryActor()
}

func (*Bot) isAuditEntryActor()          {}
func (*Organization) isAuditEntryActor() {}
func (*User) isAuditEntryActor()         {}

type AuditEntryActor struct {
	Interface AuditEntryActor_Interface
}

func (x *AuditEntryActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *AuditEntryActor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for AuditEntryActor", info.Typename)
	case "Bot":
		x.Interface = new(Bot)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// AuditLogOrder (INPUT_OBJECT): Ordering options for Audit Log connections.
type AuditLogOrder struct {
	// Field: The field to order Audit Logs by.
	//
	// GraphQL type: AuditLogOrderField
	Field AuditLogOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection
	Direction OrderDirection `json:"direction,omitempty"`
}

// AuditLogOrderField (ENUM): Properties by which Audit Log connections can be ordered.
type AuditLogOrderField string

// AuditLogOrderField_CREATED_AT: Order audit log entries by timestamp.
const AuditLogOrderField_CREATED_AT AuditLogOrderField = "CREATED_AT"

// AutoMergeDisabledEvent (OBJECT): Represents a 'auto_merge_disabled' event on a given pull request.
type AutoMergeDisabledEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Disabler: The user who disabled auto-merge for this Pull Request.
	Disabler *User `json:"disabler,omitempty"`

	// Id: The Node ID of the AutoMergeDisabledEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Reason: The reason auto-merge was disabled.
	Reason string `json:"reason,omitempty"`

	// ReasonCode: The reason_code relating to why auto-merge was disabled.
	ReasonCode string `json:"reasonCode,omitempty"`
}

func (x *AutoMergeDisabledEvent) GetActor() Actor              { return x.Actor }
func (x *AutoMergeDisabledEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AutoMergeDisabledEvent) GetDisabler() *User           { return x.Disabler }
func (x *AutoMergeDisabledEvent) GetId() ID                    { return x.Id }
func (x *AutoMergeDisabledEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *AutoMergeDisabledEvent) GetReason() string            { return x.Reason }
func (x *AutoMergeDisabledEvent) GetReasonCode() string        { return x.ReasonCode }

// AutoMergeEnabledEvent (OBJECT): Represents a 'auto_merge_enabled' event on a given pull request.
type AutoMergeEnabledEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enabler: The user who enabled auto-merge for this Pull Request.
	Enabler *User `json:"enabler,omitempty"`

	// Id: The Node ID of the AutoMergeEnabledEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AutoMergeEnabledEvent) GetActor() Actor              { return x.Actor }
func (x *AutoMergeEnabledEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AutoMergeEnabledEvent) GetEnabler() *User            { return x.Enabler }
func (x *AutoMergeEnabledEvent) GetId() ID                    { return x.Id }
func (x *AutoMergeEnabledEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// AutoMergeRequest (OBJECT): Represents an auto-merge request for a pull request.
type AutoMergeRequest struct {
	// AuthorEmail: The email address of the author of this auto-merge request.
	AuthorEmail string `json:"authorEmail,omitempty"`

	// CommitBody: The commit message of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
	CommitBody string `json:"commitBody,omitempty"`

	// CommitHeadline: The commit title of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
	CommitHeadline string `json:"commitHeadline,omitempty"`

	// EnabledAt: When was this auto-merge request was enabled.
	EnabledAt DateTime `json:"enabledAt,omitempty"`

	// EnabledBy: The actor who created the auto-merge request.
	EnabledBy Actor `json:"enabledBy,omitempty"`

	// MergeMethod: The merge method of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
	MergeMethod PullRequestMergeMethod `json:"mergeMethod,omitempty"`

	// PullRequest: The pull request that this auto-merge request is set against.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AutoMergeRequest) GetAuthorEmail() string                 { return x.AuthorEmail }
func (x *AutoMergeRequest) GetCommitBody() string                  { return x.CommitBody }
func (x *AutoMergeRequest) GetCommitHeadline() string              { return x.CommitHeadline }
func (x *AutoMergeRequest) GetEnabledAt() DateTime                 { return x.EnabledAt }
func (x *AutoMergeRequest) GetEnabledBy() Actor                    { return x.EnabledBy }
func (x *AutoMergeRequest) GetMergeMethod() PullRequestMergeMethod { return x.MergeMethod }
func (x *AutoMergeRequest) GetPullRequest() *PullRequest           { return x.PullRequest }

// AutoRebaseEnabledEvent (OBJECT): Represents a 'auto_rebase_enabled' event on a given pull request.
type AutoRebaseEnabledEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enabler: The user who enabled auto-merge (rebase) for this Pull Request.
	Enabler *User `json:"enabler,omitempty"`

	// Id: The Node ID of the AutoRebaseEnabledEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AutoRebaseEnabledEvent) GetActor() Actor              { return x.Actor }
func (x *AutoRebaseEnabledEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AutoRebaseEnabledEvent) GetEnabler() *User            { return x.Enabler }
func (x *AutoRebaseEnabledEvent) GetId() ID                    { return x.Id }
func (x *AutoRebaseEnabledEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// AutoSquashEnabledEvent (OBJECT): Represents a 'auto_squash_enabled' event on a given pull request.
type AutoSquashEnabledEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enabler: The user who enabled auto-merge (squash) for this Pull Request.
	Enabler *User `json:"enabler,omitempty"`

	// Id: The Node ID of the AutoSquashEnabledEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AutoSquashEnabledEvent) GetActor() Actor              { return x.Actor }
func (x *AutoSquashEnabledEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AutoSquashEnabledEvent) GetEnabler() *User            { return x.Enabler }
func (x *AutoSquashEnabledEvent) GetId() ID                    { return x.Id }
func (x *AutoSquashEnabledEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// AutomaticBaseChangeFailedEvent (OBJECT): Represents a 'automatic_base_change_failed' event on a given pull request.
type AutomaticBaseChangeFailedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the AutomaticBaseChangeFailedEvent object.
	Id ID `json:"id,omitempty"`

	// NewBase: The new base for this PR.
	NewBase string `json:"newBase,omitempty"`

	// OldBase: The old base for this PR.
	OldBase string `json:"oldBase,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AutomaticBaseChangeFailedEvent) GetActor() Actor              { return x.Actor }
func (x *AutomaticBaseChangeFailedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AutomaticBaseChangeFailedEvent) GetId() ID                    { return x.Id }
func (x *AutomaticBaseChangeFailedEvent) GetNewBase() string           { return x.NewBase }
func (x *AutomaticBaseChangeFailedEvent) GetOldBase() string           { return x.OldBase }
func (x *AutomaticBaseChangeFailedEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// AutomaticBaseChangeSucceededEvent (OBJECT): Represents a 'automatic_base_change_succeeded' event on a given pull request.
type AutomaticBaseChangeSucceededEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the AutomaticBaseChangeSucceededEvent object.
	Id ID `json:"id,omitempty"`

	// NewBase: The new base for this PR.
	NewBase string `json:"newBase,omitempty"`

	// OldBase: The old base for this PR.
	OldBase string `json:"oldBase,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *AutomaticBaseChangeSucceededEvent) GetActor() Actor              { return x.Actor }
func (x *AutomaticBaseChangeSucceededEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *AutomaticBaseChangeSucceededEvent) GetId() ID                    { return x.Id }
func (x *AutomaticBaseChangeSucceededEvent) GetNewBase() string           { return x.NewBase }
func (x *AutomaticBaseChangeSucceededEvent) GetOldBase() string           { return x.OldBase }
func (x *AutomaticBaseChangeSucceededEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// Base64String (SCALAR): A (potentially binary) string encoded using base64.
type Base64String string

// BaseRefChangedEvent (OBJECT): Represents a 'base_ref_changed' event on a given issue or pull request.
type BaseRefChangedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CurrentRefName: Identifies the name of the base ref for the pull request after it was changed.
	CurrentRefName string `json:"currentRefName,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the BaseRefChangedEvent object.
	Id ID `json:"id,omitempty"`

	// PreviousRefName: Identifies the name of the base ref for the pull request before it was changed.
	PreviousRefName string `json:"previousRefName,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *BaseRefChangedEvent) GetActor() Actor              { return x.Actor }
func (x *BaseRefChangedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *BaseRefChangedEvent) GetCurrentRefName() string    { return x.CurrentRefName }
func (x *BaseRefChangedEvent) GetDatabaseId() int           { return x.DatabaseId }
func (x *BaseRefChangedEvent) GetId() ID                    { return x.Id }
func (x *BaseRefChangedEvent) GetPreviousRefName() string   { return x.PreviousRefName }
func (x *BaseRefChangedEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// BaseRefDeletedEvent (OBJECT): Represents a 'base_ref_deleted' event on a given pull request.
type BaseRefDeletedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// BaseRefName: Identifies the name of the Ref associated with the `base_ref_deleted` event.
	BaseRefName string `json:"baseRefName,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the BaseRefDeletedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *BaseRefDeletedEvent) GetActor() Actor              { return x.Actor }
func (x *BaseRefDeletedEvent) GetBaseRefName() string       { return x.BaseRefName }
func (x *BaseRefDeletedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *BaseRefDeletedEvent) GetId() ID                    { return x.Id }
func (x *BaseRefDeletedEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// BaseRefForcePushedEvent (OBJECT): Represents a 'base_ref_force_pushed' event on a given pull request.
type BaseRefForcePushedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// AfterCommit: Identifies the after commit SHA for the 'base_ref_force_pushed' event.
	AfterCommit *Commit `json:"afterCommit,omitempty"`

	// BeforeCommit: Identifies the before commit SHA for the 'base_ref_force_pushed' event.
	BeforeCommit *Commit `json:"beforeCommit,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the BaseRefForcePushedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Ref: Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *BaseRefForcePushedEvent) GetActor() Actor              { return x.Actor }
func (x *BaseRefForcePushedEvent) GetAfterCommit() *Commit      { return x.AfterCommit }
func (x *BaseRefForcePushedEvent) GetBeforeCommit() *Commit     { return x.BeforeCommit }
func (x *BaseRefForcePushedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *BaseRefForcePushedEvent) GetId() ID                    { return x.Id }
func (x *BaseRefForcePushedEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *BaseRefForcePushedEvent) GetRef() *Ref                 { return x.Ref }

// BigInt (SCALAR): Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string.
type BigInt string

// Blame (OBJECT): Represents a Git blame.
type Blame struct {
	// Ranges: The list of ranges from a Git blame.
	Ranges []*BlameRange `json:"ranges,omitempty"`
}

func (x *Blame) GetRanges() []*BlameRange { return x.Ranges }

// BlameRange (OBJECT): Represents a range of information from a Git blame.
type BlameRange struct {
	// Age: Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
	Age int `json:"age,omitempty"`

	// Commit: Identifies the line author.
	Commit *Commit `json:"commit,omitempty"`

	// EndingLine: The ending line for the range.
	EndingLine int `json:"endingLine,omitempty"`

	// StartingLine: The starting line for the range.
	StartingLine int `json:"startingLine,omitempty"`
}

func (x *BlameRange) GetAge() int          { return x.Age }
func (x *BlameRange) GetCommit() *Commit   { return x.Commit }
func (x *BlameRange) GetEndingLine() int   { return x.EndingLine }
func (x *BlameRange) GetStartingLine() int { return x.StartingLine }

// Blob (OBJECT): Represents a Git blob.
type Blob struct {
	// AbbreviatedOid: An abbreviated version of the Git object ID.
	AbbreviatedOid string `json:"abbreviatedOid,omitempty"`

	// ByteSize: Byte size of Blob object.
	ByteSize int `json:"byteSize,omitempty"`

	// CommitResourcePath: The HTTP path for this Git object.
	CommitResourcePath URI `json:"commitResourcePath,omitempty"`

	// CommitUrl: The HTTP URL for this Git object.
	CommitUrl URI `json:"commitUrl,omitempty"`

	// Id: The Node ID of the Blob object.
	Id ID `json:"id,omitempty"`

	// IsBinary: Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
	IsBinary bool `json:"isBinary,omitempty"`

	// IsTruncated: Indicates whether the contents is truncated.
	IsTruncated bool `json:"isTruncated,omitempty"`

	// Oid: The Git object ID.
	Oid GitObjectID `json:"oid,omitempty"`

	// Repository: The Repository the Git object belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// Text: UTF8 text data or null if the Blob is binary.
	Text string `json:"text,omitempty"`
}

func (x *Blob) GetAbbreviatedOid() string  { return x.AbbreviatedOid }
func (x *Blob) GetByteSize() int           { return x.ByteSize }
func (x *Blob) GetCommitResourcePath() URI { return x.CommitResourcePath }
func (x *Blob) GetCommitUrl() URI          { return x.CommitUrl }
func (x *Blob) GetId() ID                  { return x.Id }
func (x *Blob) GetIsBinary() bool          { return x.IsBinary }
func (x *Blob) GetIsTruncated() bool       { return x.IsTruncated }
func (x *Blob) GetOid() GitObjectID        { return x.Oid }
func (x *Blob) GetRepository() *Repository { return x.Repository }
func (x *Blob) GetText() string            { return x.Text }

// Boolean (SCALAR): Represents `true` or `false` values.
type Boolean bool

// Bot (OBJECT): A special type of user which takes actions on behalf of GitHub Apps.
type Bot struct {
	// AvatarUrl: A URL pointing to the GitHub App's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the Bot object.
	Id ID `json:"id,omitempty"`

	// Login: The username of the actor.
	Login string `json:"login,omitempty"`

	// ResourcePath: The HTTP path for this bot.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this bot.
	Url URI `json:"url,omitempty"`
}

func (x *Bot) GetAvatarUrl() URI      { return x.AvatarUrl }
func (x *Bot) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *Bot) GetDatabaseId() int     { return x.DatabaseId }
func (x *Bot) GetId() ID              { return x.Id }
func (x *Bot) GetLogin() string       { return x.Login }
func (x *Bot) GetResourcePath() URI   { return x.ResourcePath }
func (x *Bot) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *Bot) GetUrl() URI            { return x.Url }

// BranchActorAllowanceActor (UNION): Types which can be actors for `BranchActorAllowance` objects.
// BranchActorAllowanceActor_Interface: Types which can be actors for `BranchActorAllowance` objects.
//
// Possible types:
//
//   - *App
//   - *Team
//   - *User
type BranchActorAllowanceActor_Interface interface {
	isBranchActorAllowanceActor()
}

func (*App) isBranchActorAllowanceActor()  {}
func (*Team) isBranchActorAllowanceActor() {}
func (*User) isBranchActorAllowanceActor() {}

type BranchActorAllowanceActor struct {
	Interface BranchActorAllowanceActor_Interface
}

func (x *BranchActorAllowanceActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *BranchActorAllowanceActor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for BranchActorAllowanceActor", info.Typename)
	case "App":
		x.Interface = new(App)
	case "Team":
		x.Interface = new(Team)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// BranchNamePatternParameters (OBJECT): Parameters to be used for the branch_name_pattern rule.
type BranchNamePatternParameters struct {
	// Name: How this rule will appear to users.
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	Pattern string `json:"pattern,omitempty"`
}

func (x *BranchNamePatternParameters) GetName() string     { return x.Name }
func (x *BranchNamePatternParameters) GetNegate() bool     { return x.Negate }
func (x *BranchNamePatternParameters) GetOperator() string { return x.Operator }
func (x *BranchNamePatternParameters) GetPattern() string  { return x.Pattern }

// BranchNamePatternParametersInput (INPUT_OBJECT): Parameters to be used for the branch_name_pattern rule.
type BranchNamePatternParametersInput struct {
	// Name: How this rule will appear to users.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	//
	// GraphQL type: Boolean
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	//
	// GraphQL type: String!
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	//
	// GraphQL type: String!
	Pattern string `json:"pattern,omitempty"`
}

// BranchProtectionRule (OBJECT): A branch protection rule.
type BranchProtectionRule struct {
	// AllowsDeletions: Can this branch be deleted.
	AllowsDeletions bool `json:"allowsDeletions,omitempty"`

	// AllowsForcePushes: Are force pushes allowed on this branch.
	AllowsForcePushes bool `json:"allowsForcePushes,omitempty"`

	// BlocksCreations: Is branch creation a protected operation.
	BlocksCreations bool `json:"blocksCreations,omitempty"`

	// BranchProtectionRuleConflicts: A list of conflicts matching branches protection rule and other branch protection rules.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	BranchProtectionRuleConflicts *BranchProtectionRuleConflictConnection `json:"branchProtectionRuleConflicts,omitempty"`

	// BypassForcePushAllowances: A list of actors able to force push for this branch protection rule.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	BypassForcePushAllowances *BypassForcePushAllowanceConnection `json:"bypassForcePushAllowances,omitempty"`

	// BypassPullRequestAllowances: A list of actors able to bypass PRs for this branch protection rule.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	BypassPullRequestAllowances *BypassPullRequestAllowanceConnection `json:"bypassPullRequestAllowances,omitempty"`

	// Creator: The actor who created this branch protection rule.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DismissesStaleReviews: Will new commits pushed to matching branches dismiss pull request review approvals.
	DismissesStaleReviews bool `json:"dismissesStaleReviews,omitempty"`

	// Id: The Node ID of the BranchProtectionRule object.
	Id ID `json:"id,omitempty"`

	// IsAdminEnforced: Can admins override branch protection.
	IsAdminEnforced bool `json:"isAdminEnforced,omitempty"`

	// LockAllowsFetchAndMerge: Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	LockAllowsFetchAndMerge bool `json:"lockAllowsFetchAndMerge,omitempty"`

	// LockBranch: Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch bool `json:"lockBranch,omitempty"`

	// MatchingRefs: Repository refs that are protected by this rule.
	//
	// Query arguments:
	//   - query String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	MatchingRefs *RefConnection `json:"matchingRefs,omitempty"`

	// Pattern: Identifies the protection rule pattern.
	Pattern string `json:"pattern,omitempty"`

	// PushAllowances: A list push allowances for this branch protection rule.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PushAllowances *PushAllowanceConnection `json:"pushAllowances,omitempty"`

	// Repository: The repository associated with this branch protection rule.
	Repository *Repository `json:"repository,omitempty"`

	// RequireLastPushApproval: Whether the most recent push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval bool `json:"requireLastPushApproval,omitempty"`

	// RequiredApprovingReviewCount: Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount,omitempty"`

	// RequiredDeploymentEnvironments: List of required deployment environments that must be deployed successfully to update matching branches.
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`

	// RequiredStatusCheckContexts: List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`

	// RequiredStatusChecks: List of required status checks that must pass for commits to be accepted to matching branches.
	RequiredStatusChecks []*RequiredStatusCheckDescription `json:"requiredStatusChecks,omitempty"`

	// RequiresApprovingReviews: Are approving reviews required to update matching branches.
	RequiresApprovingReviews bool `json:"requiresApprovingReviews,omitempty"`

	// RequiresCodeOwnerReviews: Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews,omitempty"`

	// RequiresCommitSignatures: Are commits required to be signed.
	RequiresCommitSignatures bool `json:"requiresCommitSignatures,omitempty"`

	// RequiresConversationResolution: Are conversations required to be resolved before merging.
	RequiresConversationResolution bool `json:"requiresConversationResolution,omitempty"`

	// RequiresDeployments: Does this branch require deployment to specific environments before merging.
	RequiresDeployments bool `json:"requiresDeployments,omitempty"`

	// RequiresLinearHistory: Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory bool `json:"requiresLinearHistory,omitempty"`

	// RequiresStatusChecks: Are status checks required to update matching branches.
	RequiresStatusChecks bool `json:"requiresStatusChecks,omitempty"`

	// RequiresStrictStatusChecks: Are branches required to be up to date before merging.
	RequiresStrictStatusChecks bool `json:"requiresStrictStatusChecks,omitempty"`

	// RestrictsPushes: Is pushing to matching branches restricted.
	RestrictsPushes bool `json:"restrictsPushes,omitempty"`

	// RestrictsReviewDismissals: Is dismissal of pull request reviews restricted.
	RestrictsReviewDismissals bool `json:"restrictsReviewDismissals,omitempty"`

	// ReviewDismissalAllowances: A list review dismissal allowances for this branch protection rule.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ReviewDismissalAllowances *ReviewDismissalAllowanceConnection `json:"reviewDismissalAllowances,omitempty"`
}

func (x *BranchProtectionRule) GetAllowsDeletions() bool   { return x.AllowsDeletions }
func (x *BranchProtectionRule) GetAllowsForcePushes() bool { return x.AllowsForcePushes }
func (x *BranchProtectionRule) GetBlocksCreations() bool   { return x.BlocksCreations }
func (x *BranchProtectionRule) GetBranchProtectionRuleConflicts() *BranchProtectionRuleConflictConnection {
	return x.BranchProtectionRuleConflicts
}
func (x *BranchProtectionRule) GetBypassForcePushAllowances() *BypassForcePushAllowanceConnection {
	return x.BypassForcePushAllowances
}
func (x *BranchProtectionRule) GetBypassPullRequestAllowances() *BypassPullRequestAllowanceConnection {
	return x.BypassPullRequestAllowances
}
func (x *BranchProtectionRule) GetCreator() Actor                           { return x.Creator }
func (x *BranchProtectionRule) GetDatabaseId() int                          { return x.DatabaseId }
func (x *BranchProtectionRule) GetDismissesStaleReviews() bool              { return x.DismissesStaleReviews }
func (x *BranchProtectionRule) GetId() ID                                   { return x.Id }
func (x *BranchProtectionRule) GetIsAdminEnforced() bool                    { return x.IsAdminEnforced }
func (x *BranchProtectionRule) GetLockAllowsFetchAndMerge() bool            { return x.LockAllowsFetchAndMerge }
func (x *BranchProtectionRule) GetLockBranch() bool                         { return x.LockBranch }
func (x *BranchProtectionRule) GetMatchingRefs() *RefConnection             { return x.MatchingRefs }
func (x *BranchProtectionRule) GetPattern() string                          { return x.Pattern }
func (x *BranchProtectionRule) GetPushAllowances() *PushAllowanceConnection { return x.PushAllowances }
func (x *BranchProtectionRule) GetRepository() *Repository                  { return x.Repository }
func (x *BranchProtectionRule) GetRequireLastPushApproval() bool            { return x.RequireLastPushApproval }
func (x *BranchProtectionRule) GetRequiredApprovingReviewCount() int {
	return x.RequiredApprovingReviewCount
}
func (x *BranchProtectionRule) GetRequiredDeploymentEnvironments() []string {
	return x.RequiredDeploymentEnvironments
}
func (x *BranchProtectionRule) GetRequiredStatusCheckContexts() []string {
	return x.RequiredStatusCheckContexts
}
func (x *BranchProtectionRule) GetRequiredStatusChecks() []*RequiredStatusCheckDescription {
	return x.RequiredStatusChecks
}
func (x *BranchProtectionRule) GetRequiresApprovingReviews() bool { return x.RequiresApprovingReviews }
func (x *BranchProtectionRule) GetRequiresCodeOwnerReviews() bool { return x.RequiresCodeOwnerReviews }
func (x *BranchProtectionRule) GetRequiresCommitSignatures() bool { return x.RequiresCommitSignatures }
func (x *BranchProtectionRule) GetRequiresConversationResolution() bool {
	return x.RequiresConversationResolution
}
func (x *BranchProtectionRule) GetRequiresDeployments() bool   { return x.RequiresDeployments }
func (x *BranchProtectionRule) GetRequiresLinearHistory() bool { return x.RequiresLinearHistory }
func (x *BranchProtectionRule) GetRequiresStatusChecks() bool  { return x.RequiresStatusChecks }
func (x *BranchProtectionRule) GetRequiresStrictStatusChecks() bool {
	return x.RequiresStrictStatusChecks
}
func (x *BranchProtectionRule) GetRestrictsPushes() bool { return x.RestrictsPushes }
func (x *BranchProtectionRule) GetRestrictsReviewDismissals() bool {
	return x.RestrictsReviewDismissals
}
func (x *BranchProtectionRule) GetReviewDismissalAllowances() *ReviewDismissalAllowanceConnection {
	return x.ReviewDismissalAllowances
}

// BranchProtectionRuleConflict (OBJECT): A conflict between two branch protection rules.
type BranchProtectionRuleConflict struct {
	// BranchProtectionRule: Identifies the branch protection rule.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// ConflictingBranchProtectionRule: Identifies the conflicting branch protection rule.
	ConflictingBranchProtectionRule *BranchProtectionRule `json:"conflictingBranchProtectionRule,omitempty"`

	// Ref: Identifies the branch ref that has conflicting rules.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *BranchProtectionRuleConflict) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *BranchProtectionRuleConflict) GetConflictingBranchProtectionRule() *BranchProtectionRule {
	return x.ConflictingBranchProtectionRule
}
func (x *BranchProtectionRuleConflict) GetRef() *Ref { return x.Ref }

// BranchProtectionRuleConflictConnection (OBJECT): The connection type for BranchProtectionRuleConflict.
type BranchProtectionRuleConflictConnection struct {
	// Edges: A list of edges.
	Edges []*BranchProtectionRuleConflictEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*BranchProtectionRuleConflict `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *BranchProtectionRuleConflictConnection) GetEdges() []*BranchProtectionRuleConflictEdge {
	return x.Edges
}
func (x *BranchProtectionRuleConflictConnection) GetNodes() []*BranchProtectionRuleConflict {
	return x.Nodes
}
func (x *BranchProtectionRuleConflictConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *BranchProtectionRuleConflictConnection) GetTotalCount() int     { return x.TotalCount }

// BranchProtectionRuleConflictEdge (OBJECT): An edge in a connection.
type BranchProtectionRuleConflictEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *BranchProtectionRuleConflict `json:"node,omitempty"`
}

func (x *BranchProtectionRuleConflictEdge) GetCursor() string                      { return x.Cursor }
func (x *BranchProtectionRuleConflictEdge) GetNode() *BranchProtectionRuleConflict { return x.Node }

// BranchProtectionRuleConnection (OBJECT): The connection type for BranchProtectionRule.
type BranchProtectionRuleConnection struct {
	// Edges: A list of edges.
	Edges []*BranchProtectionRuleEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*BranchProtectionRule `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *BranchProtectionRuleConnection) GetEdges() []*BranchProtectionRuleEdge { return x.Edges }
func (x *BranchProtectionRuleConnection) GetNodes() []*BranchProtectionRule     { return x.Nodes }
func (x *BranchProtectionRuleConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *BranchProtectionRuleConnection) GetTotalCount() int                    { return x.TotalCount }

// BranchProtectionRuleEdge (OBJECT): An edge in a connection.
type BranchProtectionRuleEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *BranchProtectionRule `json:"node,omitempty"`
}

func (x *BranchProtectionRuleEdge) GetCursor() string              { return x.Cursor }
func (x *BranchProtectionRuleEdge) GetNode() *BranchProtectionRule { return x.Node }

// BulkSponsorship (INPUT_OBJECT): Information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once.
type BulkSponsorship struct {
	// SponsorableId: The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	//
	// GraphQL type: ID
	SponsorableId ID `json:"sponsorableId,omitempty"`

	// SponsorableLogin: The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`

	// Amount: The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
	//
	// GraphQL type: Int!
	Amount int `json:"amount,omitempty"`
}

// BypassActor (UNION): Types that can represent a repository ruleset bypass actor.
// BypassActor_Interface: Types that can represent a repository ruleset bypass actor.
//
// Possible types:
//
//   - *App
//   - *Team
type BypassActor_Interface interface {
	isBypassActor()
}

func (*App) isBypassActor()  {}
func (*Team) isBypassActor() {}

type BypassActor struct {
	Interface BypassActor_Interface
}

func (x *BypassActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *BypassActor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for BypassActor", info.Typename)
	case "App":
		x.Interface = new(App)
	case "Team":
		x.Interface = new(Team)
	}
	return json.Unmarshal(js, x.Interface)
}

// BypassForcePushAllowance (OBJECT): A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
type BypassForcePushAllowance struct {
	// Actor: The actor that can force push.
	Actor BranchActorAllowanceActor `json:"actor,omitempty"`

	// BranchProtectionRule: Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// Id: The Node ID of the BypassForcePushAllowance object.
	Id ID `json:"id,omitempty"`
}

func (x *BypassForcePushAllowance) GetActor() BranchActorAllowanceActor { return x.Actor }
func (x *BypassForcePushAllowance) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *BypassForcePushAllowance) GetId() ID { return x.Id }

// BypassForcePushAllowanceConnection (OBJECT): The connection type for BypassForcePushAllowance.
type BypassForcePushAllowanceConnection struct {
	// Edges: A list of edges.
	Edges []*BypassForcePushAllowanceEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*BypassForcePushAllowance `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *BypassForcePushAllowanceConnection) GetEdges() []*BypassForcePushAllowanceEdge {
	return x.Edges
}
func (x *BypassForcePushAllowanceConnection) GetNodes() []*BypassForcePushAllowance { return x.Nodes }
func (x *BypassForcePushAllowanceConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *BypassForcePushAllowanceConnection) GetTotalCount() int                    { return x.TotalCount }

// BypassForcePushAllowanceEdge (OBJECT): An edge in a connection.
type BypassForcePushAllowanceEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *BypassForcePushAllowance `json:"node,omitempty"`
}

func (x *BypassForcePushAllowanceEdge) GetCursor() string                  { return x.Cursor }
func (x *BypassForcePushAllowanceEdge) GetNode() *BypassForcePushAllowance { return x.Node }

// BypassPullRequestAllowance (OBJECT): A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
type BypassPullRequestAllowance struct {
	// Actor: The actor that can bypass.
	Actor BranchActorAllowanceActor `json:"actor,omitempty"`

	// BranchProtectionRule: Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// Id: The Node ID of the BypassPullRequestAllowance object.
	Id ID `json:"id,omitempty"`
}

func (x *BypassPullRequestAllowance) GetActor() BranchActorAllowanceActor { return x.Actor }
func (x *BypassPullRequestAllowance) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *BypassPullRequestAllowance) GetId() ID { return x.Id }

// BypassPullRequestAllowanceConnection (OBJECT): The connection type for BypassPullRequestAllowance.
type BypassPullRequestAllowanceConnection struct {
	// Edges: A list of edges.
	Edges []*BypassPullRequestAllowanceEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*BypassPullRequestAllowance `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *BypassPullRequestAllowanceConnection) GetEdges() []*BypassPullRequestAllowanceEdge {
	return x.Edges
}
func (x *BypassPullRequestAllowanceConnection) GetNodes() []*BypassPullRequestAllowance {
	return x.Nodes
}
func (x *BypassPullRequestAllowanceConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *BypassPullRequestAllowanceConnection) GetTotalCount() int     { return x.TotalCount }

// BypassPullRequestAllowanceEdge (OBJECT): An edge in a connection.
type BypassPullRequestAllowanceEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *BypassPullRequestAllowance `json:"node,omitempty"`
}

func (x *BypassPullRequestAllowanceEdge) GetCursor() string                    { return x.Cursor }
func (x *BypassPullRequestAllowanceEdge) GetNode() *BypassPullRequestAllowance { return x.Node }

// CVSS (OBJECT): The Common Vulnerability Scoring System.
type CVSS struct {
	// Score: The CVSS score associated with this advisory.
	Score float64 `json:"score,omitempty"`

	// VectorString: The CVSS vector string associated with this advisory.
	VectorString string `json:"vectorString,omitempty"`
}

func (x *CVSS) GetScore() float64       { return x.Score }
func (x *CVSS) GetVectorString() string { return x.VectorString }

// CWE (OBJECT): A common weakness enumeration.
type CWE struct {
	// CweId: The id of the CWE.
	CweId string `json:"cweId,omitempty"`

	// Description: A detailed description of this CWE.
	Description string `json:"description,omitempty"`

	// Id: The Node ID of the CWE object.
	Id ID `json:"id,omitempty"`

	// Name: The name of this CWE.
	Name string `json:"name,omitempty"`
}

func (x *CWE) GetCweId() string       { return x.CweId }
func (x *CWE) GetDescription() string { return x.Description }
func (x *CWE) GetId() ID              { return x.Id }
func (x *CWE) GetName() string        { return x.Name }

// CWEConnection (OBJECT): The connection type for CWE.
type CWEConnection struct {
	// Edges: A list of edges.
	Edges []*CWEEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CWE `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CWEConnection) GetEdges() []*CWEEdge   { return x.Edges }
func (x *CWEConnection) GetNodes() []*CWE       { return x.Nodes }
func (x *CWEConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *CWEConnection) GetTotalCount() int     { return x.TotalCount }

// CWEEdge (OBJECT): An edge in a connection.
type CWEEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CWE `json:"node,omitempty"`
}

func (x *CWEEdge) GetCursor() string { return x.Cursor }
func (x *CWEEdge) GetNode() *CWE     { return x.Node }

// CancelEnterpriseAdminInvitationInput (INPUT_OBJECT): Autogenerated input type of CancelEnterpriseAdminInvitation.
type CancelEnterpriseAdminInvitationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// InvitationId: The Node ID of the pending enterprise administrator invitation.
	//
	// GraphQL type: ID!
	InvitationId ID `json:"invitationId,omitempty"`
}

// CancelEnterpriseAdminInvitationPayload (OBJECT): Autogenerated return type of CancelEnterpriseAdminInvitation.
type CancelEnterpriseAdminInvitationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Invitation: The invitation that was canceled.
	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`

	// Message: A message confirming the result of canceling an administrator invitation.
	Message string `json:"message,omitempty"`
}

func (x *CancelEnterpriseAdminInvitationPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *CancelEnterpriseAdminInvitationPayload) GetInvitation() *EnterpriseAdministratorInvitation {
	return x.Invitation
}
func (x *CancelEnterpriseAdminInvitationPayload) GetMessage() string { return x.Message }

// CancelEnterpriseMemberInvitationInput (INPUT_OBJECT): Autogenerated input type of CancelEnterpriseMemberInvitation.
type CancelEnterpriseMemberInvitationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// InvitationId: The Node ID of the pending enterprise member invitation.
	//
	// GraphQL type: ID!
	InvitationId ID `json:"invitationId,omitempty"`
}

// CancelEnterpriseMemberInvitationPayload (OBJECT): Autogenerated return type of CancelEnterpriseMemberInvitation.
type CancelEnterpriseMemberInvitationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Invitation: The invitation that was canceled.
	Invitation *EnterpriseMemberInvitation `json:"invitation,omitempty"`

	// Message: A message confirming the result of canceling an member invitation.
	Message string `json:"message,omitempty"`
}

func (x *CancelEnterpriseMemberInvitationPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *CancelEnterpriseMemberInvitationPayload) GetInvitation() *EnterpriseMemberInvitation {
	return x.Invitation
}
func (x *CancelEnterpriseMemberInvitationPayload) GetMessage() string { return x.Message }

// CancelSponsorshipInput (INPUT_OBJECT): Autogenerated input type of CancelSponsorship.
type CancelSponsorshipInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorId: The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	//
	// GraphQL type: ID
	SponsorId ID `json:"sponsorId,omitempty"`

	// SponsorLogin: The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	//
	// GraphQL type: String
	SponsorLogin string `json:"sponsorLogin,omitempty"`

	// SponsorableId: The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	//
	// GraphQL type: ID
	SponsorableId ID `json:"sponsorableId,omitempty"`

	// SponsorableLogin: The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`
}

// CancelSponsorshipPayload (OBJECT): Autogenerated return type of CancelSponsorship.
type CancelSponsorshipPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorsTier: The tier that was being used at the time of cancellation.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

func (x *CancelSponsorshipPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *CancelSponsorshipPayload) GetSponsorsTier() *SponsorsTier { return x.SponsorsTier }

// ChangeUserStatusInput (INPUT_OBJECT): Autogenerated input type of ChangeUserStatus.
type ChangeUserStatusInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Emoji: The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
	//
	// GraphQL type: String
	Emoji string `json:"emoji,omitempty"`

	// Message: A short description of your current status.
	//
	// GraphQL type: String
	Message string `json:"message,omitempty"`

	// OrganizationId: The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
	//
	// GraphQL type: ID
	OrganizationId ID `json:"organizationId,omitempty"`

	// LimitedAvailability: Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
	//
	// GraphQL type: Boolean
	LimitedAvailability bool `json:"limitedAvailability,omitempty"`

	// ExpiresAt: If set, the user status will not be shown after this date.
	//
	// GraphQL type: DateTime
	ExpiresAt DateTime `json:"expiresAt,omitempty"`
}

// ChangeUserStatusPayload (OBJECT): Autogenerated return type of ChangeUserStatus.
type ChangeUserStatusPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Status: Your updated status.
	Status *UserStatus `json:"status,omitempty"`
}

func (x *ChangeUserStatusPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ChangeUserStatusPayload) GetStatus() *UserStatus      { return x.Status }

// CheckAnnotation (OBJECT): A single check annotation.
type CheckAnnotation struct {
	// AnnotationLevel: The annotation's severity level.
	AnnotationLevel CheckAnnotationLevel `json:"annotationLevel,omitempty"`

	// BlobUrl: The path to the file that this annotation was made on.
	BlobUrl URI `json:"blobUrl,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Location: The position of this annotation.
	Location *CheckAnnotationSpan `json:"location,omitempty"`

	// Message: The annotation's message.
	Message string `json:"message,omitempty"`

	// Path: The path that this annotation was made on.
	Path string `json:"path,omitempty"`

	// RawDetails: Additional information about the annotation.
	RawDetails string `json:"rawDetails,omitempty"`

	// Title: The annotation's title.
	Title string `json:"title,omitempty"`
}

func (x *CheckAnnotation) GetAnnotationLevel() CheckAnnotationLevel { return x.AnnotationLevel }
func (x *CheckAnnotation) GetBlobUrl() URI                          { return x.BlobUrl }
func (x *CheckAnnotation) GetDatabaseId() int                       { return x.DatabaseId }
func (x *CheckAnnotation) GetLocation() *CheckAnnotationSpan        { return x.Location }
func (x *CheckAnnotation) GetMessage() string                       { return x.Message }
func (x *CheckAnnotation) GetPath() string                          { return x.Path }
func (x *CheckAnnotation) GetRawDetails() string                    { return x.RawDetails }
func (x *CheckAnnotation) GetTitle() string                         { return x.Title }

// CheckAnnotationConnection (OBJECT): The connection type for CheckAnnotation.
type CheckAnnotationConnection struct {
	// Edges: A list of edges.
	Edges []*CheckAnnotationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CheckAnnotation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CheckAnnotationConnection) GetEdges() []*CheckAnnotationEdge { return x.Edges }
func (x *CheckAnnotationConnection) GetNodes() []*CheckAnnotation     { return x.Nodes }
func (x *CheckAnnotationConnection) GetPageInfo() *PageInfo           { return x.PageInfo }
func (x *CheckAnnotationConnection) GetTotalCount() int               { return x.TotalCount }

// CheckAnnotationData (INPUT_OBJECT): Information from a check run analysis to specific lines of code.
type CheckAnnotationData struct {
	// Path: The path of the file to add an annotation to.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`

	// Location: The location of the annotation.
	//
	// GraphQL type: CheckAnnotationRange!
	Location *CheckAnnotationRange `json:"location,omitempty"`

	// AnnotationLevel: Represents an annotation's information level.
	//
	// GraphQL type: CheckAnnotationLevel!
	AnnotationLevel CheckAnnotationLevel `json:"annotationLevel,omitempty"`

	// Message: A short description of the feedback for these lines of code.
	//
	// GraphQL type: String!
	Message string `json:"message,omitempty"`

	// Title: The title that represents the annotation.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// RawDetails: Details about this annotation.
	//
	// GraphQL type: String
	RawDetails string `json:"rawDetails,omitempty"`
}

// CheckAnnotationEdge (OBJECT): An edge in a connection.
type CheckAnnotationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CheckAnnotation `json:"node,omitempty"`
}

func (x *CheckAnnotationEdge) GetCursor() string         { return x.Cursor }
func (x *CheckAnnotationEdge) GetNode() *CheckAnnotation { return x.Node }

// CheckAnnotationLevel (ENUM): Represents an annotation's information level.
type CheckAnnotationLevel string

// CheckAnnotationLevel_FAILURE: An annotation indicating an inescapable error.
const CheckAnnotationLevel_FAILURE CheckAnnotationLevel = "FAILURE"

// CheckAnnotationLevel_NOTICE: An annotation indicating some information.
const CheckAnnotationLevel_NOTICE CheckAnnotationLevel = "NOTICE"

// CheckAnnotationLevel_WARNING: An annotation indicating an ignorable error.
const CheckAnnotationLevel_WARNING CheckAnnotationLevel = "WARNING"

// CheckAnnotationPosition (OBJECT): A character position in a check annotation.
type CheckAnnotationPosition struct {
	// Column: Column number (1 indexed).
	Column int `json:"column,omitempty"`

	// Line: Line number (1 indexed).
	Line int `json:"line,omitempty"`
}

func (x *CheckAnnotationPosition) GetColumn() int { return x.Column }
func (x *CheckAnnotationPosition) GetLine() int   { return x.Line }

// CheckAnnotationRange (INPUT_OBJECT): Information from a check run analysis to specific lines of code.
type CheckAnnotationRange struct {
	// StartLine: The starting line of the range.
	//
	// GraphQL type: Int!
	StartLine int `json:"startLine,omitempty"`

	// StartColumn: The starting column of the range.
	//
	// GraphQL type: Int
	StartColumn int `json:"startColumn,omitempty"`

	// EndLine: The ending line of the range.
	//
	// GraphQL type: Int!
	EndLine int `json:"endLine,omitempty"`

	// EndColumn: The ending column of the range.
	//
	// GraphQL type: Int
	EndColumn int `json:"endColumn,omitempty"`
}

// CheckAnnotationSpan (OBJECT): An inclusive pair of positions for a check annotation.
type CheckAnnotationSpan struct {
	// End: End position (inclusive).
	End *CheckAnnotationPosition `json:"end,omitempty"`

	// Start: Start position (inclusive).
	Start *CheckAnnotationPosition `json:"start,omitempty"`
}

func (x *CheckAnnotationSpan) GetEnd() *CheckAnnotationPosition   { return x.End }
func (x *CheckAnnotationSpan) GetStart() *CheckAnnotationPosition { return x.Start }

// CheckConclusionState (ENUM): The possible states for a check suite or run conclusion.
type CheckConclusionState string

// CheckConclusionState_ACTION_REQUIRED: The check suite or run requires action.
const CheckConclusionState_ACTION_REQUIRED CheckConclusionState = "ACTION_REQUIRED"

// CheckConclusionState_TIMED_OUT: The check suite or run has timed out.
const CheckConclusionState_TIMED_OUT CheckConclusionState = "TIMED_OUT"

// CheckConclusionState_CANCELLED: The check suite or run has been cancelled.
const CheckConclusionState_CANCELLED CheckConclusionState = "CANCELLED"

// CheckConclusionState_FAILURE: The check suite or run has failed.
const CheckConclusionState_FAILURE CheckConclusionState = "FAILURE"

// CheckConclusionState_SUCCESS: The check suite or run has succeeded.
const CheckConclusionState_SUCCESS CheckConclusionState = "SUCCESS"

// CheckConclusionState_NEUTRAL: The check suite or run was neutral.
const CheckConclusionState_NEUTRAL CheckConclusionState = "NEUTRAL"

// CheckConclusionState_SKIPPED: The check suite or run was skipped.
const CheckConclusionState_SKIPPED CheckConclusionState = "SKIPPED"

// CheckConclusionState_STARTUP_FAILURE: The check suite or run has failed at startup.
const CheckConclusionState_STARTUP_FAILURE CheckConclusionState = "STARTUP_FAILURE"

// CheckConclusionState_STALE: The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
const CheckConclusionState_STALE CheckConclusionState = "STALE"

// CheckRun (OBJECT): A check run.
type CheckRun struct {
	// Annotations: The check run's annotations.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Annotations *CheckAnnotationConnection `json:"annotations,omitempty"`

	// CheckSuite: The check suite that this run is a part of.
	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`

	// CompletedAt: Identifies the date and time when the check run was completed.
	CompletedAt DateTime `json:"completedAt,omitempty"`

	// Conclusion: The conclusion of the check run.
	Conclusion CheckConclusionState `json:"conclusion,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Deployment: The corresponding deployment for this job, if any.
	Deployment *Deployment `json:"deployment,omitempty"`

	// DetailsUrl: The URL from which to find full details of the check run on the integrator's site.
	DetailsUrl URI `json:"detailsUrl,omitempty"`

	// ExternalId: A reference for the check run on the integrator's system.
	ExternalId string `json:"externalId,omitempty"`

	// Id: The Node ID of the CheckRun object.
	Id ID `json:"id,omitempty"`

	// IsRequired: Whether this is required to pass before merging for a specific pull request.
	//
	// Query arguments:
	//   - pullRequestId ID
	//   - pullRequestNumber Int
	IsRequired bool `json:"isRequired,omitempty"`

	// Name: The name of the check for this check run.
	Name string `json:"name,omitempty"`

	// PendingDeploymentRequest: Information about a pending deployment, if any, in this check run.
	PendingDeploymentRequest *DeploymentRequest `json:"pendingDeploymentRequest,omitempty"`

	// Permalink: The permalink to the check run summary.
	Permalink URI `json:"permalink,omitempty"`

	// Repository: The repository associated with this check run.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this check run.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// StartedAt: Identifies the date and time when the check run was started.
	StartedAt DateTime `json:"startedAt,omitempty"`

	// Status: The current status of the check run.
	Status CheckStatusState `json:"status,omitempty"`

	// Steps: The check run's steps.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - number Int
	Steps *CheckStepConnection `json:"steps,omitempty"`

	// Summary: A string representing the check run's summary.
	Summary string `json:"summary,omitempty"`

	// Text: A string representing the check run's text.
	Text string `json:"text,omitempty"`

	// Title: A string representing the check run.
	Title string `json:"title,omitempty"`

	// Url: The HTTP URL for this check run.
	Url URI `json:"url,omitempty"`
}

func (x *CheckRun) GetAnnotations() *CheckAnnotationConnection { return x.Annotations }
func (x *CheckRun) GetCheckSuite() *CheckSuite                 { return x.CheckSuite }
func (x *CheckRun) GetCompletedAt() DateTime                   { return x.CompletedAt }
func (x *CheckRun) GetConclusion() CheckConclusionState        { return x.Conclusion }
func (x *CheckRun) GetDatabaseId() int                         { return x.DatabaseId }
func (x *CheckRun) GetDeployment() *Deployment                 { return x.Deployment }
func (x *CheckRun) GetDetailsUrl() URI                         { return x.DetailsUrl }
func (x *CheckRun) GetExternalId() string                      { return x.ExternalId }
func (x *CheckRun) GetId() ID                                  { return x.Id }
func (x *CheckRun) GetIsRequired() bool                        { return x.IsRequired }
func (x *CheckRun) GetName() string                            { return x.Name }
func (x *CheckRun) GetPendingDeploymentRequest() *DeploymentRequest {
	return x.PendingDeploymentRequest
}
func (x *CheckRun) GetPermalink() URI              { return x.Permalink }
func (x *CheckRun) GetRepository() *Repository     { return x.Repository }
func (x *CheckRun) GetResourcePath() URI           { return x.ResourcePath }
func (x *CheckRun) GetStartedAt() DateTime         { return x.StartedAt }
func (x *CheckRun) GetStatus() CheckStatusState    { return x.Status }
func (x *CheckRun) GetSteps() *CheckStepConnection { return x.Steps }
func (x *CheckRun) GetSummary() string             { return x.Summary }
func (x *CheckRun) GetText() string                { return x.Text }
func (x *CheckRun) GetTitle() string               { return x.Title }
func (x *CheckRun) GetUrl() URI                    { return x.Url }

// CheckRunAction (INPUT_OBJECT): Possible further actions the integrator can perform.
type CheckRunAction struct {
	// Label: The text to be displayed on a button in the web UI.
	//
	// GraphQL type: String!
	Label string `json:"label,omitempty"`

	// Description: A short explanation of what this action would do.
	//
	// GraphQL type: String!
	Description string `json:"description,omitempty"`

	// Identifier: A reference for the action on the integrator's system. .
	//
	// GraphQL type: String!
	Identifier string `json:"identifier,omitempty"`
}

// CheckRunConnection (OBJECT): The connection type for CheckRun.
type CheckRunConnection struct {
	// Edges: A list of edges.
	Edges []*CheckRunEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CheckRun `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CheckRunConnection) GetEdges() []*CheckRunEdge { return x.Edges }
func (x *CheckRunConnection) GetNodes() []*CheckRun     { return x.Nodes }
func (x *CheckRunConnection) GetPageInfo() *PageInfo    { return x.PageInfo }
func (x *CheckRunConnection) GetTotalCount() int        { return x.TotalCount }

// CheckRunEdge (OBJECT): An edge in a connection.
type CheckRunEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CheckRun `json:"node,omitempty"`
}

func (x *CheckRunEdge) GetCursor() string  { return x.Cursor }
func (x *CheckRunEdge) GetNode() *CheckRun { return x.Node }

// CheckRunFilter (INPUT_OBJECT): The filters that are available when fetching check runs.
type CheckRunFilter struct {
	// CheckType: Filters the check runs by this type.
	//
	// GraphQL type: CheckRunType
	CheckType CheckRunType `json:"checkType,omitempty"`

	// AppId: Filters the check runs created by this application ID.
	//
	// GraphQL type: Int
	AppId int `json:"appId,omitempty"`

	// CheckName: Filters the check runs by this name.
	//
	// GraphQL type: String
	CheckName string `json:"checkName,omitempty"`

	// Status: Filters the check runs by this status. Superseded by statuses.
	//
	// GraphQL type: CheckStatusState
	Status CheckStatusState `json:"status,omitempty"`

	// Statuses: Filters the check runs by this status. Overrides status.
	//
	// GraphQL type: [CheckStatusState!]
	Statuses []CheckStatusState `json:"statuses,omitempty"`

	// Conclusions: Filters the check runs by these conclusions.
	//
	// GraphQL type: [CheckConclusionState!]
	Conclusions []CheckConclusionState `json:"conclusions,omitempty"`
}

// CheckRunOutput (INPUT_OBJECT): Descriptive details about the check run.
type CheckRunOutput struct {
	// Title: A title to provide for this check run.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// Summary: The summary of the check run (supports Commonmark).
	//
	// GraphQL type: String!
	Summary string `json:"summary,omitempty"`

	// Text: The details of the check run (supports Commonmark).
	//
	// GraphQL type: String
	Text string `json:"text,omitempty"`

	// Annotations: The annotations that are made as part of the check run.
	//
	// GraphQL type: [CheckAnnotationData!]
	Annotations []*CheckAnnotationData `json:"annotations,omitempty"`

	// Images: Images attached to the check run output displayed in the GitHub pull request UI.
	//
	// GraphQL type: [CheckRunOutputImage!]
	Images []*CheckRunOutputImage `json:"images,omitempty"`
}

// CheckRunOutputImage (INPUT_OBJECT): Images attached to the check run output displayed in the GitHub pull request UI.
type CheckRunOutputImage struct {
	// Alt: The alternative text for the image.
	//
	// GraphQL type: String!
	Alt string `json:"alt,omitempty"`

	// ImageUrl: The full URL of the image.
	//
	// GraphQL type: URI!
	ImageUrl URI `json:"imageUrl,omitempty"`

	// Caption: A short image description.
	//
	// GraphQL type: String
	Caption string `json:"caption,omitempty"`
}

// CheckRunState (ENUM): The possible states of a check run in a status rollup.
type CheckRunState string

// CheckRunState_ACTION_REQUIRED: The check run requires action.
const CheckRunState_ACTION_REQUIRED CheckRunState = "ACTION_REQUIRED"

// CheckRunState_CANCELLED: The check run has been cancelled.
const CheckRunState_CANCELLED CheckRunState = "CANCELLED"

// CheckRunState_COMPLETED: The check run has been completed.
const CheckRunState_COMPLETED CheckRunState = "COMPLETED"

// CheckRunState_FAILURE: The check run has failed.
const CheckRunState_FAILURE CheckRunState = "FAILURE"

// CheckRunState_IN_PROGRESS: The check run is in progress.
const CheckRunState_IN_PROGRESS CheckRunState = "IN_PROGRESS"

// CheckRunState_NEUTRAL: The check run was neutral.
const CheckRunState_NEUTRAL CheckRunState = "NEUTRAL"

// CheckRunState_PENDING: The check run is in pending state.
const CheckRunState_PENDING CheckRunState = "PENDING"

// CheckRunState_QUEUED: The check run has been queued.
const CheckRunState_QUEUED CheckRunState = "QUEUED"

// CheckRunState_SKIPPED: The check run was skipped.
const CheckRunState_SKIPPED CheckRunState = "SKIPPED"

// CheckRunState_STALE: The check run was marked stale by GitHub. Only GitHub can use this conclusion.
const CheckRunState_STALE CheckRunState = "STALE"

// CheckRunState_STARTUP_FAILURE: The check run has failed at startup.
const CheckRunState_STARTUP_FAILURE CheckRunState = "STARTUP_FAILURE"

// CheckRunState_SUCCESS: The check run has succeeded.
const CheckRunState_SUCCESS CheckRunState = "SUCCESS"

// CheckRunState_TIMED_OUT: The check run has timed out.
const CheckRunState_TIMED_OUT CheckRunState = "TIMED_OUT"

// CheckRunState_WAITING: The check run is in waiting state.
const CheckRunState_WAITING CheckRunState = "WAITING"

// CheckRunStateCount (OBJECT): Represents a count of the state of a check run.
type CheckRunStateCount struct {
	// Count: The number of check runs with this state.
	Count int `json:"count,omitempty"`

	// State: The state of a check run.
	State CheckRunState `json:"state,omitempty"`
}

func (x *CheckRunStateCount) GetCount() int           { return x.Count }
func (x *CheckRunStateCount) GetState() CheckRunState { return x.State }

// CheckRunType (ENUM): The possible types of check runs.
type CheckRunType string

// CheckRunType_ALL: Every check run available.
const CheckRunType_ALL CheckRunType = "ALL"

// CheckRunType_LATEST: The latest check run.
const CheckRunType_LATEST CheckRunType = "LATEST"

// CheckStatusState (ENUM): The possible states for a check suite or run status.
type CheckStatusState string

// CheckStatusState_REQUESTED: The check suite or run has been requested.
const CheckStatusState_REQUESTED CheckStatusState = "REQUESTED"

// CheckStatusState_QUEUED: The check suite or run has been queued.
const CheckStatusState_QUEUED CheckStatusState = "QUEUED"

// CheckStatusState_IN_PROGRESS: The check suite or run is in progress.
const CheckStatusState_IN_PROGRESS CheckStatusState = "IN_PROGRESS"

// CheckStatusState_COMPLETED: The check suite or run has been completed.
const CheckStatusState_COMPLETED CheckStatusState = "COMPLETED"

// CheckStatusState_WAITING: The check suite or run is in waiting state.
const CheckStatusState_WAITING CheckStatusState = "WAITING"

// CheckStatusState_PENDING: The check suite or run is in pending state.
const CheckStatusState_PENDING CheckStatusState = "PENDING"

// CheckStep (OBJECT): A single check step.
type CheckStep struct {
	// CompletedAt: Identifies the date and time when the check step was completed.
	CompletedAt DateTime `json:"completedAt,omitempty"`

	// Conclusion: The conclusion of the check step.
	Conclusion CheckConclusionState `json:"conclusion,omitempty"`

	// ExternalId: A reference for the check step on the integrator's system.
	ExternalId string `json:"externalId,omitempty"`

	// Name: The step's name.
	Name string `json:"name,omitempty"`

	// Number: The index of the step in the list of steps of the parent check run.
	Number int `json:"number,omitempty"`

	// SecondsToCompletion: Number of seconds to completion.
	SecondsToCompletion int `json:"secondsToCompletion,omitempty"`

	// StartedAt: Identifies the date and time when the check step was started.
	StartedAt DateTime `json:"startedAt,omitempty"`

	// Status: The current status of the check step.
	Status CheckStatusState `json:"status,omitempty"`
}

func (x *CheckStep) GetCompletedAt() DateTime            { return x.CompletedAt }
func (x *CheckStep) GetConclusion() CheckConclusionState { return x.Conclusion }
func (x *CheckStep) GetExternalId() string               { return x.ExternalId }
func (x *CheckStep) GetName() string                     { return x.Name }
func (x *CheckStep) GetNumber() int                      { return x.Number }
func (x *CheckStep) GetSecondsToCompletion() int         { return x.SecondsToCompletion }
func (x *CheckStep) GetStartedAt() DateTime              { return x.StartedAt }
func (x *CheckStep) GetStatus() CheckStatusState         { return x.Status }

// CheckStepConnection (OBJECT): The connection type for CheckStep.
type CheckStepConnection struct {
	// Edges: A list of edges.
	Edges []*CheckStepEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CheckStep `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CheckStepConnection) GetEdges() []*CheckStepEdge { return x.Edges }
func (x *CheckStepConnection) GetNodes() []*CheckStep     { return x.Nodes }
func (x *CheckStepConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *CheckStepConnection) GetTotalCount() int         { return x.TotalCount }

// CheckStepEdge (OBJECT): An edge in a connection.
type CheckStepEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CheckStep `json:"node,omitempty"`
}

func (x *CheckStepEdge) GetCursor() string   { return x.Cursor }
func (x *CheckStepEdge) GetNode() *CheckStep { return x.Node }

// CheckSuite (OBJECT): A check suite.
type CheckSuite struct {
	// App: The GitHub App which created this check suite.
	App *App `json:"app,omitempty"`

	// Branch: The name of the branch for this check suite.
	Branch *Ref `json:"branch,omitempty"`

	// CheckRuns: The check runs associated with a check suite.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - filterBy CheckRunFilter
	CheckRuns *CheckRunConnection `json:"checkRuns,omitempty"`

	// Commit: The commit for this check suite.
	Commit *Commit `json:"commit,omitempty"`

	// Conclusion: The conclusion of this check suite.
	Conclusion CheckConclusionState `json:"conclusion,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The user who triggered the check suite.
	Creator *User `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the CheckSuite object.
	Id ID `json:"id,omitempty"`

	// MatchingPullRequests: A list of open pull requests matching the check suite.
	//
	// Query arguments:
	//   - states [PullRequestState!]
	//   - labels [String!]
	//   - headRefName String
	//   - baseRefName String
	//   - orderBy IssueOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	MatchingPullRequests *PullRequestConnection `json:"matchingPullRequests,omitempty"`

	// Push: The push that triggered this check suite.
	Push *Push `json:"push,omitempty"`

	// Repository: The repository associated with this check suite.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this check suite.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Status: The status of this check suite.
	Status CheckStatusState `json:"status,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this check suite.
	Url URI `json:"url,omitempty"`

	// WorkflowRun: The workflow run associated with this check suite.
	WorkflowRun *WorkflowRun `json:"workflowRun,omitempty"`
}

func (x *CheckSuite) GetApp() *App                                    { return x.App }
func (x *CheckSuite) GetBranch() *Ref                                 { return x.Branch }
func (x *CheckSuite) GetCheckRuns() *CheckRunConnection               { return x.CheckRuns }
func (x *CheckSuite) GetCommit() *Commit                              { return x.Commit }
func (x *CheckSuite) GetConclusion() CheckConclusionState             { return x.Conclusion }
func (x *CheckSuite) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *CheckSuite) GetCreator() *User                               { return x.Creator }
func (x *CheckSuite) GetDatabaseId() int                              { return x.DatabaseId }
func (x *CheckSuite) GetId() ID                                       { return x.Id }
func (x *CheckSuite) GetMatchingPullRequests() *PullRequestConnection { return x.MatchingPullRequests }
func (x *CheckSuite) GetPush() *Push                                  { return x.Push }
func (x *CheckSuite) GetRepository() *Repository                      { return x.Repository }
func (x *CheckSuite) GetResourcePath() URI                            { return x.ResourcePath }
func (x *CheckSuite) GetStatus() CheckStatusState                     { return x.Status }
func (x *CheckSuite) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *CheckSuite) GetUrl() URI                                     { return x.Url }
func (x *CheckSuite) GetWorkflowRun() *WorkflowRun                    { return x.WorkflowRun }

// CheckSuiteAutoTriggerPreference (INPUT_OBJECT): The auto-trigger preferences that are available for check suites.
type CheckSuiteAutoTriggerPreference struct {
	// AppId: The node ID of the application that owns the check suite.
	//
	// GraphQL type: ID!
	AppId ID `json:"appId,omitempty"`

	// Setting: Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
	//
	// GraphQL type: Boolean!
	Setting bool `json:"setting,omitempty"`
}

// CheckSuiteConnection (OBJECT): The connection type for CheckSuite.
type CheckSuiteConnection struct {
	// Edges: A list of edges.
	Edges []*CheckSuiteEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CheckSuite `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CheckSuiteConnection) GetEdges() []*CheckSuiteEdge { return x.Edges }
func (x *CheckSuiteConnection) GetNodes() []*CheckSuite     { return x.Nodes }
func (x *CheckSuiteConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *CheckSuiteConnection) GetTotalCount() int          { return x.TotalCount }

// CheckSuiteEdge (OBJECT): An edge in a connection.
type CheckSuiteEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CheckSuite `json:"node,omitempty"`
}

func (x *CheckSuiteEdge) GetCursor() string    { return x.Cursor }
func (x *CheckSuiteEdge) GetNode() *CheckSuite { return x.Node }

// CheckSuiteFilter (INPUT_OBJECT): The filters that are available when fetching check suites.
type CheckSuiteFilter struct {
	// AppId: Filters the check suites created by this application ID.
	//
	// GraphQL type: Int
	AppId int `json:"appId,omitempty"`

	// CheckName: Filters the check suites by this name.
	//
	// GraphQL type: String
	CheckName string `json:"checkName,omitempty"`
}

// Claimable (UNION): An object which can have its data claimed or claim data from another.
// Claimable_Interface: An object which can have its data claimed or claim data from another.
//
// Possible types:
//
//   - *Mannequin
//   - *User
type Claimable_Interface interface {
	isClaimable()
}

func (*Mannequin) isClaimable() {}
func (*User) isClaimable()      {}

type Claimable struct {
	Interface Claimable_Interface
}

func (x *Claimable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Claimable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Claimable", info.Typename)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ClearLabelsFromLabelableInput (INPUT_OBJECT): Autogenerated input type of ClearLabelsFromLabelable.
type ClearLabelsFromLabelableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LabelableId: The id of the labelable object to clear the labels from.
	//
	// GraphQL type: ID!
	LabelableId ID `json:"labelableId,omitempty"`
}

// ClearLabelsFromLabelablePayload (OBJECT): Autogenerated return type of ClearLabelsFromLabelable.
type ClearLabelsFromLabelablePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Labelable: The item that was unlabeled.
	Labelable Labelable `json:"labelable,omitempty"`
}

func (x *ClearLabelsFromLabelablePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ClearLabelsFromLabelablePayload) GetLabelable() Labelable     { return x.Labelable }

// ClearProjectV2ItemFieldValueInput (INPUT_OBJECT): Autogenerated input type of ClearProjectV2ItemFieldValue.
type ClearProjectV2ItemFieldValueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ItemId: The ID of the item to be cleared.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`

	// FieldId: The ID of the field to be cleared.
	//
	// GraphQL type: ID!
	FieldId ID `json:"fieldId,omitempty"`
}

// ClearProjectV2ItemFieldValuePayload (OBJECT): Autogenerated return type of ClearProjectV2ItemFieldValue.
type ClearProjectV2ItemFieldValuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2Item: The updated item.
	ProjectV2Item *ProjectV2Item `json:"projectV2Item,omitempty"`
}

func (x *ClearProjectV2ItemFieldValuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ClearProjectV2ItemFieldValuePayload) GetProjectV2Item() *ProjectV2Item {
	return x.ProjectV2Item
}

// CloneProjectInput (INPUT_OBJECT): Autogenerated input type of CloneProject.
type CloneProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TargetOwnerId: The owner ID to create the project under.
	//
	// GraphQL type: ID!
	TargetOwnerId ID `json:"targetOwnerId,omitempty"`

	// SourceId: The source project to clone.
	//
	// GraphQL type: ID!
	SourceId ID `json:"sourceId,omitempty"`

	// IncludeWorkflows: Whether or not to clone the source project's workflows.
	//
	// GraphQL type: Boolean!
	IncludeWorkflows bool `json:"includeWorkflows,omitempty"`

	// Name: The name of the project.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Body: The description of the project.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Public: The visibility of the project, defaults to false (private).
	//
	// GraphQL type: Boolean
	Public bool `json:"public,omitempty"`
}

// CloneProjectPayload (OBJECT): Autogenerated return type of CloneProject.
type CloneProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// JobStatusId: The id of the JobStatus for populating cloned fields.
	JobStatusId string `json:"jobStatusId,omitempty"`

	// Project: The new cloned project.
	Project *Project `json:"project,omitempty"`
}

func (x *CloneProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CloneProjectPayload) GetJobStatusId() string      { return x.JobStatusId }
func (x *CloneProjectPayload) GetProject() *Project        { return x.Project }

// CloneTemplateRepositoryInput (INPUT_OBJECT): Autogenerated input type of CloneTemplateRepository.
type CloneTemplateRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the template repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The name of the new repository.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// OwnerId: The ID of the owner for the new repository.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// Description: A short description of the new repository.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// Visibility: Indicates the repository's visibility level.
	//
	// GraphQL type: RepositoryVisibility!
	Visibility RepositoryVisibility `json:"visibility,omitempty"`

	// IncludeAllBranches: Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
	//
	// GraphQL type: Boolean
	IncludeAllBranches bool `json:"includeAllBranches,omitempty"`
}

// CloneTemplateRepositoryPayload (OBJECT): Autogenerated return type of CloneTemplateRepository.
type CloneTemplateRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The new repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *CloneTemplateRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CloneTemplateRepositoryPayload) GetRepository() *Repository  { return x.Repository }

// Closable (INTERFACE): An object that can be closed.
// Closable_Interface: An object that can be closed.
//
// Possible types:
//
//   - *Discussion
//   - *Issue
//   - *Milestone
//   - *Project
//   - *ProjectV2
//   - *PullRequest
type Closable_Interface interface {
	isClosable()
	GetClosed() bool
	GetClosedAt() DateTime
	GetViewerCanClose() bool
	GetViewerCanReopen() bool
}

func (*Discussion) isClosable()  {}
func (*Issue) isClosable()       {}
func (*Milestone) isClosable()   {}
func (*Project) isClosable()     {}
func (*ProjectV2) isClosable()   {}
func (*PullRequest) isClosable() {}

type Closable struct {
	Interface Closable_Interface
}

func (x *Closable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Closable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Closable", info.Typename)
	case "Discussion":
		x.Interface = new(Discussion)
	case "Issue":
		x.Interface = new(Issue)
	case "Milestone":
		x.Interface = new(Milestone)
	case "Project":
		x.Interface = new(Project)
	case "ProjectV2":
		x.Interface = new(ProjectV2)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// CloseDiscussionInput (INPUT_OBJECT): Autogenerated input type of CloseDiscussion.
type CloseDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DiscussionId: ID of the discussion to be closed.
	//
	// GraphQL type: ID!
	DiscussionId ID `json:"discussionId,omitempty"`

	// Reason: The reason why the discussion is being closed.
	//
	// GraphQL type: DiscussionCloseReason
	Reason DiscussionCloseReason `json:"reason,omitempty"`
}

// CloseDiscussionPayload (OBJECT): Autogenerated return type of CloseDiscussion.
type CloseDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The discussion that was closed.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *CloseDiscussionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CloseDiscussionPayload) GetDiscussion() *Discussion  { return x.Discussion }

// CloseIssueInput (INPUT_OBJECT): Autogenerated input type of CloseIssue.
type CloseIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: ID of the issue to be closed.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`

	// StateReason: The reason the issue is to be closed.
	//
	// GraphQL type: IssueClosedStateReason
	StateReason IssueClosedStateReason `json:"stateReason,omitempty"`

	// DuplicateIssueId: ID of the issue that this is a duplicate of.
	//
	// GraphQL type: ID
	DuplicateIssueId ID `json:"duplicateIssueId,omitempty"`
}

// CloseIssuePayload (OBJECT): Autogenerated return type of CloseIssue.
type CloseIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue that was closed.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *CloseIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CloseIssuePayload) GetIssue() *Issue            { return x.Issue }

// ClosePullRequestInput (INPUT_OBJECT): Autogenerated input type of ClosePullRequest.
type ClosePullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to be closed.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`
}

// ClosePullRequestPayload (OBJECT): Autogenerated return type of ClosePullRequest.
type ClosePullRequestPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that was closed.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *ClosePullRequestPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *ClosePullRequestPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// ClosedEvent (OBJECT): Represents a 'closed' event on any `Closable`.
type ClosedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Closable: Object that was closed.
	Closable Closable `json:"closable,omitempty"`

	// Closer: Object which triggered the creation of this event.
	Closer Closer `json:"closer,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ClosedEvent object.
	Id ID `json:"id,omitempty"`

	// ResourcePath: The HTTP path for this closed event.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// StateReason: The reason the issue state was changed to closed.
	StateReason IssueStateReason `json:"stateReason,omitempty"`

	// Url: The HTTP URL for this closed event.
	Url URI `json:"url,omitempty"`
}

func (x *ClosedEvent) GetActor() Actor                  { return x.Actor }
func (x *ClosedEvent) GetClosable() Closable            { return x.Closable }
func (x *ClosedEvent) GetCloser() Closer                { return x.Closer }
func (x *ClosedEvent) GetCreatedAt() DateTime           { return x.CreatedAt }
func (x *ClosedEvent) GetId() ID                        { return x.Id }
func (x *ClosedEvent) GetResourcePath() URI             { return x.ResourcePath }
func (x *ClosedEvent) GetStateReason() IssueStateReason { return x.StateReason }
func (x *ClosedEvent) GetUrl() URI                      { return x.Url }

// Closer (UNION): The object which triggered a `ClosedEvent`.
// Closer_Interface: The object which triggered a `ClosedEvent`.
//
// Possible types:
//
//   - *Commit
//   - *ProjectV2
//   - *PullRequest
type Closer_Interface interface {
	isCloser()
}

func (*Commit) isCloser()      {}
func (*ProjectV2) isCloser()   {}
func (*PullRequest) isCloser() {}

type Closer struct {
	Interface Closer_Interface
}

func (x *Closer) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Closer) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Closer", info.Typename)
	case "Commit":
		x.Interface = new(Commit)
	case "ProjectV2":
		x.Interface = new(ProjectV2)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// CodeOfConduct (OBJECT): The Code of Conduct for a repository.
type CodeOfConduct struct {
	// Body: The body of the Code of Conduct.
	Body string `json:"body,omitempty"`

	// Id: The Node ID of the CodeOfConduct object.
	Id ID `json:"id,omitempty"`

	// Key: The key for the Code of Conduct.
	Key string `json:"key,omitempty"`

	// Name: The formal name of the Code of Conduct.
	Name string `json:"name,omitempty"`

	// ResourcePath: The HTTP path for this Code of Conduct.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this Code of Conduct.
	Url URI `json:"url,omitempty"`
}

func (x *CodeOfConduct) GetBody() string      { return x.Body }
func (x *CodeOfConduct) GetId() ID            { return x.Id }
func (x *CodeOfConduct) GetKey() string       { return x.Key }
func (x *CodeOfConduct) GetName() string      { return x.Name }
func (x *CodeOfConduct) GetResourcePath() URI { return x.ResourcePath }
func (x *CodeOfConduct) GetUrl() URI          { return x.Url }

// CodeScanningParameters (OBJECT): Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
type CodeScanningParameters struct {
	// CodeScanningTools: Tools that must provide code scanning results for this rule to pass.
	CodeScanningTools []*CodeScanningTool `json:"codeScanningTools,omitempty"`
}

func (x *CodeScanningParameters) GetCodeScanningTools() []*CodeScanningTool {
	return x.CodeScanningTools
}

// CodeScanningParametersInput (INPUT_OBJECT): Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
type CodeScanningParametersInput struct {
	// CodeScanningTools: Tools that must provide code scanning results for this rule to pass.
	//
	// GraphQL type: [CodeScanningToolInput!]!
	CodeScanningTools []*CodeScanningToolInput `json:"codeScanningTools,omitempty"`
}

// CodeScanningTool (OBJECT): A tool that must provide code scanning results for this rule to pass.
type CodeScanningTool struct {
	// AlertsThreshold: The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).".
	AlertsThreshold string `json:"alertsThreshold,omitempty"`

	// SecurityAlertsThreshold: The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).".
	SecurityAlertsThreshold string `json:"securityAlertsThreshold,omitempty"`

	// Tool: The name of a code scanning tool.
	Tool string `json:"tool,omitempty"`
}

func (x *CodeScanningTool) GetAlertsThreshold() string         { return x.AlertsThreshold }
func (x *CodeScanningTool) GetSecurityAlertsThreshold() string { return x.SecurityAlertsThreshold }
func (x *CodeScanningTool) GetTool() string                    { return x.Tool }

// CodeScanningToolInput (INPUT_OBJECT): A tool that must provide code scanning results for this rule to pass.
type CodeScanningToolInput struct {
	// AlertsThreshold: The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).".
	//
	// GraphQL type: String!
	AlertsThreshold string `json:"alertsThreshold,omitempty"`

	// SecurityAlertsThreshold: The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).".
	//
	// GraphQL type: String!
	SecurityAlertsThreshold string `json:"securityAlertsThreshold,omitempty"`

	// Tool: The name of a code scanning tool.
	//
	// GraphQL type: String!
	Tool string `json:"tool,omitempty"`
}

// CollaboratorAffiliation (ENUM): Collaborators affiliation level with a subject.
type CollaboratorAffiliation string

// CollaboratorAffiliation_OUTSIDE: All outside collaborators of an organization-owned subject.
const CollaboratorAffiliation_OUTSIDE CollaboratorAffiliation = "OUTSIDE"

// CollaboratorAffiliation_DIRECT: All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
const CollaboratorAffiliation_DIRECT CollaboratorAffiliation = "DIRECT"

// CollaboratorAffiliation_ALL: All collaborators the authenticated user can see.
const CollaboratorAffiliation_ALL CollaboratorAffiliation = "ALL"

// Comment (INTERFACE): Represents a comment.
// Comment_Interface: Represents a comment.
//
// Possible types:
//
//   - *CommitComment
//   - *Discussion
//   - *DiscussionComment
//   - *GistComment
//   - *Issue
//   - *IssueComment
//   - *PullRequest
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *TeamDiscussion
//   - *TeamDiscussionComment
type Comment_Interface interface {
	isComment()
	GetAuthor() Actor
	GetAuthorAssociation() CommentAuthorAssociation
	GetBody() string
	GetBodyHTML() template.HTML
	GetBodyText() string
	GetCreatedAt() DateTime
	GetCreatedViaEmail() bool
	GetEditor() Actor
	GetId() ID
	GetIncludesCreatedEdit() bool
	GetLastEditedAt() DateTime
	GetPublishedAt() DateTime
	GetUpdatedAt() DateTime
	GetUserContentEdits() *UserContentEditConnection
	GetViewerDidAuthor() bool
}

func (*CommitComment) isComment()            {}
func (*Discussion) isComment()               {}
func (*DiscussionComment) isComment()        {}
func (*GistComment) isComment()              {}
func (*Issue) isComment()                    {}
func (*IssueComment) isComment()             {}
func (*PullRequest) isComment()              {}
func (*PullRequestReview) isComment()        {}
func (*PullRequestReviewComment) isComment() {}
func (*TeamDiscussion) isComment()           {}
func (*TeamDiscussionComment) isComment()    {}

type Comment struct {
	Interface Comment_Interface
}

func (x *Comment) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Comment) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Comment", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "GistComment":
		x.Interface = new(GistComment)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// CommentAuthorAssociation (ENUM): A comment author association with repository.
type CommentAuthorAssociation string

// CommentAuthorAssociation_MEMBER: Author is a member of the organization that owns the repository.
const CommentAuthorAssociation_MEMBER CommentAuthorAssociation = "MEMBER"

// CommentAuthorAssociation_OWNER: Author is the owner of the repository.
const CommentAuthorAssociation_OWNER CommentAuthorAssociation = "OWNER"

// CommentAuthorAssociation_MANNEQUIN: Author is a placeholder for an unclaimed user.
const CommentAuthorAssociation_MANNEQUIN CommentAuthorAssociation = "MANNEQUIN"

// CommentAuthorAssociation_COLLABORATOR: Author has been invited to collaborate on the repository.
const CommentAuthorAssociation_COLLABORATOR CommentAuthorAssociation = "COLLABORATOR"

// CommentAuthorAssociation_CONTRIBUTOR: Author has previously committed to the repository.
const CommentAuthorAssociation_CONTRIBUTOR CommentAuthorAssociation = "CONTRIBUTOR"

// CommentAuthorAssociation_FIRST_TIME_CONTRIBUTOR: Author has not previously committed to the repository.
const CommentAuthorAssociation_FIRST_TIME_CONTRIBUTOR CommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"

// CommentAuthorAssociation_FIRST_TIMER: Author has not previously committed to GitHub.
const CommentAuthorAssociation_FIRST_TIMER CommentAuthorAssociation = "FIRST_TIMER"

// CommentAuthorAssociation_NONE: Author has no association with the repository.
const CommentAuthorAssociation_NONE CommentAuthorAssociation = "NONE"

// CommentCannotUpdateReason (ENUM): The possible errors that will prevent a user from updating a comment.
type CommentCannotUpdateReason string

// CommentCannotUpdateReason_ARCHIVED: Unable to create comment because repository is archived.
const CommentCannotUpdateReason_ARCHIVED CommentCannotUpdateReason = "ARCHIVED"

// CommentCannotUpdateReason_INSUFFICIENT_ACCESS: You must be the author or have write access to this repository to update this comment.
const CommentCannotUpdateReason_INSUFFICIENT_ACCESS CommentCannotUpdateReason = "INSUFFICIENT_ACCESS"

// CommentCannotUpdateReason_LOCKED: Unable to create comment because issue is locked.
const CommentCannotUpdateReason_LOCKED CommentCannotUpdateReason = "LOCKED"

// CommentCannotUpdateReason_LOGIN_REQUIRED: You must be logged in to update this comment.
const CommentCannotUpdateReason_LOGIN_REQUIRED CommentCannotUpdateReason = "LOGIN_REQUIRED"

// CommentCannotUpdateReason_MAINTENANCE: Repository is under maintenance.
const CommentCannotUpdateReason_MAINTENANCE CommentCannotUpdateReason = "MAINTENANCE"

// CommentCannotUpdateReason_VERIFIED_EMAIL_REQUIRED: At least one email address must be verified to update this comment.
const CommentCannotUpdateReason_VERIFIED_EMAIL_REQUIRED CommentCannotUpdateReason = "VERIFIED_EMAIL_REQUIRED"

// CommentCannotUpdateReason_DENIED: You cannot update this comment.
const CommentCannotUpdateReason_DENIED CommentCannotUpdateReason = "DENIED"

// CommentDeletedEvent (OBJECT): Represents a 'comment_deleted' event on a given issue or pull request.
type CommentDeletedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DeletedCommentAuthor: The user who authored the deleted comment.
	DeletedCommentAuthor Actor `json:"deletedCommentAuthor,omitempty"`

	// Id: The Node ID of the CommentDeletedEvent object.
	Id ID `json:"id,omitempty"`
}

func (x *CommentDeletedEvent) GetActor() Actor                { return x.Actor }
func (x *CommentDeletedEvent) GetCreatedAt() DateTime         { return x.CreatedAt }
func (x *CommentDeletedEvent) GetDatabaseId() int             { return x.DatabaseId }
func (x *CommentDeletedEvent) GetDeletedCommentAuthor() Actor { return x.DeletedCommentAuthor }
func (x *CommentDeletedEvent) GetId() ID                      { return x.Id }

// Commit (OBJECT): Represents a Git commit.
type Commit struct {
	// AbbreviatedOid: An abbreviated version of the Git object ID.
	AbbreviatedOid string `json:"abbreviatedOid,omitempty"`

	// Additions: The number of additions in this commit.
	Additions int `json:"additions,omitempty"`

	// AssociatedPullRequests: The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy PullRequestOrder
	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests,omitempty"`

	// Author: Authorship details of the commit.
	Author *GitActor `json:"author,omitempty"`

	// AuthoredByCommitter: Check if the committer and the author match.
	AuthoredByCommitter bool `json:"authoredByCommitter,omitempty"`

	// AuthoredDate: The datetime when this commit was authored.
	AuthoredDate DateTime `json:"authoredDate,omitempty"`

	// Authors: The list of authors for this commit based on the git author and the Co-authored-by
	// message trailer. The git author will always be first.
	// .
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Authors *GitActorConnection `json:"authors,omitempty"`

	// Blame: Fetches `git blame` information.
	//
	// Query arguments:
	//   - path String!
	Blame *Blame `json:"blame,omitempty"`

	// ChangedFiles: We recommend using the `changedFilesIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
	//
	// Deprecated: We recommend using the `changedFilesIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
	ChangedFiles int `json:"changedFiles,omitempty"`

	// ChangedFilesIfAvailable: The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`.
	ChangedFilesIfAvailable int `json:"changedFilesIfAvailable,omitempty"`

	// CheckSuites: The check suites associated with a commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - filterBy CheckSuiteFilter
	CheckSuites *CheckSuiteConnection `json:"checkSuites,omitempty"`

	// Comments: Comments made on the commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *CommitCommentConnection `json:"comments,omitempty"`

	// CommitResourcePath: The HTTP path for this Git object.
	CommitResourcePath URI `json:"commitResourcePath,omitempty"`

	// CommitUrl: The HTTP URL for this Git object.
	CommitUrl URI `json:"commitUrl,omitempty"`

	// CommittedDate: The datetime when this commit was committed.
	CommittedDate DateTime `json:"committedDate,omitempty"`

	// CommittedViaWeb: Check if committed via GitHub web UI.
	CommittedViaWeb bool `json:"committedViaWeb,omitempty"`

	// Committer: Committer details of the commit.
	Committer *GitActor `json:"committer,omitempty"`

	// Deletions: The number of deletions in this commit.
	Deletions int `json:"deletions,omitempty"`

	// Deployments: The deployments associated with a commit.
	//
	// Query arguments:
	//   - environments [String!]
	//   - orderBy DeploymentOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Deployments *DeploymentConnection `json:"deployments,omitempty"`

	// File: The tree entry representing the file located at the given path.
	//
	// Query arguments:
	//   - path String!
	File *TreeEntry `json:"file,omitempty"`

	// History: The linear commit history starting from (and including) this commit, in the same order as `git log`.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - path String
	//   - author CommitAuthor
	//   - since GitTimestamp
	//   - until GitTimestamp
	History *CommitHistoryConnection `json:"history,omitempty"`

	// Id: The Node ID of the Commit object.
	Id ID `json:"id,omitempty"`

	// Message: The Git commit message.
	Message string `json:"message,omitempty"`

	// MessageBody: The Git commit message body.
	MessageBody string `json:"messageBody,omitempty"`

	// MessageBodyHTML: The commit message body rendered to HTML.
	MessageBodyHTML template.HTML `json:"messageBodyHTML,omitempty"`

	// MessageHeadline: The Git commit message headline.
	MessageHeadline string `json:"messageHeadline,omitempty"`

	// MessageHeadlineHTML: The commit message headline rendered to HTML.
	MessageHeadlineHTML template.HTML `json:"messageHeadlineHTML,omitempty"`

	// Oid: The Git object ID.
	Oid GitObjectID `json:"oid,omitempty"`

	// OnBehalfOf: The organization this commit was made on behalf of.
	OnBehalfOf *Organization `json:"onBehalfOf,omitempty"`

	// Parents: The parents of a commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Parents *CommitConnection `json:"parents,omitempty"`

	// PushedDate: The datetime when this commit was pushed.
	//
	// Deprecated: The datetime when this commit was pushed.
	PushedDate DateTime `json:"pushedDate,omitempty"`

	// Repository: The Repository this commit belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this commit.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Signature: Commit signing information, if present.
	Signature GitSignature `json:"signature,omitempty"`

	// Status: Status information for this commit.
	Status *Status `json:"status,omitempty"`

	// StatusCheckRollup: Check and Status rollup information for this commit.
	StatusCheckRollup *StatusCheckRollup `json:"statusCheckRollup,omitempty"`

	// Submodules: Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Submodules *SubmoduleConnection `json:"submodules,omitempty"`

	// TarballUrl: Returns a URL to download a tarball archive for a repository.
	// Note: For private repositories, these links are temporary and expire after five minutes.
	TarballUrl URI `json:"tarballUrl,omitempty"`

	// Tree: Commit's root Tree.
	Tree *Tree `json:"tree,omitempty"`

	// TreeResourcePath: The HTTP path for the tree of this commit.
	TreeResourcePath URI `json:"treeResourcePath,omitempty"`

	// TreeUrl: The HTTP URL for the tree of this commit.
	TreeUrl URI `json:"treeUrl,omitempty"`

	// Url: The HTTP URL for this commit.
	Url URI `json:"url,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`

	// ZipballUrl: Returns a URL to download a zipball archive for a repository.
	// Note: For private repositories, these links are temporary and expire after five minutes.
	ZipballUrl URI `json:"zipballUrl,omitempty"`
}

func (x *Commit) GetAbbreviatedOid() string                         { return x.AbbreviatedOid }
func (x *Commit) GetAdditions() int                                 { return x.Additions }
func (x *Commit) GetAssociatedPullRequests() *PullRequestConnection { return x.AssociatedPullRequests }
func (x *Commit) GetAuthor() *GitActor                              { return x.Author }
func (x *Commit) GetAuthoredByCommitter() bool                      { return x.AuthoredByCommitter }
func (x *Commit) GetAuthoredDate() DateTime                         { return x.AuthoredDate }
func (x *Commit) GetAuthors() *GitActorConnection                   { return x.Authors }
func (x *Commit) GetBlame() *Blame                                  { return x.Blame }
func (x *Commit) GetChangedFiles() int                              { return x.ChangedFiles }
func (x *Commit) GetChangedFilesIfAvailable() int                   { return x.ChangedFilesIfAvailable }
func (x *Commit) GetCheckSuites() *CheckSuiteConnection             { return x.CheckSuites }
func (x *Commit) GetComments() *CommitCommentConnection             { return x.Comments }
func (x *Commit) GetCommitResourcePath() URI                        { return x.CommitResourcePath }
func (x *Commit) GetCommitUrl() URI                                 { return x.CommitUrl }
func (x *Commit) GetCommittedDate() DateTime                        { return x.CommittedDate }
func (x *Commit) GetCommittedViaWeb() bool                          { return x.CommittedViaWeb }
func (x *Commit) GetCommitter() *GitActor                           { return x.Committer }
func (x *Commit) GetDeletions() int                                 { return x.Deletions }
func (x *Commit) GetDeployments() *DeploymentConnection             { return x.Deployments }
func (x *Commit) GetFile() *TreeEntry                               { return x.File }
func (x *Commit) GetHistory() *CommitHistoryConnection              { return x.History }
func (x *Commit) GetId() ID                                         { return x.Id }
func (x *Commit) GetMessage() string                                { return x.Message }
func (x *Commit) GetMessageBody() string                            { return x.MessageBody }
func (x *Commit) GetMessageBodyHTML() template.HTML                 { return x.MessageBodyHTML }
func (x *Commit) GetMessageHeadline() string                        { return x.MessageHeadline }
func (x *Commit) GetMessageHeadlineHTML() template.HTML             { return x.MessageHeadlineHTML }
func (x *Commit) GetOid() GitObjectID                               { return x.Oid }
func (x *Commit) GetOnBehalfOf() *Organization                      { return x.OnBehalfOf }
func (x *Commit) GetParents() *CommitConnection                     { return x.Parents }
func (x *Commit) GetPushedDate() DateTime                           { return x.PushedDate }
func (x *Commit) GetRepository() *Repository                        { return x.Repository }
func (x *Commit) GetResourcePath() URI                              { return x.ResourcePath }
func (x *Commit) GetSignature() GitSignature                        { return x.Signature }
func (x *Commit) GetStatus() *Status                                { return x.Status }
func (x *Commit) GetStatusCheckRollup() *StatusCheckRollup          { return x.StatusCheckRollup }
func (x *Commit) GetSubmodules() *SubmoduleConnection               { return x.Submodules }
func (x *Commit) GetTarballUrl() URI                                { return x.TarballUrl }
func (x *Commit) GetTree() *Tree                                    { return x.Tree }
func (x *Commit) GetTreeResourcePath() URI                          { return x.TreeResourcePath }
func (x *Commit) GetTreeUrl() URI                                   { return x.TreeUrl }
func (x *Commit) GetUrl() URI                                       { return x.Url }
func (x *Commit) GetViewerCanSubscribe() bool                       { return x.ViewerCanSubscribe }
func (x *Commit) GetViewerSubscription() SubscriptionState          { return x.ViewerSubscription }
func (x *Commit) GetZipballUrl() URI                                { return x.ZipballUrl }

// CommitAuthor (INPUT_OBJECT): Specifies an author for filtering Git commits.
type CommitAuthor struct {
	// Id: ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
	//
	// GraphQL type: ID
	Id ID `json:"id,omitempty"`

	// Emails: Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
	//
	// GraphQL type: [String!]
	Emails []string `json:"emails,omitempty"`
}

// CommitAuthorEmailPatternParameters (OBJECT): Parameters to be used for the commit_author_email_pattern rule.
type CommitAuthorEmailPatternParameters struct {
	// Name: How this rule will appear to users.
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	Pattern string `json:"pattern,omitempty"`
}

func (x *CommitAuthorEmailPatternParameters) GetName() string     { return x.Name }
func (x *CommitAuthorEmailPatternParameters) GetNegate() bool     { return x.Negate }
func (x *CommitAuthorEmailPatternParameters) GetOperator() string { return x.Operator }
func (x *CommitAuthorEmailPatternParameters) GetPattern() string  { return x.Pattern }

// CommitAuthorEmailPatternParametersInput (INPUT_OBJECT): Parameters to be used for the commit_author_email_pattern rule.
type CommitAuthorEmailPatternParametersInput struct {
	// Name: How this rule will appear to users.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	//
	// GraphQL type: Boolean
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	//
	// GraphQL type: String!
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	//
	// GraphQL type: String!
	Pattern string `json:"pattern,omitempty"`
}

// CommitComment (OBJECT): Represents a comment on a given Commit.
type CommitComment struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: Identifies the comment body.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// Commit: Identifies the commit associated with the comment, if the commit exists.
	Commit *Commit `json:"commit,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// Id: The Node ID of the CommitComment object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsMinimized: Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// MinimizedReason: Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason string `json:"minimizedReason,omitempty"`

	// Path: Identifies the file path associated with the comment.
	Path string `json:"path,omitempty"`

	// Position: Identifies the line position associated with the comment.
	Position int `json:"position,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path permalink for this commit comment.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL permalink for this commit comment.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanMinimize: Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`
}

func (x *CommitComment) GetAuthor() Actor                                { return x.Author }
func (x *CommitComment) GetAuthorAssociation() CommentAuthorAssociation  { return x.AuthorAssociation }
func (x *CommitComment) GetBody() string                                 { return x.Body }
func (x *CommitComment) GetBodyHTML() template.HTML                      { return x.BodyHTML }
func (x *CommitComment) GetBodyText() string                             { return x.BodyText }
func (x *CommitComment) GetCommit() *Commit                              { return x.Commit }
func (x *CommitComment) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *CommitComment) GetCreatedViaEmail() bool                        { return x.CreatedViaEmail }
func (x *CommitComment) GetDatabaseId() int                              { return x.DatabaseId }
func (x *CommitComment) GetEditor() Actor                                { return x.Editor }
func (x *CommitComment) GetId() ID                                       { return x.Id }
func (x *CommitComment) GetIncludesCreatedEdit() bool                    { return x.IncludesCreatedEdit }
func (x *CommitComment) GetIsMinimized() bool                            { return x.IsMinimized }
func (x *CommitComment) GetLastEditedAt() DateTime                       { return x.LastEditedAt }
func (x *CommitComment) GetMinimizedReason() string                      { return x.MinimizedReason }
func (x *CommitComment) GetPath() string                                 { return x.Path }
func (x *CommitComment) GetPosition() int                                { return x.Position }
func (x *CommitComment) GetPublishedAt() DateTime                        { return x.PublishedAt }
func (x *CommitComment) GetReactionGroups() []*ReactionGroup             { return x.ReactionGroups }
func (x *CommitComment) GetReactions() *ReactionConnection               { return x.Reactions }
func (x *CommitComment) GetRepository() *Repository                      { return x.Repository }
func (x *CommitComment) GetResourcePath() URI                            { return x.ResourcePath }
func (x *CommitComment) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *CommitComment) GetUrl() URI                                     { return x.Url }
func (x *CommitComment) GetUserContentEdits() *UserContentEditConnection { return x.UserContentEdits }
func (x *CommitComment) GetViewerCanDelete() bool                        { return x.ViewerCanDelete }
func (x *CommitComment) GetViewerCanMinimize() bool                      { return x.ViewerCanMinimize }
func (x *CommitComment) GetViewerCanReact() bool                         { return x.ViewerCanReact }
func (x *CommitComment) GetViewerCanUpdate() bool                        { return x.ViewerCanUpdate }
func (x *CommitComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *CommitComment) GetViewerDidAuthor() bool { return x.ViewerDidAuthor }

// CommitCommentConnection (OBJECT): The connection type for CommitComment.
type CommitCommentConnection struct {
	// Edges: A list of edges.
	Edges []*CommitCommentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CommitComment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CommitCommentConnection) GetEdges() []*CommitCommentEdge { return x.Edges }
func (x *CommitCommentConnection) GetNodes() []*CommitComment     { return x.Nodes }
func (x *CommitCommentConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *CommitCommentConnection) GetTotalCount() int             { return x.TotalCount }

// CommitCommentEdge (OBJECT): An edge in a connection.
type CommitCommentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CommitComment `json:"node,omitempty"`
}

func (x *CommitCommentEdge) GetCursor() string       { return x.Cursor }
func (x *CommitCommentEdge) GetNode() *CommitComment { return x.Node }

// CommitCommentThread (OBJECT): A thread of comments on a commit.
type CommitCommentThread struct {
	// Comments: The comments that exist in this thread.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *CommitCommentConnection `json:"comments,omitempty"`

	// Commit: The commit the comments were made on.
	Commit *Commit `json:"commit,omitempty"`

	// Id: The Node ID of the CommitCommentThread object.
	Id ID `json:"id,omitempty"`

	// Path: The file the comments were made on.
	Path string `json:"path,omitempty"`

	// Position: The position in the diff for the commit that the comment was made on.
	Position int `json:"position,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *CommitCommentThread) GetComments() *CommitCommentConnection { return x.Comments }
func (x *CommitCommentThread) GetCommit() *Commit                    { return x.Commit }
func (x *CommitCommentThread) GetId() ID                             { return x.Id }
func (x *CommitCommentThread) GetPath() string                       { return x.Path }
func (x *CommitCommentThread) GetPosition() int                      { return x.Position }
func (x *CommitCommentThread) GetRepository() *Repository            { return x.Repository }

// CommitConnection (OBJECT): The connection type for Commit.
type CommitConnection struct {
	// Edges: A list of edges.
	Edges []*CommitEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Commit `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CommitConnection) GetEdges() []*CommitEdge { return x.Edges }
func (x *CommitConnection) GetNodes() []*Commit     { return x.Nodes }
func (x *CommitConnection) GetPageInfo() *PageInfo  { return x.PageInfo }
func (x *CommitConnection) GetTotalCount() int      { return x.TotalCount }

// CommitContributionOrder (INPUT_OBJECT): Ordering options for commit contribution connections.
type CommitContributionOrder struct {
	// Field: The field by which to order commit contributions.
	//
	// GraphQL type: CommitContributionOrderField!
	Field CommitContributionOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// CommitContributionOrderField (ENUM): Properties by which commit contribution connections can be ordered.
type CommitContributionOrderField string

// CommitContributionOrderField_OCCURRED_AT: Order commit contributions by when they were made.
const CommitContributionOrderField_OCCURRED_AT CommitContributionOrderField = "OCCURRED_AT"

// CommitContributionOrderField_COMMIT_COUNT: Order commit contributions by how many commits they represent.
const CommitContributionOrderField_COMMIT_COUNT CommitContributionOrderField = "COMMIT_COUNT"

// CommitContributionsByRepository (OBJECT): This aggregates commits made by a user within one repository.
type CommitContributionsByRepository struct {
	// Contributions: The commit contributions, each representing a day.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy CommitContributionOrder
	Contributions *CreatedCommitContributionConnection `json:"contributions,omitempty"`

	// Repository: The repository in which the commits were made.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for the user's commits to the repository in this time range.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for the user's commits to the repository in this time range.
	Url URI `json:"url,omitempty"`
}

func (x *CommitContributionsByRepository) GetContributions() *CreatedCommitContributionConnection {
	return x.Contributions
}
func (x *CommitContributionsByRepository) GetRepository() *Repository { return x.Repository }
func (x *CommitContributionsByRepository) GetResourcePath() URI       { return x.ResourcePath }
func (x *CommitContributionsByRepository) GetUrl() URI                { return x.Url }

// CommitEdge (OBJECT): An edge in a connection.
type CommitEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Commit `json:"node,omitempty"`
}

func (x *CommitEdge) GetCursor() string { return x.Cursor }
func (x *CommitEdge) GetNode() *Commit  { return x.Node }

// CommitHistoryConnection (OBJECT): The connection type for Commit.
type CommitHistoryConnection struct {
	// Edges: A list of edges.
	Edges []*CommitEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Commit `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CommitHistoryConnection) GetEdges() []*CommitEdge { return x.Edges }
func (x *CommitHistoryConnection) GetNodes() []*Commit     { return x.Nodes }
func (x *CommitHistoryConnection) GetPageInfo() *PageInfo  { return x.PageInfo }
func (x *CommitHistoryConnection) GetTotalCount() int      { return x.TotalCount }

// CommitMessage (INPUT_OBJECT): A message to include with a new commit.
type CommitMessage struct {
	// Headline: The headline of the message.
	//
	// GraphQL type: String!
	Headline string `json:"headline,omitempty"`

	// Body: The body of the message.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`
}

// CommitMessagePatternParameters (OBJECT): Parameters to be used for the commit_message_pattern rule.
type CommitMessagePatternParameters struct {
	// Name: How this rule will appear to users.
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	Pattern string `json:"pattern,omitempty"`
}

func (x *CommitMessagePatternParameters) GetName() string     { return x.Name }
func (x *CommitMessagePatternParameters) GetNegate() bool     { return x.Negate }
func (x *CommitMessagePatternParameters) GetOperator() string { return x.Operator }
func (x *CommitMessagePatternParameters) GetPattern() string  { return x.Pattern }

// CommitMessagePatternParametersInput (INPUT_OBJECT): Parameters to be used for the commit_message_pattern rule.
type CommitMessagePatternParametersInput struct {
	// Name: How this rule will appear to users.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	//
	// GraphQL type: Boolean
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	//
	// GraphQL type: String!
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	//
	// GraphQL type: String!
	Pattern string `json:"pattern,omitempty"`
}

// CommittableBranch (INPUT_OBJECT): A git ref for a commit to be appended to.
//
// The ref must be a branch, i.e. its fully qualified name must start
// with `refs/heads/` (although the input is not required to be fully
// qualified).
//
// The Ref may be specified by its global node ID or by the
// `repositoryNameWithOwner` and `branchName`.
//
// ### Examples
//
// Specify a branch using a global node ID:
//
//	{ "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
//
// Specify a branch using `repositoryNameWithOwner` and `branchName`:
//
//	{
//	  "repositoryNameWithOwner": "github/graphql-client",
//	  "branchName": "main"
//	}
//
// .
type CommittableBranch struct {
	// Id: The Node ID of the Ref to be updated.
	//
	// GraphQL type: ID
	Id ID `json:"id,omitempty"`

	// RepositoryNameWithOwner: The nameWithOwner of the repository to commit to.
	//
	// GraphQL type: String
	RepositoryNameWithOwner string `json:"repositoryNameWithOwner,omitempty"`

	// BranchName: The unqualified name of the branch to append the commit to.
	//
	// GraphQL type: String
	BranchName string `json:"branchName,omitempty"`
}

// CommitterEmailPatternParameters (OBJECT): Parameters to be used for the committer_email_pattern rule.
type CommitterEmailPatternParameters struct {
	// Name: How this rule will appear to users.
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	Pattern string `json:"pattern,omitempty"`
}

func (x *CommitterEmailPatternParameters) GetName() string     { return x.Name }
func (x *CommitterEmailPatternParameters) GetNegate() bool     { return x.Negate }
func (x *CommitterEmailPatternParameters) GetOperator() string { return x.Operator }
func (x *CommitterEmailPatternParameters) GetPattern() string  { return x.Pattern }

// CommitterEmailPatternParametersInput (INPUT_OBJECT): Parameters to be used for the committer_email_pattern rule.
type CommitterEmailPatternParametersInput struct {
	// Name: How this rule will appear to users.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	//
	// GraphQL type: Boolean
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	//
	// GraphQL type: String!
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	//
	// GraphQL type: String!
	Pattern string `json:"pattern,omitempty"`
}

// Comparison (OBJECT): Represents a comparison between two commit revisions.
type Comparison struct {
	// AheadBy: The number of commits ahead of the base branch.
	AheadBy int `json:"aheadBy,omitempty"`

	// BaseTarget: The base revision of this comparison.
	BaseTarget GitObject `json:"baseTarget,omitempty"`

	// BehindBy: The number of commits behind the base branch.
	BehindBy int `json:"behindBy,omitempty"`

	// Commits: The commits which compose this comparison.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Commits *ComparisonCommitConnection `json:"commits,omitempty"`

	// HeadTarget: The head revision of this comparison.
	HeadTarget GitObject `json:"headTarget,omitempty"`

	// Id: The Node ID of the Comparison object.
	Id ID `json:"id,omitempty"`

	// Status: The status of this comparison.
	Status ComparisonStatus `json:"status,omitempty"`
}

func (x *Comparison) GetAheadBy() int                         { return x.AheadBy }
func (x *Comparison) GetBaseTarget() GitObject                { return x.BaseTarget }
func (x *Comparison) GetBehindBy() int                        { return x.BehindBy }
func (x *Comparison) GetCommits() *ComparisonCommitConnection { return x.Commits }
func (x *Comparison) GetHeadTarget() GitObject                { return x.HeadTarget }
func (x *Comparison) GetId() ID                               { return x.Id }
func (x *Comparison) GetStatus() ComparisonStatus             { return x.Status }

// ComparisonCommitConnection (OBJECT): The connection type for Commit.
type ComparisonCommitConnection struct {
	// AuthorCount: The total count of authors and co-authors across all commits.
	AuthorCount int `json:"authorCount,omitempty"`

	// Edges: A list of edges.
	Edges []*CommitEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Commit `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ComparisonCommitConnection) GetAuthorCount() int     { return x.AuthorCount }
func (x *ComparisonCommitConnection) GetEdges() []*CommitEdge { return x.Edges }
func (x *ComparisonCommitConnection) GetNodes() []*Commit     { return x.Nodes }
func (x *ComparisonCommitConnection) GetPageInfo() *PageInfo  { return x.PageInfo }
func (x *ComparisonCommitConnection) GetTotalCount() int      { return x.TotalCount }

// ComparisonStatus (ENUM): The status of a git comparison between two refs.
type ComparisonStatus string

// ComparisonStatus_DIVERGED: The head ref is both ahead and behind of the base ref, indicating git history has diverged.
const ComparisonStatus_DIVERGED ComparisonStatus = "DIVERGED"

// ComparisonStatus_AHEAD: The head ref is ahead of the base ref.
const ComparisonStatus_AHEAD ComparisonStatus = "AHEAD"

// ComparisonStatus_BEHIND: The head ref is behind the base ref.
const ComparisonStatus_BEHIND ComparisonStatus = "BEHIND"

// ComparisonStatus_IDENTICAL: The head ref and base ref are identical.
const ComparisonStatus_IDENTICAL ComparisonStatus = "IDENTICAL"

// ConnectedEvent (OBJECT): Represents a 'connected' event on a given issue or pull request.
type ConnectedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ConnectedEvent object.
	Id ID `json:"id,omitempty"`

	// IsCrossRepository: Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`

	// Source: Issue or pull request that made the reference.
	Source ReferencedSubject `json:"source,omitempty"`

	// Subject: Issue or pull request which was connected.
	Subject ReferencedSubject `json:"subject,omitempty"`
}

func (x *ConnectedEvent) GetActor() Actor               { return x.Actor }
func (x *ConnectedEvent) GetCreatedAt() DateTime        { return x.CreatedAt }
func (x *ConnectedEvent) GetId() ID                     { return x.Id }
func (x *ConnectedEvent) GetIsCrossRepository() bool    { return x.IsCrossRepository }
func (x *ConnectedEvent) GetSource() ReferencedSubject  { return x.Source }
func (x *ConnectedEvent) GetSubject() ReferencedSubject { return x.Subject }

// ContributingGuidelines (OBJECT): The Contributing Guidelines for a repository.
type ContributingGuidelines struct {
	// Body: The body of the Contributing Guidelines.
	Body string `json:"body,omitempty"`

	// ResourcePath: The HTTP path for the Contributing Guidelines.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for the Contributing Guidelines.
	Url URI `json:"url,omitempty"`
}

func (x *ContributingGuidelines) GetBody() string      { return x.Body }
func (x *ContributingGuidelines) GetResourcePath() URI { return x.ResourcePath }
func (x *ContributingGuidelines) GetUrl() URI          { return x.Url }

// Contribution (INTERFACE): Represents a contribution a user made on GitHub, such as opening an issue.
// Contribution_Interface: Represents a contribution a user made on GitHub, such as opening an issue.
//
// Possible types:
//
//   - *CreatedCommitContribution
//   - *CreatedIssueContribution
//   - *CreatedPullRequestContribution
//   - *CreatedPullRequestReviewContribution
//   - *CreatedRepositoryContribution
//   - *JoinedGitHubContribution
//   - *RestrictedContribution
type Contribution_Interface interface {
	isContribution()
	GetIsRestricted() bool
	GetOccurredAt() DateTime
	GetResourcePath() URI
	GetUrl() URI
	GetUser() *User
}

func (*CreatedCommitContribution) isContribution()            {}
func (*CreatedIssueContribution) isContribution()             {}
func (*CreatedPullRequestContribution) isContribution()       {}
func (*CreatedPullRequestReviewContribution) isContribution() {}
func (*CreatedRepositoryContribution) isContribution()        {}
func (*JoinedGitHubContribution) isContribution()             {}
func (*RestrictedContribution) isContribution()               {}

type Contribution struct {
	Interface Contribution_Interface
}

func (x *Contribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Contribution) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Contribution", info.Typename)
	case "CreatedCommitContribution":
		x.Interface = new(CreatedCommitContribution)
	case "CreatedIssueContribution":
		x.Interface = new(CreatedIssueContribution)
	case "CreatedPullRequestContribution":
		x.Interface = new(CreatedPullRequestContribution)
	case "CreatedPullRequestReviewContribution":
		x.Interface = new(CreatedPullRequestReviewContribution)
	case "CreatedRepositoryContribution":
		x.Interface = new(CreatedRepositoryContribution)
	case "JoinedGitHubContribution":
		x.Interface = new(JoinedGitHubContribution)
	case "RestrictedContribution":
		x.Interface = new(RestrictedContribution)
	}
	return json.Unmarshal(js, x.Interface)
}

// ContributionCalendar (OBJECT): A calendar of contributions made on GitHub by a user.
type ContributionCalendar struct {
	// Colors: A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
	Colors []string `json:"colors,omitempty"`

	// IsHalloween: Determine if the color set was chosen because it's currently Halloween.
	IsHalloween bool `json:"isHalloween,omitempty"`

	// Months: A list of the months of contributions in this calendar.
	Months []*ContributionCalendarMonth `json:"months,omitempty"`

	// TotalContributions: The count of total contributions in the calendar.
	TotalContributions int `json:"totalContributions,omitempty"`

	// Weeks: A list of the weeks of contributions in this calendar.
	Weeks []*ContributionCalendarWeek `json:"weeks,omitempty"`
}

func (x *ContributionCalendar) GetColors() []string                     { return x.Colors }
func (x *ContributionCalendar) GetIsHalloween() bool                    { return x.IsHalloween }
func (x *ContributionCalendar) GetMonths() []*ContributionCalendarMonth { return x.Months }
func (x *ContributionCalendar) GetTotalContributions() int              { return x.TotalContributions }
func (x *ContributionCalendar) GetWeeks() []*ContributionCalendarWeek   { return x.Weeks }

// ContributionCalendarDay (OBJECT): Represents a single day of contributions on GitHub by a user.
type ContributionCalendarDay struct {
	// Color: The hex color code that represents how many contributions were made on this day compared to others in the calendar.
	Color string `json:"color,omitempty"`

	// ContributionCount: How many contributions were made by the user on this day.
	ContributionCount int `json:"contributionCount,omitempty"`

	// ContributionLevel: Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
	ContributionLevel ContributionLevel `json:"contributionLevel,omitempty"`

	// Date: The day this square represents.
	Date Date `json:"date,omitempty"`

	// Weekday: A number representing which day of the week this square represents, e.g., 1 is Monday.
	Weekday int `json:"weekday,omitempty"`
}

func (x *ContributionCalendarDay) GetColor() string          { return x.Color }
func (x *ContributionCalendarDay) GetContributionCount() int { return x.ContributionCount }
func (x *ContributionCalendarDay) GetContributionLevel() ContributionLevel {
	return x.ContributionLevel
}
func (x *ContributionCalendarDay) GetDate() Date   { return x.Date }
func (x *ContributionCalendarDay) GetWeekday() int { return x.Weekday }

// ContributionCalendarMonth (OBJECT): A month of contributions in a user's contribution graph.
type ContributionCalendarMonth struct {
	// FirstDay: The date of the first day of this month.
	FirstDay Date `json:"firstDay,omitempty"`

	// Name: The name of the month.
	Name string `json:"name,omitempty"`

	// TotalWeeks: How many weeks started in this month.
	TotalWeeks int `json:"totalWeeks,omitempty"`

	// Year: The year the month occurred in.
	Year int `json:"year,omitempty"`
}

func (x *ContributionCalendarMonth) GetFirstDay() Date  { return x.FirstDay }
func (x *ContributionCalendarMonth) GetName() string    { return x.Name }
func (x *ContributionCalendarMonth) GetTotalWeeks() int { return x.TotalWeeks }
func (x *ContributionCalendarMonth) GetYear() int       { return x.Year }

// ContributionCalendarWeek (OBJECT): A week of contributions in a user's contribution graph.
type ContributionCalendarWeek struct {
	// ContributionDays: The days of contributions in this week.
	ContributionDays []*ContributionCalendarDay `json:"contributionDays,omitempty"`

	// FirstDay: The date of the earliest square in this week.
	FirstDay Date `json:"firstDay,omitempty"`
}

func (x *ContributionCalendarWeek) GetContributionDays() []*ContributionCalendarDay {
	return x.ContributionDays
}
func (x *ContributionCalendarWeek) GetFirstDay() Date { return x.FirstDay }

// ContributionLevel (ENUM): Varying levels of contributions from none to many.
type ContributionLevel string

// ContributionLevel_NONE: No contributions occurred.
const ContributionLevel_NONE ContributionLevel = "NONE"

// ContributionLevel_FIRST_QUARTILE: Lowest 25% of days of contributions.
const ContributionLevel_FIRST_QUARTILE ContributionLevel = "FIRST_QUARTILE"

// ContributionLevel_SECOND_QUARTILE: Second lowest 25% of days of contributions. More contributions than the first quartile.
const ContributionLevel_SECOND_QUARTILE ContributionLevel = "SECOND_QUARTILE"

// ContributionLevel_THIRD_QUARTILE: Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
const ContributionLevel_THIRD_QUARTILE ContributionLevel = "THIRD_QUARTILE"

// ContributionLevel_FOURTH_QUARTILE: Highest 25% of days of contributions. More contributions than the third quartile.
const ContributionLevel_FOURTH_QUARTILE ContributionLevel = "FOURTH_QUARTILE"

// ContributionOrder (INPUT_OBJECT): Ordering options for contribution connections.
type ContributionOrder struct {
	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ContributionsCollection (OBJECT): A contributions collection aggregates contributions such as opened issues and commits created by a user.
type ContributionsCollection struct {
	// CommitContributionsByRepository: Commit contributions made by the user, grouped by repository.
	//
	// Query arguments:
	//   - maxRepositories Int
	CommitContributionsByRepository []*CommitContributionsByRepository `json:"commitContributionsByRepository,omitempty"`

	// ContributionCalendar: A calendar of this user's contributions on GitHub.
	ContributionCalendar *ContributionCalendar `json:"contributionCalendar,omitempty"`

	// ContributionYears: The years the user has been making contributions with the most recent year first.
	ContributionYears []int `json:"contributionYears,omitempty"`

	// DoesEndInCurrentMonth: Determine if this collection's time span ends in the current month.
	// .
	DoesEndInCurrentMonth bool `json:"doesEndInCurrentMonth,omitempty"`

	// EarliestRestrictedContributionDate: The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
	EarliestRestrictedContributionDate Date `json:"earliestRestrictedContributionDate,omitempty"`

	// EndedAt: The ending date and time of this collection.
	EndedAt DateTime `json:"endedAt,omitempty"`

	// FirstIssueContribution: The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
	FirstIssueContribution CreatedIssueOrRestrictedContribution `json:"firstIssueContribution,omitempty"`

	// FirstPullRequestContribution: The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
	FirstPullRequestContribution CreatedPullRequestOrRestrictedContribution `json:"firstPullRequestContribution,omitempty"`

	// FirstRepositoryContribution: The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
	FirstRepositoryContribution CreatedRepositoryOrRestrictedContribution `json:"firstRepositoryContribution,omitempty"`

	// HasActivityInThePast: Does the user have any more activity in the timeline that occurred prior to the collection's time range?.
	HasActivityInThePast bool `json:"hasActivityInThePast,omitempty"`

	// HasAnyContributions: Determine if there are any contributions in this collection.
	HasAnyContributions bool `json:"hasAnyContributions,omitempty"`

	// HasAnyRestrictedContributions: Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
	HasAnyRestrictedContributions bool `json:"hasAnyRestrictedContributions,omitempty"`

	// IsSingleDay: Whether or not the collector's time span is all within the same day.
	IsSingleDay bool `json:"isSingleDay,omitempty"`

	// IssueContributions: A list of issues the user opened.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	//   - orderBy ContributionOrder
	IssueContributions *CreatedIssueContributionConnection `json:"issueContributions,omitempty"`

	// IssueContributionsByRepository: Issue contributions made by the user, grouped by repository.
	//
	// Query arguments:
	//   - maxRepositories Int
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	IssueContributionsByRepository []*IssueContributionsByRepository `json:"issueContributionsByRepository,omitempty"`

	// JoinedGitHubContribution: When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
	JoinedGitHubContribution *JoinedGitHubContribution `json:"joinedGitHubContribution,omitempty"`

	// LatestRestrictedContributionDate: The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
	LatestRestrictedContributionDate Date `json:"latestRestrictedContributionDate,omitempty"`

	// MostRecentCollectionWithActivity: When this collection's time range does not include any activity from the user, use this
	// to get a different collection from an earlier time range that does have activity.
	// .
	MostRecentCollectionWithActivity *ContributionsCollection `json:"mostRecentCollectionWithActivity,omitempty"`

	// MostRecentCollectionWithoutActivity: Returns a different contributions collection from an earlier time range than this one
	// that does not have any contributions.
	// .
	MostRecentCollectionWithoutActivity *ContributionsCollection `json:"mostRecentCollectionWithoutActivity,omitempty"`

	// PopularIssueContribution: The issue the user opened on GitHub that received the most comments in the specified
	// time frame.
	// .
	PopularIssueContribution *CreatedIssueContribution `json:"popularIssueContribution,omitempty"`

	// PopularPullRequestContribution: The pull request the user opened on GitHub that received the most comments in the
	// specified time frame.
	// .
	PopularPullRequestContribution *CreatedPullRequestContribution `json:"popularPullRequestContribution,omitempty"`

	// PullRequestContributions: Pull request contributions made by the user.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	//   - orderBy ContributionOrder
	PullRequestContributions *CreatedPullRequestContributionConnection `json:"pullRequestContributions,omitempty"`

	// PullRequestContributionsByRepository: Pull request contributions made by the user, grouped by repository.
	//
	// Query arguments:
	//   - maxRepositories Int
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	PullRequestContributionsByRepository []*PullRequestContributionsByRepository `json:"pullRequestContributionsByRepository,omitempty"`

	// PullRequestReviewContributions: Pull request review contributions made by the user. Returns the most recently
	// submitted review for each PR reviewed by the user.
	// .
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ContributionOrder
	PullRequestReviewContributions *CreatedPullRequestReviewContributionConnection `json:"pullRequestReviewContributions,omitempty"`

	// PullRequestReviewContributionsByRepository: Pull request review contributions made by the user, grouped by repository.
	//
	// Query arguments:
	//   - maxRepositories Int
	PullRequestReviewContributionsByRepository []*PullRequestReviewContributionsByRepository `json:"pullRequestReviewContributionsByRepository,omitempty"`

	// RepositoryContributions: A list of repositories owned by the user that the user created in this time range.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - excludeFirst Boolean
	//   - orderBy ContributionOrder
	RepositoryContributions *CreatedRepositoryContributionConnection `json:"repositoryContributions,omitempty"`

	// RestrictedContributionsCount: A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
	RestrictedContributionsCount int `json:"restrictedContributionsCount,omitempty"`

	// StartedAt: The beginning date and time of this collection.
	StartedAt DateTime `json:"startedAt,omitempty"`

	// TotalCommitContributions: How many commits were made by the user in this time span.
	TotalCommitContributions int `json:"totalCommitContributions,omitempty"`

	// TotalIssueContributions: How many issues the user opened.
	//
	// Query arguments:
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	TotalIssueContributions int `json:"totalIssueContributions,omitempty"`

	// TotalPullRequestContributions: How many pull requests the user opened.
	//
	// Query arguments:
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	TotalPullRequestContributions int `json:"totalPullRequestContributions,omitempty"`

	// TotalPullRequestReviewContributions: How many pull request reviews the user left.
	TotalPullRequestReviewContributions int `json:"totalPullRequestReviewContributions,omitempty"`

	// TotalRepositoriesWithContributedCommits: How many different repositories the user committed to.
	TotalRepositoriesWithContributedCommits int `json:"totalRepositoriesWithContributedCommits,omitempty"`

	// TotalRepositoriesWithContributedIssues: How many different repositories the user opened issues in.
	//
	// Query arguments:
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	TotalRepositoriesWithContributedIssues int `json:"totalRepositoriesWithContributedIssues,omitempty"`

	// TotalRepositoriesWithContributedPullRequestReviews: How many different repositories the user left pull request reviews in.
	TotalRepositoriesWithContributedPullRequestReviews int `json:"totalRepositoriesWithContributedPullRequestReviews,omitempty"`

	// TotalRepositoriesWithContributedPullRequests: How many different repositories the user opened pull requests in.
	//
	// Query arguments:
	//   - excludeFirst Boolean
	//   - excludePopular Boolean
	TotalRepositoriesWithContributedPullRequests int `json:"totalRepositoriesWithContributedPullRequests,omitempty"`

	// TotalRepositoryContributions: How many repositories the user created.
	//
	// Query arguments:
	//   - excludeFirst Boolean
	TotalRepositoryContributions int `json:"totalRepositoryContributions,omitempty"`

	// User: The user who made the contributions in this collection.
	User *User `json:"user,omitempty"`
}

func (x *ContributionsCollection) GetCommitContributionsByRepository() []*CommitContributionsByRepository {
	return x.CommitContributionsByRepository
}
func (x *ContributionsCollection) GetContributionCalendar() *ContributionCalendar {
	return x.ContributionCalendar
}
func (x *ContributionsCollection) GetContributionYears() []int    { return x.ContributionYears }
func (x *ContributionsCollection) GetDoesEndInCurrentMonth() bool { return x.DoesEndInCurrentMonth }
func (x *ContributionsCollection) GetEarliestRestrictedContributionDate() Date {
	return x.EarliestRestrictedContributionDate
}
func (x *ContributionsCollection) GetEndedAt() DateTime { return x.EndedAt }
func (x *ContributionsCollection) GetFirstIssueContribution() CreatedIssueOrRestrictedContribution {
	return x.FirstIssueContribution
}
func (x *ContributionsCollection) GetFirstPullRequestContribution() CreatedPullRequestOrRestrictedContribution {
	return x.FirstPullRequestContribution
}
func (x *ContributionsCollection) GetFirstRepositoryContribution() CreatedRepositoryOrRestrictedContribution {
	return x.FirstRepositoryContribution
}
func (x *ContributionsCollection) GetHasActivityInThePast() bool { return x.HasActivityInThePast }
func (x *ContributionsCollection) GetHasAnyContributions() bool  { return x.HasAnyContributions }
func (x *ContributionsCollection) GetHasAnyRestrictedContributions() bool {
	return x.HasAnyRestrictedContributions
}
func (x *ContributionsCollection) GetIsSingleDay() bool { return x.IsSingleDay }
func (x *ContributionsCollection) GetIssueContributions() *CreatedIssueContributionConnection {
	return x.IssueContributions
}
func (x *ContributionsCollection) GetIssueContributionsByRepository() []*IssueContributionsByRepository {
	return x.IssueContributionsByRepository
}
func (x *ContributionsCollection) GetJoinedGitHubContribution() *JoinedGitHubContribution {
	return x.JoinedGitHubContribution
}
func (x *ContributionsCollection) GetLatestRestrictedContributionDate() Date {
	return x.LatestRestrictedContributionDate
}
func (x *ContributionsCollection) GetMostRecentCollectionWithActivity() *ContributionsCollection {
	return x.MostRecentCollectionWithActivity
}
func (x *ContributionsCollection) GetMostRecentCollectionWithoutActivity() *ContributionsCollection {
	return x.MostRecentCollectionWithoutActivity
}
func (x *ContributionsCollection) GetPopularIssueContribution() *CreatedIssueContribution {
	return x.PopularIssueContribution
}
func (x *ContributionsCollection) GetPopularPullRequestContribution() *CreatedPullRequestContribution {
	return x.PopularPullRequestContribution
}
func (x *ContributionsCollection) GetPullRequestContributions() *CreatedPullRequestContributionConnection {
	return x.PullRequestContributions
}
func (x *ContributionsCollection) GetPullRequestContributionsByRepository() []*PullRequestContributionsByRepository {
	return x.PullRequestContributionsByRepository
}
func (x *ContributionsCollection) GetPullRequestReviewContributions() *CreatedPullRequestReviewContributionConnection {
	return x.PullRequestReviewContributions
}
func (x *ContributionsCollection) GetPullRequestReviewContributionsByRepository() []*PullRequestReviewContributionsByRepository {
	return x.PullRequestReviewContributionsByRepository
}
func (x *ContributionsCollection) GetRepositoryContributions() *CreatedRepositoryContributionConnection {
	return x.RepositoryContributions
}
func (x *ContributionsCollection) GetRestrictedContributionsCount() int {
	return x.RestrictedContributionsCount
}
func (x *ContributionsCollection) GetStartedAt() DateTime { return x.StartedAt }
func (x *ContributionsCollection) GetTotalCommitContributions() int {
	return x.TotalCommitContributions
}
func (x *ContributionsCollection) GetTotalIssueContributions() int { return x.TotalIssueContributions }
func (x *ContributionsCollection) GetTotalPullRequestContributions() int {
	return x.TotalPullRequestContributions
}
func (x *ContributionsCollection) GetTotalPullRequestReviewContributions() int {
	return x.TotalPullRequestReviewContributions
}
func (x *ContributionsCollection) GetTotalRepositoriesWithContributedCommits() int {
	return x.TotalRepositoriesWithContributedCommits
}
func (x *ContributionsCollection) GetTotalRepositoriesWithContributedIssues() int {
	return x.TotalRepositoriesWithContributedIssues
}
func (x *ContributionsCollection) GetTotalRepositoriesWithContributedPullRequestReviews() int {
	return x.TotalRepositoriesWithContributedPullRequestReviews
}
func (x *ContributionsCollection) GetTotalRepositoriesWithContributedPullRequests() int {
	return x.TotalRepositoriesWithContributedPullRequests
}
func (x *ContributionsCollection) GetTotalRepositoryContributions() int {
	return x.TotalRepositoryContributions
}
func (x *ContributionsCollection) GetUser() *User { return x.User }

// ConvertProjectCardNoteToIssueInput (INPUT_OBJECT): Autogenerated input type of ConvertProjectCardNoteToIssue.
type ConvertProjectCardNoteToIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectCardId: The ProjectCard ID to convert.
	//
	// GraphQL type: ID!
	ProjectCardId ID `json:"projectCardId,omitempty"`

	// RepositoryId: The ID of the repository to create the issue in.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Title: The title of the newly created issue. Defaults to the card's note text.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The body of the newly created issue.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`
}

// ConvertProjectCardNoteToIssuePayload (OBJECT): Autogenerated return type of ConvertProjectCardNoteToIssue.
type ConvertProjectCardNoteToIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectCard: The updated ProjectCard.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`
}

func (x *ConvertProjectCardNoteToIssuePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *ConvertProjectCardNoteToIssuePayload) GetProjectCard() *ProjectCard { return x.ProjectCard }

// ConvertProjectV2DraftIssueItemToIssueInput (INPUT_OBJECT): Autogenerated input type of ConvertProjectV2DraftIssueItemToIssue.
type ConvertProjectV2DraftIssueItemToIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ItemId: The ID of the draft issue ProjectV2Item to convert.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`

	// RepositoryId: The ID of the repository to create the issue in.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// ConvertProjectV2DraftIssueItemToIssuePayload (OBJECT): Autogenerated return type of ConvertProjectV2DraftIssueItemToIssue.
type ConvertProjectV2DraftIssueItemToIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Item: The updated project item.
	Item *ProjectV2Item `json:"item,omitempty"`
}

func (x *ConvertProjectV2DraftIssueItemToIssuePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *ConvertProjectV2DraftIssueItemToIssuePayload) GetItem() *ProjectV2Item { return x.Item }

// ConvertPullRequestToDraftInput (INPUT_OBJECT): Autogenerated input type of ConvertPullRequestToDraft.
type ConvertPullRequestToDraftInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to convert to draft.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`
}

// ConvertPullRequestToDraftPayload (OBJECT): Autogenerated return type of ConvertPullRequestToDraft.
type ConvertPullRequestToDraftPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that is now a draft.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *ConvertPullRequestToDraftPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *ConvertPullRequestToDraftPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// ConvertToDraftEvent (OBJECT): Represents a 'convert_to_draft' event on a given pull request.
type ConvertToDraftEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ConvertToDraftEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ResourcePath: The HTTP path for this convert to draft event.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this convert to draft event.
	Url URI `json:"url,omitempty"`
}

func (x *ConvertToDraftEvent) GetActor() Actor              { return x.Actor }
func (x *ConvertToDraftEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *ConvertToDraftEvent) GetId() ID                    { return x.Id }
func (x *ConvertToDraftEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *ConvertToDraftEvent) GetResourcePath() URI         { return x.ResourcePath }
func (x *ConvertToDraftEvent) GetUrl() URI                  { return x.Url }

// ConvertedNoteToIssueEvent (OBJECT): Represents a 'converted_note_to_issue' event on a given issue or pull request.
type ConvertedNoteToIssueEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ConvertedNoteToIssueEvent object.
	Id ID `json:"id,omitempty"`

	// Project: Project referenced by event.
	Project *Project `json:"project,omitempty"`

	// ProjectCard: Project card referenced by this project event.
	//
	// Deprecated: Project card referenced by this project event.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`

	// ProjectColumnName: Column name referenced by this project event.
	ProjectColumnName string `json:"projectColumnName,omitempty"`
}

func (x *ConvertedNoteToIssueEvent) GetActor() Actor              { return x.Actor }
func (x *ConvertedNoteToIssueEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *ConvertedNoteToIssueEvent) GetDatabaseId() int           { return x.DatabaseId }
func (x *ConvertedNoteToIssueEvent) GetId() ID                    { return x.Id }
func (x *ConvertedNoteToIssueEvent) GetProject() *Project         { return x.Project }
func (x *ConvertedNoteToIssueEvent) GetProjectCard() *ProjectCard { return x.ProjectCard }
func (x *ConvertedNoteToIssueEvent) GetProjectColumnName() string { return x.ProjectColumnName }

// ConvertedToDiscussionEvent (OBJECT): Represents a 'converted_to_discussion' event on a given issue.
type ConvertedToDiscussionEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Discussion: The discussion that the issue was converted into.
	Discussion *Discussion `json:"discussion,omitempty"`

	// Id: The Node ID of the ConvertedToDiscussionEvent object.
	Id ID `json:"id,omitempty"`
}

func (x *ConvertedToDiscussionEvent) GetActor() Actor            { return x.Actor }
func (x *ConvertedToDiscussionEvent) GetCreatedAt() DateTime     { return x.CreatedAt }
func (x *ConvertedToDiscussionEvent) GetDiscussion() *Discussion { return x.Discussion }
func (x *ConvertedToDiscussionEvent) GetId() ID                  { return x.Id }

// CopilotEndpoints (OBJECT): Copilot endpoint information.
type CopilotEndpoints struct {
	// Api: Copilot API endpoint.
	Api string `json:"api,omitempty"`

	// OriginTracker: Copilot origin tracker endpoint.
	OriginTracker string `json:"originTracker,omitempty"`

	// Proxy: Copilot proxy endpoint.
	Proxy string `json:"proxy,omitempty"`

	// Telemetry: Copilot telemetry endpoint.
	Telemetry string `json:"telemetry,omitempty"`
}

func (x *CopilotEndpoints) GetApi() string           { return x.Api }
func (x *CopilotEndpoints) GetOriginTracker() string { return x.OriginTracker }
func (x *CopilotEndpoints) GetProxy() string         { return x.Proxy }
func (x *CopilotEndpoints) GetTelemetry() string     { return x.Telemetry }

// CopyProjectV2Input (INPUT_OBJECT): Autogenerated input type of CopyProjectV2.
type CopyProjectV2Input struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the source Project to copy.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// OwnerId: The owner ID of the new project.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// Title: The title of the project.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// IncludeDraftIssues: Include draft issues in the new project.
	//
	// GraphQL type: Boolean
	IncludeDraftIssues bool `json:"includeDraftIssues,omitempty"`
}

// CopyProjectV2Payload (OBJECT): Autogenerated return type of CopyProjectV2.
type CopyProjectV2Payload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2: The copied project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *CopyProjectV2Payload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CopyProjectV2Payload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// CreateAttributionInvitationInput (INPUT_OBJECT): Autogenerated input type of CreateAttributionInvitation.
type CreateAttributionInvitationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The Node ID of the owner scoping the reattributable data.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// SourceId: The Node ID of the account owning the data to reattribute.
	//
	// GraphQL type: ID!
	SourceId ID `json:"sourceId,omitempty"`

	// TargetId: The Node ID of the account which may claim the data.
	//
	// GraphQL type: ID!
	TargetId ID `json:"targetId,omitempty"`
}

// CreateAttributionInvitationPayload (OBJECT): Autogenerated return type of CreateAttributionInvitation.
type CreateAttributionInvitationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Owner: The owner scoping the reattributable data.
	Owner *Organization `json:"owner,omitempty"`

	// Source: The account owning the data to reattribute.
	Source Claimable `json:"source,omitempty"`

	// Target: The account which may claim the data.
	Target Claimable `json:"target,omitempty"`
}

func (x *CreateAttributionInvitationPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateAttributionInvitationPayload) GetOwner() *Organization     { return x.Owner }
func (x *CreateAttributionInvitationPayload) GetSource() Claimable        { return x.Source }
func (x *CreateAttributionInvitationPayload) GetTarget() Claimable        { return x.Target }

// CreateBranchProtectionRuleInput (INPUT_OBJECT): Autogenerated input type of CreateBranchProtectionRule.
type CreateBranchProtectionRuleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The global relay id of the repository in which a new branch protection rule should be created in.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Pattern: The glob-like pattern used to determine matching branches.
	//
	// GraphQL type: String!
	Pattern string `json:"pattern,omitempty"`

	// RequiresApprovingReviews: Are approving reviews required to update matching branches.
	//
	// GraphQL type: Boolean
	RequiresApprovingReviews bool `json:"requiresApprovingReviews,omitempty"`

	// RequiredApprovingReviewCount: Number of approving reviews required to update matching branches.
	//
	// GraphQL type: Int
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount,omitempty"`

	// RequiresCommitSignatures: Are commits required to be signed.
	//
	// GraphQL type: Boolean
	RequiresCommitSignatures bool `json:"requiresCommitSignatures,omitempty"`

	// RequiresLinearHistory: Are merge commits prohibited from being pushed to this branch.
	//
	// GraphQL type: Boolean
	RequiresLinearHistory bool `json:"requiresLinearHistory,omitempty"`

	// BlocksCreations: Is branch creation a protected operation.
	//
	// GraphQL type: Boolean
	BlocksCreations bool `json:"blocksCreations,omitempty"`

	// AllowsForcePushes: Are force pushes allowed on this branch.
	//
	// GraphQL type: Boolean
	AllowsForcePushes bool `json:"allowsForcePushes,omitempty"`

	// AllowsDeletions: Can this branch be deleted.
	//
	// GraphQL type: Boolean
	AllowsDeletions bool `json:"allowsDeletions,omitempty"`

	// IsAdminEnforced: Can admins override branch protection.
	//
	// GraphQL type: Boolean
	IsAdminEnforced bool `json:"isAdminEnforced,omitempty"`

	// RequiresStatusChecks: Are status checks required to update matching branches.
	//
	// GraphQL type: Boolean
	RequiresStatusChecks bool `json:"requiresStatusChecks,omitempty"`

	// RequiresStrictStatusChecks: Are branches required to be up to date before merging.
	//
	// GraphQL type: Boolean
	RequiresStrictStatusChecks bool `json:"requiresStrictStatusChecks,omitempty"`

	// RequiresCodeOwnerReviews: Are reviews from code owners required to update matching branches.
	//
	// GraphQL type: Boolean
	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews,omitempty"`

	// DismissesStaleReviews: Will new commits pushed to matching branches dismiss pull request review approvals.
	//
	// GraphQL type: Boolean
	DismissesStaleReviews bool `json:"dismissesStaleReviews,omitempty"`

	// RestrictsReviewDismissals: Is dismissal of pull request reviews restricted.
	//
	// GraphQL type: Boolean
	RestrictsReviewDismissals bool `json:"restrictsReviewDismissals,omitempty"`

	// ReviewDismissalActorIds: A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
	//
	// GraphQL type: [ID!]
	ReviewDismissalActorIds []ID `json:"reviewDismissalActorIds,omitempty"`

	// BypassPullRequestActorIds: A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
	//
	// GraphQL type: [ID!]
	BypassPullRequestActorIds []ID `json:"bypassPullRequestActorIds,omitempty"`

	// BypassForcePushActorIds: A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
	//
	// GraphQL type: [ID!]
	BypassForcePushActorIds []ID `json:"bypassForcePushActorIds,omitempty"`

	// RestrictsPushes: Is pushing to matching branches restricted.
	//
	// GraphQL type: Boolean
	RestrictsPushes bool `json:"restrictsPushes,omitempty"`

	// PushActorIds: A list of User, Team, or App IDs allowed to push to matching branches.
	//
	// GraphQL type: [ID!]
	PushActorIds []ID `json:"pushActorIds,omitempty"`

	// RequiredStatusCheckContexts: List of required status check contexts that must pass for commits to be accepted to matching branches.
	//
	// GraphQL type: [String!]
	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`

	// RequiredStatusChecks: The list of required status checks.
	//
	// GraphQL type: [RequiredStatusCheckInput!]
	RequiredStatusChecks []*RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`

	// RequiresDeployments: Are successful deployments required before merging.
	//
	// GraphQL type: Boolean
	RequiresDeployments bool `json:"requiresDeployments,omitempty"`

	// RequiredDeploymentEnvironments: The list of required deployment environments.
	//
	// GraphQL type: [String!]
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`

	// RequiresConversationResolution: Are conversations required to be resolved before merging.
	//
	// GraphQL type: Boolean
	RequiresConversationResolution bool `json:"requiresConversationResolution,omitempty"`

	// RequireLastPushApproval: Whether the most recent push must be approved by someone other than the person who pushed it.
	//
	// GraphQL type: Boolean
	RequireLastPushApproval bool `json:"requireLastPushApproval,omitempty"`

	// LockBranch: Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	//
	// GraphQL type: Boolean
	LockBranch bool `json:"lockBranch,omitempty"`

	// LockAllowsFetchAndMerge: Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	//
	// GraphQL type: Boolean
	LockAllowsFetchAndMerge bool `json:"lockAllowsFetchAndMerge,omitempty"`
}

// CreateBranchProtectionRulePayload (OBJECT): Autogenerated return type of CreateBranchProtectionRule.
type CreateBranchProtectionRulePayload struct {
	// BranchProtectionRule: The newly created BranchProtectionRule.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *CreateBranchProtectionRulePayload) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *CreateBranchProtectionRulePayload) GetClientMutationId() string { return x.ClientMutationId }

// CreateCheckRunInput (INPUT_OBJECT): Autogenerated input type of CreateCheckRun.
type CreateCheckRunInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The name of the check.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// HeadSha: The SHA of the head commit.
	//
	// GraphQL type: GitObjectID!
	HeadSha GitObjectID `json:"headSha,omitempty"`

	// DetailsUrl: The URL of the integrator's site that has the full details of the check.
	//
	// GraphQL type: URI
	DetailsUrl URI `json:"detailsUrl,omitempty"`

	// ExternalId: A reference for the run on the integrator's system.
	//
	// GraphQL type: String
	ExternalId string `json:"externalId,omitempty"`

	// Status: The current status.
	//
	// GraphQL type: RequestableCheckStatusState
	Status RequestableCheckStatusState `json:"status,omitempty"`

	// StartedAt: The time that the check run began.
	//
	// GraphQL type: DateTime
	StartedAt DateTime `json:"startedAt,omitempty"`

	// Conclusion: The final conclusion of the check.
	//
	// GraphQL type: CheckConclusionState
	Conclusion CheckConclusionState `json:"conclusion,omitempty"`

	// CompletedAt: The time that the check run finished.
	//
	// GraphQL type: DateTime
	CompletedAt DateTime `json:"completedAt,omitempty"`

	// Output: Descriptive details about the run.
	//
	// GraphQL type: CheckRunOutput
	Output *CheckRunOutput `json:"output,omitempty"`

	// Actions: Possible further actions the integrator can perform, which a user may trigger.
	//
	// GraphQL type: [CheckRunAction!]
	Actions []*CheckRunAction `json:"actions,omitempty"`
}

// CreateCheckRunPayload (OBJECT): Autogenerated return type of CreateCheckRun.
type CreateCheckRunPayload struct {
	// CheckRun: The newly created check run.
	CheckRun *CheckRun `json:"checkRun,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *CreateCheckRunPayload) GetCheckRun() *CheckRun      { return x.CheckRun }
func (x *CreateCheckRunPayload) GetClientMutationId() string { return x.ClientMutationId }

// CreateCheckSuiteInput (INPUT_OBJECT): Autogenerated input type of CreateCheckSuite.
type CreateCheckSuiteInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// HeadSha: The SHA of the head commit.
	//
	// GraphQL type: GitObjectID!
	HeadSha GitObjectID `json:"headSha,omitempty"`
}

// CreateCheckSuitePayload (OBJECT): Autogenerated return type of CreateCheckSuite.
type CreateCheckSuitePayload struct {
	// CheckSuite: The newly created check suite.
	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *CreateCheckSuitePayload) GetCheckSuite() *CheckSuite  { return x.CheckSuite }
func (x *CreateCheckSuitePayload) GetClientMutationId() string { return x.ClientMutationId }

// CreateCommitOnBranchInput (INPUT_OBJECT): Autogenerated input type of CreateCommitOnBranch.
type CreateCommitOnBranchInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Branch: The Ref to be updated.  Must be a branch.
	//
	// GraphQL type: CommittableBranch!
	Branch *CommittableBranch `json:"branch,omitempty"`

	// FileChanges: A description of changes to files in this commit.
	//
	// GraphQL type: FileChanges
	FileChanges *FileChanges `json:"fileChanges,omitempty"`

	// Message: The commit message the be included with the commit.
	//
	// GraphQL type: CommitMessage!
	Message *CommitMessage `json:"message,omitempty"`

	// ExpectedHeadOid: The git commit oid expected at the head of the branch prior to the commit.
	//
	// GraphQL type: GitObjectID!
	ExpectedHeadOid GitObjectID `json:"expectedHeadOid,omitempty"`
}

// CreateCommitOnBranchPayload (OBJECT): Autogenerated return type of CreateCommitOnBranch.
type CreateCommitOnBranchPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Commit: The new commit.
	Commit *Commit `json:"commit,omitempty"`

	// Ref: The ref which has been updated to point to the new commit.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *CreateCommitOnBranchPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateCommitOnBranchPayload) GetCommit() *Commit          { return x.Commit }
func (x *CreateCommitOnBranchPayload) GetRef() *Ref                { return x.Ref }

// CreateDeploymentInput (INPUT_OBJECT): Autogenerated input type of CreateDeployment.
type CreateDeploymentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// RefId: The node ID of the ref to be deployed.
	//
	// GraphQL type: ID!
	RefId ID `json:"refId,omitempty"`

	// AutoMerge: Attempt to automatically merge the default branch into the requested ref, defaults to true.
	//
	// GraphQL type: Boolean
	AutoMerge bool `json:"autoMerge,omitempty"`

	// RequiredContexts: The status contexts to verify against commit status checks. To bypass required contexts, pass an empty array. Defaults to all unique contexts.
	//
	// GraphQL type: [String!]
	RequiredContexts []string `json:"requiredContexts,omitempty"`

	// Description: Short description of the deployment.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// Environment: Name for the target deployment environment.
	//
	// GraphQL type: String
	Environment string `json:"environment,omitempty"`

	// Task: Specifies a task to execute.
	//
	// GraphQL type: String
	Task string `json:"task,omitempty"`

	// Payload: JSON payload with extra information about the deployment.
	//
	// GraphQL type: String
	Payload string `json:"payload,omitempty"`
}

// CreateDeploymentPayload (OBJECT): Autogenerated return type of CreateDeployment.
type CreateDeploymentPayload struct {
	// AutoMerged: True if the default branch has been auto-merged into the deployment ref.
	AutoMerged bool `json:"autoMerged,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Deployment: The new deployment.
	Deployment *Deployment `json:"deployment,omitempty"`
}

func (x *CreateDeploymentPayload) GetAutoMerged() bool         { return x.AutoMerged }
func (x *CreateDeploymentPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateDeploymentPayload) GetDeployment() *Deployment  { return x.Deployment }

// CreateDeploymentStatusInput (INPUT_OBJECT): Autogenerated input type of CreateDeploymentStatus.
type CreateDeploymentStatusInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DeploymentId: The node ID of the deployment.
	//
	// GraphQL type: ID!
	DeploymentId ID `json:"deploymentId,omitempty"`

	// State: The state of the deployment.
	//
	// GraphQL type: DeploymentStatusState!
	State DeploymentStatusState `json:"state,omitempty"`

	// Description: A short description of the status. Maximum length of 140 characters.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// Environment: If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
	//
	// GraphQL type: String
	Environment string `json:"environment,omitempty"`

	// EnvironmentUrl: Sets the URL for accessing your environment.
	//
	// GraphQL type: String
	EnvironmentUrl string `json:"environmentUrl,omitempty"`

	// AutoInactive: Adds a new inactive status to all non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment.
	//
	// GraphQL type: Boolean
	AutoInactive bool `json:"autoInactive,omitempty"`

	// LogUrl: The log URL to associate with this status.       This URL should contain output to keep the user updated while the task is running       or serve as historical information for what happened in the deployment.
	//
	// GraphQL type: String
	LogUrl string `json:"logUrl,omitempty"`
}

// CreateDeploymentStatusPayload (OBJECT): Autogenerated return type of CreateDeploymentStatus.
type CreateDeploymentStatusPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DeploymentStatus: The new deployment status.
	DeploymentStatus *DeploymentStatus `json:"deploymentStatus,omitempty"`
}

func (x *CreateDeploymentStatusPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateDeploymentStatusPayload) GetDeploymentStatus() *DeploymentStatus {
	return x.DeploymentStatus
}

// CreateDiscussionInput (INPUT_OBJECT): Autogenerated input type of CreateDiscussion.
type CreateDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The id of the repository on which to create the discussion.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Title: The title of the discussion.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// Body: The body of the discussion.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`

	// CategoryId: The id of the discussion category to associate with this discussion.
	//
	// GraphQL type: ID!
	CategoryId ID `json:"categoryId,omitempty"`
}

// CreateDiscussionPayload (OBJECT): Autogenerated return type of CreateDiscussion.
type CreateDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The discussion that was just created.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *CreateDiscussionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateDiscussionPayload) GetDiscussion() *Discussion  { return x.Discussion }

// CreateEnterpriseOrganizationInput (INPUT_OBJECT): Autogenerated input type of CreateEnterpriseOrganization.
type CreateEnterpriseOrganizationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise owning the new organization.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of the new organization.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`

	// ProfileName: The profile name of the new organization.
	//
	// GraphQL type: String!
	ProfileName string `json:"profileName,omitempty"`

	// BillingEmail: The email used for sending billing receipts.
	//
	// GraphQL type: String!
	BillingEmail string `json:"billingEmail,omitempty"`

	// AdminLogins: The logins for the administrators of the new organization.
	//
	// GraphQL type: [String!]!
	AdminLogins []string `json:"adminLogins,omitempty"`
}

// CreateEnterpriseOrganizationPayload (OBJECT): Autogenerated return type of CreateEnterpriseOrganization.
type CreateEnterpriseOrganizationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise that owns the created organization.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Organization: The organization that was created.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *CreateEnterpriseOrganizationPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *CreateEnterpriseOrganizationPayload) GetEnterprise() *Enterprise     { return x.Enterprise }
func (x *CreateEnterpriseOrganizationPayload) GetOrganization() *Organization { return x.Organization }

// CreateEnvironmentInput (INPUT_OBJECT): Autogenerated input type of CreateEnvironment.
type CreateEnvironmentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The name of the environment.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`
}

// CreateEnvironmentPayload (OBJECT): Autogenerated return type of CreateEnvironment.
type CreateEnvironmentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Environment: The new or existing environment.
	Environment *Environment `json:"environment,omitempty"`
}

func (x *CreateEnvironmentPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *CreateEnvironmentPayload) GetEnvironment() *Environment { return x.Environment }

// CreateIpAllowListEntryInput (INPUT_OBJECT): Autogenerated input type of CreateIpAllowListEntry.
type CreateIpAllowListEntryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The ID of the owner for which to create the new IP allow list entry.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// AllowListValue: An IP address or range of addresses in CIDR notation.
	//
	// GraphQL type: String!
	AllowListValue string `json:"allowListValue,omitempty"`

	// Name: An optional name for the IP allow list entry.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// IsActive: Whether the IP allow list entry is active when an IP allow list is enabled.
	//
	// GraphQL type: Boolean!
	IsActive bool `json:"isActive,omitempty"`
}

// CreateIpAllowListEntryPayload (OBJECT): Autogenerated return type of CreateIpAllowListEntry.
type CreateIpAllowListEntryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IpAllowListEntry: The IP allow list entry that was created.
	IpAllowListEntry *IpAllowListEntry `json:"ipAllowListEntry,omitempty"`
}

func (x *CreateIpAllowListEntryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateIpAllowListEntryPayload) GetIpAllowListEntry() *IpAllowListEntry {
	return x.IpAllowListEntry
}

// CreateIssueInput (INPUT_OBJECT): Autogenerated input type of CreateIssue.
type CreateIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Title: The title for the issue.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// Body: The body for the issue description.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// AssigneeIds: The Node ID for the user assignee for this issue.
	//
	// GraphQL type: [ID!]
	AssigneeIds []ID `json:"assigneeIds,omitempty"`

	// MilestoneId: The Node ID of the milestone for this issue.
	//
	// GraphQL type: ID
	MilestoneId ID `json:"milestoneId,omitempty"`

	// LabelIds: An array of Node IDs of labels for this issue.
	//
	// GraphQL type: [ID!]
	LabelIds []ID `json:"labelIds,omitempty"`

	// ProjectIds: An array of Node IDs for projects associated with this issue.
	//
	// GraphQL type: [ID!]
	ProjectIds []ID `json:"projectIds,omitempty"`

	// IssueTemplate: The name of an issue template in the repository, assigns labels and assignees from the template to the issue.
	//
	// GraphQL type: String
	IssueTemplate string `json:"issueTemplate,omitempty"`

	// ParentIssueId: The Node ID of the parent issue to add this new issue to.
	//
	// GraphQL type: ID
	ParentIssueId ID `json:"parentIssueId,omitempty"`
}

// CreateIssuePayload (OBJECT): Autogenerated return type of CreateIssue.
type CreateIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The new issue.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *CreateIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateIssuePayload) GetIssue() *Issue            { return x.Issue }

// CreateLabelInput (INPUT_OBJECT): Autogenerated input type of CreateLabel.
type CreateLabelInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Color: A 6 character hex code, without the leading #, identifying the color of the label.
	//
	// GraphQL type: String!
	Color string `json:"color,omitempty"`

	// Name: The name of the label.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Description: A brief description of the label, such as its purpose.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`
}

// CreateLabelPayload (OBJECT): Autogenerated return type of CreateLabel.
type CreateLabelPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Label: The new label.
	Label *Label `json:"label,omitempty"`
}

func (x *CreateLabelPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateLabelPayload) GetLabel() *Label            { return x.Label }

// CreateLinkedBranchInput (INPUT_OBJECT): Autogenerated input type of CreateLinkedBranch.
type CreateLinkedBranchInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: ID of the issue to link to.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`

	// Oid: The commit SHA to base the new branch on.
	//
	// GraphQL type: GitObjectID!
	Oid GitObjectID `json:"oid,omitempty"`

	// Name: The name of the new branch. Defaults to issue number and title.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// RepositoryId: ID of the repository to create the branch in. Defaults to the issue repository.
	//
	// GraphQL type: ID
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// CreateLinkedBranchPayload (OBJECT): Autogenerated return type of CreateLinkedBranch.
type CreateLinkedBranchPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue that was linked to.
	Issue *Issue `json:"issue,omitempty"`

	// LinkedBranch: The new branch issue reference.
	LinkedBranch *LinkedBranch `json:"linkedBranch,omitempty"`
}

func (x *CreateLinkedBranchPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *CreateLinkedBranchPayload) GetIssue() *Issue               { return x.Issue }
func (x *CreateLinkedBranchPayload) GetLinkedBranch() *LinkedBranch { return x.LinkedBranch }

// CreateMigrationSourceInput (INPUT_OBJECT): Autogenerated input type of CreateMigrationSource.
type CreateMigrationSourceInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Name: The migration source name.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Url: The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	//
	// GraphQL type: String
	Url string `json:"url,omitempty"`

	// AccessToken: The migration source access token.
	//
	// GraphQL type: String
	AccessToken string `json:"accessToken,omitempty"`

	// Type: The migration source type.
	//
	// GraphQL type: MigrationSourceType!
	Type MigrationSourceType `json:"type,omitempty"`

	// OwnerId: The ID of the organization that will own the migration source.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// GithubPat: The GitHub personal access token of the user importing to the target repository.
	//
	// GraphQL type: String
	GithubPat string `json:"githubPat,omitempty"`
}

// CreateMigrationSourcePayload (OBJECT): Autogenerated return type of CreateMigrationSource.
type CreateMigrationSourcePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// MigrationSource: The created migration source.
	MigrationSource *MigrationSource `json:"migrationSource,omitempty"`
}

func (x *CreateMigrationSourcePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateMigrationSourcePayload) GetMigrationSource() *MigrationSource {
	return x.MigrationSource
}

// CreateProjectInput (INPUT_OBJECT): Autogenerated input type of CreateProject.
type CreateProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The owner ID to create the project under.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// Name: The name of project.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Body: The description of project.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Template: The name of the GitHub-provided template.
	//
	// GraphQL type: ProjectTemplate
	Template ProjectTemplate `json:"template,omitempty"`

	// RepositoryIds: A list of repository IDs to create as linked repositories for the project.
	//
	// GraphQL type: [ID!]
	RepositoryIds []ID `json:"repositoryIds,omitempty"`
}

// CreateProjectPayload (OBJECT): Autogenerated return type of CreateProject.
type CreateProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Project: The new project.
	Project *Project `json:"project,omitempty"`
}

func (x *CreateProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateProjectPayload) GetProject() *Project        { return x.Project }

// CreateProjectV2FieldInput (INPUT_OBJECT): Autogenerated input type of CreateProjectV2Field.
type CreateProjectV2FieldInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to create the field in.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// DataType: The data type of the field.
	//
	// GraphQL type: ProjectV2CustomFieldType!
	DataType ProjectV2CustomFieldType `json:"dataType,omitempty"`

	// Name: The name of the field.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// SingleSelectOptions: Options for a single select field. At least one value is required if data_type is SINGLE_SELECT.
	//
	// GraphQL type: [ProjectV2SingleSelectFieldOptionInput!]
	SingleSelectOptions []*ProjectV2SingleSelectFieldOptionInput `json:"singleSelectOptions,omitempty"`
}

// CreateProjectV2FieldPayload (OBJECT): Autogenerated return type of CreateProjectV2Field.
type CreateProjectV2FieldPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2Field: The new field.
	ProjectV2Field ProjectV2FieldConfiguration `json:"projectV2Field,omitempty"`
}

func (x *CreateProjectV2FieldPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateProjectV2FieldPayload) GetProjectV2Field() ProjectV2FieldConfiguration {
	return x.ProjectV2Field
}

// CreateProjectV2Input (INPUT_OBJECT): Autogenerated input type of CreateProjectV2.
type CreateProjectV2Input struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The owner ID to create the project under.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// Title: The title of the project.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// RepositoryId: The repository to link the project to.
	//
	// GraphQL type: ID
	RepositoryId ID `json:"repositoryId,omitempty"`

	// TeamId: The team to link the project to. The team will be granted read permissions.
	//
	// GraphQL type: ID
	TeamId ID `json:"teamId,omitempty"`
}

// CreateProjectV2Payload (OBJECT): Autogenerated return type of CreateProjectV2.
type CreateProjectV2Payload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2: The new project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *CreateProjectV2Payload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateProjectV2Payload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// CreateProjectV2StatusUpdateInput (INPUT_OBJECT): Autogenerated input type of CreateProjectV2StatusUpdate.
type CreateProjectV2StatusUpdateInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to create the status update in.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// StartDate: The start date of the status update.
	//
	// GraphQL type: Date
	StartDate Date `json:"startDate,omitempty"`

	// TargetDate: The target date of the status update.
	//
	// GraphQL type: Date
	TargetDate Date `json:"targetDate,omitempty"`

	// Status: The status of the status update.
	//
	// GraphQL type: ProjectV2StatusUpdateStatus
	Status ProjectV2StatusUpdateStatus `json:"status,omitempty"`

	// Body: The body of the status update.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`
}

// CreateProjectV2StatusUpdatePayload (OBJECT): Autogenerated return type of CreateProjectV2StatusUpdate.
type CreateProjectV2StatusUpdatePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// StatusUpdate: The status update updated in the project.
	StatusUpdate *ProjectV2StatusUpdate `json:"statusUpdate,omitempty"`
}

func (x *CreateProjectV2StatusUpdatePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateProjectV2StatusUpdatePayload) GetStatusUpdate() *ProjectV2StatusUpdate {
	return x.StatusUpdate
}

// CreatePullRequestInput (INPUT_OBJECT): Autogenerated input type of CreatePullRequest.
type CreatePullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// BaseRefName: The name of the branch you want your changes pulled into. This should be an existing branch
	// on the current repository. You cannot update the base branch on a pull request to point
	// to another repository.
	// .
	//
	// GraphQL type: String!
	BaseRefName string `json:"baseRefName,omitempty"`

	// HeadRefName: The name of the branch where your changes are implemented. For cross-repository pull requests
	// in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
	// .
	//
	// GraphQL type: String!
	HeadRefName string `json:"headRefName,omitempty"`

	// HeadRepositoryId: The Node ID of the head repository.
	//
	// GraphQL type: ID
	HeadRepositoryId ID `json:"headRepositoryId,omitempty"`

	// Title: The title of the pull request.
	//
	// GraphQL type: String!
	Title string `json:"title,omitempty"`

	// Body: The contents of the pull request.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// MaintainerCanModify: Indicates whether maintainers can modify the pull request.
	//
	// GraphQL type: Boolean
	MaintainerCanModify bool `json:"maintainerCanModify,omitempty"`

	// Draft: Indicates whether this pull request should be a draft.
	//
	// GraphQL type: Boolean
	Draft bool `json:"draft,omitempty"`
}

// CreatePullRequestPayload (OBJECT): Autogenerated return type of CreatePullRequest.
type CreatePullRequestPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The new pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *CreatePullRequestPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *CreatePullRequestPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// CreateRefInput (INPUT_OBJECT): Autogenerated input type of CreateRef.
type CreateRefInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the Repository to create the Ref in.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Oid: The GitObjectID that the new Ref shall target. Must point to a commit.
	//
	// GraphQL type: GitObjectID!
	Oid GitObjectID `json:"oid,omitempty"`
}

// CreateRefPayload (OBJECT): Autogenerated return type of CreateRef.
type CreateRefPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Ref: The newly created ref.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *CreateRefPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateRefPayload) GetRef() *Ref                { return x.Ref }

// CreateRepositoryInput (INPUT_OBJECT): Autogenerated input type of CreateRepository.
type CreateRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Name: The name of the new repository.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// OwnerId: The ID of the owner for the new repository.
	//
	// GraphQL type: ID
	OwnerId ID `json:"ownerId,omitempty"`

	// Description: A short description of the new repository.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// Visibility: Indicates the repository's visibility level.
	//
	// GraphQL type: RepositoryVisibility!
	Visibility RepositoryVisibility `json:"visibility,omitempty"`

	// Template: Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
	//
	// GraphQL type: Boolean
	Template bool `json:"template,omitempty"`

	// HomepageUrl: The URL for a web page about this repository.
	//
	// GraphQL type: URI
	HomepageUrl URI `json:"homepageUrl,omitempty"`

	// HasWikiEnabled: Indicates if the repository should have the wiki feature enabled.
	//
	// GraphQL type: Boolean
	HasWikiEnabled bool `json:"hasWikiEnabled,omitempty"`

	// HasIssuesEnabled: Indicates if the repository should have the issues feature enabled.
	//
	// GraphQL type: Boolean
	HasIssuesEnabled bool `json:"hasIssuesEnabled,omitempty"`

	// TeamId: When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
	//
	// GraphQL type: ID
	TeamId ID `json:"teamId,omitempty"`
}

// CreateRepositoryPayload (OBJECT): Autogenerated return type of CreateRepository.
type CreateRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The new repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *CreateRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateRepositoryPayload) GetRepository() *Repository  { return x.Repository }

// CreateRepositoryRulesetInput (INPUT_OBJECT): Autogenerated input type of CreateRepositoryRuleset.
type CreateRepositoryRulesetInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SourceId: The global relay id of the source in which a new ruleset should be created in.
	//
	// GraphQL type: ID!
	SourceId ID `json:"sourceId,omitempty"`

	// Name: The name of the ruleset.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Target: The target of the ruleset.
	//
	// GraphQL type: RepositoryRulesetTarget
	Target RepositoryRulesetTarget `json:"target,omitempty"`

	// Rules: The list of rules for this ruleset.
	//
	// GraphQL type: [RepositoryRuleInput!]
	Rules []*RepositoryRuleInput `json:"rules,omitempty"`

	// Conditions: The set of conditions for this ruleset.
	//
	// GraphQL type: RepositoryRuleConditionsInput!
	Conditions *RepositoryRuleConditionsInput `json:"conditions,omitempty"`

	// Enforcement: The enforcement level for this ruleset.
	//
	// GraphQL type: RuleEnforcement!
	Enforcement RuleEnforcement `json:"enforcement,omitempty"`

	// BypassActors: A list of actors that are allowed to bypass rules in this ruleset.
	//
	// GraphQL type: [RepositoryRulesetBypassActorInput!]
	BypassActors []*RepositoryRulesetBypassActorInput `json:"bypassActors,omitempty"`
}

// CreateRepositoryRulesetPayload (OBJECT): Autogenerated return type of CreateRepositoryRuleset.
type CreateRepositoryRulesetPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Ruleset: The newly created Ruleset.
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`
}

func (x *CreateRepositoryRulesetPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *CreateRepositoryRulesetPayload) GetRuleset() *RepositoryRuleset { return x.Ruleset }

// CreateSponsorsListingInput (INPUT_OBJECT): Autogenerated input type of CreateSponsorsListing.
type CreateSponsorsListingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorableLogin: The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`

	// FiscalHostLogin: The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information.
	//
	// GraphQL type: String
	FiscalHostLogin string `json:"fiscalHostLogin,omitempty"`

	// FiscallyHostedProjectProfileUrl: The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified.
	//
	// GraphQL type: String
	FiscallyHostedProjectProfileUrl string `json:"fiscallyHostedProjectProfileUrl,omitempty"`

	// BillingCountryOrRegionCode: The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
	//
	// GraphQL type: SponsorsCountryOrRegionCode
	BillingCountryOrRegionCode SponsorsCountryOrRegionCode `json:"billingCountryOrRegionCode,omitempty"`

	// ResidenceCountryOrRegionCode: The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization.
	//
	// GraphQL type: SponsorsCountryOrRegionCode
	ResidenceCountryOrRegionCode SponsorsCountryOrRegionCode `json:"residenceCountryOrRegionCode,omitempty"`

	// ContactEmail: The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted.
	//
	// GraphQL type: String
	ContactEmail string `json:"contactEmail,omitempty"`

	// FullDescription: Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported.
	//
	// GraphQL type: String
	FullDescription string `json:"fullDescription,omitempty"`
}

// CreateSponsorsListingPayload (OBJECT): Autogenerated return type of CreateSponsorsListing.
type CreateSponsorsListingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorsListing: The new GitHub Sponsors profile.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
}

func (x *CreateSponsorsListingPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateSponsorsListingPayload) GetSponsorsListing() *SponsorsListing {
	return x.SponsorsListing
}

// CreateSponsorsTierInput (INPUT_OBJECT): Autogenerated input type of CreateSponsorsTier.
type CreateSponsorsTierInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorableId: The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given.
	//
	// GraphQL type: ID
	SponsorableId ID `json:"sponsorableId,omitempty"`

	// SponsorableLogin: The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`

	// Amount: The value of the new tier in US dollars. Valid values: 1-12000.
	//
	// GraphQL type: Int!
	Amount int `json:"amount,omitempty"`

	// IsRecurring: Whether sponsorships using this tier should happen monthly/yearly or just once.
	//
	// GraphQL type: Boolean
	IsRecurring bool `json:"isRecurring,omitempty"`

	// RepositoryId: Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization.
	//
	// GraphQL type: ID
	RepositoryId ID `json:"repositoryId,omitempty"`

	// RepositoryOwnerLogin: Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given.
	//
	// GraphQL type: String
	RepositoryOwnerLogin string `json:"repositoryOwnerLogin,omitempty"`

	// RepositoryName: Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
	//
	// GraphQL type: String
	RepositoryName string `json:"repositoryName,omitempty"`

	// WelcomeMessage: Optional message new sponsors at this tier will receive.
	//
	// GraphQL type: String
	WelcomeMessage string `json:"welcomeMessage,omitempty"`

	// Description: A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
	//
	// GraphQL type: String!
	Description string `json:"description,omitempty"`

	// Publish: Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible.
	//
	// GraphQL type: Boolean
	Publish bool `json:"publish,omitempty"`
}

// CreateSponsorsTierPayload (OBJECT): Autogenerated return type of CreateSponsorsTier.
type CreateSponsorsTierPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorsTier: The new tier.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

func (x *CreateSponsorsTierPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *CreateSponsorsTierPayload) GetSponsorsTier() *SponsorsTier { return x.SponsorsTier }

// CreateSponsorshipInput (INPUT_OBJECT): Autogenerated input type of CreateSponsorship.
type CreateSponsorshipInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorId: The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	//
	// GraphQL type: ID
	SponsorId ID `json:"sponsorId,omitempty"`

	// SponsorLogin: The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	//
	// GraphQL type: String
	SponsorLogin string `json:"sponsorLogin,omitempty"`

	// SponsorableId: The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	//
	// GraphQL type: ID
	SponsorableId ID `json:"sponsorableId,omitempty"`

	// SponsorableLogin: The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`

	// TierId: The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
	//
	// GraphQL type: ID
	TierId ID `json:"tierId,omitempty"`

	// Amount: The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
	//
	// GraphQL type: Int
	Amount int `json:"amount,omitempty"`

	// IsRecurring: Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
	//
	// GraphQL type: Boolean
	IsRecurring bool `json:"isRecurring,omitempty"`

	// ReceiveEmails: Whether the sponsor should receive email updates from the sponsorable.
	//
	// GraphQL type: Boolean
	ReceiveEmails bool `json:"receiveEmails,omitempty"`

	// PrivacyLevel: Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
	//
	// GraphQL type: SponsorshipPrivacy
	PrivacyLevel SponsorshipPrivacy `json:"privacyLevel,omitempty"`
}

// CreateSponsorshipPayload (OBJECT): Autogenerated return type of CreateSponsorship.
type CreateSponsorshipPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Sponsorship: The sponsorship that was started.
	Sponsorship *Sponsorship `json:"sponsorship,omitempty"`
}

func (x *CreateSponsorshipPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *CreateSponsorshipPayload) GetSponsorship() *Sponsorship { return x.Sponsorship }

// CreateSponsorshipsInput (INPUT_OBJECT): Autogenerated input type of CreateSponsorships.
type CreateSponsorshipsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorLogin: The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
	//
	// GraphQL type: String!
	SponsorLogin string `json:"sponsorLogin,omitempty"`

	// Sponsorships: The list of maintainers to sponsor and for how much apiece.
	//
	// GraphQL type: [BulkSponsorship!]!
	Sponsorships []*BulkSponsorship `json:"sponsorships,omitempty"`

	// ReceiveEmails: Whether the sponsor should receive email updates from the sponsorables.
	//
	// GraphQL type: Boolean
	ReceiveEmails bool `json:"receiveEmails,omitempty"`

	// PrivacyLevel: Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship.
	//
	// GraphQL type: SponsorshipPrivacy
	PrivacyLevel SponsorshipPrivacy `json:"privacyLevel,omitempty"`

	// Recurring: Whether the sponsorships created should continue each billing cycle for the sponsor (monthly or annually), versus lasting only a single month. Defaults to one-time sponsorships.
	//
	// GraphQL type: Boolean
	Recurring bool `json:"recurring,omitempty"`
}

// CreateSponsorshipsPayload (OBJECT): Autogenerated return type of CreateSponsorships.
type CreateSponsorshipsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Sponsorables: The users and organizations who received a sponsorship.
	Sponsorables []Sponsorable `json:"sponsorables,omitempty"`
}

func (x *CreateSponsorshipsPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *CreateSponsorshipsPayload) GetSponsorables() []Sponsorable { return x.Sponsorables }

// CreateTeamDiscussionCommentInput (INPUT_OBJECT): Autogenerated input type of CreateTeamDiscussionComment.
type CreateTeamDiscussionCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DiscussionId: The ID of the discussion to which the comment belongs. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `discussionId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	// .
	//
	// GraphQL type: ID
	DiscussionId ID `json:"discussionId,omitempty"`

	// Body: The content of the comment. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	// .
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`
}

// CreateTeamDiscussionCommentPayload (OBJECT): Autogenerated return type of CreateTeamDiscussionComment.
type CreateTeamDiscussionCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TeamDiscussionComment: The new comment.
	//
	// Deprecated: The new comment.
	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment,omitempty"`
}

func (x *CreateTeamDiscussionCommentPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateTeamDiscussionCommentPayload) GetTeamDiscussionComment() *TeamDiscussionComment {
	return x.TeamDiscussionComment
}

// CreateTeamDiscussionInput (INPUT_OBJECT): Autogenerated input type of CreateTeamDiscussion.
type CreateTeamDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TeamId: The ID of the team to which the discussion belongs. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `teamId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	// .
	//
	// GraphQL type: ID
	TeamId ID `json:"teamId,omitempty"`

	// Title: The title of the discussion. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `title` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	// .
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The content of the discussion. This field is required.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	// .
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Private: If true, restricts the visibility of this discussion to team members and organization owners. If false or not specified, allows any organization member to view this discussion.
	//
	// **Upcoming Change on 2024-07-01 UTC**
	// **Description:** `private` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
	// **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
	// .
	//
	// GraphQL type: Boolean
	Private bool `json:"private,omitempty"`
}

// CreateTeamDiscussionPayload (OBJECT): Autogenerated return type of CreateTeamDiscussion.
type CreateTeamDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TeamDiscussion: The new discussion.
	//
	// Deprecated: The new discussion.
	TeamDiscussion *TeamDiscussion `json:"teamDiscussion,omitempty"`
}

func (x *CreateTeamDiscussionPayload) GetClientMutationId() string        { return x.ClientMutationId }
func (x *CreateTeamDiscussionPayload) GetTeamDiscussion() *TeamDiscussion { return x.TeamDiscussion }

// CreateUserListInput (INPUT_OBJECT): Autogenerated input type of CreateUserList.
type CreateUserListInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Name: The name of the new list.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Description: A description of the list.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// IsPrivate: Whether or not the list is private.
	//
	// GraphQL type: Boolean
	IsPrivate bool `json:"isPrivate,omitempty"`
}

// CreateUserListPayload (OBJECT): Autogenerated return type of CreateUserList.
type CreateUserListPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// List: The list that was just created.
	List *UserList `json:"list,omitempty"`

	// Viewer: The user who created the list.
	Viewer *User `json:"viewer,omitempty"`
}

func (x *CreateUserListPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *CreateUserListPayload) GetList() *UserList          { return x.List }
func (x *CreateUserListPayload) GetViewer() *User            { return x.Viewer }

// CreatedCommitContribution (OBJECT): Represents the contribution a user made by committing to a repository.
type CreatedCommitContribution struct {
	// CommitCount: How many commits were made on this day to this repository by the user.
	CommitCount int `json:"commitCount,omitempty"`

	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// Repository: The repository the user made a commit in.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *CreatedCommitContribution) GetCommitCount() int        { return x.CommitCount }
func (x *CreatedCommitContribution) GetIsRestricted() bool      { return x.IsRestricted }
func (x *CreatedCommitContribution) GetOccurredAt() DateTime    { return x.OccurredAt }
func (x *CreatedCommitContribution) GetRepository() *Repository { return x.Repository }
func (x *CreatedCommitContribution) GetResourcePath() URI       { return x.ResourcePath }
func (x *CreatedCommitContribution) GetUrl() URI                { return x.Url }
func (x *CreatedCommitContribution) GetUser() *User             { return x.User }

// CreatedCommitContributionConnection (OBJECT): The connection type for CreatedCommitContribution.
type CreatedCommitContributionConnection struct {
	// Edges: A list of edges.
	Edges []*CreatedCommitContributionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CreatedCommitContribution `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of commits across days and repositories in the connection.
	// .
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CreatedCommitContributionConnection) GetEdges() []*CreatedCommitContributionEdge {
	return x.Edges
}
func (x *CreatedCommitContributionConnection) GetNodes() []*CreatedCommitContribution { return x.Nodes }
func (x *CreatedCommitContributionConnection) GetPageInfo() *PageInfo                 { return x.PageInfo }
func (x *CreatedCommitContributionConnection) GetTotalCount() int                     { return x.TotalCount }

// CreatedCommitContributionEdge (OBJECT): An edge in a connection.
type CreatedCommitContributionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CreatedCommitContribution `json:"node,omitempty"`
}

func (x *CreatedCommitContributionEdge) GetCursor() string                   { return x.Cursor }
func (x *CreatedCommitContributionEdge) GetNode() *CreatedCommitContribution { return x.Node }

// CreatedIssueContribution (OBJECT): Represents the contribution a user made on GitHub by opening an issue.
type CreatedIssueContribution struct {
	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// Issue: The issue that was opened.
	Issue *Issue `json:"issue,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *CreatedIssueContribution) GetIsRestricted() bool   { return x.IsRestricted }
func (x *CreatedIssueContribution) GetIssue() *Issue        { return x.Issue }
func (x *CreatedIssueContribution) GetOccurredAt() DateTime { return x.OccurredAt }
func (x *CreatedIssueContribution) GetResourcePath() URI    { return x.ResourcePath }
func (x *CreatedIssueContribution) GetUrl() URI             { return x.Url }
func (x *CreatedIssueContribution) GetUser() *User          { return x.User }

// CreatedIssueContributionConnection (OBJECT): The connection type for CreatedIssueContribution.
type CreatedIssueContributionConnection struct {
	// Edges: A list of edges.
	Edges []*CreatedIssueContributionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CreatedIssueContribution `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CreatedIssueContributionConnection) GetEdges() []*CreatedIssueContributionEdge {
	return x.Edges
}
func (x *CreatedIssueContributionConnection) GetNodes() []*CreatedIssueContribution { return x.Nodes }
func (x *CreatedIssueContributionConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *CreatedIssueContributionConnection) GetTotalCount() int                    { return x.TotalCount }

// CreatedIssueContributionEdge (OBJECT): An edge in a connection.
type CreatedIssueContributionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CreatedIssueContribution `json:"node,omitempty"`
}

func (x *CreatedIssueContributionEdge) GetCursor() string                  { return x.Cursor }
func (x *CreatedIssueContributionEdge) GetNode() *CreatedIssueContribution { return x.Node }

// CreatedIssueOrRestrictedContribution (UNION): Represents either a issue the viewer can access or a restricted contribution.
// CreatedIssueOrRestrictedContribution_Interface: Represents either a issue the viewer can access or a restricted contribution.
//
// Possible types:
//
//   - *CreatedIssueContribution
//   - *RestrictedContribution
type CreatedIssueOrRestrictedContribution_Interface interface {
	isCreatedIssueOrRestrictedContribution()
}

func (*CreatedIssueContribution) isCreatedIssueOrRestrictedContribution() {}
func (*RestrictedContribution) isCreatedIssueOrRestrictedContribution()   {}

type CreatedIssueOrRestrictedContribution struct {
	Interface CreatedIssueOrRestrictedContribution_Interface
}

func (x *CreatedIssueOrRestrictedContribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *CreatedIssueOrRestrictedContribution) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for CreatedIssueOrRestrictedContribution", info.Typename)
	case "CreatedIssueContribution":
		x.Interface = new(CreatedIssueContribution)
	case "RestrictedContribution":
		x.Interface = new(RestrictedContribution)
	}
	return json.Unmarshal(js, x.Interface)
}

// CreatedPullRequestContribution (OBJECT): Represents the contribution a user made on GitHub by opening a pull request.
type CreatedPullRequestContribution struct {
	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// PullRequest: The pull request that was opened.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *CreatedPullRequestContribution) GetIsRestricted() bool        { return x.IsRestricted }
func (x *CreatedPullRequestContribution) GetOccurredAt() DateTime      { return x.OccurredAt }
func (x *CreatedPullRequestContribution) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *CreatedPullRequestContribution) GetResourcePath() URI         { return x.ResourcePath }
func (x *CreatedPullRequestContribution) GetUrl() URI                  { return x.Url }
func (x *CreatedPullRequestContribution) GetUser() *User               { return x.User }

// CreatedPullRequestContributionConnection (OBJECT): The connection type for CreatedPullRequestContribution.
type CreatedPullRequestContributionConnection struct {
	// Edges: A list of edges.
	Edges []*CreatedPullRequestContributionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CreatedPullRequestContribution `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CreatedPullRequestContributionConnection) GetEdges() []*CreatedPullRequestContributionEdge {
	return x.Edges
}
func (x *CreatedPullRequestContributionConnection) GetNodes() []*CreatedPullRequestContribution {
	return x.Nodes
}
func (x *CreatedPullRequestContributionConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *CreatedPullRequestContributionConnection) GetTotalCount() int     { return x.TotalCount }

// CreatedPullRequestContributionEdge (OBJECT): An edge in a connection.
type CreatedPullRequestContributionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CreatedPullRequestContribution `json:"node,omitempty"`
}

func (x *CreatedPullRequestContributionEdge) GetCursor() string                        { return x.Cursor }
func (x *CreatedPullRequestContributionEdge) GetNode() *CreatedPullRequestContribution { return x.Node }

// CreatedPullRequestOrRestrictedContribution (UNION): Represents either a pull request the viewer can access or a restricted contribution.
// CreatedPullRequestOrRestrictedContribution_Interface: Represents either a pull request the viewer can access or a restricted contribution.
//
// Possible types:
//
//   - *CreatedPullRequestContribution
//   - *RestrictedContribution
type CreatedPullRequestOrRestrictedContribution_Interface interface {
	isCreatedPullRequestOrRestrictedContribution()
}

func (*CreatedPullRequestContribution) isCreatedPullRequestOrRestrictedContribution() {}
func (*RestrictedContribution) isCreatedPullRequestOrRestrictedContribution()         {}

type CreatedPullRequestOrRestrictedContribution struct {
	Interface CreatedPullRequestOrRestrictedContribution_Interface
}

func (x *CreatedPullRequestOrRestrictedContribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *CreatedPullRequestOrRestrictedContribution) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for CreatedPullRequestOrRestrictedContribution", info.Typename)
	case "CreatedPullRequestContribution":
		x.Interface = new(CreatedPullRequestContribution)
	case "RestrictedContribution":
		x.Interface = new(RestrictedContribution)
	}
	return json.Unmarshal(js, x.Interface)
}

// CreatedPullRequestReviewContribution (OBJECT): Represents the contribution a user made by leaving a review on a pull request.
type CreatedPullRequestReviewContribution struct {
	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// PullRequest: The pull request the user reviewed.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// PullRequestReview: The review the user left on the pull request.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`

	// Repository: The repository containing the pull request that the user reviewed.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *CreatedPullRequestReviewContribution) GetIsRestricted() bool        { return x.IsRestricted }
func (x *CreatedPullRequestReviewContribution) GetOccurredAt() DateTime      { return x.OccurredAt }
func (x *CreatedPullRequestReviewContribution) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *CreatedPullRequestReviewContribution) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}
func (x *CreatedPullRequestReviewContribution) GetRepository() *Repository { return x.Repository }
func (x *CreatedPullRequestReviewContribution) GetResourcePath() URI       { return x.ResourcePath }
func (x *CreatedPullRequestReviewContribution) GetUrl() URI                { return x.Url }
func (x *CreatedPullRequestReviewContribution) GetUser() *User             { return x.User }

// CreatedPullRequestReviewContributionConnection (OBJECT): The connection type for CreatedPullRequestReviewContribution.
type CreatedPullRequestReviewContributionConnection struct {
	// Edges: A list of edges.
	Edges []*CreatedPullRequestReviewContributionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CreatedPullRequestReviewContribution `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CreatedPullRequestReviewContributionConnection) GetEdges() []*CreatedPullRequestReviewContributionEdge {
	return x.Edges
}
func (x *CreatedPullRequestReviewContributionConnection) GetNodes() []*CreatedPullRequestReviewContribution {
	return x.Nodes
}
func (x *CreatedPullRequestReviewContributionConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *CreatedPullRequestReviewContributionConnection) GetTotalCount() int     { return x.TotalCount }

// CreatedPullRequestReviewContributionEdge (OBJECT): An edge in a connection.
type CreatedPullRequestReviewContributionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CreatedPullRequestReviewContribution `json:"node,omitempty"`
}

func (x *CreatedPullRequestReviewContributionEdge) GetCursor() string { return x.Cursor }
func (x *CreatedPullRequestReviewContributionEdge) GetNode() *CreatedPullRequestReviewContribution {
	return x.Node
}

// CreatedRepositoryContribution (OBJECT): Represents the contribution a user made on GitHub by creating a repository.
type CreatedRepositoryContribution struct {
	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// Repository: The repository that was created.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *CreatedRepositoryContribution) GetIsRestricted() bool      { return x.IsRestricted }
func (x *CreatedRepositoryContribution) GetOccurredAt() DateTime    { return x.OccurredAt }
func (x *CreatedRepositoryContribution) GetRepository() *Repository { return x.Repository }
func (x *CreatedRepositoryContribution) GetResourcePath() URI       { return x.ResourcePath }
func (x *CreatedRepositoryContribution) GetUrl() URI                { return x.Url }
func (x *CreatedRepositoryContribution) GetUser() *User             { return x.User }

// CreatedRepositoryContributionConnection (OBJECT): The connection type for CreatedRepositoryContribution.
type CreatedRepositoryContributionConnection struct {
	// Edges: A list of edges.
	Edges []*CreatedRepositoryContributionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*CreatedRepositoryContribution `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *CreatedRepositoryContributionConnection) GetEdges() []*CreatedRepositoryContributionEdge {
	return x.Edges
}
func (x *CreatedRepositoryContributionConnection) GetNodes() []*CreatedRepositoryContribution {
	return x.Nodes
}
func (x *CreatedRepositoryContributionConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *CreatedRepositoryContributionConnection) GetTotalCount() int     { return x.TotalCount }

// CreatedRepositoryContributionEdge (OBJECT): An edge in a connection.
type CreatedRepositoryContributionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *CreatedRepositoryContribution `json:"node,omitempty"`
}

func (x *CreatedRepositoryContributionEdge) GetCursor() string                       { return x.Cursor }
func (x *CreatedRepositoryContributionEdge) GetNode() *CreatedRepositoryContribution { return x.Node }

// CreatedRepositoryOrRestrictedContribution (UNION): Represents either a repository the viewer can access or a restricted contribution.
// CreatedRepositoryOrRestrictedContribution_Interface: Represents either a repository the viewer can access or a restricted contribution.
//
// Possible types:
//
//   - *CreatedRepositoryContribution
//   - *RestrictedContribution
type CreatedRepositoryOrRestrictedContribution_Interface interface {
	isCreatedRepositoryOrRestrictedContribution()
}

func (*CreatedRepositoryContribution) isCreatedRepositoryOrRestrictedContribution() {}
func (*RestrictedContribution) isCreatedRepositoryOrRestrictedContribution()        {}

type CreatedRepositoryOrRestrictedContribution struct {
	Interface CreatedRepositoryOrRestrictedContribution_Interface
}

func (x *CreatedRepositoryOrRestrictedContribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *CreatedRepositoryOrRestrictedContribution) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for CreatedRepositoryOrRestrictedContribution", info.Typename)
	case "CreatedRepositoryContribution":
		x.Interface = new(CreatedRepositoryContribution)
	case "RestrictedContribution":
		x.Interface = new(RestrictedContribution)
	}
	return json.Unmarshal(js, x.Interface)
}

// CrossReferencedEvent (OBJECT): Represents a mention made by one issue or pull request to another.
type CrossReferencedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the CrossReferencedEvent object.
	Id ID `json:"id,omitempty"`

	// IsCrossRepository: Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`

	// ReferencedAt: Identifies when the reference was made.
	ReferencedAt DateTime `json:"referencedAt,omitempty"`

	// ResourcePath: The HTTP path for this pull request.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Source: Issue or pull request that made the reference.
	Source ReferencedSubject `json:"source,omitempty"`

	// Target: Issue or pull request to which the reference was made.
	Target ReferencedSubject `json:"target,omitempty"`

	// Url: The HTTP URL for this pull request.
	Url URI `json:"url,omitempty"`

	// WillCloseTarget: Checks if the target will be closed when the source is merged.
	WillCloseTarget bool `json:"willCloseTarget,omitempty"`
}

func (x *CrossReferencedEvent) GetActor() Actor              { return x.Actor }
func (x *CrossReferencedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *CrossReferencedEvent) GetId() ID                    { return x.Id }
func (x *CrossReferencedEvent) GetIsCrossRepository() bool   { return x.IsCrossRepository }
func (x *CrossReferencedEvent) GetReferencedAt() DateTime    { return x.ReferencedAt }
func (x *CrossReferencedEvent) GetResourcePath() URI         { return x.ResourcePath }
func (x *CrossReferencedEvent) GetSource() ReferencedSubject { return x.Source }
func (x *CrossReferencedEvent) GetTarget() ReferencedSubject { return x.Target }
func (x *CrossReferencedEvent) GetUrl() URI                  { return x.Url }
func (x *CrossReferencedEvent) GetWillCloseTarget() bool     { return x.WillCloseTarget }

// CvssSeverities (OBJECT): The Common Vulnerability Scoring System.
type CvssSeverities struct {
	// CvssV3: The CVSS v3 severity associated with this advisory.
	CvssV3 *CVSS `json:"cvssV3,omitempty"`

	// CvssV4: The CVSS v4 severity associated with this advisory.
	CvssV4 *CVSS `json:"cvssV4,omitempty"`
}

func (x *CvssSeverities) GetCvssV3() *CVSS { return x.CvssV3 }
func (x *CvssSeverities) GetCvssV4() *CVSS { return x.CvssV4 }

// Date (SCALAR): An ISO-8601 encoded date string.
type Date string

// DateTime (SCALAR): An ISO-8601 encoded UTC date string.
type DateTime string

// DeclineTopicSuggestionInput (INPUT_OBJECT): Autogenerated input type of DeclineTopicSuggestion.
type DeclineTopicSuggestionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// **Upcoming Change on 2024-04-01 UTC**
	// **Description:** `repositoryId` will be removed.
	// **Reason:** Suggested topics are no longer supported
	// .
	//
	// GraphQL type: ID
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The name of the suggested topic.
	//
	// **Upcoming Change on 2024-04-01 UTC**
	// **Description:** `name` will be removed.
	// **Reason:** Suggested topics are no longer supported
	// .
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Reason: The reason why the suggested topic is declined.
	//
	// **Upcoming Change on 2024-04-01 UTC**
	// **Description:** `reason` will be removed.
	// **Reason:** Suggested topics are no longer supported
	// .
	//
	// GraphQL type: TopicSuggestionDeclineReason
	Reason TopicSuggestionDeclineReason `json:"reason,omitempty"`
}

// DeclineTopicSuggestionPayload (OBJECT): Autogenerated return type of DeclineTopicSuggestion.
type DeclineTopicSuggestionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Topic: The declined topic.
	//
	// Deprecated: The declined topic.
	Topic *Topic `json:"topic,omitempty"`
}

func (x *DeclineTopicSuggestionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeclineTopicSuggestionPayload) GetTopic() *Topic            { return x.Topic }

// DefaultRepositoryPermissionField (ENUM): The possible base permissions for repositories.
type DefaultRepositoryPermissionField string

// DefaultRepositoryPermissionField_NONE: No access.
const DefaultRepositoryPermissionField_NONE DefaultRepositoryPermissionField = "NONE"

// DefaultRepositoryPermissionField_READ: Can read repos by default.
const DefaultRepositoryPermissionField_READ DefaultRepositoryPermissionField = "READ"

// DefaultRepositoryPermissionField_WRITE: Can read and write repos by default.
const DefaultRepositoryPermissionField_WRITE DefaultRepositoryPermissionField = "WRITE"

// DefaultRepositoryPermissionField_ADMIN: Can read, write, and administrate repos by default.
const DefaultRepositoryPermissionField_ADMIN DefaultRepositoryPermissionField = "ADMIN"

// Deletable (INTERFACE): Entities that can be deleted.
// Deletable_Interface: Entities that can be deleted.
//
// Possible types:
//
//   - *CommitComment
//   - *Discussion
//   - *DiscussionComment
//   - *GistComment
//   - *Issue
//   - *IssueComment
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *TeamDiscussion
//   - *TeamDiscussionComment
type Deletable_Interface interface {
	isDeletable()
	GetViewerCanDelete() bool
}

func (*CommitComment) isDeletable()            {}
func (*Discussion) isDeletable()               {}
func (*DiscussionComment) isDeletable()        {}
func (*GistComment) isDeletable()              {}
func (*Issue) isDeletable()                    {}
func (*IssueComment) isDeletable()             {}
func (*PullRequestReview) isDeletable()        {}
func (*PullRequestReviewComment) isDeletable() {}
func (*TeamDiscussion) isDeletable()           {}
func (*TeamDiscussionComment) isDeletable()    {}

type Deletable struct {
	Interface Deletable_Interface
}

func (x *Deletable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Deletable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Deletable", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "GistComment":
		x.Interface = new(GistComment)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// DeleteBranchProtectionRuleInput (INPUT_OBJECT): Autogenerated input type of DeleteBranchProtectionRule.
type DeleteBranchProtectionRuleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// BranchProtectionRuleId: The global relay id of the branch protection rule to be deleted.
	//
	// GraphQL type: ID!
	BranchProtectionRuleId ID `json:"branchProtectionRuleId,omitempty"`
}

// DeleteBranchProtectionRulePayload (OBJECT): Autogenerated return type of DeleteBranchProtectionRule.
type DeleteBranchProtectionRulePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteBranchProtectionRulePayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteDeploymentInput (INPUT_OBJECT): Autogenerated input type of DeleteDeployment.
type DeleteDeploymentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the deployment to be deleted.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteDeploymentPayload (OBJECT): Autogenerated return type of DeleteDeployment.
type DeleteDeploymentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteDeploymentPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteDiscussionCommentInput (INPUT_OBJECT): Autogenerated input type of DeleteDiscussionComment.
type DeleteDiscussionCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node id of the discussion comment to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteDiscussionCommentPayload (OBJECT): Autogenerated return type of DeleteDiscussionComment.
type DeleteDiscussionCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Comment: The discussion comment that was just deleted.
	Comment *DiscussionComment `json:"comment,omitempty"`
}

func (x *DeleteDiscussionCommentPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *DeleteDiscussionCommentPayload) GetComment() *DiscussionComment { return x.Comment }

// DeleteDiscussionInput (INPUT_OBJECT): Autogenerated input type of DeleteDiscussion.
type DeleteDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The id of the discussion to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteDiscussionPayload (OBJECT): Autogenerated return type of DeleteDiscussion.
type DeleteDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The discussion that was just deleted.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *DeleteDiscussionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteDiscussionPayload) GetDiscussion() *Discussion  { return x.Discussion }

// DeleteEnvironmentInput (INPUT_OBJECT): Autogenerated input type of DeleteEnvironment.
type DeleteEnvironmentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the environment to be deleted.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteEnvironmentPayload (OBJECT): Autogenerated return type of DeleteEnvironment.
type DeleteEnvironmentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteEnvironmentPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteIpAllowListEntryInput (INPUT_OBJECT): Autogenerated input type of DeleteIpAllowListEntry.
type DeleteIpAllowListEntryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IpAllowListEntryId: The ID of the IP allow list entry to delete.
	//
	// GraphQL type: ID!
	IpAllowListEntryId ID `json:"ipAllowListEntryId,omitempty"`
}

// DeleteIpAllowListEntryPayload (OBJECT): Autogenerated return type of DeleteIpAllowListEntry.
type DeleteIpAllowListEntryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IpAllowListEntry: The IP allow list entry that was deleted.
	IpAllowListEntry *IpAllowListEntry `json:"ipAllowListEntry,omitempty"`
}

func (x *DeleteIpAllowListEntryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteIpAllowListEntryPayload) GetIpAllowListEntry() *IpAllowListEntry {
	return x.IpAllowListEntry
}

// DeleteIssueCommentInput (INPUT_OBJECT): Autogenerated input type of DeleteIssueComment.
type DeleteIssueCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the comment to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteIssueCommentPayload (OBJECT): Autogenerated return type of DeleteIssueComment.
type DeleteIssueCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteIssueCommentPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteIssueInput (INPUT_OBJECT): Autogenerated input type of DeleteIssue.
type DeleteIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The ID of the issue to delete.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`
}

// DeleteIssuePayload (OBJECT): Autogenerated return type of DeleteIssue.
type DeleteIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository the issue belonged to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *DeleteIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteIssuePayload) GetRepository() *Repository  { return x.Repository }

// DeleteLabelInput (INPUT_OBJECT): Autogenerated input type of DeleteLabel.
type DeleteLabelInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the label to be deleted.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteLabelPayload (OBJECT): Autogenerated return type of DeleteLabel.
type DeleteLabelPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteLabelPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteLinkedBranchInput (INPUT_OBJECT): Autogenerated input type of DeleteLinkedBranch.
type DeleteLinkedBranchInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LinkedBranchId: The ID of the linked branch.
	//
	// GraphQL type: ID!
	LinkedBranchId ID `json:"linkedBranchId,omitempty"`
}

// DeleteLinkedBranchPayload (OBJECT): Autogenerated return type of DeleteLinkedBranch.
type DeleteLinkedBranchPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue the linked branch was unlinked from.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *DeleteLinkedBranchPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteLinkedBranchPayload) GetIssue() *Issue            { return x.Issue }

// DeletePackageVersionInput (INPUT_OBJECT): Autogenerated input type of DeletePackageVersion.
type DeletePackageVersionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PackageVersionId: The ID of the package version to be deleted.
	//
	// GraphQL type: ID!
	PackageVersionId ID `json:"packageVersionId,omitempty"`
}

// DeletePackageVersionPayload (OBJECT): Autogenerated return type of DeletePackageVersion.
type DeletePackageVersionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Success: Whether or not the operation succeeded.
	Success bool `json:"success,omitempty"`
}

func (x *DeletePackageVersionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeletePackageVersionPayload) GetSuccess() bool            { return x.Success }

// DeleteProjectCardInput (INPUT_OBJECT): Autogenerated input type of DeleteProjectCard.
type DeleteProjectCardInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// CardId: The id of the card to delete.
	//
	// GraphQL type: ID!
	CardId ID `json:"cardId,omitempty"`
}

// DeleteProjectCardPayload (OBJECT): Autogenerated return type of DeleteProjectCard.
type DeleteProjectCardPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Column: The column the deleted card was in.
	Column *ProjectColumn `json:"column,omitempty"`

	// DeletedCardId: The deleted card ID.
	DeletedCardId ID `json:"deletedCardId,omitempty"`
}

func (x *DeleteProjectCardPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectCardPayload) GetColumn() *ProjectColumn   { return x.Column }
func (x *DeleteProjectCardPayload) GetDeletedCardId() ID        { return x.DeletedCardId }

// DeleteProjectColumnInput (INPUT_OBJECT): Autogenerated input type of DeleteProjectColumn.
type DeleteProjectColumnInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ColumnId: The id of the column to delete.
	//
	// GraphQL type: ID!
	ColumnId ID `json:"columnId,omitempty"`
}

// DeleteProjectColumnPayload (OBJECT): Autogenerated return type of DeleteProjectColumn.
type DeleteProjectColumnPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DeletedColumnId: The deleted column ID.
	DeletedColumnId ID `json:"deletedColumnId,omitempty"`

	// Project: The project the deleted column was in.
	Project *Project `json:"project,omitempty"`
}

func (x *DeleteProjectColumnPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectColumnPayload) GetDeletedColumnId() ID      { return x.DeletedColumnId }
func (x *DeleteProjectColumnPayload) GetProject() *Project        { return x.Project }

// DeleteProjectInput (INPUT_OBJECT): Autogenerated input type of DeleteProject.
type DeleteProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The Project ID to update.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`
}

// DeleteProjectPayload (OBJECT): Autogenerated return type of DeleteProject.
type DeleteProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Owner: The repository or organization the project was removed from.
	Owner ProjectOwner `json:"owner,omitempty"`
}

func (x *DeleteProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectPayload) GetOwner() ProjectOwner      { return x.Owner }

// DeleteProjectV2FieldInput (INPUT_OBJECT): Autogenerated input type of DeleteProjectV2Field.
type DeleteProjectV2FieldInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// FieldId: The ID of the field to delete.
	//
	// GraphQL type: ID!
	FieldId ID `json:"fieldId,omitempty"`
}

// DeleteProjectV2FieldPayload (OBJECT): Autogenerated return type of DeleteProjectV2Field.
type DeleteProjectV2FieldPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2Field: The deleted field.
	ProjectV2Field ProjectV2FieldConfiguration `json:"projectV2Field,omitempty"`
}

func (x *DeleteProjectV2FieldPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectV2FieldPayload) GetProjectV2Field() ProjectV2FieldConfiguration {
	return x.ProjectV2Field
}

// DeleteProjectV2Input (INPUT_OBJECT): Autogenerated input type of DeleteProjectV2.
type DeleteProjectV2Input struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to delete.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`
}

// DeleteProjectV2ItemInput (INPUT_OBJECT): Autogenerated input type of DeleteProjectV2Item.
type DeleteProjectV2ItemInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project from which the item should be removed.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ItemId: The ID of the item to be removed.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`
}

// DeleteProjectV2ItemPayload (OBJECT): Autogenerated return type of DeleteProjectV2Item.
type DeleteProjectV2ItemPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DeletedItemId: The ID of the deleted item.
	DeletedItemId ID `json:"deletedItemId,omitempty"`
}

func (x *DeleteProjectV2ItemPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectV2ItemPayload) GetDeletedItemId() ID        { return x.DeletedItemId }

// DeleteProjectV2Payload (OBJECT): Autogenerated return type of DeleteProjectV2.
type DeleteProjectV2Payload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2: The deleted Project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *DeleteProjectV2Payload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectV2Payload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// DeleteProjectV2StatusUpdateInput (INPUT_OBJECT): Autogenerated input type of DeleteProjectV2StatusUpdate.
type DeleteProjectV2StatusUpdateInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// StatusUpdateId: The ID of the status update to be removed.
	//
	// GraphQL type: ID!
	StatusUpdateId ID `json:"statusUpdateId,omitempty"`
}

// DeleteProjectV2StatusUpdatePayload (OBJECT): Autogenerated return type of DeleteProjectV2StatusUpdate.
type DeleteProjectV2StatusUpdatePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DeletedStatusUpdateId: The ID of the deleted status update.
	DeletedStatusUpdateId ID `json:"deletedStatusUpdateId,omitempty"`

	// ProjectV2: The project the deleted status update was in.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *DeleteProjectV2StatusUpdatePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectV2StatusUpdatePayload) GetDeletedStatusUpdateId() ID {
	return x.DeletedStatusUpdateId
}
func (x *DeleteProjectV2StatusUpdatePayload) GetProjectV2() *ProjectV2 { return x.ProjectV2 }

// DeleteProjectV2WorkflowInput (INPUT_OBJECT): Autogenerated input type of DeleteProjectV2Workflow.
type DeleteProjectV2WorkflowInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// WorkflowId: The ID of the workflow to be removed.
	//
	// GraphQL type: ID!
	WorkflowId ID `json:"workflowId,omitempty"`
}

// DeleteProjectV2WorkflowPayload (OBJECT): Autogenerated return type of DeleteProjectV2Workflow.
type DeleteProjectV2WorkflowPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DeletedWorkflowId: The ID of the deleted workflow.
	DeletedWorkflowId ID `json:"deletedWorkflowId,omitempty"`

	// ProjectV2: The project the deleted workflow was in.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *DeleteProjectV2WorkflowPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteProjectV2WorkflowPayload) GetDeletedWorkflowId() ID    { return x.DeletedWorkflowId }
func (x *DeleteProjectV2WorkflowPayload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// DeletePullRequestReviewCommentInput (INPUT_OBJECT): Autogenerated input type of DeletePullRequestReviewComment.
type DeletePullRequestReviewCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the comment to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeletePullRequestReviewCommentPayload (OBJECT): Autogenerated return type of DeletePullRequestReviewComment.
type DeletePullRequestReviewCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReview: The pull request review the deleted comment belonged to.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`

	// PullRequestReviewComment: The deleted pull request review comment.
	PullRequestReviewComment *PullRequestReviewComment `json:"pullRequestReviewComment,omitempty"`
}

func (x *DeletePullRequestReviewCommentPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *DeletePullRequestReviewCommentPayload) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}
func (x *DeletePullRequestReviewCommentPayload) GetPullRequestReviewComment() *PullRequestReviewComment {
	return x.PullRequestReviewComment
}

// DeletePullRequestReviewInput (INPUT_OBJECT): Autogenerated input type of DeletePullRequestReview.
type DeletePullRequestReviewInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReviewId: The Node ID of the pull request review to delete.
	//
	// GraphQL type: ID!
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`
}

// DeletePullRequestReviewPayload (OBJECT): Autogenerated return type of DeletePullRequestReview.
type DeletePullRequestReviewPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReview: The deleted pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

func (x *DeletePullRequestReviewPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeletePullRequestReviewPayload) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}

// DeleteRefInput (INPUT_OBJECT): Autogenerated input type of DeleteRef.
type DeleteRefInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RefId: The Node ID of the Ref to be deleted.
	//
	// GraphQL type: ID!
	RefId ID `json:"refId,omitempty"`
}

// DeleteRefPayload (OBJECT): Autogenerated return type of DeleteRef.
type DeleteRefPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteRefPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteRepositoryRulesetInput (INPUT_OBJECT): Autogenerated input type of DeleteRepositoryRuleset.
type DeleteRepositoryRulesetInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryRulesetId: The global relay id of the repository ruleset to be deleted.
	//
	// GraphQL type: ID!
	RepositoryRulesetId ID `json:"repositoryRulesetId,omitempty"`
}

// DeleteRepositoryRulesetPayload (OBJECT): Autogenerated return type of DeleteRepositoryRuleset.
type DeleteRepositoryRulesetPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteRepositoryRulesetPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteTeamDiscussionCommentInput (INPUT_OBJECT): Autogenerated input type of DeleteTeamDiscussionComment.
type DeleteTeamDiscussionCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the comment to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteTeamDiscussionCommentPayload (OBJECT): Autogenerated return type of DeleteTeamDiscussionComment.
type DeleteTeamDiscussionCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteTeamDiscussionCommentPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteTeamDiscussionInput (INPUT_OBJECT): Autogenerated input type of DeleteTeamDiscussion.
type DeleteTeamDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The discussion ID to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteTeamDiscussionPayload (OBJECT): Autogenerated return type of DeleteTeamDiscussion.
type DeleteTeamDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *DeleteTeamDiscussionPayload) GetClientMutationId() string { return x.ClientMutationId }

// DeleteUserListInput (INPUT_OBJECT): Autogenerated input type of DeleteUserList.
type DeleteUserListInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ListId: The ID of the list to delete.
	//
	// GraphQL type: ID!
	ListId ID `json:"listId,omitempty"`
}

// DeleteUserListPayload (OBJECT): Autogenerated return type of DeleteUserList.
type DeleteUserListPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// User: The owner of the list that will be deleted.
	User *User `json:"user,omitempty"`
}

func (x *DeleteUserListPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DeleteUserListPayload) GetUser() *User              { return x.User }

// DeleteVerifiableDomainInput (INPUT_OBJECT): Autogenerated input type of DeleteVerifiableDomain.
type DeleteVerifiableDomainInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the verifiable domain to delete.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DeleteVerifiableDomainPayload (OBJECT): Autogenerated return type of DeleteVerifiableDomain.
type DeleteVerifiableDomainPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Owner: The owning account from which the domain was deleted.
	Owner VerifiableDomainOwner `json:"owner,omitempty"`
}

func (x *DeleteVerifiableDomainPayload) GetClientMutationId() string     { return x.ClientMutationId }
func (x *DeleteVerifiableDomainPayload) GetOwner() VerifiableDomainOwner { return x.Owner }

// DemilestonedEvent (OBJECT): Represents a 'demilestoned' event on a given issue or pull request.
type DemilestonedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the DemilestonedEvent object.
	Id ID `json:"id,omitempty"`

	// MilestoneTitle: Identifies the milestone title associated with the 'demilestoned' event.
	MilestoneTitle string `json:"milestoneTitle,omitempty"`

	// Subject: Object referenced by event.
	Subject MilestoneItem `json:"subject,omitempty"`
}

func (x *DemilestonedEvent) GetActor() Actor           { return x.Actor }
func (x *DemilestonedEvent) GetCreatedAt() DateTime    { return x.CreatedAt }
func (x *DemilestonedEvent) GetId() ID                 { return x.Id }
func (x *DemilestonedEvent) GetMilestoneTitle() string { return x.MilestoneTitle }
func (x *DemilestonedEvent) GetSubject() MilestoneItem { return x.Subject }

// DependabotUpdate (OBJECT): A Dependabot Update for a dependency in a repository.
type DependabotUpdate struct {
	// Error: The error from a dependency update.
	Error *DependabotUpdateError `json:"error,omitempty"`

	// PullRequest: The associated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *DependabotUpdate) GetError() *DependabotUpdateError { return x.Error }
func (x *DependabotUpdate) GetPullRequest() *PullRequest     { return x.PullRequest }
func (x *DependabotUpdate) GetRepository() *Repository       { return x.Repository }

// DependabotUpdateError (OBJECT): An error produced from a Dependabot Update.
type DependabotUpdateError struct {
	// Body: The body of the error.
	Body string `json:"body,omitempty"`

	// ErrorType: The error code.
	ErrorType string `json:"errorType,omitempty"`

	// Title: The title of the error.
	Title string `json:"title,omitempty"`
}

func (x *DependabotUpdateError) GetBody() string      { return x.Body }
func (x *DependabotUpdateError) GetErrorType() string { return x.ErrorType }
func (x *DependabotUpdateError) GetTitle() string     { return x.Title }

// DependencyGraphDependency (OBJECT): A dependency manifest entry.
type DependencyGraphDependency struct {
	// HasDependencies: Does the dependency itself have dependencies?.
	HasDependencies bool `json:"hasDependencies,omitempty"`

	// PackageLabel: The original name of the package, as it appears in the manifest.
	//
	// Deprecated: The original name of the package, as it appears in the manifest.
	PackageLabel string `json:"packageLabel,omitempty"`

	// PackageManager: The dependency package manager.
	PackageManager string `json:"packageManager,omitempty"`

	// PackageName: The name of the package in the canonical form used by the package manager.
	PackageName string `json:"packageName,omitempty"`

	// Relationship: Public preview: The relationship of the dependency. Can be direct, transitive, or unknown.
	Relationship string `json:"relationship,omitempty"`

	// Repository: The repository containing the package.
	Repository *Repository `json:"repository,omitempty"`

	// Requirements: The dependency version requirements.
	Requirements string `json:"requirements,omitempty"`
}

func (x *DependencyGraphDependency) GetHasDependencies() bool   { return x.HasDependencies }
func (x *DependencyGraphDependency) GetPackageLabel() string    { return x.PackageLabel }
func (x *DependencyGraphDependency) GetPackageManager() string  { return x.PackageManager }
func (x *DependencyGraphDependency) GetPackageName() string     { return x.PackageName }
func (x *DependencyGraphDependency) GetRelationship() string    { return x.Relationship }
func (x *DependencyGraphDependency) GetRepository() *Repository { return x.Repository }
func (x *DependencyGraphDependency) GetRequirements() string    { return x.Requirements }

// DependencyGraphDependencyConnection (OBJECT): The connection type for DependencyGraphDependency.
type DependencyGraphDependencyConnection struct {
	// Edges: A list of edges.
	Edges []*DependencyGraphDependencyEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DependencyGraphDependency `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DependencyGraphDependencyConnection) GetEdges() []*DependencyGraphDependencyEdge {
	return x.Edges
}
func (x *DependencyGraphDependencyConnection) GetNodes() []*DependencyGraphDependency { return x.Nodes }
func (x *DependencyGraphDependencyConnection) GetPageInfo() *PageInfo                 { return x.PageInfo }
func (x *DependencyGraphDependencyConnection) GetTotalCount() int                     { return x.TotalCount }

// DependencyGraphDependencyEdge (OBJECT): An edge in a connection.
type DependencyGraphDependencyEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DependencyGraphDependency `json:"node,omitempty"`
}

func (x *DependencyGraphDependencyEdge) GetCursor() string                   { return x.Cursor }
func (x *DependencyGraphDependencyEdge) GetNode() *DependencyGraphDependency { return x.Node }

// DependencyGraphEcosystem (ENUM): The possible ecosystems of a dependency graph package.
type DependencyGraphEcosystem string

// DependencyGraphEcosystem_RUBYGEMS: Ruby gems hosted at RubyGems.org.
const DependencyGraphEcosystem_RUBYGEMS DependencyGraphEcosystem = "RUBYGEMS"

// DependencyGraphEcosystem_NPM: JavaScript packages hosted at npmjs.com.
const DependencyGraphEcosystem_NPM DependencyGraphEcosystem = "NPM"

// DependencyGraphEcosystem_PIP: Python packages hosted at PyPI.org.
const DependencyGraphEcosystem_PIP DependencyGraphEcosystem = "PIP"

// DependencyGraphEcosystem_MAVEN: Java artifacts hosted at the Maven central repository.
const DependencyGraphEcosystem_MAVEN DependencyGraphEcosystem = "MAVEN"

// DependencyGraphEcosystem_NUGET: .NET packages hosted at the NuGet Gallery.
const DependencyGraphEcosystem_NUGET DependencyGraphEcosystem = "NUGET"

// DependencyGraphEcosystem_COMPOSER: PHP packages hosted at packagist.org.
const DependencyGraphEcosystem_COMPOSER DependencyGraphEcosystem = "COMPOSER"

// DependencyGraphEcosystem_GO: Go modules.
const DependencyGraphEcosystem_GO DependencyGraphEcosystem = "GO"

// DependencyGraphEcosystem_ACTIONS: GitHub Actions.
const DependencyGraphEcosystem_ACTIONS DependencyGraphEcosystem = "ACTIONS"

// DependencyGraphEcosystem_RUST: Rust crates.
const DependencyGraphEcosystem_RUST DependencyGraphEcosystem = "RUST"

// DependencyGraphEcosystem_PUB: Dart packages hosted at pub.dev.
const DependencyGraphEcosystem_PUB DependencyGraphEcosystem = "PUB"

// DependencyGraphEcosystem_SWIFT: Swift packages.
const DependencyGraphEcosystem_SWIFT DependencyGraphEcosystem = "SWIFT"

// DependencyGraphManifest (OBJECT): Dependency manifest for a repository.
type DependencyGraphManifest struct {
	// BlobPath: Path to view the manifest file blob.
	BlobPath string `json:"blobPath,omitempty"`

	// Dependencies: A list of manifest dependencies.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Dependencies *DependencyGraphDependencyConnection `json:"dependencies,omitempty"`

	// DependenciesCount: The number of dependencies listed in the manifest.
	DependenciesCount int `json:"dependenciesCount,omitempty"`

	// ExceedsMaxSize: Is the manifest too big to parse?.
	ExceedsMaxSize bool `json:"exceedsMaxSize,omitempty"`

	// Filename: Fully qualified manifest filename.
	Filename string `json:"filename,omitempty"`

	// Id: The Node ID of the DependencyGraphManifest object.
	Id ID `json:"id,omitempty"`

	// Parseable: Were we able to parse the manifest?.
	Parseable bool `json:"parseable,omitempty"`

	// Repository: The repository containing the manifest.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *DependencyGraphManifest) GetBlobPath() string { return x.BlobPath }
func (x *DependencyGraphManifest) GetDependencies() *DependencyGraphDependencyConnection {
	return x.Dependencies
}
func (x *DependencyGraphManifest) GetDependenciesCount() int  { return x.DependenciesCount }
func (x *DependencyGraphManifest) GetExceedsMaxSize() bool    { return x.ExceedsMaxSize }
func (x *DependencyGraphManifest) GetFilename() string        { return x.Filename }
func (x *DependencyGraphManifest) GetId() ID                  { return x.Id }
func (x *DependencyGraphManifest) GetParseable() bool         { return x.Parseable }
func (x *DependencyGraphManifest) GetRepository() *Repository { return x.Repository }

// DependencyGraphManifestConnection (OBJECT): The connection type for DependencyGraphManifest.
type DependencyGraphManifestConnection struct {
	// Edges: A list of edges.
	Edges []*DependencyGraphManifestEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DependencyGraphManifest `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DependencyGraphManifestConnection) GetEdges() []*DependencyGraphManifestEdge { return x.Edges }
func (x *DependencyGraphManifestConnection) GetNodes() []*DependencyGraphManifest     { return x.Nodes }
func (x *DependencyGraphManifestConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *DependencyGraphManifestConnection) GetTotalCount() int                       { return x.TotalCount }

// DependencyGraphManifestEdge (OBJECT): An edge in a connection.
type DependencyGraphManifestEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DependencyGraphManifest `json:"node,omitempty"`
}

func (x *DependencyGraphManifestEdge) GetCursor() string                 { return x.Cursor }
func (x *DependencyGraphManifestEdge) GetNode() *DependencyGraphManifest { return x.Node }

// DeployKey (OBJECT): A repository deploy key.
type DeployKey struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enabled: Whether or not the deploy key is enabled by policy at the Enterprise or Organization level.
	Enabled bool `json:"enabled,omitempty"`

	// Id: The Node ID of the DeployKey object.
	Id ID `json:"id,omitempty"`

	// Key: The deploy key.
	Key string `json:"key,omitempty"`

	// ReadOnly: Whether or not the deploy key is read only.
	ReadOnly bool `json:"readOnly,omitempty"`

	// Title: The deploy key title.
	Title string `json:"title,omitempty"`

	// Verified: Whether or not the deploy key has been verified.
	Verified bool `json:"verified,omitempty"`
}

func (x *DeployKey) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *DeployKey) GetEnabled() bool       { return x.Enabled }
func (x *DeployKey) GetId() ID              { return x.Id }
func (x *DeployKey) GetKey() string         { return x.Key }
func (x *DeployKey) GetReadOnly() bool      { return x.ReadOnly }
func (x *DeployKey) GetTitle() string       { return x.Title }
func (x *DeployKey) GetVerified() bool      { return x.Verified }

// DeployKeyConnection (OBJECT): The connection type for DeployKey.
type DeployKeyConnection struct {
	// Edges: A list of edges.
	Edges []*DeployKeyEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DeployKey `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeployKeyConnection) GetEdges() []*DeployKeyEdge { return x.Edges }
func (x *DeployKeyConnection) GetNodes() []*DeployKey     { return x.Nodes }
func (x *DeployKeyConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *DeployKeyConnection) GetTotalCount() int         { return x.TotalCount }

// DeployKeyEdge (OBJECT): An edge in a connection.
type DeployKeyEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DeployKey `json:"node,omitempty"`
}

func (x *DeployKeyEdge) GetCursor() string   { return x.Cursor }
func (x *DeployKeyEdge) GetNode() *DeployKey { return x.Node }

// DeployedEvent (OBJECT): Represents a 'deployed' event on a given pull request.
type DeployedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Deployment: The deployment associated with the 'deployed' event.
	Deployment *Deployment `json:"deployment,omitempty"`

	// Id: The Node ID of the DeployedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Ref: The ref associated with the 'deployed' event.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *DeployedEvent) GetActor() Actor              { return x.Actor }
func (x *DeployedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *DeployedEvent) GetDatabaseId() int           { return x.DatabaseId }
func (x *DeployedEvent) GetDeployment() *Deployment   { return x.Deployment }
func (x *DeployedEvent) GetId() ID                    { return x.Id }
func (x *DeployedEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *DeployedEvent) GetRef() *Ref                 { return x.Ref }

// Deployment (OBJECT): Represents triggered deployment instance.
type Deployment struct {
	// Commit: Identifies the commit sha of the deployment.
	Commit *Commit `json:"commit,omitempty"`

	// CommitOid: Identifies the oid of the deployment commit, even if the commit has been deleted.
	CommitOid string `json:"commitOid,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: Identifies the actor who triggered the deployment.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: The deployment description.
	Description string `json:"description,omitempty"`

	// Environment: The latest environment to which this deployment was made.
	Environment string `json:"environment,omitempty"`

	// Id: The Node ID of the Deployment object.
	Id ID `json:"id,omitempty"`

	// LatestEnvironment: The latest environment to which this deployment was made.
	LatestEnvironment string `json:"latestEnvironment,omitempty"`

	// LatestStatus: The latest status of this deployment.
	LatestStatus *DeploymentStatus `json:"latestStatus,omitempty"`

	// OriginalEnvironment: The original environment to which this deployment was made.
	OriginalEnvironment string `json:"originalEnvironment,omitempty"`

	// Payload: Extra information that a deployment system might need.
	Payload string `json:"payload,omitempty"`

	// Ref: Identifies the Ref of the deployment, if the deployment was created by ref.
	Ref *Ref `json:"ref,omitempty"`

	// Repository: Identifies the repository associated with the deployment.
	Repository *Repository `json:"repository,omitempty"`

	// State: The current state of the deployment.
	State DeploymentState `json:"state,omitempty"`

	// Statuses: A list of statuses associated with the deployment.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Statuses *DeploymentStatusConnection `json:"statuses,omitempty"`

	// Task: The deployment task.
	Task string `json:"task,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *Deployment) GetCommit() *Commit                       { return x.Commit }
func (x *Deployment) GetCommitOid() string                     { return x.CommitOid }
func (x *Deployment) GetCreatedAt() DateTime                   { return x.CreatedAt }
func (x *Deployment) GetCreator() Actor                        { return x.Creator }
func (x *Deployment) GetDatabaseId() int                       { return x.DatabaseId }
func (x *Deployment) GetDescription() string                   { return x.Description }
func (x *Deployment) GetEnvironment() string                   { return x.Environment }
func (x *Deployment) GetId() ID                                { return x.Id }
func (x *Deployment) GetLatestEnvironment() string             { return x.LatestEnvironment }
func (x *Deployment) GetLatestStatus() *DeploymentStatus       { return x.LatestStatus }
func (x *Deployment) GetOriginalEnvironment() string           { return x.OriginalEnvironment }
func (x *Deployment) GetPayload() string                       { return x.Payload }
func (x *Deployment) GetRef() *Ref                             { return x.Ref }
func (x *Deployment) GetRepository() *Repository               { return x.Repository }
func (x *Deployment) GetState() DeploymentState                { return x.State }
func (x *Deployment) GetStatuses() *DeploymentStatusConnection { return x.Statuses }
func (x *Deployment) GetTask() string                          { return x.Task }
func (x *Deployment) GetUpdatedAt() DateTime                   { return x.UpdatedAt }

// DeploymentConnection (OBJECT): The connection type for Deployment.
type DeploymentConnection struct {
	// Edges: A list of edges.
	Edges []*DeploymentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Deployment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeploymentConnection) GetEdges() []*DeploymentEdge { return x.Edges }
func (x *DeploymentConnection) GetNodes() []*Deployment     { return x.Nodes }
func (x *DeploymentConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *DeploymentConnection) GetTotalCount() int          { return x.TotalCount }

// DeploymentEdge (OBJECT): An edge in a connection.
type DeploymentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Deployment `json:"node,omitempty"`
}

func (x *DeploymentEdge) GetCursor() string    { return x.Cursor }
func (x *DeploymentEdge) GetNode() *Deployment { return x.Node }

// DeploymentEnvironmentChangedEvent (OBJECT): Represents a 'deployment_environment_changed' event on a given pull request.
type DeploymentEnvironmentChangedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DeploymentStatus: The deployment status that updated the deployment environment.
	DeploymentStatus *DeploymentStatus `json:"deploymentStatus,omitempty"`

	// Id: The Node ID of the DeploymentEnvironmentChangedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *DeploymentEnvironmentChangedEvent) GetActor() Actor        { return x.Actor }
func (x *DeploymentEnvironmentChangedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *DeploymentEnvironmentChangedEvent) GetDeploymentStatus() *DeploymentStatus {
	return x.DeploymentStatus
}
func (x *DeploymentEnvironmentChangedEvent) GetId() ID                    { return x.Id }
func (x *DeploymentEnvironmentChangedEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// DeploymentOrder (INPUT_OBJECT): Ordering options for deployment connections.
type DeploymentOrder struct {
	// Field: The field to order deployments by.
	//
	// GraphQL type: DeploymentOrderField!
	Field DeploymentOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// DeploymentOrderField (ENUM): Properties by which deployment connections can be ordered.
type DeploymentOrderField string

// DeploymentOrderField_CREATED_AT: Order collection by creation time.
const DeploymentOrderField_CREATED_AT DeploymentOrderField = "CREATED_AT"

// DeploymentProtectionRule (OBJECT): A protection rule.
type DeploymentProtectionRule struct {
	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// PreventSelfReview: Whether deployments to this environment can be approved by the user who created the deployment.
	PreventSelfReview bool `json:"preventSelfReview,omitempty"`

	// Reviewers: The teams or users that can review the deployment.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Reviewers *DeploymentReviewerConnection `json:"reviewers,omitempty"`

	// Timeout: The timeout in minutes for this protection rule.
	Timeout int `json:"timeout,omitempty"`

	// Type: The type of protection rule.
	Type DeploymentProtectionRuleType `json:"type,omitempty"`
}

func (x *DeploymentProtectionRule) GetDatabaseId() int                          { return x.DatabaseId }
func (x *DeploymentProtectionRule) GetPreventSelfReview() bool                  { return x.PreventSelfReview }
func (x *DeploymentProtectionRule) GetReviewers() *DeploymentReviewerConnection { return x.Reviewers }
func (x *DeploymentProtectionRule) GetTimeout() int                             { return x.Timeout }
func (x *DeploymentProtectionRule) GetType() DeploymentProtectionRuleType       { return x.Type }

// DeploymentProtectionRuleConnection (OBJECT): The connection type for DeploymentProtectionRule.
type DeploymentProtectionRuleConnection struct {
	// Edges: A list of edges.
	Edges []*DeploymentProtectionRuleEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DeploymentProtectionRule `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeploymentProtectionRuleConnection) GetEdges() []*DeploymentProtectionRuleEdge {
	return x.Edges
}
func (x *DeploymentProtectionRuleConnection) GetNodes() []*DeploymentProtectionRule { return x.Nodes }
func (x *DeploymentProtectionRuleConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *DeploymentProtectionRuleConnection) GetTotalCount() int                    { return x.TotalCount }

// DeploymentProtectionRuleEdge (OBJECT): An edge in a connection.
type DeploymentProtectionRuleEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DeploymentProtectionRule `json:"node,omitempty"`
}

func (x *DeploymentProtectionRuleEdge) GetCursor() string                  { return x.Cursor }
func (x *DeploymentProtectionRuleEdge) GetNode() *DeploymentProtectionRule { return x.Node }

// DeploymentProtectionRuleType (ENUM): The possible protection rule types.
type DeploymentProtectionRuleType string

// DeploymentProtectionRuleType_REQUIRED_REVIEWERS: Required reviewers.
const DeploymentProtectionRuleType_REQUIRED_REVIEWERS DeploymentProtectionRuleType = "REQUIRED_REVIEWERS"

// DeploymentProtectionRuleType_WAIT_TIMER: Wait timer.
const DeploymentProtectionRuleType_WAIT_TIMER DeploymentProtectionRuleType = "WAIT_TIMER"

// DeploymentProtectionRuleType_BRANCH_POLICY: Branch policy.
const DeploymentProtectionRuleType_BRANCH_POLICY DeploymentProtectionRuleType = "BRANCH_POLICY"

// DeploymentRequest (OBJECT): A request to deploy a workflow run to an environment.
type DeploymentRequest struct {
	// CurrentUserCanApprove: Whether or not the current user can approve the deployment.
	CurrentUserCanApprove bool `json:"currentUserCanApprove,omitempty"`

	// Environment: The target environment of the deployment.
	Environment *Environment `json:"environment,omitempty"`

	// Reviewers: The teams or users that can review the deployment.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Reviewers *DeploymentReviewerConnection `json:"reviewers,omitempty"`

	// WaitTimer: The wait timer in minutes configured in the environment.
	WaitTimer int `json:"waitTimer,omitempty"`

	// WaitTimerStartedAt: The wait timer in minutes configured in the environment.
	WaitTimerStartedAt DateTime `json:"waitTimerStartedAt,omitempty"`
}

func (x *DeploymentRequest) GetCurrentUserCanApprove() bool              { return x.CurrentUserCanApprove }
func (x *DeploymentRequest) GetEnvironment() *Environment                { return x.Environment }
func (x *DeploymentRequest) GetReviewers() *DeploymentReviewerConnection { return x.Reviewers }
func (x *DeploymentRequest) GetWaitTimer() int                           { return x.WaitTimer }
func (x *DeploymentRequest) GetWaitTimerStartedAt() DateTime             { return x.WaitTimerStartedAt }

// DeploymentRequestConnection (OBJECT): The connection type for DeploymentRequest.
type DeploymentRequestConnection struct {
	// Edges: A list of edges.
	Edges []*DeploymentRequestEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DeploymentRequest `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeploymentRequestConnection) GetEdges() []*DeploymentRequestEdge { return x.Edges }
func (x *DeploymentRequestConnection) GetNodes() []*DeploymentRequest     { return x.Nodes }
func (x *DeploymentRequestConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *DeploymentRequestConnection) GetTotalCount() int                 { return x.TotalCount }

// DeploymentRequestEdge (OBJECT): An edge in a connection.
type DeploymentRequestEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DeploymentRequest `json:"node,omitempty"`
}

func (x *DeploymentRequestEdge) GetCursor() string           { return x.Cursor }
func (x *DeploymentRequestEdge) GetNode() *DeploymentRequest { return x.Node }

// DeploymentReview (OBJECT): A deployment review.
type DeploymentReview struct {
	// Comment: The comment the user left.
	Comment string `json:"comment,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Environments: The environments approved or rejected.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Environments *EnvironmentConnection `json:"environments,omitempty"`

	// Id: The Node ID of the DeploymentReview object.
	Id ID `json:"id,omitempty"`

	// State: The decision of the user.
	State DeploymentReviewState `json:"state,omitempty"`

	// User: The user that reviewed the deployment.
	User *User `json:"user,omitempty"`
}

func (x *DeploymentReview) GetComment() string                      { return x.Comment }
func (x *DeploymentReview) GetDatabaseId() int                      { return x.DatabaseId }
func (x *DeploymentReview) GetEnvironments() *EnvironmentConnection { return x.Environments }
func (x *DeploymentReview) GetId() ID                               { return x.Id }
func (x *DeploymentReview) GetState() DeploymentReviewState         { return x.State }
func (x *DeploymentReview) GetUser() *User                          { return x.User }

// DeploymentReviewConnection (OBJECT): The connection type for DeploymentReview.
type DeploymentReviewConnection struct {
	// Edges: A list of edges.
	Edges []*DeploymentReviewEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DeploymentReview `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeploymentReviewConnection) GetEdges() []*DeploymentReviewEdge { return x.Edges }
func (x *DeploymentReviewConnection) GetNodes() []*DeploymentReview     { return x.Nodes }
func (x *DeploymentReviewConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *DeploymentReviewConnection) GetTotalCount() int                { return x.TotalCount }

// DeploymentReviewEdge (OBJECT): An edge in a connection.
type DeploymentReviewEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DeploymentReview `json:"node,omitempty"`
}

func (x *DeploymentReviewEdge) GetCursor() string          { return x.Cursor }
func (x *DeploymentReviewEdge) GetNode() *DeploymentReview { return x.Node }

// DeploymentReviewState (ENUM): The possible states for a deployment review.
type DeploymentReviewState string

// DeploymentReviewState_APPROVED: The deployment was approved.
const DeploymentReviewState_APPROVED DeploymentReviewState = "APPROVED"

// DeploymentReviewState_REJECTED: The deployment was rejected.
const DeploymentReviewState_REJECTED DeploymentReviewState = "REJECTED"

// DeploymentReviewer (UNION): Users and teams.
// DeploymentReviewer_Interface: Users and teams.
//
// Possible types:
//
//   - *Team
//   - *User
type DeploymentReviewer_Interface interface {
	isDeploymentReviewer()
}

func (*Team) isDeploymentReviewer() {}
func (*User) isDeploymentReviewer() {}

type DeploymentReviewer struct {
	Interface DeploymentReviewer_Interface
}

func (x *DeploymentReviewer) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *DeploymentReviewer) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for DeploymentReviewer", info.Typename)
	case "Team":
		x.Interface = new(Team)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// DeploymentReviewerConnection (OBJECT): The connection type for DeploymentReviewer.
type DeploymentReviewerConnection struct {
	// Edges: A list of edges.
	Edges []*DeploymentReviewerEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []DeploymentReviewer `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeploymentReviewerConnection) GetEdges() []*DeploymentReviewerEdge { return x.Edges }
func (x *DeploymentReviewerConnection) GetNodes() []DeploymentReviewer      { return x.Nodes }
func (x *DeploymentReviewerConnection) GetPageInfo() *PageInfo              { return x.PageInfo }
func (x *DeploymentReviewerConnection) GetTotalCount() int                  { return x.TotalCount }

// DeploymentReviewerEdge (OBJECT): An edge in a connection.
type DeploymentReviewerEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node DeploymentReviewer `json:"node,omitempty"`
}

func (x *DeploymentReviewerEdge) GetCursor() string           { return x.Cursor }
func (x *DeploymentReviewerEdge) GetNode() DeploymentReviewer { return x.Node }

// DeploymentState (ENUM): The possible states in which a deployment can be.
type DeploymentState string

// DeploymentState_ABANDONED: The pending deployment was not updated after 30 minutes.
const DeploymentState_ABANDONED DeploymentState = "ABANDONED"

// DeploymentState_ACTIVE: The deployment is currently active.
const DeploymentState_ACTIVE DeploymentState = "ACTIVE"

// DeploymentState_DESTROYED: An inactive transient deployment.
const DeploymentState_DESTROYED DeploymentState = "DESTROYED"

// DeploymentState_ERROR: The deployment experienced an error.
const DeploymentState_ERROR DeploymentState = "ERROR"

// DeploymentState_FAILURE: The deployment has failed.
const DeploymentState_FAILURE DeploymentState = "FAILURE"

// DeploymentState_INACTIVE: The deployment is inactive.
const DeploymentState_INACTIVE DeploymentState = "INACTIVE"

// DeploymentState_PENDING: The deployment is pending.
const DeploymentState_PENDING DeploymentState = "PENDING"

// DeploymentState_SUCCESS: The deployment was successful.
const DeploymentState_SUCCESS DeploymentState = "SUCCESS"

// DeploymentState_QUEUED: The deployment has queued.
const DeploymentState_QUEUED DeploymentState = "QUEUED"

// DeploymentState_IN_PROGRESS: The deployment is in progress.
const DeploymentState_IN_PROGRESS DeploymentState = "IN_PROGRESS"

// DeploymentState_WAITING: The deployment is waiting.
const DeploymentState_WAITING DeploymentState = "WAITING"

// DeploymentStatus (OBJECT): Describes the status of a given deployment attempt.
type DeploymentStatus struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: Identifies the actor who triggered the deployment.
	Creator Actor `json:"creator,omitempty"`

	// Deployment: Identifies the deployment associated with status.
	Deployment *Deployment `json:"deployment,omitempty"`

	// Description: Identifies the description of the deployment.
	Description string `json:"description,omitempty"`

	// Environment: Identifies the environment of the deployment at the time of this deployment status.
	Environment string `json:"environment,omitempty"`

	// EnvironmentUrl: Identifies the environment URL of the deployment.
	EnvironmentUrl URI `json:"environmentUrl,omitempty"`

	// Id: The Node ID of the DeploymentStatus object.
	Id ID `json:"id,omitempty"`

	// LogUrl: Identifies the log URL of the deployment.
	LogUrl URI `json:"logUrl,omitempty"`

	// State: Identifies the current state of the deployment.
	State DeploymentStatusState `json:"state,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *DeploymentStatus) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *DeploymentStatus) GetCreator() Actor               { return x.Creator }
func (x *DeploymentStatus) GetDeployment() *Deployment      { return x.Deployment }
func (x *DeploymentStatus) GetDescription() string          { return x.Description }
func (x *DeploymentStatus) GetEnvironment() string          { return x.Environment }
func (x *DeploymentStatus) GetEnvironmentUrl() URI          { return x.EnvironmentUrl }
func (x *DeploymentStatus) GetId() ID                       { return x.Id }
func (x *DeploymentStatus) GetLogUrl() URI                  { return x.LogUrl }
func (x *DeploymentStatus) GetState() DeploymentStatusState { return x.State }
func (x *DeploymentStatus) GetUpdatedAt() DateTime          { return x.UpdatedAt }

// DeploymentStatusConnection (OBJECT): The connection type for DeploymentStatus.
type DeploymentStatusConnection struct {
	// Edges: A list of edges.
	Edges []*DeploymentStatusEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DeploymentStatus `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DeploymentStatusConnection) GetEdges() []*DeploymentStatusEdge { return x.Edges }
func (x *DeploymentStatusConnection) GetNodes() []*DeploymentStatus     { return x.Nodes }
func (x *DeploymentStatusConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *DeploymentStatusConnection) GetTotalCount() int                { return x.TotalCount }

// DeploymentStatusEdge (OBJECT): An edge in a connection.
type DeploymentStatusEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DeploymentStatus `json:"node,omitempty"`
}

func (x *DeploymentStatusEdge) GetCursor() string          { return x.Cursor }
func (x *DeploymentStatusEdge) GetNode() *DeploymentStatus { return x.Node }

// DeploymentStatusState (ENUM): The possible states for a deployment status.
type DeploymentStatusState string

// DeploymentStatusState_PENDING: The deployment is pending.
const DeploymentStatusState_PENDING DeploymentStatusState = "PENDING"

// DeploymentStatusState_SUCCESS: The deployment was successful.
const DeploymentStatusState_SUCCESS DeploymentStatusState = "SUCCESS"

// DeploymentStatusState_FAILURE: The deployment has failed.
const DeploymentStatusState_FAILURE DeploymentStatusState = "FAILURE"

// DeploymentStatusState_INACTIVE: The deployment is inactive.
const DeploymentStatusState_INACTIVE DeploymentStatusState = "INACTIVE"

// DeploymentStatusState_ERROR: The deployment experienced an error.
const DeploymentStatusState_ERROR DeploymentStatusState = "ERROR"

// DeploymentStatusState_QUEUED: The deployment is queued.
const DeploymentStatusState_QUEUED DeploymentStatusState = "QUEUED"

// DeploymentStatusState_IN_PROGRESS: The deployment is in progress.
const DeploymentStatusState_IN_PROGRESS DeploymentStatusState = "IN_PROGRESS"

// DeploymentStatusState_WAITING: The deployment is waiting.
const DeploymentStatusState_WAITING DeploymentStatusState = "WAITING"

// DequeuePullRequestInput (INPUT_OBJECT): Autogenerated input type of DequeuePullRequest.
type DequeuePullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the pull request to be dequeued.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// DequeuePullRequestPayload (OBJECT): Autogenerated return type of DequeuePullRequest.
type DequeuePullRequestPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// MergeQueueEntry: The merge queue entry of the dequeued pull request.
	MergeQueueEntry *MergeQueueEntry `json:"mergeQueueEntry,omitempty"`
}

func (x *DequeuePullRequestPayload) GetClientMutationId() string          { return x.ClientMutationId }
func (x *DequeuePullRequestPayload) GetMergeQueueEntry() *MergeQueueEntry { return x.MergeQueueEntry }

// DiffSide (ENUM): The possible sides of a diff.
type DiffSide string

// DiffSide_LEFT: The left side of the diff.
const DiffSide_LEFT DiffSide = "LEFT"

// DiffSide_RIGHT: The right side of the diff.
const DiffSide_RIGHT DiffSide = "RIGHT"

// DisablePullRequestAutoMergeInput (INPUT_OBJECT): Autogenerated input type of DisablePullRequestAutoMerge.
type DisablePullRequestAutoMergeInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to disable auto merge on.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`
}

// DisablePullRequestAutoMergePayload (OBJECT): Autogenerated return type of DisablePullRequestAutoMerge.
type DisablePullRequestAutoMergePayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request auto merge was disabled on.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *DisablePullRequestAutoMergePayload) GetActor() Actor              { return x.Actor }
func (x *DisablePullRequestAutoMergePayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *DisablePullRequestAutoMergePayload) GetPullRequest() *PullRequest { return x.PullRequest }

// DisconnectedEvent (OBJECT): Represents a 'disconnected' event on a given issue or pull request.
type DisconnectedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the DisconnectedEvent object.
	Id ID `json:"id,omitempty"`

	// IsCrossRepository: Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`

	// Source: Issue or pull request from which the issue was disconnected.
	Source ReferencedSubject `json:"source,omitempty"`

	// Subject: Issue or pull request which was disconnected.
	Subject ReferencedSubject `json:"subject,omitempty"`
}

func (x *DisconnectedEvent) GetActor() Actor               { return x.Actor }
func (x *DisconnectedEvent) GetCreatedAt() DateTime        { return x.CreatedAt }
func (x *DisconnectedEvent) GetId() ID                     { return x.Id }
func (x *DisconnectedEvent) GetIsCrossRepository() bool    { return x.IsCrossRepository }
func (x *DisconnectedEvent) GetSource() ReferencedSubject  { return x.Source }
func (x *DisconnectedEvent) GetSubject() ReferencedSubject { return x.Subject }

// Discussion (OBJECT): A discussion in a repository.
type Discussion struct {
	// ActiveLockReason: Reason that the conversation was locked.
	ActiveLockReason LockReason `json:"activeLockReason,omitempty"`

	// Answer: The comment chosen as this discussion's answer, if any.
	Answer *DiscussionComment `json:"answer,omitempty"`

	// AnswerChosenAt: The time when a user chose this discussion's answer, if answered.
	AnswerChosenAt DateTime `json:"answerChosenAt,omitempty"`

	// AnswerChosenBy: The user who chose this discussion's answer, if answered.
	AnswerChosenBy Actor `json:"answerChosenBy,omitempty"`

	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: The main text of the discussion post.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// Category: The category for this discussion.
	Category *DiscussionCategory `json:"category,omitempty"`

	// Closed: Indicates if the object is closed (definition of closed may depend on type).
	Closed bool `json:"closed,omitempty"`

	// ClosedAt: Identifies the date and time when the object was closed.
	ClosedAt DateTime `json:"closedAt,omitempty"`

	// Comments: The replies to the discussion.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *DiscussionCommentConnection `json:"comments,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// Id: The Node ID of the Discussion object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsAnswered: Only return answered/unanswered discussions.
	IsAnswered bool `json:"isAnswered,omitempty"`

	// Labels: A list of labels associated with the object.
	//
	// Query arguments:
	//   - orderBy LabelOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Labels *LabelConnection `json:"labels,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// Locked: `true` if the object is locked.
	Locked bool `json:"locked,omitempty"`

	// Number: The number identifying this discussion within the repository.
	Number int `json:"number,omitempty"`

	// Poll: The poll associated with this discussion, if one exists.
	Poll *DiscussionPoll `json:"poll,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The path for this discussion.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// StateReason: Identifies the reason for the discussion's state.
	StateReason DiscussionStateReason `json:"stateReason,omitempty"`

	// Title: The title of this discussion.
	Title string `json:"title,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// UpvoteCount: Number of upvotes that this subject has received.
	UpvoteCount int `json:"upvoteCount,omitempty"`

	// Url: The URL for this discussion.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanClose: Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanLabel: Indicates if the viewer can edit labels for this object.
	ViewerCanLabel bool `json:"viewerCanLabel,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanReopen: Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCanUpvote: Whether or not the current user can add or remove an upvote on this subject.
	ViewerCanUpvote bool `json:"viewerCanUpvote,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`

	// ViewerHasUpvoted: Whether or not the current user has already upvoted this subject.
	ViewerHasUpvoted bool `json:"viewerHasUpvoted,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (x *Discussion) GetActiveLockReason() LockReason                 { return x.ActiveLockReason }
func (x *Discussion) GetAnswer() *DiscussionComment                   { return x.Answer }
func (x *Discussion) GetAnswerChosenAt() DateTime                     { return x.AnswerChosenAt }
func (x *Discussion) GetAnswerChosenBy() Actor                        { return x.AnswerChosenBy }
func (x *Discussion) GetAuthor() Actor                                { return x.Author }
func (x *Discussion) GetAuthorAssociation() CommentAuthorAssociation  { return x.AuthorAssociation }
func (x *Discussion) GetBody() string                                 { return x.Body }
func (x *Discussion) GetBodyHTML() template.HTML                      { return x.BodyHTML }
func (x *Discussion) GetBodyText() string                             { return x.BodyText }
func (x *Discussion) GetCategory() *DiscussionCategory                { return x.Category }
func (x *Discussion) GetClosed() bool                                 { return x.Closed }
func (x *Discussion) GetClosedAt() DateTime                           { return x.ClosedAt }
func (x *Discussion) GetComments() *DiscussionCommentConnection       { return x.Comments }
func (x *Discussion) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *Discussion) GetCreatedViaEmail() bool                        { return x.CreatedViaEmail }
func (x *Discussion) GetDatabaseId() int                              { return x.DatabaseId }
func (x *Discussion) GetEditor() Actor                                { return x.Editor }
func (x *Discussion) GetId() ID                                       { return x.Id }
func (x *Discussion) GetIncludesCreatedEdit() bool                    { return x.IncludesCreatedEdit }
func (x *Discussion) GetIsAnswered() bool                             { return x.IsAnswered }
func (x *Discussion) GetLabels() *LabelConnection                     { return x.Labels }
func (x *Discussion) GetLastEditedAt() DateTime                       { return x.LastEditedAt }
func (x *Discussion) GetLocked() bool                                 { return x.Locked }
func (x *Discussion) GetNumber() int                                  { return x.Number }
func (x *Discussion) GetPoll() *DiscussionPoll                        { return x.Poll }
func (x *Discussion) GetPublishedAt() DateTime                        { return x.PublishedAt }
func (x *Discussion) GetReactionGroups() []*ReactionGroup             { return x.ReactionGroups }
func (x *Discussion) GetReactions() *ReactionConnection               { return x.Reactions }
func (x *Discussion) GetRepository() *Repository                      { return x.Repository }
func (x *Discussion) GetResourcePath() URI                            { return x.ResourcePath }
func (x *Discussion) GetStateReason() DiscussionStateReason           { return x.StateReason }
func (x *Discussion) GetTitle() string                                { return x.Title }
func (x *Discussion) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *Discussion) GetUpvoteCount() int                             { return x.UpvoteCount }
func (x *Discussion) GetUrl() URI                                     { return x.Url }
func (x *Discussion) GetUserContentEdits() *UserContentEditConnection { return x.UserContentEdits }
func (x *Discussion) GetViewerCanClose() bool                         { return x.ViewerCanClose }
func (x *Discussion) GetViewerCanDelete() bool                        { return x.ViewerCanDelete }
func (x *Discussion) GetViewerCanLabel() bool                         { return x.ViewerCanLabel }
func (x *Discussion) GetViewerCanReact() bool                         { return x.ViewerCanReact }
func (x *Discussion) GetViewerCanReopen() bool                        { return x.ViewerCanReopen }
func (x *Discussion) GetViewerCanSubscribe() bool                     { return x.ViewerCanSubscribe }
func (x *Discussion) GetViewerCanUpdate() bool                        { return x.ViewerCanUpdate }
func (x *Discussion) GetViewerCanUpvote() bool                        { return x.ViewerCanUpvote }
func (x *Discussion) GetViewerDidAuthor() bool                        { return x.ViewerDidAuthor }
func (x *Discussion) GetViewerHasUpvoted() bool                       { return x.ViewerHasUpvoted }
func (x *Discussion) GetViewerSubscription() SubscriptionState        { return x.ViewerSubscription }

// DiscussionCategory (OBJECT): A category for discussions in a repository.
type DiscussionCategory struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Description: A description of this category.
	Description string `json:"description,omitempty"`

	// Emoji: An emoji representing this category.
	Emoji string `json:"emoji,omitempty"`

	// EmojiHTML: This category's emoji rendered as HTML.
	EmojiHTML template.HTML `json:"emojiHTML,omitempty"`

	// Id: The Node ID of the DiscussionCategory object.
	Id ID `json:"id,omitempty"`

	// IsAnswerable: Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
	IsAnswerable bool `json:"isAnswerable,omitempty"`

	// Name: The name of this category.
	Name string `json:"name,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// Slug: The slug of this category.
	Slug string `json:"slug,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *DiscussionCategory) GetCreatedAt() DateTime      { return x.CreatedAt }
func (x *DiscussionCategory) GetDescription() string      { return x.Description }
func (x *DiscussionCategory) GetEmoji() string            { return x.Emoji }
func (x *DiscussionCategory) GetEmojiHTML() template.HTML { return x.EmojiHTML }
func (x *DiscussionCategory) GetId() ID                   { return x.Id }
func (x *DiscussionCategory) GetIsAnswerable() bool       { return x.IsAnswerable }
func (x *DiscussionCategory) GetName() string             { return x.Name }
func (x *DiscussionCategory) GetRepository() *Repository  { return x.Repository }
func (x *DiscussionCategory) GetSlug() string             { return x.Slug }
func (x *DiscussionCategory) GetUpdatedAt() DateTime      { return x.UpdatedAt }

// DiscussionCategoryConnection (OBJECT): The connection type for DiscussionCategory.
type DiscussionCategoryConnection struct {
	// Edges: A list of edges.
	Edges []*DiscussionCategoryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DiscussionCategory `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DiscussionCategoryConnection) GetEdges() []*DiscussionCategoryEdge { return x.Edges }
func (x *DiscussionCategoryConnection) GetNodes() []*DiscussionCategory     { return x.Nodes }
func (x *DiscussionCategoryConnection) GetPageInfo() *PageInfo              { return x.PageInfo }
func (x *DiscussionCategoryConnection) GetTotalCount() int                  { return x.TotalCount }

// DiscussionCategoryEdge (OBJECT): An edge in a connection.
type DiscussionCategoryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DiscussionCategory `json:"node,omitempty"`
}

func (x *DiscussionCategoryEdge) GetCursor() string            { return x.Cursor }
func (x *DiscussionCategoryEdge) GetNode() *DiscussionCategory { return x.Node }

// DiscussionCloseReason (ENUM): The possible reasons for closing a discussion.
type DiscussionCloseReason string

// DiscussionCloseReason_RESOLVED: The discussion has been resolved.
const DiscussionCloseReason_RESOLVED DiscussionCloseReason = "RESOLVED"

// DiscussionCloseReason_OUTDATED: The discussion is no longer relevant.
const DiscussionCloseReason_OUTDATED DiscussionCloseReason = "OUTDATED"

// DiscussionCloseReason_DUPLICATE: The discussion is a duplicate of another.
const DiscussionCloseReason_DUPLICATE DiscussionCloseReason = "DUPLICATE"

// DiscussionComment (OBJECT): A comment on a discussion.
type DiscussionComment struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: The body as Markdown.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DeletedAt: The time when this replied-to comment was deleted.
	DeletedAt DateTime `json:"deletedAt,omitempty"`

	// Discussion: The discussion this comment was created in.
	Discussion *Discussion `json:"discussion,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// Id: The Node ID of the DiscussionComment object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsAnswer: Has this comment been chosen as the answer of its discussion?.
	IsAnswer bool `json:"isAnswer,omitempty"`

	// IsMinimized: Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// MinimizedReason: Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason string `json:"minimizedReason,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Replies: The threaded replies to this comment.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Replies *DiscussionCommentConnection `json:"replies,omitempty"`

	// ReplyTo: The discussion comment this comment is a reply to.
	ReplyTo *DiscussionComment `json:"replyTo,omitempty"`

	// ResourcePath: The path for this discussion comment.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// UpvoteCount: Number of upvotes that this subject has received.
	UpvoteCount int `json:"upvoteCount,omitempty"`

	// Url: The URL for this discussion comment.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanMarkAsAnswer: Can the current user mark this comment as an answer?.
	ViewerCanMarkAsAnswer bool `json:"viewerCanMarkAsAnswer,omitempty"`

	// ViewerCanMinimize: Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanUnmarkAsAnswer: Can the current user unmark this comment as an answer?.
	ViewerCanUnmarkAsAnswer bool `json:"viewerCanUnmarkAsAnswer,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCanUpvote: Whether or not the current user can add or remove an upvote on this subject.
	ViewerCanUpvote bool `json:"viewerCanUpvote,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`

	// ViewerHasUpvoted: Whether or not the current user has already upvoted this subject.
	ViewerHasUpvoted bool `json:"viewerHasUpvoted,omitempty"`
}

func (x *DiscussionComment) GetAuthor() Actor { return x.Author }
func (x *DiscussionComment) GetAuthorAssociation() CommentAuthorAssociation {
	return x.AuthorAssociation
}
func (x *DiscussionComment) GetBody() string                          { return x.Body }
func (x *DiscussionComment) GetBodyHTML() template.HTML               { return x.BodyHTML }
func (x *DiscussionComment) GetBodyText() string                      { return x.BodyText }
func (x *DiscussionComment) GetCreatedAt() DateTime                   { return x.CreatedAt }
func (x *DiscussionComment) GetCreatedViaEmail() bool                 { return x.CreatedViaEmail }
func (x *DiscussionComment) GetDatabaseId() int                       { return x.DatabaseId }
func (x *DiscussionComment) GetDeletedAt() DateTime                   { return x.DeletedAt }
func (x *DiscussionComment) GetDiscussion() *Discussion               { return x.Discussion }
func (x *DiscussionComment) GetEditor() Actor                         { return x.Editor }
func (x *DiscussionComment) GetId() ID                                { return x.Id }
func (x *DiscussionComment) GetIncludesCreatedEdit() bool             { return x.IncludesCreatedEdit }
func (x *DiscussionComment) GetIsAnswer() bool                        { return x.IsAnswer }
func (x *DiscussionComment) GetIsMinimized() bool                     { return x.IsMinimized }
func (x *DiscussionComment) GetLastEditedAt() DateTime                { return x.LastEditedAt }
func (x *DiscussionComment) GetMinimizedReason() string               { return x.MinimizedReason }
func (x *DiscussionComment) GetPublishedAt() DateTime                 { return x.PublishedAt }
func (x *DiscussionComment) GetReactionGroups() []*ReactionGroup      { return x.ReactionGroups }
func (x *DiscussionComment) GetReactions() *ReactionConnection        { return x.Reactions }
func (x *DiscussionComment) GetReplies() *DiscussionCommentConnection { return x.Replies }
func (x *DiscussionComment) GetReplyTo() *DiscussionComment           { return x.ReplyTo }
func (x *DiscussionComment) GetResourcePath() URI                     { return x.ResourcePath }
func (x *DiscussionComment) GetUpdatedAt() DateTime                   { return x.UpdatedAt }
func (x *DiscussionComment) GetUpvoteCount() int                      { return x.UpvoteCount }
func (x *DiscussionComment) GetUrl() URI                              { return x.Url }
func (x *DiscussionComment) GetUserContentEdits() *UserContentEditConnection {
	return x.UserContentEdits
}
func (x *DiscussionComment) GetViewerCanDelete() bool         { return x.ViewerCanDelete }
func (x *DiscussionComment) GetViewerCanMarkAsAnswer() bool   { return x.ViewerCanMarkAsAnswer }
func (x *DiscussionComment) GetViewerCanMinimize() bool       { return x.ViewerCanMinimize }
func (x *DiscussionComment) GetViewerCanReact() bool          { return x.ViewerCanReact }
func (x *DiscussionComment) GetViewerCanUnmarkAsAnswer() bool { return x.ViewerCanUnmarkAsAnswer }
func (x *DiscussionComment) GetViewerCanUpdate() bool         { return x.ViewerCanUpdate }
func (x *DiscussionComment) GetViewerCanUpvote() bool         { return x.ViewerCanUpvote }
func (x *DiscussionComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *DiscussionComment) GetViewerDidAuthor() bool  { return x.ViewerDidAuthor }
func (x *DiscussionComment) GetViewerHasUpvoted() bool { return x.ViewerHasUpvoted }

// DiscussionCommentConnection (OBJECT): The connection type for DiscussionComment.
type DiscussionCommentConnection struct {
	// Edges: A list of edges.
	Edges []*DiscussionCommentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DiscussionComment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DiscussionCommentConnection) GetEdges() []*DiscussionCommentEdge { return x.Edges }
func (x *DiscussionCommentConnection) GetNodes() []*DiscussionComment     { return x.Nodes }
func (x *DiscussionCommentConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *DiscussionCommentConnection) GetTotalCount() int                 { return x.TotalCount }

// DiscussionCommentEdge (OBJECT): An edge in a connection.
type DiscussionCommentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DiscussionComment `json:"node,omitempty"`
}

func (x *DiscussionCommentEdge) GetCursor() string           { return x.Cursor }
func (x *DiscussionCommentEdge) GetNode() *DiscussionComment { return x.Node }

// DiscussionConnection (OBJECT): The connection type for Discussion.
type DiscussionConnection struct {
	// Edges: A list of edges.
	Edges []*DiscussionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Discussion `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DiscussionConnection) GetEdges() []*DiscussionEdge { return x.Edges }
func (x *DiscussionConnection) GetNodes() []*Discussion     { return x.Nodes }
func (x *DiscussionConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *DiscussionConnection) GetTotalCount() int          { return x.TotalCount }

// DiscussionEdge (OBJECT): An edge in a connection.
type DiscussionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Discussion `json:"node,omitempty"`
}

func (x *DiscussionEdge) GetCursor() string    { return x.Cursor }
func (x *DiscussionEdge) GetNode() *Discussion { return x.Node }

// DiscussionOrder (INPUT_OBJECT): Ways in which lists of discussions can be ordered upon return.
type DiscussionOrder struct {
	// Field: The field by which to order discussions.
	//
	// GraphQL type: DiscussionOrderField!
	Field DiscussionOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order discussions by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// DiscussionOrderField (ENUM): Properties by which discussion connections can be ordered.
type DiscussionOrderField string

// DiscussionOrderField_CREATED_AT: Order discussions by creation time.
const DiscussionOrderField_CREATED_AT DiscussionOrderField = "CREATED_AT"

// DiscussionOrderField_UPDATED_AT: Order discussions by most recent modification time.
const DiscussionOrderField_UPDATED_AT DiscussionOrderField = "UPDATED_AT"

// DiscussionPoll (OBJECT): A poll for a discussion.
type DiscussionPoll struct {
	// Discussion: The discussion that this poll belongs to.
	Discussion *Discussion `json:"discussion,omitempty"`

	// Id: The Node ID of the DiscussionPoll object.
	Id ID `json:"id,omitempty"`

	// Options: The options for this poll.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy DiscussionPollOptionOrder
	Options *DiscussionPollOptionConnection `json:"options,omitempty"`

	// Question: The question that is being asked by this poll.
	Question string `json:"question,omitempty"`

	// TotalVoteCount: The total number of votes that have been cast for this poll.
	TotalVoteCount int `json:"totalVoteCount,omitempty"`

	// ViewerCanVote: Indicates if the viewer has permission to vote in this poll.
	ViewerCanVote bool `json:"viewerCanVote,omitempty"`

	// ViewerHasVoted: Indicates if the viewer has voted for any option in this poll.
	ViewerHasVoted bool `json:"viewerHasVoted,omitempty"`
}

func (x *DiscussionPoll) GetDiscussion() *Discussion                  { return x.Discussion }
func (x *DiscussionPoll) GetId() ID                                   { return x.Id }
func (x *DiscussionPoll) GetOptions() *DiscussionPollOptionConnection { return x.Options }
func (x *DiscussionPoll) GetQuestion() string                         { return x.Question }
func (x *DiscussionPoll) GetTotalVoteCount() int                      { return x.TotalVoteCount }
func (x *DiscussionPoll) GetViewerCanVote() bool                      { return x.ViewerCanVote }
func (x *DiscussionPoll) GetViewerHasVoted() bool                     { return x.ViewerHasVoted }

// DiscussionPollOption (OBJECT): An option for a discussion poll.
type DiscussionPollOption struct {
	// Id: The Node ID of the DiscussionPollOption object.
	Id ID `json:"id,omitempty"`

	// Option: The text for this option.
	Option string `json:"option,omitempty"`

	// Poll: The discussion poll that this option belongs to.
	Poll *DiscussionPoll `json:"poll,omitempty"`

	// TotalVoteCount: The total number of votes that have been cast for this option.
	TotalVoteCount int `json:"totalVoteCount,omitempty"`

	// ViewerHasVoted: Indicates if the viewer has voted for this option in the poll.
	ViewerHasVoted bool `json:"viewerHasVoted,omitempty"`
}

func (x *DiscussionPollOption) GetId() ID                { return x.Id }
func (x *DiscussionPollOption) GetOption() string        { return x.Option }
func (x *DiscussionPollOption) GetPoll() *DiscussionPoll { return x.Poll }
func (x *DiscussionPollOption) GetTotalVoteCount() int   { return x.TotalVoteCount }
func (x *DiscussionPollOption) GetViewerHasVoted() bool  { return x.ViewerHasVoted }

// DiscussionPollOptionConnection (OBJECT): The connection type for DiscussionPollOption.
type DiscussionPollOptionConnection struct {
	// Edges: A list of edges.
	Edges []*DiscussionPollOptionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*DiscussionPollOption `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *DiscussionPollOptionConnection) GetEdges() []*DiscussionPollOptionEdge { return x.Edges }
func (x *DiscussionPollOptionConnection) GetNodes() []*DiscussionPollOption     { return x.Nodes }
func (x *DiscussionPollOptionConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *DiscussionPollOptionConnection) GetTotalCount() int                    { return x.TotalCount }

// DiscussionPollOptionEdge (OBJECT): An edge in a connection.
type DiscussionPollOptionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *DiscussionPollOption `json:"node,omitempty"`
}

func (x *DiscussionPollOptionEdge) GetCursor() string              { return x.Cursor }
func (x *DiscussionPollOptionEdge) GetNode() *DiscussionPollOption { return x.Node }

// DiscussionPollOptionOrder (INPUT_OBJECT): Ordering options for discussion poll option connections.
type DiscussionPollOptionOrder struct {
	// Field: The field to order poll options by.
	//
	// GraphQL type: DiscussionPollOptionOrderField!
	Field DiscussionPollOptionOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// DiscussionPollOptionOrderField (ENUM): Properties by which discussion poll option connections can be ordered.
type DiscussionPollOptionOrderField string

// DiscussionPollOptionOrderField_AUTHORED_ORDER: Order poll options by the order that the poll author specified when creating the poll.
const DiscussionPollOptionOrderField_AUTHORED_ORDER DiscussionPollOptionOrderField = "AUTHORED_ORDER"

// DiscussionPollOptionOrderField_VOTE_COUNT: Order poll options by the number of votes it has.
const DiscussionPollOptionOrderField_VOTE_COUNT DiscussionPollOptionOrderField = "VOTE_COUNT"

// DiscussionState (ENUM): The possible states of a discussion.
type DiscussionState string

// DiscussionState_OPEN: A discussion that is open.
const DiscussionState_OPEN DiscussionState = "OPEN"

// DiscussionState_CLOSED: A discussion that has been closed.
const DiscussionState_CLOSED DiscussionState = "CLOSED"

// DiscussionStateReason (ENUM): The possible state reasons of a discussion.
type DiscussionStateReason string

// DiscussionStateReason_RESOLVED: The discussion has been resolved.
const DiscussionStateReason_RESOLVED DiscussionStateReason = "RESOLVED"

// DiscussionStateReason_OUTDATED: The discussion is no longer relevant.
const DiscussionStateReason_OUTDATED DiscussionStateReason = "OUTDATED"

// DiscussionStateReason_DUPLICATE: The discussion is a duplicate of another.
const DiscussionStateReason_DUPLICATE DiscussionStateReason = "DUPLICATE"

// DiscussionStateReason_REOPENED: The discussion was reopened.
const DiscussionStateReason_REOPENED DiscussionStateReason = "REOPENED"

// DismissPullRequestReviewInput (INPUT_OBJECT): Autogenerated input type of DismissPullRequestReview.
type DismissPullRequestReviewInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReviewId: The Node ID of the pull request review to modify.
	//
	// GraphQL type: ID!
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`

	// Message: The contents of the pull request review dismissal message.
	//
	// GraphQL type: String!
	Message string `json:"message,omitempty"`
}

// DismissPullRequestReviewPayload (OBJECT): Autogenerated return type of DismissPullRequestReview.
type DismissPullRequestReviewPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReview: The dismissed pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

func (x *DismissPullRequestReviewPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *DismissPullRequestReviewPayload) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}

// DismissReason (ENUM): The possible reasons that a Dependabot alert was dismissed.
type DismissReason string

// DismissReason_FIX_STARTED: A fix has already been started.
const DismissReason_FIX_STARTED DismissReason = "FIX_STARTED"

// DismissReason_NO_BANDWIDTH: No bandwidth to fix this.
const DismissReason_NO_BANDWIDTH DismissReason = "NO_BANDWIDTH"

// DismissReason_TOLERABLE_RISK: Risk is tolerable to this project.
const DismissReason_TOLERABLE_RISK DismissReason = "TOLERABLE_RISK"

// DismissReason_INACCURATE: This alert is inaccurate or incorrect.
const DismissReason_INACCURATE DismissReason = "INACCURATE"

// DismissReason_NOT_USED: Vulnerable code is not actually used.
const DismissReason_NOT_USED DismissReason = "NOT_USED"

// DismissRepositoryVulnerabilityAlertInput (INPUT_OBJECT): Autogenerated input type of DismissRepositoryVulnerabilityAlert.
type DismissRepositoryVulnerabilityAlertInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryVulnerabilityAlertId: The Dependabot alert ID to dismiss.
	//
	// GraphQL type: ID!
	RepositoryVulnerabilityAlertId ID `json:"repositoryVulnerabilityAlertId,omitempty"`

	// DismissReason: The reason the Dependabot alert is being dismissed.
	//
	// GraphQL type: DismissReason!
	DismissReason DismissReason `json:"dismissReason,omitempty"`
}

// DismissRepositoryVulnerabilityAlertPayload (OBJECT): Autogenerated return type of DismissRepositoryVulnerabilityAlert.
type DismissRepositoryVulnerabilityAlertPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryVulnerabilityAlert: The Dependabot alert that was dismissed.
	RepositoryVulnerabilityAlert *RepositoryVulnerabilityAlert `json:"repositoryVulnerabilityAlert,omitempty"`
}

func (x *DismissRepositoryVulnerabilityAlertPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *DismissRepositoryVulnerabilityAlertPayload) GetRepositoryVulnerabilityAlert() *RepositoryVulnerabilityAlert {
	return x.RepositoryVulnerabilityAlert
}

// DraftIssue (OBJECT): A draft issue within a project.
type DraftIssue struct {
	// Assignees: A list of users to assigned to this draft issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Assignees *UserConnection `json:"assignees,omitempty"`

	// Body: The body of the draft issue.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body of the draft issue rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body of the draft issue rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created this draft issue.
	Creator Actor `json:"creator,omitempty"`

	// Id: The Node ID of the DraftIssue object.
	Id ID `json:"id,omitempty"`

	// ProjectV2Items: List of items linked with the draft issue (currently draft issue can be linked to only one item).
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectV2Items *ProjectV2ItemConnection `json:"projectV2Items,omitempty"`

	// ProjectsV2: Projects that link to this draft issue (currently draft issue can be linked to only one project).
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// Title: The title of the draft issue.
	Title string `json:"title,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *DraftIssue) GetAssignees() *UserConnection               { return x.Assignees }
func (x *DraftIssue) GetBody() string                             { return x.Body }
func (x *DraftIssue) GetBodyHTML() template.HTML                  { return x.BodyHTML }
func (x *DraftIssue) GetBodyText() string                         { return x.BodyText }
func (x *DraftIssue) GetCreatedAt() DateTime                      { return x.CreatedAt }
func (x *DraftIssue) GetCreator() Actor                           { return x.Creator }
func (x *DraftIssue) GetId() ID                                   { return x.Id }
func (x *DraftIssue) GetProjectV2Items() *ProjectV2ItemConnection { return x.ProjectV2Items }
func (x *DraftIssue) GetProjectsV2() *ProjectV2Connection         { return x.ProjectsV2 }
func (x *DraftIssue) GetTitle() string                            { return x.Title }
func (x *DraftIssue) GetUpdatedAt() DateTime                      { return x.UpdatedAt }

// DraftPullRequestReviewComment (INPUT_OBJECT): Specifies a review comment to be left with a Pull Request Review.
type DraftPullRequestReviewComment struct {
	// Path: Path to the file being commented on.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`

	// Position: Position in the file to leave a comment on.
	//
	// GraphQL type: Int!
	Position int `json:"position,omitempty"`

	// Body: Body of the comment to leave.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// DraftPullRequestReviewThread (INPUT_OBJECT): Specifies a review comment thread to be left with a Pull Request Review.
type DraftPullRequestReviewThread struct {
	// Path: Path to the file being commented on.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`

	// Line: The line of the blob to which the thread refers. The end of the line range for multi-line comments.
	//
	// GraphQL type: Int!
	Line int `json:"line,omitempty"`

	// Side: The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
	//
	// GraphQL type: DiffSide
	Side DiffSide `json:"side,omitempty"`

	// StartLine: The first line of the range to which the comment refers.
	//
	// GraphQL type: Int
	StartLine int `json:"startLine,omitempty"`

	// StartSide: The side of the diff on which the start line resides.
	//
	// GraphQL type: DiffSide
	StartSide DiffSide `json:"startSide,omitempty"`

	// Body: Body of the comment to leave.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// EPSS (OBJECT): The Exploit Prediction Scoring System.
type EPSS struct {
	// Percentage: The EPSS percentage represents the likelihood of a CVE being exploited.
	Percentage float64 `json:"percentage,omitempty"`

	// Percentile: The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.
	Percentile float64 `json:"percentile,omitempty"`
}

func (x *EPSS) GetPercentage() float64 { return x.Percentage }
func (x *EPSS) GetPercentile() float64 { return x.Percentile }

// EnablePullRequestAutoMergeInput (INPUT_OBJECT): Autogenerated input type of EnablePullRequestAutoMerge.
type EnablePullRequestAutoMergeInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to enable auto-merge on.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// CommitHeadline: Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored.
	//
	// GraphQL type: String
	CommitHeadline string `json:"commitHeadline,omitempty"`

	// CommitBody: Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored.
	//
	// GraphQL type: String
	CommitBody string `json:"commitBody,omitempty"`

	// MergeMethod: The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored.
	//
	// GraphQL type: PullRequestMergeMethod
	MergeMethod PullRequestMergeMethod `json:"mergeMethod,omitempty"`

	// AuthorEmail: The email address to associate with this merge.
	//
	// GraphQL type: String
	AuthorEmail string `json:"authorEmail,omitempty"`

	// ExpectedHeadOid: The expected head OID of the pull request.
	//
	// GraphQL type: GitObjectID
	ExpectedHeadOid GitObjectID `json:"expectedHeadOid,omitempty"`
}

// EnablePullRequestAutoMergePayload (OBJECT): Autogenerated return type of EnablePullRequestAutoMerge.
type EnablePullRequestAutoMergePayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request auto-merge was enabled on.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *EnablePullRequestAutoMergePayload) GetActor() Actor              { return x.Actor }
func (x *EnablePullRequestAutoMergePayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *EnablePullRequestAutoMergePayload) GetPullRequest() *PullRequest { return x.PullRequest }

// EnqueuePullRequestInput (INPUT_OBJECT): Autogenerated input type of EnqueuePullRequest.
type EnqueuePullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The ID of the pull request to enqueue.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// Jump: Add the pull request to the front of the queue.
	//
	// GraphQL type: Boolean
	Jump bool `json:"jump,omitempty"`

	// ExpectedHeadOid: The expected head OID of the pull request.
	//
	// GraphQL type: GitObjectID
	ExpectedHeadOid GitObjectID `json:"expectedHeadOid,omitempty"`
}

// EnqueuePullRequestPayload (OBJECT): Autogenerated return type of EnqueuePullRequest.
type EnqueuePullRequestPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// MergeQueueEntry: The merge queue entry for the enqueued pull request.
	MergeQueueEntry *MergeQueueEntry `json:"mergeQueueEntry,omitempty"`
}

func (x *EnqueuePullRequestPayload) GetClientMutationId() string          { return x.ClientMutationId }
func (x *EnqueuePullRequestPayload) GetMergeQueueEntry() *MergeQueueEntry { return x.MergeQueueEntry }

// Enterprise (OBJECT): An account to manage multiple organizations with consolidated policy and billing.
type Enterprise struct {
	// Announcement: The text of the announcement.
	//
	// Deprecated: The text of the announcement.
	Announcement string `json:"announcement,omitempty"`

	// AnnouncementBanner: The announcement banner set on this enterprise, if any. Only visible to members of the enterprise.
	AnnouncementBanner *AnnouncementBanner `json:"announcementBanner,omitempty"`

	// AnnouncementCreatedAt: The date the announcement was created.
	//
	// Deprecated: The date the announcement was created.
	AnnouncementCreatedAt DateTime `json:"announcementCreatedAt,omitempty"`

	// AnnouncementExpiresAt: The expiration date of the announcement, if any.
	//
	// Deprecated: The expiration date of the announcement, if any.
	AnnouncementExpiresAt DateTime `json:"announcementExpiresAt,omitempty"`

	// AnnouncementUserDismissible: Whether the announcement can be dismissed by the user.
	//
	// Deprecated: Whether the announcement can be dismissed by the user.
	AnnouncementUserDismissible bool `json:"announcementUserDismissible,omitempty"`

	// AvatarUrl: A URL pointing to the enterprise's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// BillingEmail: The enterprise's billing email.
	BillingEmail string `json:"billingEmail,omitempty"`

	// BillingInfo: Enterprise billing information visible to enterprise billing managers.
	BillingInfo *EnterpriseBillingInfo `json:"billingInfo,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: The description of the enterprise.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The description of the enterprise as HTML.
	DescriptionHTML template.HTML `json:"descriptionHTML,omitempty"`

	// Id: The Node ID of the Enterprise object.
	Id ID `json:"id,omitempty"`

	// Location: The location of the enterprise.
	Location string `json:"location,omitempty"`

	// Members: A list of users who are members of this enterprise.
	//
	// Query arguments:
	//   - organizationLogins [String!]
	//   - query String
	//   - orderBy EnterpriseMemberOrder
	//   - role EnterpriseUserAccountMembershipRole
	//   - deployment EnterpriseUserDeployment
	//   - hasTwoFactorEnabled Boolean
	//   - twoFactorMethodSecurity TwoFactorCredentialSecurityType
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Members *EnterpriseMemberConnection `json:"members,omitempty"`

	// Name: The name of the enterprise.
	Name string `json:"name,omitempty"`

	// Organizations: A list of organizations that belong to this enterprise.
	//
	// Query arguments:
	//   - query String
	//   - viewerOrganizationRole RoleInOrganization
	//   - orderBy OrganizationOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Organizations *OrganizationConnection `json:"organizations,omitempty"`

	// OwnerInfo: Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
	OwnerInfo *EnterpriseOwnerInfo `json:"ownerInfo,omitempty"`

	// Readme: The raw content of the enterprise README.
	Readme string `json:"readme,omitempty"`

	// ReadmeHTML: The content of the enterprise README as HTML.
	ReadmeHTML template.HTML `json:"readmeHTML,omitempty"`

	// ResourcePath: The HTTP path for this enterprise.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Ruleset: Returns a single ruleset from the current enterprise by ID.
	//
	// Query arguments:
	//   - databaseId Int!
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`

	// Rulesets: A list of rulesets for this enterprise.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Rulesets *RepositoryRulesetConnection `json:"rulesets,omitempty"`

	// Slug: The URL-friendly identifier for the enterprise.
	Slug string `json:"slug,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this enterprise.
	Url URI `json:"url,omitempty"`

	// UserNamespaceRepositories: A list of repositories that belong to users. Only available for enterprises with Enterprise Managed Users.
	//
	// Query arguments:
	//   - query String
	//   - orderBy RepositoryOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserNamespaceRepositories *UserNamespaceRepositoryConnection `json:"userNamespaceRepositories,omitempty"`

	// ViewerIsAdmin: Is the current viewer an admin of this enterprise?.
	ViewerIsAdmin bool `json:"viewerIsAdmin,omitempty"`

	// WebsiteUrl: The URL of the enterprise website.
	WebsiteUrl URI `json:"websiteUrl,omitempty"`
}

func (x *Enterprise) GetAnnouncement() string                    { return x.Announcement }
func (x *Enterprise) GetAnnouncementBanner() *AnnouncementBanner { return x.AnnouncementBanner }
func (x *Enterprise) GetAnnouncementCreatedAt() DateTime         { return x.AnnouncementCreatedAt }
func (x *Enterprise) GetAnnouncementExpiresAt() DateTime         { return x.AnnouncementExpiresAt }
func (x *Enterprise) GetAnnouncementUserDismissible() bool       { return x.AnnouncementUserDismissible }
func (x *Enterprise) GetAvatarUrl() URI                          { return x.AvatarUrl }
func (x *Enterprise) GetBillingEmail() string                    { return x.BillingEmail }
func (x *Enterprise) GetBillingInfo() *EnterpriseBillingInfo     { return x.BillingInfo }
func (x *Enterprise) GetCreatedAt() DateTime                     { return x.CreatedAt }
func (x *Enterprise) GetDatabaseId() int                         { return x.DatabaseId }
func (x *Enterprise) GetDescription() string                     { return x.Description }
func (x *Enterprise) GetDescriptionHTML() template.HTML          { return x.DescriptionHTML }
func (x *Enterprise) GetId() ID                                  { return x.Id }
func (x *Enterprise) GetLocation() string                        { return x.Location }
func (x *Enterprise) GetMembers() *EnterpriseMemberConnection    { return x.Members }
func (x *Enterprise) GetName() string                            { return x.Name }
func (x *Enterprise) GetOrganizations() *OrganizationConnection  { return x.Organizations }
func (x *Enterprise) GetOwnerInfo() *EnterpriseOwnerInfo         { return x.OwnerInfo }
func (x *Enterprise) GetReadme() string                          { return x.Readme }
func (x *Enterprise) GetReadmeHTML() template.HTML               { return x.ReadmeHTML }
func (x *Enterprise) GetResourcePath() URI                       { return x.ResourcePath }
func (x *Enterprise) GetRuleset() *RepositoryRuleset             { return x.Ruleset }
func (x *Enterprise) GetRulesets() *RepositoryRulesetConnection  { return x.Rulesets }
func (x *Enterprise) GetSlug() string                            { return x.Slug }
func (x *Enterprise) GetUpdatedAt() DateTime                     { return x.UpdatedAt }
func (x *Enterprise) GetUrl() URI                                { return x.Url }
func (x *Enterprise) GetUserNamespaceRepositories() *UserNamespaceRepositoryConnection {
	return x.UserNamespaceRepositories
}
func (x *Enterprise) GetViewerIsAdmin() bool { return x.ViewerIsAdmin }
func (x *Enterprise) GetWebsiteUrl() URI     { return x.WebsiteUrl }

// EnterpriseAdministratorConnection (OBJECT): The connection type for User.
type EnterpriseAdministratorConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseAdministratorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseAdministratorConnection) GetEdges() []*EnterpriseAdministratorEdge { return x.Edges }
func (x *EnterpriseAdministratorConnection) GetNodes() []*User                        { return x.Nodes }
func (x *EnterpriseAdministratorConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *EnterpriseAdministratorConnection) GetTotalCount() int                       { return x.TotalCount }

// EnterpriseAdministratorEdge (OBJECT): A User who is an administrator of an enterprise.
type EnterpriseAdministratorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *User `json:"node,omitempty"`

	// Role: The role of the administrator.
	Role EnterpriseAdministratorRole `json:"role,omitempty"`
}

func (x *EnterpriseAdministratorEdge) GetCursor() string                    { return x.Cursor }
func (x *EnterpriseAdministratorEdge) GetNode() *User                       { return x.Node }
func (x *EnterpriseAdministratorEdge) GetRole() EnterpriseAdministratorRole { return x.Role }

// EnterpriseAdministratorInvitation (OBJECT): An invitation for a user to become an owner or billing manager of an enterprise.
type EnterpriseAdministratorInvitation struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Email: The email of the person who was invited to the enterprise.
	Email string `json:"email,omitempty"`

	// Enterprise: The enterprise the invitation is for.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Id: The Node ID of the EnterpriseAdministratorInvitation object.
	Id ID `json:"id,omitempty"`

	// Invitee: The user who was invited to the enterprise.
	Invitee *User `json:"invitee,omitempty"`

	// Inviter: The user who created the invitation.
	Inviter *User `json:"inviter,omitempty"`

	// Role: The invitee's pending role in the enterprise (owner or billing_manager).
	Role EnterpriseAdministratorRole `json:"role,omitempty"`
}

func (x *EnterpriseAdministratorInvitation) GetCreatedAt() DateTime               { return x.CreatedAt }
func (x *EnterpriseAdministratorInvitation) GetEmail() string                     { return x.Email }
func (x *EnterpriseAdministratorInvitation) GetEnterprise() *Enterprise           { return x.Enterprise }
func (x *EnterpriseAdministratorInvitation) GetId() ID                            { return x.Id }
func (x *EnterpriseAdministratorInvitation) GetInvitee() *User                    { return x.Invitee }
func (x *EnterpriseAdministratorInvitation) GetInviter() *User                    { return x.Inviter }
func (x *EnterpriseAdministratorInvitation) GetRole() EnterpriseAdministratorRole { return x.Role }

// EnterpriseAdministratorInvitationConnection (OBJECT): The connection type for EnterpriseAdministratorInvitation.
type EnterpriseAdministratorInvitationConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseAdministratorInvitationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseAdministratorInvitation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseAdministratorInvitationConnection) GetEdges() []*EnterpriseAdministratorInvitationEdge {
	return x.Edges
}
func (x *EnterpriseAdministratorInvitationConnection) GetNodes() []*EnterpriseAdministratorInvitation {
	return x.Nodes
}
func (x *EnterpriseAdministratorInvitationConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseAdministratorInvitationConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseAdministratorInvitationEdge (OBJECT): An edge in a connection.
type EnterpriseAdministratorInvitationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseAdministratorInvitation `json:"node,omitempty"`
}

func (x *EnterpriseAdministratorInvitationEdge) GetCursor() string { return x.Cursor }
func (x *EnterpriseAdministratorInvitationEdge) GetNode() *EnterpriseAdministratorInvitation {
	return x.Node
}

// EnterpriseAdministratorInvitationOrder (INPUT_OBJECT): Ordering options for enterprise administrator invitation connections.
type EnterpriseAdministratorInvitationOrder struct {
	// Field: The field to order enterprise administrator invitations by.
	//
	// GraphQL type: EnterpriseAdministratorInvitationOrderField!
	Field EnterpriseAdministratorInvitationOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseAdministratorInvitationOrderField (ENUM): Properties by which enterprise administrator invitation connections can be ordered.
type EnterpriseAdministratorInvitationOrderField string

// EnterpriseAdministratorInvitationOrderField_CREATED_AT: Order enterprise administrator member invitations by creation time.
const EnterpriseAdministratorInvitationOrderField_CREATED_AT EnterpriseAdministratorInvitationOrderField = "CREATED_AT"

// EnterpriseAdministratorRole (ENUM): The possible administrator roles in an enterprise account.
type EnterpriseAdministratorRole string

// EnterpriseAdministratorRole_OWNER: Represents an owner of the enterprise account.
const EnterpriseAdministratorRole_OWNER EnterpriseAdministratorRole = "OWNER"

// EnterpriseAdministratorRole_BILLING_MANAGER: Represents a billing manager of the enterprise account.
const EnterpriseAdministratorRole_BILLING_MANAGER EnterpriseAdministratorRole = "BILLING_MANAGER"

// EnterpriseAdministratorRole_UNAFFILIATED: Unaffiliated member of the enterprise account without an admin role.
const EnterpriseAdministratorRole_UNAFFILIATED EnterpriseAdministratorRole = "UNAFFILIATED"

// EnterpriseAllowPrivateRepositoryForkingPolicyValue (ENUM): The possible values for the enterprise allow private repository forking policy value.
type EnterpriseAllowPrivateRepositoryForkingPolicyValue string

// EnterpriseAllowPrivateRepositoryForkingPolicyValue_ENTERPRISE_ORGANIZATIONS: Members can fork a repository to an organization within this enterprise.
const EnterpriseAllowPrivateRepositoryForkingPolicyValue_ENTERPRISE_ORGANIZATIONS EnterpriseAllowPrivateRepositoryForkingPolicyValue = "ENTERPRISE_ORGANIZATIONS"

// EnterpriseAllowPrivateRepositoryForkingPolicyValue_SAME_ORGANIZATION: Members can fork a repository only within the same organization (intra-org).
const EnterpriseAllowPrivateRepositoryForkingPolicyValue_SAME_ORGANIZATION EnterpriseAllowPrivateRepositoryForkingPolicyValue = "SAME_ORGANIZATION"

// EnterpriseAllowPrivateRepositoryForkingPolicyValue_SAME_ORGANIZATION_USER_ACCOUNTS: Members can fork a repository to their user account or within the same organization.
const EnterpriseAllowPrivateRepositoryForkingPolicyValue_SAME_ORGANIZATION_USER_ACCOUNTS EnterpriseAllowPrivateRepositoryForkingPolicyValue = "SAME_ORGANIZATION_USER_ACCOUNTS"

// EnterpriseAllowPrivateRepositoryForkingPolicyValue_ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS: Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
const EnterpriseAllowPrivateRepositoryForkingPolicyValue_ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS EnterpriseAllowPrivateRepositoryForkingPolicyValue = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS"

// EnterpriseAllowPrivateRepositoryForkingPolicyValue_USER_ACCOUNTS: Members can fork a repository to their user account.
const EnterpriseAllowPrivateRepositoryForkingPolicyValue_USER_ACCOUNTS EnterpriseAllowPrivateRepositoryForkingPolicyValue = "USER_ACCOUNTS"

// EnterpriseAllowPrivateRepositoryForkingPolicyValue_EVERYWHERE: Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
const EnterpriseAllowPrivateRepositoryForkingPolicyValue_EVERYWHERE EnterpriseAllowPrivateRepositoryForkingPolicyValue = "EVERYWHERE"

// EnterpriseAuditEntryData (INTERFACE): Metadata for an audit entry containing enterprise account information.
// EnterpriseAuditEntryData_Interface: Metadata for an audit entry containing enterprise account information.
//
// Possible types:
//
//   - *MembersCanDeleteReposClearAuditEntry
//   - *MembersCanDeleteReposDisableAuditEntry
//   - *MembersCanDeleteReposEnableAuditEntry
//   - *OrgInviteToBusinessAuditEntry
//   - *PrivateRepositoryForkingDisableAuditEntry
//   - *PrivateRepositoryForkingEnableAuditEntry
//   - *RepositoryVisibilityChangeDisableAuditEntry
//   - *RepositoryVisibilityChangeEnableAuditEntry
type EnterpriseAuditEntryData_Interface interface {
	isEnterpriseAuditEntryData()
	GetEnterpriseResourcePath() URI
	GetEnterpriseSlug() string
	GetEnterpriseUrl() URI
}

func (*MembersCanDeleteReposClearAuditEntry) isEnterpriseAuditEntryData()        {}
func (*MembersCanDeleteReposDisableAuditEntry) isEnterpriseAuditEntryData()      {}
func (*MembersCanDeleteReposEnableAuditEntry) isEnterpriseAuditEntryData()       {}
func (*OrgInviteToBusinessAuditEntry) isEnterpriseAuditEntryData()               {}
func (*PrivateRepositoryForkingDisableAuditEntry) isEnterpriseAuditEntryData()   {}
func (*PrivateRepositoryForkingEnableAuditEntry) isEnterpriseAuditEntryData()    {}
func (*RepositoryVisibilityChangeDisableAuditEntry) isEnterpriseAuditEntryData() {}
func (*RepositoryVisibilityChangeEnableAuditEntry) isEnterpriseAuditEntryData()  {}

type EnterpriseAuditEntryData struct {
	Interface EnterpriseAuditEntryData_Interface
}

func (x *EnterpriseAuditEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *EnterpriseAuditEntryData) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for EnterpriseAuditEntryData", info.Typename)
	case "MembersCanDeleteReposClearAuditEntry":
		x.Interface = new(MembersCanDeleteReposClearAuditEntry)
	case "MembersCanDeleteReposDisableAuditEntry":
		x.Interface = new(MembersCanDeleteReposDisableAuditEntry)
	case "MembersCanDeleteReposEnableAuditEntry":
		x.Interface = new(MembersCanDeleteReposEnableAuditEntry)
	case "OrgInviteToBusinessAuditEntry":
		x.Interface = new(OrgInviteToBusinessAuditEntry)
	case "PrivateRepositoryForkingDisableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingDisableAuditEntry)
	case "PrivateRepositoryForkingEnableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingEnableAuditEntry)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeDisableAuditEntry)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeEnableAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// EnterpriseBillingInfo (OBJECT): Enterprise billing information visible to enterprise billing managers and owners.
type EnterpriseBillingInfo struct {
	// AllLicensableUsersCount: The number of licenseable users/emails across the enterprise.
	AllLicensableUsersCount int `json:"allLicensableUsersCount,omitempty"`

	// AssetPacks: The number of data packs used by all organizations owned by the enterprise.
	AssetPacks int `json:"assetPacks,omitempty"`

	// BandwidthQuota: The bandwidth quota in GB for all organizations owned by the enterprise.
	BandwidthQuota float64 `json:"bandwidthQuota,omitempty"`

	// BandwidthUsage: The bandwidth usage in GB for all organizations owned by the enterprise.
	BandwidthUsage float64 `json:"bandwidthUsage,omitempty"`

	// BandwidthUsagePercentage: The bandwidth usage as a percentage of the bandwidth quota.
	BandwidthUsagePercentage int `json:"bandwidthUsagePercentage,omitempty"`

	// StorageQuota: The storage quota in GB for all organizations owned by the enterprise.
	StorageQuota float64 `json:"storageQuota,omitempty"`

	// StorageUsage: The storage usage in GB for all organizations owned by the enterprise.
	StorageUsage float64 `json:"storageUsage,omitempty"`

	// StorageUsagePercentage: The storage usage as a percentage of the storage quota.
	StorageUsagePercentage int `json:"storageUsagePercentage,omitempty"`

	// TotalAvailableLicenses: The number of available licenses across all owned organizations based on the unique number of billable users.
	TotalAvailableLicenses int `json:"totalAvailableLicenses,omitempty"`

	// TotalLicenses: The total number of licenses allocated.
	TotalLicenses int `json:"totalLicenses,omitempty"`
}

func (x *EnterpriseBillingInfo) GetAllLicensableUsersCount() int  { return x.AllLicensableUsersCount }
func (x *EnterpriseBillingInfo) GetAssetPacks() int               { return x.AssetPacks }
func (x *EnterpriseBillingInfo) GetBandwidthQuota() float64       { return x.BandwidthQuota }
func (x *EnterpriseBillingInfo) GetBandwidthUsage() float64       { return x.BandwidthUsage }
func (x *EnterpriseBillingInfo) GetBandwidthUsagePercentage() int { return x.BandwidthUsagePercentage }
func (x *EnterpriseBillingInfo) GetStorageQuota() float64         { return x.StorageQuota }
func (x *EnterpriseBillingInfo) GetStorageUsage() float64         { return x.StorageUsage }
func (x *EnterpriseBillingInfo) GetStorageUsagePercentage() int   { return x.StorageUsagePercentage }
func (x *EnterpriseBillingInfo) GetTotalAvailableLicenses() int   { return x.TotalAvailableLicenses }
func (x *EnterpriseBillingInfo) GetTotalLicenses() int            { return x.TotalLicenses }

// EnterpriseConnection (OBJECT): The connection type for Enterprise.
type EnterpriseConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Enterprise `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseConnection) GetEdges() []*EnterpriseEdge { return x.Edges }
func (x *EnterpriseConnection) GetNodes() []*Enterprise     { return x.Nodes }
func (x *EnterpriseConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *EnterpriseConnection) GetTotalCount() int          { return x.TotalCount }

// EnterpriseDefaultRepositoryPermissionSettingValue (ENUM): The possible values for the enterprise base repository permission setting.
type EnterpriseDefaultRepositoryPermissionSettingValue string

// EnterpriseDefaultRepositoryPermissionSettingValue_NO_POLICY: Organizations in the enterprise choose base repository permissions for their members.
const EnterpriseDefaultRepositoryPermissionSettingValue_NO_POLICY EnterpriseDefaultRepositoryPermissionSettingValue = "NO_POLICY"

// EnterpriseDefaultRepositoryPermissionSettingValue_ADMIN: Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
const EnterpriseDefaultRepositoryPermissionSettingValue_ADMIN EnterpriseDefaultRepositoryPermissionSettingValue = "ADMIN"

// EnterpriseDefaultRepositoryPermissionSettingValue_WRITE: Organization members will be able to clone, pull, and push all organization repositories.
const EnterpriseDefaultRepositoryPermissionSettingValue_WRITE EnterpriseDefaultRepositoryPermissionSettingValue = "WRITE"

// EnterpriseDefaultRepositoryPermissionSettingValue_READ: Organization members will be able to clone and pull all organization repositories.
const EnterpriseDefaultRepositoryPermissionSettingValue_READ EnterpriseDefaultRepositoryPermissionSettingValue = "READ"

// EnterpriseDefaultRepositoryPermissionSettingValue_NONE: Organization members will only be able to clone and pull public repositories.
const EnterpriseDefaultRepositoryPermissionSettingValue_NONE EnterpriseDefaultRepositoryPermissionSettingValue = "NONE"

// EnterpriseDisallowedMethodsSettingValue (ENUM): The possible values for an enabled/no policy enterprise setting.
type EnterpriseDisallowedMethodsSettingValue string

// EnterpriseDisallowedMethodsSettingValue_INSECURE: The setting prevents insecure 2FA methods from being used by members of the enterprise.
const EnterpriseDisallowedMethodsSettingValue_INSECURE EnterpriseDisallowedMethodsSettingValue = "INSECURE"

// EnterpriseDisallowedMethodsSettingValue_NO_POLICY: There is no policy set for preventing insecure 2FA methods from being used by members of the enterprise.
const EnterpriseDisallowedMethodsSettingValue_NO_POLICY EnterpriseDisallowedMethodsSettingValue = "NO_POLICY"

// EnterpriseEdge (OBJECT): An edge in a connection.
type EnterpriseEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Enterprise `json:"node,omitempty"`
}

func (x *EnterpriseEdge) GetCursor() string    { return x.Cursor }
func (x *EnterpriseEdge) GetNode() *Enterprise { return x.Node }

// EnterpriseEnabledDisabledSettingValue (ENUM): The possible values for an enabled/disabled enterprise setting.
type EnterpriseEnabledDisabledSettingValue string

// EnterpriseEnabledDisabledSettingValue_ENABLED: The setting is enabled for organizations in the enterprise.
const EnterpriseEnabledDisabledSettingValue_ENABLED EnterpriseEnabledDisabledSettingValue = "ENABLED"

// EnterpriseEnabledDisabledSettingValue_DISABLED: The setting is disabled for organizations in the enterprise.
const EnterpriseEnabledDisabledSettingValue_DISABLED EnterpriseEnabledDisabledSettingValue = "DISABLED"

// EnterpriseEnabledDisabledSettingValue_NO_POLICY: There is no policy set for organizations in the enterprise.
const EnterpriseEnabledDisabledSettingValue_NO_POLICY EnterpriseEnabledDisabledSettingValue = "NO_POLICY"

// EnterpriseEnabledSettingValue (ENUM): The possible values for an enabled/no policy enterprise setting.
type EnterpriseEnabledSettingValue string

// EnterpriseEnabledSettingValue_ENABLED: The setting is enabled for organizations in the enterprise.
const EnterpriseEnabledSettingValue_ENABLED EnterpriseEnabledSettingValue = "ENABLED"

// EnterpriseEnabledSettingValue_NO_POLICY: There is no policy set for organizations in the enterprise.
const EnterpriseEnabledSettingValue_NO_POLICY EnterpriseEnabledSettingValue = "NO_POLICY"

// EnterpriseFailedInvitationConnection (OBJECT): The connection type for OrganizationInvitation.
type EnterpriseFailedInvitationConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseFailedInvitationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// TotalUniqueUserCount: Identifies the total count of unique users in the connection.
	TotalUniqueUserCount int `json:"totalUniqueUserCount,omitempty"`
}

func (x *EnterpriseFailedInvitationConnection) GetEdges() []*EnterpriseFailedInvitationEdge {
	return x.Edges
}
func (x *EnterpriseFailedInvitationConnection) GetNodes() []*OrganizationInvitation { return x.Nodes }
func (x *EnterpriseFailedInvitationConnection) GetPageInfo() *PageInfo              { return x.PageInfo }
func (x *EnterpriseFailedInvitationConnection) GetTotalCount() int                  { return x.TotalCount }
func (x *EnterpriseFailedInvitationConnection) GetTotalUniqueUserCount() int {
	return x.TotalUniqueUserCount
}

// EnterpriseFailedInvitationEdge (OBJECT): A failed invitation to be a member in an enterprise organization.
type EnterpriseFailedInvitationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *OrganizationInvitation `json:"node,omitempty"`
}

func (x *EnterpriseFailedInvitationEdge) GetCursor() string                { return x.Cursor }
func (x *EnterpriseFailedInvitationEdge) GetNode() *OrganizationInvitation { return x.Node }

// EnterpriseIdentityProvider (OBJECT): An identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type EnterpriseIdentityProvider struct {
	// DigestMethod: The digest algorithm used to sign SAML requests for the identity provider.
	DigestMethod SamlDigestAlgorithm `json:"digestMethod,omitempty"`

	// Enterprise: The enterprise this identity provider belongs to.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// ExternalIdentities: ExternalIdentities provisioned by this identity provider.
	//
	// Query arguments:
	//   - membersOnly Boolean
	//   - login String
	//   - userName String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities,omitempty"`

	// Id: The Node ID of the EnterpriseIdentityProvider object.
	Id ID `json:"id,omitempty"`

	// IdpCertificate: The x509 certificate used by the identity provider to sign assertions and responses.
	IdpCertificate X509Certificate `json:"idpCertificate,omitempty"`

	// Issuer: The Issuer Entity ID for the SAML identity provider.
	Issuer string `json:"issuer,omitempty"`

	// RecoveryCodes: Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
	RecoveryCodes []string `json:"recoveryCodes,omitempty"`

	// SignatureMethod: The signature algorithm used to sign SAML requests for the identity provider.
	SignatureMethod SamlSignatureAlgorithm `json:"signatureMethod,omitempty"`

	// SsoUrl: The URL endpoint for the identity provider's SAML SSO.
	SsoUrl URI `json:"ssoUrl,omitempty"`
}

func (x *EnterpriseIdentityProvider) GetDigestMethod() SamlDigestAlgorithm { return x.DigestMethod }
func (x *EnterpriseIdentityProvider) GetEnterprise() *Enterprise           { return x.Enterprise }
func (x *EnterpriseIdentityProvider) GetExternalIdentities() *ExternalIdentityConnection {
	return x.ExternalIdentities
}
func (x *EnterpriseIdentityProvider) GetId() ID                          { return x.Id }
func (x *EnterpriseIdentityProvider) GetIdpCertificate() X509Certificate { return x.IdpCertificate }
func (x *EnterpriseIdentityProvider) GetIssuer() string                  { return x.Issuer }
func (x *EnterpriseIdentityProvider) GetRecoveryCodes() []string         { return x.RecoveryCodes }
func (x *EnterpriseIdentityProvider) GetSignatureMethod() SamlSignatureAlgorithm {
	return x.SignatureMethod
}
func (x *EnterpriseIdentityProvider) GetSsoUrl() URI { return x.SsoUrl }

// EnterpriseMember (UNION): An object that is a member of an enterprise.
// EnterpriseMember_Interface: An object that is a member of an enterprise.
//
// Possible types:
//
//   - *EnterpriseUserAccount
//   - *User
type EnterpriseMember_Interface interface {
	isEnterpriseMember()
}

func (*EnterpriseUserAccount) isEnterpriseMember() {}
func (*User) isEnterpriseMember()                  {}

type EnterpriseMember struct {
	Interface EnterpriseMember_Interface
}

func (x *EnterpriseMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *EnterpriseMember) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for EnterpriseMember", info.Typename)
	case "EnterpriseUserAccount":
		x.Interface = new(EnterpriseUserAccount)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// EnterpriseMemberConnection (OBJECT): The connection type for EnterpriseMember.
type EnterpriseMemberConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseMemberEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []EnterpriseMember `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseMemberConnection) GetEdges() []*EnterpriseMemberEdge { return x.Edges }
func (x *EnterpriseMemberConnection) GetNodes() []EnterpriseMember      { return x.Nodes }
func (x *EnterpriseMemberConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *EnterpriseMemberConnection) GetTotalCount() int                { return x.TotalCount }

// EnterpriseMemberEdge (OBJECT): A User who is a member of an enterprise through one or more organizations.
type EnterpriseMemberEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node EnterpriseMember `json:"node,omitempty"`
}

func (x *EnterpriseMemberEdge) GetCursor() string         { return x.Cursor }
func (x *EnterpriseMemberEdge) GetNode() EnterpriseMember { return x.Node }

// EnterpriseMemberInvitation (OBJECT): An invitation for a user to become an unaffiliated member of an enterprise.
type EnterpriseMemberInvitation struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Email: The email of the person who was invited to the enterprise.
	Email string `json:"email,omitempty"`

	// Enterprise: The enterprise the invitation is for.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Id: The Node ID of the EnterpriseMemberInvitation object.
	Id ID `json:"id,omitempty"`

	// Invitee: The user who was invited to the enterprise.
	Invitee *User `json:"invitee,omitempty"`

	// Inviter: The user who created the invitation.
	Inviter *User `json:"inviter,omitempty"`
}

func (x *EnterpriseMemberInvitation) GetCreatedAt() DateTime     { return x.CreatedAt }
func (x *EnterpriseMemberInvitation) GetEmail() string           { return x.Email }
func (x *EnterpriseMemberInvitation) GetEnterprise() *Enterprise { return x.Enterprise }
func (x *EnterpriseMemberInvitation) GetId() ID                  { return x.Id }
func (x *EnterpriseMemberInvitation) GetInvitee() *User          { return x.Invitee }
func (x *EnterpriseMemberInvitation) GetInviter() *User          { return x.Inviter }

// EnterpriseMemberInvitationConnection (OBJECT): The connection type for EnterpriseMemberInvitation.
type EnterpriseMemberInvitationConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseMemberInvitationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseMemberInvitation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseMemberInvitationConnection) GetEdges() []*EnterpriseMemberInvitationEdge {
	return x.Edges
}
func (x *EnterpriseMemberInvitationConnection) GetNodes() []*EnterpriseMemberInvitation {
	return x.Nodes
}
func (x *EnterpriseMemberInvitationConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseMemberInvitationConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseMemberInvitationEdge (OBJECT): An edge in a connection.
type EnterpriseMemberInvitationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseMemberInvitation `json:"node,omitempty"`
}

func (x *EnterpriseMemberInvitationEdge) GetCursor() string                    { return x.Cursor }
func (x *EnterpriseMemberInvitationEdge) GetNode() *EnterpriseMemberInvitation { return x.Node }

// EnterpriseMemberInvitationOrder (INPUT_OBJECT): Ordering options for enterprise administrator invitation connections.
type EnterpriseMemberInvitationOrder struct {
	// Field: The field to order enterprise member invitations by.
	//
	// GraphQL type: EnterpriseMemberInvitationOrderField!
	Field EnterpriseMemberInvitationOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseMemberInvitationOrderField (ENUM): Properties by which enterprise member invitation connections can be ordered.
type EnterpriseMemberInvitationOrderField string

// EnterpriseMemberInvitationOrderField_CREATED_AT: Order enterprise member invitations by creation time.
const EnterpriseMemberInvitationOrderField_CREATED_AT EnterpriseMemberInvitationOrderField = "CREATED_AT"

// EnterpriseMemberOrder (INPUT_OBJECT): Ordering options for enterprise member connections.
type EnterpriseMemberOrder struct {
	// Field: The field to order enterprise members by.
	//
	// GraphQL type: EnterpriseMemberOrderField!
	Field EnterpriseMemberOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseMemberOrderField (ENUM): Properties by which enterprise member connections can be ordered.
type EnterpriseMemberOrderField string

// EnterpriseMemberOrderField_LOGIN: Order enterprise members by login.
const EnterpriseMemberOrderField_LOGIN EnterpriseMemberOrderField = "LOGIN"

// EnterpriseMemberOrderField_CREATED_AT: Order enterprise members by creation time.
const EnterpriseMemberOrderField_CREATED_AT EnterpriseMemberOrderField = "CREATED_AT"

// EnterpriseMembersCanCreateRepositoriesSettingValue (ENUM): The possible values for the enterprise members can create repositories setting.
type EnterpriseMembersCanCreateRepositoriesSettingValue string

// EnterpriseMembersCanCreateRepositoriesSettingValue_NO_POLICY: Organization owners choose whether to allow members to create repositories.
const EnterpriseMembersCanCreateRepositoriesSettingValue_NO_POLICY EnterpriseMembersCanCreateRepositoriesSettingValue = "NO_POLICY"

// EnterpriseMembersCanCreateRepositoriesSettingValue_ALL: Members will be able to create public and private repositories.
const EnterpriseMembersCanCreateRepositoriesSettingValue_ALL EnterpriseMembersCanCreateRepositoriesSettingValue = "ALL"

// EnterpriseMembersCanCreateRepositoriesSettingValue_PUBLIC: Members will be able to create only public repositories.
const EnterpriseMembersCanCreateRepositoriesSettingValue_PUBLIC EnterpriseMembersCanCreateRepositoriesSettingValue = "PUBLIC"

// EnterpriseMembersCanCreateRepositoriesSettingValue_PRIVATE: Members will be able to create only private repositories.
const EnterpriseMembersCanCreateRepositoriesSettingValue_PRIVATE EnterpriseMembersCanCreateRepositoriesSettingValue = "PRIVATE"

// EnterpriseMembersCanCreateRepositoriesSettingValue_DISABLED: Members will not be able to create public or private repositories.
const EnterpriseMembersCanCreateRepositoriesSettingValue_DISABLED EnterpriseMembersCanCreateRepositoriesSettingValue = "DISABLED"

// EnterpriseMembersCanMakePurchasesSettingValue (ENUM): The possible values for the members can make purchases setting.
type EnterpriseMembersCanMakePurchasesSettingValue string

// EnterpriseMembersCanMakePurchasesSettingValue_ENABLED: The setting is enabled for organizations in the enterprise.
const EnterpriseMembersCanMakePurchasesSettingValue_ENABLED EnterpriseMembersCanMakePurchasesSettingValue = "ENABLED"

// EnterpriseMembersCanMakePurchasesSettingValue_DISABLED: The setting is disabled for organizations in the enterprise.
const EnterpriseMembersCanMakePurchasesSettingValue_DISABLED EnterpriseMembersCanMakePurchasesSettingValue = "DISABLED"

// EnterpriseMembershipType (ENUM): The possible values we have for filtering Platform::Objects::User#enterprises.
type EnterpriseMembershipType string

// EnterpriseMembershipType_ALL: Returns all enterprises in which the user is a member, admin, or billing manager.
const EnterpriseMembershipType_ALL EnterpriseMembershipType = "ALL"

// EnterpriseMembershipType_ADMIN: Returns all enterprises in which the user is an admin.
const EnterpriseMembershipType_ADMIN EnterpriseMembershipType = "ADMIN"

// EnterpriseMembershipType_BILLING_MANAGER: Returns all enterprises in which the user is a billing manager.
const EnterpriseMembershipType_BILLING_MANAGER EnterpriseMembershipType = "BILLING_MANAGER"

// EnterpriseMembershipType_ORG_MEMBERSHIP: Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
const EnterpriseMembershipType_ORG_MEMBERSHIP EnterpriseMembershipType = "ORG_MEMBERSHIP"

// EnterpriseOrder (INPUT_OBJECT): Ordering options for enterprises.
type EnterpriseOrder struct {
	// Field: The field to order enterprises by.
	//
	// GraphQL type: EnterpriseOrderField!
	Field EnterpriseOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseOrderField (ENUM): Properties by which enterprise connections can be ordered.
type EnterpriseOrderField string

// EnterpriseOrderField_NAME: Order enterprises by name.
const EnterpriseOrderField_NAME EnterpriseOrderField = "NAME"

// EnterpriseOrganizationMembershipConnection (OBJECT): The connection type for Organization.
type EnterpriseOrganizationMembershipConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseOrganizationMembershipEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Organization `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseOrganizationMembershipConnection) GetEdges() []*EnterpriseOrganizationMembershipEdge {
	return x.Edges
}
func (x *EnterpriseOrganizationMembershipConnection) GetNodes() []*Organization { return x.Nodes }
func (x *EnterpriseOrganizationMembershipConnection) GetPageInfo() *PageInfo    { return x.PageInfo }
func (x *EnterpriseOrganizationMembershipConnection) GetTotalCount() int        { return x.TotalCount }

// EnterpriseOrganizationMembershipEdge (OBJECT): An enterprise organization that a user is a member of.
type EnterpriseOrganizationMembershipEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Organization `json:"node,omitempty"`

	// Role: The role of the user in the enterprise membership.
	Role EnterpriseUserAccountMembershipRole `json:"role,omitempty"`
}

func (x *EnterpriseOrganizationMembershipEdge) GetCursor() string      { return x.Cursor }
func (x *EnterpriseOrganizationMembershipEdge) GetNode() *Organization { return x.Node }
func (x *EnterpriseOrganizationMembershipEdge) GetRole() EnterpriseUserAccountMembershipRole {
	return x.Role
}

// EnterpriseOutsideCollaboratorConnection (OBJECT): The connection type for User.
type EnterpriseOutsideCollaboratorConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseOutsideCollaboratorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseOutsideCollaboratorConnection) GetEdges() []*EnterpriseOutsideCollaboratorEdge {
	return x.Edges
}
func (x *EnterpriseOutsideCollaboratorConnection) GetNodes() []*User      { return x.Nodes }
func (x *EnterpriseOutsideCollaboratorConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseOutsideCollaboratorConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseOutsideCollaboratorEdge (OBJECT): A User who is an outside collaborator of an enterprise through one or more organizations.
type EnterpriseOutsideCollaboratorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *User `json:"node,omitempty"`

	// Repositories: The enterprise organization repositories this user is a member of.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy RepositoryOrder
	Repositories *EnterpriseRepositoryInfoConnection `json:"repositories,omitempty"`
}

func (x *EnterpriseOutsideCollaboratorEdge) GetCursor() string { return x.Cursor }
func (x *EnterpriseOutsideCollaboratorEdge) GetNode() *User    { return x.Node }
func (x *EnterpriseOutsideCollaboratorEdge) GetRepositories() *EnterpriseRepositoryInfoConnection {
	return x.Repositories
}

// EnterpriseOwnerInfo (OBJECT): Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type EnterpriseOwnerInfo struct {
	// Admins: A list of all of the administrators for this enterprise.
	//
	// Query arguments:
	//   - organizationLogins [String!]
	//   - query String
	//   - role EnterpriseAdministratorRole
	//   - orderBy EnterpriseMemberOrder
	//   - hasTwoFactorEnabled Boolean
	//   - twoFactorMethodSecurity TwoFactorCredentialSecurityType
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Admins *EnterpriseAdministratorConnection `json:"admins,omitempty"`

	// AffiliatedUsersWithTwoFactorDisabled: A list of users in the enterprise who currently have two-factor authentication disabled.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	AffiliatedUsersWithTwoFactorDisabled *UserConnection `json:"affiliatedUsersWithTwoFactorDisabled,omitempty"`

	// AffiliatedUsersWithTwoFactorDisabledExist: Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
	AffiliatedUsersWithTwoFactorDisabledExist bool `json:"affiliatedUsersWithTwoFactorDisabledExist,omitempty"`

	// AllowPrivateRepositoryForkingSetting: The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
	AllowPrivateRepositoryForkingSetting EnterpriseEnabledDisabledSettingValue `json:"allowPrivateRepositoryForkingSetting,omitempty"`

	// AllowPrivateRepositoryForkingSettingOrganizations: A list of enterprise organizations configured with the provided private repository forking setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	AllowPrivateRepositoryForkingSettingOrganizations *OrganizationConnection `json:"allowPrivateRepositoryForkingSettingOrganizations,omitempty"`

	// AllowPrivateRepositoryForkingSettingPolicyValue: The value for the allow private repository forking policy on the enterprise.
	AllowPrivateRepositoryForkingSettingPolicyValue EnterpriseAllowPrivateRepositoryForkingPolicyValue `json:"allowPrivateRepositoryForkingSettingPolicyValue,omitempty"`

	// DefaultRepositoryPermissionSetting: The setting value for base repository permissions for organizations in this enterprise.
	DefaultRepositoryPermissionSetting EnterpriseDefaultRepositoryPermissionSettingValue `json:"defaultRepositoryPermissionSetting,omitempty"`

	// DefaultRepositoryPermissionSettingOrganizations: A list of enterprise organizations configured with the provided base repository permission.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value DefaultRepositoryPermissionField!
	//   - orderBy OrganizationOrder
	DefaultRepositoryPermissionSettingOrganizations *OrganizationConnection `json:"defaultRepositoryPermissionSettingOrganizations,omitempty"`

	// Domains: A list of domains owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - isVerified Boolean
	//   - isApproved Boolean
	//   - orderBy VerifiableDomainOrder
	Domains *VerifiableDomainConnection `json:"domains,omitempty"`

	// EnterpriseServerInstallations: Enterprise Server installations owned by the enterprise.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - connectedOnly Boolean
	//   - orderBy EnterpriseServerInstallationOrder
	EnterpriseServerInstallations *EnterpriseServerInstallationConnection `json:"enterpriseServerInstallations,omitempty"`

	// FailedInvitations: A list of failed invitations in the enterprise.
	//
	// Query arguments:
	//   - query String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	FailedInvitations *EnterpriseFailedInvitationConnection `json:"failedInvitations,omitempty"`

	// IpAllowListEnabledSetting: The setting value for whether the enterprise has an IP allow list enabled.
	IpAllowListEnabledSetting IpAllowListEnabledSettingValue `json:"ipAllowListEnabledSetting,omitempty"`

	// IpAllowListEntries: The IP addresses that are allowed to access resources owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy IpAllowListEntryOrder
	IpAllowListEntries *IpAllowListEntryConnection `json:"ipAllowListEntries,omitempty"`

	// IpAllowListForInstalledAppsEnabledSetting: The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
	IpAllowListForInstalledAppsEnabledSetting IpAllowListForInstalledAppsEnabledSettingValue `json:"ipAllowListForInstalledAppsEnabledSetting,omitempty"`

	// IsUpdatingDefaultRepositoryPermission: Whether or not the base repository permission is currently being updated.
	IsUpdatingDefaultRepositoryPermission bool `json:"isUpdatingDefaultRepositoryPermission,omitempty"`

	// IsUpdatingTwoFactorRequirement: Whether the two-factor authentication requirement is currently being enforced.
	IsUpdatingTwoFactorRequirement bool `json:"isUpdatingTwoFactorRequirement,omitempty"`

	// MembersCanChangeRepositoryVisibilitySetting: The setting value for whether organization members with admin permissions on a repository can change repository visibility.
	MembersCanChangeRepositoryVisibilitySetting EnterpriseEnabledDisabledSettingValue `json:"membersCanChangeRepositoryVisibilitySetting,omitempty"`

	// MembersCanChangeRepositoryVisibilitySettingOrganizations: A list of enterprise organizations configured with the provided can change repository visibility setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	MembersCanChangeRepositoryVisibilitySettingOrganizations *OrganizationConnection `json:"membersCanChangeRepositoryVisibilitySettingOrganizations,omitempty"`

	// MembersCanCreateInternalRepositoriesSetting: The setting value for whether members of organizations in the enterprise can create internal repositories.
	MembersCanCreateInternalRepositoriesSetting bool `json:"membersCanCreateInternalRepositoriesSetting,omitempty"`

	// MembersCanCreatePrivateRepositoriesSetting: The setting value for whether members of organizations in the enterprise can create private repositories.
	MembersCanCreatePrivateRepositoriesSetting bool `json:"membersCanCreatePrivateRepositoriesSetting,omitempty"`

	// MembersCanCreatePublicRepositoriesSetting: The setting value for whether members of organizations in the enterprise can create public repositories.
	MembersCanCreatePublicRepositoriesSetting bool `json:"membersCanCreatePublicRepositoriesSetting,omitempty"`

	// MembersCanCreateRepositoriesSetting: The setting value for whether members of organizations in the enterprise can create repositories.
	MembersCanCreateRepositoriesSetting EnterpriseMembersCanCreateRepositoriesSettingValue `json:"membersCanCreateRepositoriesSetting,omitempty"`

	// MembersCanCreateRepositoriesSettingOrganizations: A list of enterprise organizations configured with the provided repository creation setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value OrganizationMembersCanCreateRepositoriesSettingValue!
	//   - orderBy OrganizationOrder
	MembersCanCreateRepositoriesSettingOrganizations *OrganizationConnection `json:"membersCanCreateRepositoriesSettingOrganizations,omitempty"`

	// MembersCanDeleteIssuesSetting: The setting value for whether members with admin permissions for repositories can delete issues.
	MembersCanDeleteIssuesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanDeleteIssuesSetting,omitempty"`

	// MembersCanDeleteIssuesSettingOrganizations: A list of enterprise organizations configured with the provided members can delete issues setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	MembersCanDeleteIssuesSettingOrganizations *OrganizationConnection `json:"membersCanDeleteIssuesSettingOrganizations,omitempty"`

	// MembersCanDeleteRepositoriesSetting: The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
	MembersCanDeleteRepositoriesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanDeleteRepositoriesSetting,omitempty"`

	// MembersCanDeleteRepositoriesSettingOrganizations: A list of enterprise organizations configured with the provided members can delete repositories setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	MembersCanDeleteRepositoriesSettingOrganizations *OrganizationConnection `json:"membersCanDeleteRepositoriesSettingOrganizations,omitempty"`

	// MembersCanInviteCollaboratorsSetting: The setting value for whether members of organizations in the enterprise can invite outside collaborators.
	MembersCanInviteCollaboratorsSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanInviteCollaboratorsSetting,omitempty"`

	// MembersCanInviteCollaboratorsSettingOrganizations: A list of enterprise organizations configured with the provided members can invite collaborators setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	MembersCanInviteCollaboratorsSettingOrganizations *OrganizationConnection `json:"membersCanInviteCollaboratorsSettingOrganizations,omitempty"`

	// MembersCanMakePurchasesSetting: Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
	MembersCanMakePurchasesSetting EnterpriseMembersCanMakePurchasesSettingValue `json:"membersCanMakePurchasesSetting,omitempty"`

	// MembersCanUpdateProtectedBranchesSetting: The setting value for whether members with admin permissions for repositories can update protected branches.
	MembersCanUpdateProtectedBranchesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanUpdateProtectedBranchesSetting,omitempty"`

	// MembersCanUpdateProtectedBranchesSettingOrganizations: A list of enterprise organizations configured with the provided members can update protected branches setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	MembersCanUpdateProtectedBranchesSettingOrganizations *OrganizationConnection `json:"membersCanUpdateProtectedBranchesSettingOrganizations,omitempty"`

	// MembersCanViewDependencyInsightsSetting: The setting value for whether members can view dependency insights.
	MembersCanViewDependencyInsightsSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanViewDependencyInsightsSetting,omitempty"`

	// MembersCanViewDependencyInsightsSettingOrganizations: A list of enterprise organizations configured with the provided members can view dependency insights setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	MembersCanViewDependencyInsightsSettingOrganizations *OrganizationConnection `json:"membersCanViewDependencyInsightsSettingOrganizations,omitempty"`

	// NotificationDeliveryRestrictionEnabledSetting: Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
	NotificationDeliveryRestrictionEnabledSetting NotificationRestrictionSettingValue `json:"notificationDeliveryRestrictionEnabledSetting,omitempty"`

	// OidcProvider: The OIDC Identity Provider for the enterprise.
	OidcProvider *OIDCProvider `json:"oidcProvider,omitempty"`

	// OrganizationProjectsSetting: The setting value for whether organization projects are enabled for organizations in this enterprise.
	OrganizationProjectsSetting EnterpriseEnabledDisabledSettingValue `json:"organizationProjectsSetting,omitempty"`

	// OrganizationProjectsSettingOrganizations: A list of enterprise organizations configured with the provided organization projects setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	OrganizationProjectsSettingOrganizations *OrganizationConnection `json:"organizationProjectsSettingOrganizations,omitempty"`

	// OutsideCollaborators: A list of outside collaborators across the repositories in the enterprise.
	//
	// Query arguments:
	//   - login String
	//   - query String
	//   - orderBy EnterpriseMemberOrder
	//   - visibility RepositoryVisibility
	//   - hasTwoFactorEnabled Boolean
	//   - twoFactorMethodSecurity TwoFactorCredentialSecurityType
	//   - organizationLogins [String!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	OutsideCollaborators *EnterpriseOutsideCollaboratorConnection `json:"outsideCollaborators,omitempty"`

	// PendingAdminInvitations: A list of pending administrator invitations for the enterprise.
	//
	// Query arguments:
	//   - query String
	//   - orderBy EnterpriseAdministratorInvitationOrder
	//   - role EnterpriseAdministratorRole
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PendingAdminInvitations *EnterpriseAdministratorInvitationConnection `json:"pendingAdminInvitations,omitempty"`

	// PendingCollaboratorInvitations: A list of pending collaborator invitations across the repositories in the enterprise.
	//
	// Query arguments:
	//   - query String
	//   - orderBy RepositoryInvitationOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PendingCollaboratorInvitations *RepositoryInvitationConnection `json:"pendingCollaboratorInvitations,omitempty"`

	// PendingMemberInvitations: A list of pending member invitations for organizations in the enterprise.
	//
	// Query arguments:
	//   - query String
	//   - organizationLogins [String!]
	//   - invitationSource OrganizationInvitationSource
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PendingMemberInvitations *EnterprisePendingMemberInvitationConnection `json:"pendingMemberInvitations,omitempty"`

	// PendingUnaffiliatedMemberInvitations: A list of pending unaffiliated member invitations for the enterprise.
	//
	// Query arguments:
	//   - query String
	//   - orderBy EnterpriseMemberInvitationOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PendingUnaffiliatedMemberInvitations *EnterpriseMemberInvitationConnection `json:"pendingUnaffiliatedMemberInvitations,omitempty"`

	// RepositoryDeployKeySetting: The setting value for whether deploy keys are enabled for repositories in organizations in this enterprise.
	RepositoryDeployKeySetting EnterpriseEnabledDisabledSettingValue `json:"repositoryDeployKeySetting,omitempty"`

	// RepositoryDeployKeySettingOrganizations: A list of enterprise organizations configured with the provided deploy keys setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	RepositoryDeployKeySettingOrganizations *OrganizationConnection `json:"repositoryDeployKeySettingOrganizations,omitempty"`

	// RepositoryProjectsSetting: The setting value for whether repository projects are enabled in this enterprise.
	RepositoryProjectsSetting EnterpriseEnabledDisabledSettingValue `json:"repositoryProjectsSetting,omitempty"`

	// RepositoryProjectsSettingOrganizations: A list of enterprise organizations configured with the provided repository projects setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	RepositoryProjectsSettingOrganizations *OrganizationConnection `json:"repositoryProjectsSettingOrganizations,omitempty"`

	// SamlIdentityProvider: The SAML Identity Provider for the enterprise.
	SamlIdentityProvider *EnterpriseIdentityProvider `json:"samlIdentityProvider,omitempty"`

	// SamlIdentityProviderSettingOrganizations: A list of enterprise organizations configured with the SAML single sign-on setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value IdentityProviderConfigurationState!
	//   - orderBy OrganizationOrder
	SamlIdentityProviderSettingOrganizations *OrganizationConnection `json:"samlIdentityProviderSettingOrganizations,omitempty"`

	// SupportEntitlements: A list of members with a support entitlement.
	//
	// Query arguments:
	//   - orderBy EnterpriseMemberOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SupportEntitlements *EnterpriseMemberConnection `json:"supportEntitlements,omitempty"`

	// TeamDiscussionsSetting: The setting value for whether team discussions are enabled for organizations in this enterprise.
	TeamDiscussionsSetting EnterpriseEnabledDisabledSettingValue `json:"teamDiscussionsSetting,omitempty"`

	// TeamDiscussionsSettingOrganizations: A list of enterprise organizations configured with the provided team discussions setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	TeamDiscussionsSettingOrganizations *OrganizationConnection `json:"teamDiscussionsSettingOrganizations,omitempty"`

	// TwoFactorDisallowedMethodsSetting: The setting value for what methods of two-factor authentication the enterprise prevents its users from having.
	TwoFactorDisallowedMethodsSetting EnterpriseDisallowedMethodsSettingValue `json:"twoFactorDisallowedMethodsSetting,omitempty"`

	// TwoFactorRequiredSetting: The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
	TwoFactorRequiredSetting EnterpriseEnabledSettingValue `json:"twoFactorRequiredSetting,omitempty"`

	// TwoFactorRequiredSettingOrganizations: A list of enterprise organizations configured with the two-factor authentication setting value.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - value Boolean!
	//   - orderBy OrganizationOrder
	TwoFactorRequiredSettingOrganizations *OrganizationConnection `json:"twoFactorRequiredSettingOrganizations,omitempty"`
}

func (x *EnterpriseOwnerInfo) GetAdmins() *EnterpriseAdministratorConnection { return x.Admins }
func (x *EnterpriseOwnerInfo) GetAffiliatedUsersWithTwoFactorDisabled() *UserConnection {
	return x.AffiliatedUsersWithTwoFactorDisabled
}
func (x *EnterpriseOwnerInfo) GetAffiliatedUsersWithTwoFactorDisabledExist() bool {
	return x.AffiliatedUsersWithTwoFactorDisabledExist
}
func (x *EnterpriseOwnerInfo) GetAllowPrivateRepositoryForkingSetting() EnterpriseEnabledDisabledSettingValue {
	return x.AllowPrivateRepositoryForkingSetting
}
func (x *EnterpriseOwnerInfo) GetAllowPrivateRepositoryForkingSettingOrganizations() *OrganizationConnection {
	return x.AllowPrivateRepositoryForkingSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetAllowPrivateRepositoryForkingSettingPolicyValue() EnterpriseAllowPrivateRepositoryForkingPolicyValue {
	return x.AllowPrivateRepositoryForkingSettingPolicyValue
}
func (x *EnterpriseOwnerInfo) GetDefaultRepositoryPermissionSetting() EnterpriseDefaultRepositoryPermissionSettingValue {
	return x.DefaultRepositoryPermissionSetting
}
func (x *EnterpriseOwnerInfo) GetDefaultRepositoryPermissionSettingOrganizations() *OrganizationConnection {
	return x.DefaultRepositoryPermissionSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetDomains() *VerifiableDomainConnection { return x.Domains }
func (x *EnterpriseOwnerInfo) GetEnterpriseServerInstallations() *EnterpriseServerInstallationConnection {
	return x.EnterpriseServerInstallations
}
func (x *EnterpriseOwnerInfo) GetFailedInvitations() *EnterpriseFailedInvitationConnection {
	return x.FailedInvitations
}
func (x *EnterpriseOwnerInfo) GetIpAllowListEnabledSetting() IpAllowListEnabledSettingValue {
	return x.IpAllowListEnabledSetting
}
func (x *EnterpriseOwnerInfo) GetIpAllowListEntries() *IpAllowListEntryConnection {
	return x.IpAllowListEntries
}
func (x *EnterpriseOwnerInfo) GetIpAllowListForInstalledAppsEnabledSetting() IpAllowListForInstalledAppsEnabledSettingValue {
	return x.IpAllowListForInstalledAppsEnabledSetting
}
func (x *EnterpriseOwnerInfo) GetIsUpdatingDefaultRepositoryPermission() bool {
	return x.IsUpdatingDefaultRepositoryPermission
}
func (x *EnterpriseOwnerInfo) GetIsUpdatingTwoFactorRequirement() bool {
	return x.IsUpdatingTwoFactorRequirement
}
func (x *EnterpriseOwnerInfo) GetMembersCanChangeRepositoryVisibilitySetting() EnterpriseEnabledDisabledSettingValue {
	return x.MembersCanChangeRepositoryVisibilitySetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanChangeRepositoryVisibilitySettingOrganizations() *OrganizationConnection {
	return x.MembersCanChangeRepositoryVisibilitySettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetMembersCanCreateInternalRepositoriesSetting() bool {
	return x.MembersCanCreateInternalRepositoriesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanCreatePrivateRepositoriesSetting() bool {
	return x.MembersCanCreatePrivateRepositoriesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanCreatePublicRepositoriesSetting() bool {
	return x.MembersCanCreatePublicRepositoriesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanCreateRepositoriesSetting() EnterpriseMembersCanCreateRepositoriesSettingValue {
	return x.MembersCanCreateRepositoriesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanCreateRepositoriesSettingOrganizations() *OrganizationConnection {
	return x.MembersCanCreateRepositoriesSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetMembersCanDeleteIssuesSetting() EnterpriseEnabledDisabledSettingValue {
	return x.MembersCanDeleteIssuesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanDeleteIssuesSettingOrganizations() *OrganizationConnection {
	return x.MembersCanDeleteIssuesSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetMembersCanDeleteRepositoriesSetting() EnterpriseEnabledDisabledSettingValue {
	return x.MembersCanDeleteRepositoriesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanDeleteRepositoriesSettingOrganizations() *OrganizationConnection {
	return x.MembersCanDeleteRepositoriesSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetMembersCanInviteCollaboratorsSetting() EnterpriseEnabledDisabledSettingValue {
	return x.MembersCanInviteCollaboratorsSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanInviteCollaboratorsSettingOrganizations() *OrganizationConnection {
	return x.MembersCanInviteCollaboratorsSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetMembersCanMakePurchasesSetting() EnterpriseMembersCanMakePurchasesSettingValue {
	return x.MembersCanMakePurchasesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanUpdateProtectedBranchesSetting() EnterpriseEnabledDisabledSettingValue {
	return x.MembersCanUpdateProtectedBranchesSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanUpdateProtectedBranchesSettingOrganizations() *OrganizationConnection {
	return x.MembersCanUpdateProtectedBranchesSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetMembersCanViewDependencyInsightsSetting() EnterpriseEnabledDisabledSettingValue {
	return x.MembersCanViewDependencyInsightsSetting
}
func (x *EnterpriseOwnerInfo) GetMembersCanViewDependencyInsightsSettingOrganizations() *OrganizationConnection {
	return x.MembersCanViewDependencyInsightsSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetNotificationDeliveryRestrictionEnabledSetting() NotificationRestrictionSettingValue {
	return x.NotificationDeliveryRestrictionEnabledSetting
}
func (x *EnterpriseOwnerInfo) GetOidcProvider() *OIDCProvider { return x.OidcProvider }
func (x *EnterpriseOwnerInfo) GetOrganizationProjectsSetting() EnterpriseEnabledDisabledSettingValue {
	return x.OrganizationProjectsSetting
}
func (x *EnterpriseOwnerInfo) GetOrganizationProjectsSettingOrganizations() *OrganizationConnection {
	return x.OrganizationProjectsSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetOutsideCollaborators() *EnterpriseOutsideCollaboratorConnection {
	return x.OutsideCollaborators
}
func (x *EnterpriseOwnerInfo) GetPendingAdminInvitations() *EnterpriseAdministratorInvitationConnection {
	return x.PendingAdminInvitations
}
func (x *EnterpriseOwnerInfo) GetPendingCollaboratorInvitations() *RepositoryInvitationConnection {
	return x.PendingCollaboratorInvitations
}
func (x *EnterpriseOwnerInfo) GetPendingMemberInvitations() *EnterprisePendingMemberInvitationConnection {
	return x.PendingMemberInvitations
}
func (x *EnterpriseOwnerInfo) GetPendingUnaffiliatedMemberInvitations() *EnterpriseMemberInvitationConnection {
	return x.PendingUnaffiliatedMemberInvitations
}
func (x *EnterpriseOwnerInfo) GetRepositoryDeployKeySetting() EnterpriseEnabledDisabledSettingValue {
	return x.RepositoryDeployKeySetting
}
func (x *EnterpriseOwnerInfo) GetRepositoryDeployKeySettingOrganizations() *OrganizationConnection {
	return x.RepositoryDeployKeySettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetRepositoryProjectsSetting() EnterpriseEnabledDisabledSettingValue {
	return x.RepositoryProjectsSetting
}
func (x *EnterpriseOwnerInfo) GetRepositoryProjectsSettingOrganizations() *OrganizationConnection {
	return x.RepositoryProjectsSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetSamlIdentityProvider() *EnterpriseIdentityProvider {
	return x.SamlIdentityProvider
}
func (x *EnterpriseOwnerInfo) GetSamlIdentityProviderSettingOrganizations() *OrganizationConnection {
	return x.SamlIdentityProviderSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetSupportEntitlements() *EnterpriseMemberConnection {
	return x.SupportEntitlements
}
func (x *EnterpriseOwnerInfo) GetTeamDiscussionsSetting() EnterpriseEnabledDisabledSettingValue {
	return x.TeamDiscussionsSetting
}
func (x *EnterpriseOwnerInfo) GetTeamDiscussionsSettingOrganizations() *OrganizationConnection {
	return x.TeamDiscussionsSettingOrganizations
}
func (x *EnterpriseOwnerInfo) GetTwoFactorDisallowedMethodsSetting() EnterpriseDisallowedMethodsSettingValue {
	return x.TwoFactorDisallowedMethodsSetting
}
func (x *EnterpriseOwnerInfo) GetTwoFactorRequiredSetting() EnterpriseEnabledSettingValue {
	return x.TwoFactorRequiredSetting
}
func (x *EnterpriseOwnerInfo) GetTwoFactorRequiredSettingOrganizations() *OrganizationConnection {
	return x.TwoFactorRequiredSettingOrganizations
}

// EnterprisePendingMemberInvitationConnection (OBJECT): The connection type for OrganizationInvitation.
type EnterprisePendingMemberInvitationConnection struct {
	// Edges: A list of edges.
	Edges []*EnterprisePendingMemberInvitationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// TotalUniqueUserCount: Identifies the total count of unique users in the connection.
	TotalUniqueUserCount int `json:"totalUniqueUserCount,omitempty"`
}

func (x *EnterprisePendingMemberInvitationConnection) GetEdges() []*EnterprisePendingMemberInvitationEdge {
	return x.Edges
}
func (x *EnterprisePendingMemberInvitationConnection) GetNodes() []*OrganizationInvitation {
	return x.Nodes
}
func (x *EnterprisePendingMemberInvitationConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterprisePendingMemberInvitationConnection) GetTotalCount() int     { return x.TotalCount }
func (x *EnterprisePendingMemberInvitationConnection) GetTotalUniqueUserCount() int {
	return x.TotalUniqueUserCount
}

// EnterprisePendingMemberInvitationEdge (OBJECT): An invitation to be a member in an enterprise organization.
type EnterprisePendingMemberInvitationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *OrganizationInvitation `json:"node,omitempty"`
}

func (x *EnterprisePendingMemberInvitationEdge) GetCursor() string                { return x.Cursor }
func (x *EnterprisePendingMemberInvitationEdge) GetNode() *OrganizationInvitation { return x.Node }

// EnterpriseRepositoryInfo (OBJECT): A subset of repository information queryable from an enterprise.
type EnterpriseRepositoryInfo struct {
	// Id: The Node ID of the EnterpriseRepositoryInfo object.
	Id ID `json:"id,omitempty"`

	// IsPrivate: Identifies if the repository is private or internal.
	IsPrivate bool `json:"isPrivate,omitempty"`

	// Name: The repository's name.
	Name string `json:"name,omitempty"`

	// NameWithOwner: The repository's name with owner.
	NameWithOwner string `json:"nameWithOwner,omitempty"`
}

func (x *EnterpriseRepositoryInfo) GetId() ID                { return x.Id }
func (x *EnterpriseRepositoryInfo) GetIsPrivate() bool       { return x.IsPrivate }
func (x *EnterpriseRepositoryInfo) GetName() string          { return x.Name }
func (x *EnterpriseRepositoryInfo) GetNameWithOwner() string { return x.NameWithOwner }

// EnterpriseRepositoryInfoConnection (OBJECT): The connection type for EnterpriseRepositoryInfo.
type EnterpriseRepositoryInfoConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseRepositoryInfoEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseRepositoryInfo `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseRepositoryInfoConnection) GetEdges() []*EnterpriseRepositoryInfoEdge {
	return x.Edges
}
func (x *EnterpriseRepositoryInfoConnection) GetNodes() []*EnterpriseRepositoryInfo { return x.Nodes }
func (x *EnterpriseRepositoryInfoConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *EnterpriseRepositoryInfoConnection) GetTotalCount() int                    { return x.TotalCount }

// EnterpriseRepositoryInfoEdge (OBJECT): An edge in a connection.
type EnterpriseRepositoryInfoEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseRepositoryInfo `json:"node,omitempty"`
}

func (x *EnterpriseRepositoryInfoEdge) GetCursor() string                  { return x.Cursor }
func (x *EnterpriseRepositoryInfoEdge) GetNode() *EnterpriseRepositoryInfo { return x.Node }

// EnterpriseServerInstallation (OBJECT): An Enterprise Server installation.
type EnterpriseServerInstallation struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CustomerName: The customer name to which the Enterprise Server installation belongs.
	CustomerName string `json:"customerName,omitempty"`

	// HostName: The host name of the Enterprise Server installation.
	HostName string `json:"hostName,omitempty"`

	// Id: The Node ID of the EnterpriseServerInstallation object.
	Id ID `json:"id,omitempty"`

	// IsConnected: Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
	IsConnected bool `json:"isConnected,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// UserAccounts: User accounts on this Enterprise Server installation.
	//
	// Query arguments:
	//   - orderBy EnterpriseServerUserAccountOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserAccounts *EnterpriseServerUserAccountConnection `json:"userAccounts,omitempty"`

	// UserAccountsUploads: User accounts uploads for the Enterprise Server installation.
	//
	// Query arguments:
	//   - orderBy EnterpriseServerUserAccountsUploadOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserAccountsUploads *EnterpriseServerUserAccountsUploadConnection `json:"userAccountsUploads,omitempty"`
}

func (x *EnterpriseServerInstallation) GetCreatedAt() DateTime  { return x.CreatedAt }
func (x *EnterpriseServerInstallation) GetCustomerName() string { return x.CustomerName }
func (x *EnterpriseServerInstallation) GetHostName() string     { return x.HostName }
func (x *EnterpriseServerInstallation) GetId() ID               { return x.Id }
func (x *EnterpriseServerInstallation) GetIsConnected() bool    { return x.IsConnected }
func (x *EnterpriseServerInstallation) GetUpdatedAt() DateTime  { return x.UpdatedAt }
func (x *EnterpriseServerInstallation) GetUserAccounts() *EnterpriseServerUserAccountConnection {
	return x.UserAccounts
}
func (x *EnterpriseServerInstallation) GetUserAccountsUploads() *EnterpriseServerUserAccountsUploadConnection {
	return x.UserAccountsUploads
}

// EnterpriseServerInstallationConnection (OBJECT): The connection type for EnterpriseServerInstallation.
type EnterpriseServerInstallationConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseServerInstallationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseServerInstallation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseServerInstallationConnection) GetEdges() []*EnterpriseServerInstallationEdge {
	return x.Edges
}
func (x *EnterpriseServerInstallationConnection) GetNodes() []*EnterpriseServerInstallation {
	return x.Nodes
}
func (x *EnterpriseServerInstallationConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseServerInstallationConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseServerInstallationEdge (OBJECT): An edge in a connection.
type EnterpriseServerInstallationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseServerInstallation `json:"node,omitempty"`
}

func (x *EnterpriseServerInstallationEdge) GetCursor() string                      { return x.Cursor }
func (x *EnterpriseServerInstallationEdge) GetNode() *EnterpriseServerInstallation { return x.Node }

// EnterpriseServerInstallationMembershipConnection (OBJECT): The connection type for EnterpriseServerInstallation.
type EnterpriseServerInstallationMembershipConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseServerInstallationMembershipEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseServerInstallation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseServerInstallationMembershipConnection) GetEdges() []*EnterpriseServerInstallationMembershipEdge {
	return x.Edges
}
func (x *EnterpriseServerInstallationMembershipConnection) GetNodes() []*EnterpriseServerInstallation {
	return x.Nodes
}
func (x *EnterpriseServerInstallationMembershipConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseServerInstallationMembershipConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseServerInstallationMembershipEdge (OBJECT): An Enterprise Server installation that a user is a member of.
type EnterpriseServerInstallationMembershipEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseServerInstallation `json:"node,omitempty"`

	// Role: The role of the user in the enterprise membership.
	Role EnterpriseUserAccountMembershipRole `json:"role,omitempty"`
}

func (x *EnterpriseServerInstallationMembershipEdge) GetCursor() string { return x.Cursor }
func (x *EnterpriseServerInstallationMembershipEdge) GetNode() *EnterpriseServerInstallation {
	return x.Node
}
func (x *EnterpriseServerInstallationMembershipEdge) GetRole() EnterpriseUserAccountMembershipRole {
	return x.Role
}

// EnterpriseServerInstallationOrder (INPUT_OBJECT): Ordering options for Enterprise Server installation connections.
type EnterpriseServerInstallationOrder struct {
	// Field: The field to order Enterprise Server installations by.
	//
	// GraphQL type: EnterpriseServerInstallationOrderField!
	Field EnterpriseServerInstallationOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseServerInstallationOrderField (ENUM): Properties by which Enterprise Server installation connections can be ordered.
type EnterpriseServerInstallationOrderField string

// EnterpriseServerInstallationOrderField_HOST_NAME: Order Enterprise Server installations by host name.
const EnterpriseServerInstallationOrderField_HOST_NAME EnterpriseServerInstallationOrderField = "HOST_NAME"

// EnterpriseServerInstallationOrderField_CUSTOMER_NAME: Order Enterprise Server installations by customer name.
const EnterpriseServerInstallationOrderField_CUSTOMER_NAME EnterpriseServerInstallationOrderField = "CUSTOMER_NAME"

// EnterpriseServerInstallationOrderField_CREATED_AT: Order Enterprise Server installations by creation time.
const EnterpriseServerInstallationOrderField_CREATED_AT EnterpriseServerInstallationOrderField = "CREATED_AT"

// EnterpriseServerUserAccount (OBJECT): A user account on an Enterprise Server installation.
type EnterpriseServerUserAccount struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Emails: User emails belonging to this user account.
	//
	// Query arguments:
	//   - orderBy EnterpriseServerUserAccountEmailOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Emails *EnterpriseServerUserAccountEmailConnection `json:"emails,omitempty"`

	// EnterpriseServerInstallation: The Enterprise Server installation on which this user account exists.
	EnterpriseServerInstallation *EnterpriseServerInstallation `json:"enterpriseServerInstallation,omitempty"`

	// Id: The Node ID of the EnterpriseServerUserAccount object.
	Id ID `json:"id,omitempty"`

	// IsSiteAdmin: Whether the user account is a site administrator on the Enterprise Server installation.
	IsSiteAdmin bool `json:"isSiteAdmin,omitempty"`

	// Login: The login of the user account on the Enterprise Server installation.
	Login string `json:"login,omitempty"`

	// ProfileName: The profile name of the user account on the Enterprise Server installation.
	ProfileName string `json:"profileName,omitempty"`

	// RemoteCreatedAt: The date and time when the user account was created on the Enterprise Server installation.
	RemoteCreatedAt DateTime `json:"remoteCreatedAt,omitempty"`

	// RemoteUserId: The ID of the user account on the Enterprise Server installation.
	RemoteUserId int `json:"remoteUserId,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *EnterpriseServerUserAccount) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *EnterpriseServerUserAccount) GetEmails() *EnterpriseServerUserAccountEmailConnection {
	return x.Emails
}
func (x *EnterpriseServerUserAccount) GetEnterpriseServerInstallation() *EnterpriseServerInstallation {
	return x.EnterpriseServerInstallation
}
func (x *EnterpriseServerUserAccount) GetId() ID                    { return x.Id }
func (x *EnterpriseServerUserAccount) GetIsSiteAdmin() bool         { return x.IsSiteAdmin }
func (x *EnterpriseServerUserAccount) GetLogin() string             { return x.Login }
func (x *EnterpriseServerUserAccount) GetProfileName() string       { return x.ProfileName }
func (x *EnterpriseServerUserAccount) GetRemoteCreatedAt() DateTime { return x.RemoteCreatedAt }
func (x *EnterpriseServerUserAccount) GetRemoteUserId() int         { return x.RemoteUserId }
func (x *EnterpriseServerUserAccount) GetUpdatedAt() DateTime       { return x.UpdatedAt }

// EnterpriseServerUserAccountConnection (OBJECT): The connection type for EnterpriseServerUserAccount.
type EnterpriseServerUserAccountConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseServerUserAccountEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseServerUserAccount `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseServerUserAccountConnection) GetEdges() []*EnterpriseServerUserAccountEdge {
	return x.Edges
}
func (x *EnterpriseServerUserAccountConnection) GetNodes() []*EnterpriseServerUserAccount {
	return x.Nodes
}
func (x *EnterpriseServerUserAccountConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseServerUserAccountConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseServerUserAccountEdge (OBJECT): An edge in a connection.
type EnterpriseServerUserAccountEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseServerUserAccount `json:"node,omitempty"`
}

func (x *EnterpriseServerUserAccountEdge) GetCursor() string                     { return x.Cursor }
func (x *EnterpriseServerUserAccountEdge) GetNode() *EnterpriseServerUserAccount { return x.Node }

// EnterpriseServerUserAccountEmail (OBJECT): An email belonging to a user account on an Enterprise Server installation.
type EnterpriseServerUserAccountEmail struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Email: The email address.
	Email string `json:"email,omitempty"`

	// Id: The Node ID of the EnterpriseServerUserAccountEmail object.
	Id ID `json:"id,omitempty"`

	// IsPrimary: Indicates whether this is the primary email of the associated user account.
	IsPrimary bool `json:"isPrimary,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// UserAccount: The user account to which the email belongs.
	UserAccount *EnterpriseServerUserAccount `json:"userAccount,omitempty"`
}

func (x *EnterpriseServerUserAccountEmail) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *EnterpriseServerUserAccountEmail) GetEmail() string       { return x.Email }
func (x *EnterpriseServerUserAccountEmail) GetId() ID              { return x.Id }
func (x *EnterpriseServerUserAccountEmail) GetIsPrimary() bool     { return x.IsPrimary }
func (x *EnterpriseServerUserAccountEmail) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *EnterpriseServerUserAccountEmail) GetUserAccount() *EnterpriseServerUserAccount {
	return x.UserAccount
}

// EnterpriseServerUserAccountEmailConnection (OBJECT): The connection type for EnterpriseServerUserAccountEmail.
type EnterpriseServerUserAccountEmailConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseServerUserAccountEmailEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseServerUserAccountEmail `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseServerUserAccountEmailConnection) GetEdges() []*EnterpriseServerUserAccountEmailEdge {
	return x.Edges
}
func (x *EnterpriseServerUserAccountEmailConnection) GetNodes() []*EnterpriseServerUserAccountEmail {
	return x.Nodes
}
func (x *EnterpriseServerUserAccountEmailConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseServerUserAccountEmailConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseServerUserAccountEmailEdge (OBJECT): An edge in a connection.
type EnterpriseServerUserAccountEmailEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseServerUserAccountEmail `json:"node,omitempty"`
}

func (x *EnterpriseServerUserAccountEmailEdge) GetCursor() string { return x.Cursor }
func (x *EnterpriseServerUserAccountEmailEdge) GetNode() *EnterpriseServerUserAccountEmail {
	return x.Node
}

// EnterpriseServerUserAccountEmailOrder (INPUT_OBJECT): Ordering options for Enterprise Server user account email connections.
type EnterpriseServerUserAccountEmailOrder struct {
	// Field: The field to order emails by.
	//
	// GraphQL type: EnterpriseServerUserAccountEmailOrderField!
	Field EnterpriseServerUserAccountEmailOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseServerUserAccountEmailOrderField (ENUM): Properties by which Enterprise Server user account email connections can be ordered.
type EnterpriseServerUserAccountEmailOrderField string

// EnterpriseServerUserAccountEmailOrderField_EMAIL: Order emails by email.
const EnterpriseServerUserAccountEmailOrderField_EMAIL EnterpriseServerUserAccountEmailOrderField = "EMAIL"

// EnterpriseServerUserAccountOrder (INPUT_OBJECT): Ordering options for Enterprise Server user account connections.
type EnterpriseServerUserAccountOrder struct {
	// Field: The field to order user accounts by.
	//
	// GraphQL type: EnterpriseServerUserAccountOrderField!
	Field EnterpriseServerUserAccountOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseServerUserAccountOrderField (ENUM): Properties by which Enterprise Server user account connections can be ordered.
type EnterpriseServerUserAccountOrderField string

// EnterpriseServerUserAccountOrderField_LOGIN: Order user accounts by login.
const EnterpriseServerUserAccountOrderField_LOGIN EnterpriseServerUserAccountOrderField = "LOGIN"

// EnterpriseServerUserAccountOrderField_REMOTE_CREATED_AT: Order user accounts by creation time on the Enterprise Server installation.
const EnterpriseServerUserAccountOrderField_REMOTE_CREATED_AT EnterpriseServerUserAccountOrderField = "REMOTE_CREATED_AT"

// EnterpriseServerUserAccountsUpload (OBJECT): A user accounts upload from an Enterprise Server installation.
type EnterpriseServerUserAccountsUpload struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enterprise: The enterprise to which this upload belongs.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// EnterpriseServerInstallation: The Enterprise Server installation for which this upload was generated.
	EnterpriseServerInstallation *EnterpriseServerInstallation `json:"enterpriseServerInstallation,omitempty"`

	// Id: The Node ID of the EnterpriseServerUserAccountsUpload object.
	Id ID `json:"id,omitempty"`

	// Name: The name of the file uploaded.
	Name string `json:"name,omitempty"`

	// SyncState: The synchronization state of the upload.
	SyncState EnterpriseServerUserAccountsUploadSyncState `json:"syncState,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *EnterpriseServerUserAccountsUpload) GetCreatedAt() DateTime     { return x.CreatedAt }
func (x *EnterpriseServerUserAccountsUpload) GetEnterprise() *Enterprise { return x.Enterprise }
func (x *EnterpriseServerUserAccountsUpload) GetEnterpriseServerInstallation() *EnterpriseServerInstallation {
	return x.EnterpriseServerInstallation
}
func (x *EnterpriseServerUserAccountsUpload) GetId() ID       { return x.Id }
func (x *EnterpriseServerUserAccountsUpload) GetName() string { return x.Name }
func (x *EnterpriseServerUserAccountsUpload) GetSyncState() EnterpriseServerUserAccountsUploadSyncState {
	return x.SyncState
}
func (x *EnterpriseServerUserAccountsUpload) GetUpdatedAt() DateTime { return x.UpdatedAt }

// EnterpriseServerUserAccountsUploadConnection (OBJECT): The connection type for EnterpriseServerUserAccountsUpload.
type EnterpriseServerUserAccountsUploadConnection struct {
	// Edges: A list of edges.
	Edges []*EnterpriseServerUserAccountsUploadEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*EnterpriseServerUserAccountsUpload `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnterpriseServerUserAccountsUploadConnection) GetEdges() []*EnterpriseServerUserAccountsUploadEdge {
	return x.Edges
}
func (x *EnterpriseServerUserAccountsUploadConnection) GetNodes() []*EnterpriseServerUserAccountsUpload {
	return x.Nodes
}
func (x *EnterpriseServerUserAccountsUploadConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *EnterpriseServerUserAccountsUploadConnection) GetTotalCount() int     { return x.TotalCount }

// EnterpriseServerUserAccountsUploadEdge (OBJECT): An edge in a connection.
type EnterpriseServerUserAccountsUploadEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *EnterpriseServerUserAccountsUpload `json:"node,omitempty"`
}

func (x *EnterpriseServerUserAccountsUploadEdge) GetCursor() string { return x.Cursor }
func (x *EnterpriseServerUserAccountsUploadEdge) GetNode() *EnterpriseServerUserAccountsUpload {
	return x.Node
}

// EnterpriseServerUserAccountsUploadOrder (INPUT_OBJECT): Ordering options for Enterprise Server user accounts upload connections.
type EnterpriseServerUserAccountsUploadOrder struct {
	// Field: The field to order user accounts uploads by.
	//
	// GraphQL type: EnterpriseServerUserAccountsUploadOrderField!
	Field EnterpriseServerUserAccountsUploadOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// EnterpriseServerUserAccountsUploadOrderField (ENUM): Properties by which Enterprise Server user accounts upload connections can be ordered.
type EnterpriseServerUserAccountsUploadOrderField string

// EnterpriseServerUserAccountsUploadOrderField_CREATED_AT: Order user accounts uploads by creation time.
const EnterpriseServerUserAccountsUploadOrderField_CREATED_AT EnterpriseServerUserAccountsUploadOrderField = "CREATED_AT"

// EnterpriseServerUserAccountsUploadSyncState (ENUM): Synchronization state of the Enterprise Server user accounts upload.
type EnterpriseServerUserAccountsUploadSyncState string

// EnterpriseServerUserAccountsUploadSyncState_PENDING: The synchronization of the upload is pending.
const EnterpriseServerUserAccountsUploadSyncState_PENDING EnterpriseServerUserAccountsUploadSyncState = "PENDING"

// EnterpriseServerUserAccountsUploadSyncState_SUCCESS: The synchronization of the upload succeeded.
const EnterpriseServerUserAccountsUploadSyncState_SUCCESS EnterpriseServerUserAccountsUploadSyncState = "SUCCESS"

// EnterpriseServerUserAccountsUploadSyncState_FAILURE: The synchronization of the upload failed.
const EnterpriseServerUserAccountsUploadSyncState_FAILURE EnterpriseServerUserAccountsUploadSyncState = "FAILURE"

// EnterpriseUserAccount (OBJECT): An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type EnterpriseUserAccount struct {
	// AvatarUrl: A URL pointing to the enterprise user account's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enterprise: The enterprise in which this user account exists.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// EnterpriseInstallations: A list of Enterprise Server installations this user is a member of.
	//
	// Query arguments:
	//   - query String
	//   - orderBy EnterpriseServerInstallationOrder
	//   - role EnterpriseUserAccountMembershipRole
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	EnterpriseInstallations *EnterpriseServerInstallationMembershipConnection `json:"enterpriseInstallations,omitempty"`

	// Id: The Node ID of the EnterpriseUserAccount object.
	Id ID `json:"id,omitempty"`

	// Login: An identifier for the enterprise user account, a login or email address.
	Login string `json:"login,omitempty"`

	// Name: The name of the enterprise user account.
	Name string `json:"name,omitempty"`

	// Organizations: A list of enterprise organizations this user is a member of.
	//
	// Query arguments:
	//   - query String
	//   - orderBy OrganizationOrder
	//   - role EnterpriseUserAccountMembershipRole
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Organizations *EnterpriseOrganizationMembershipConnection `json:"organizations,omitempty"`

	// ResourcePath: The HTTP path for this user.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this user.
	Url URI `json:"url,omitempty"`

	// User: The user within the enterprise.
	User *User `json:"user,omitempty"`
}

func (x *EnterpriseUserAccount) GetAvatarUrl() URI          { return x.AvatarUrl }
func (x *EnterpriseUserAccount) GetCreatedAt() DateTime     { return x.CreatedAt }
func (x *EnterpriseUserAccount) GetEnterprise() *Enterprise { return x.Enterprise }
func (x *EnterpriseUserAccount) GetEnterpriseInstallations() *EnterpriseServerInstallationMembershipConnection {
	return x.EnterpriseInstallations
}
func (x *EnterpriseUserAccount) GetId() ID        { return x.Id }
func (x *EnterpriseUserAccount) GetLogin() string { return x.Login }
func (x *EnterpriseUserAccount) GetName() string  { return x.Name }
func (x *EnterpriseUserAccount) GetOrganizations() *EnterpriseOrganizationMembershipConnection {
	return x.Organizations
}
func (x *EnterpriseUserAccount) GetResourcePath() URI   { return x.ResourcePath }
func (x *EnterpriseUserAccount) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *EnterpriseUserAccount) GetUrl() URI            { return x.Url }
func (x *EnterpriseUserAccount) GetUser() *User         { return x.User }

// EnterpriseUserAccountMembershipRole (ENUM): The possible roles for enterprise membership.
type EnterpriseUserAccountMembershipRole string

// EnterpriseUserAccountMembershipRole_MEMBER: The user is a member of an organization in the enterprise.
const EnterpriseUserAccountMembershipRole_MEMBER EnterpriseUserAccountMembershipRole = "MEMBER"

// EnterpriseUserAccountMembershipRole_OWNER: The user is an owner of an organization in the enterprise.
const EnterpriseUserAccountMembershipRole_OWNER EnterpriseUserAccountMembershipRole = "OWNER"

// EnterpriseUserAccountMembershipRole_UNAFFILIATED: The user is not an owner of the enterprise, and not a member or owner of any organizations in the enterprise; only for EMU-enabled enterprises.
const EnterpriseUserAccountMembershipRole_UNAFFILIATED EnterpriseUserAccountMembershipRole = "UNAFFILIATED"

// EnterpriseUserDeployment (ENUM): The possible GitHub Enterprise deployments where this user can exist.
type EnterpriseUserDeployment string

// EnterpriseUserDeployment_CLOUD: The user is part of a GitHub Enterprise Cloud deployment.
const EnterpriseUserDeployment_CLOUD EnterpriseUserDeployment = "CLOUD"

// EnterpriseUserDeployment_SERVER: The user is part of a GitHub Enterprise Server deployment.
const EnterpriseUserDeployment_SERVER EnterpriseUserDeployment = "SERVER"

// Environment (OBJECT): An environment.
type Environment struct {
	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the Environment object.
	Id ID `json:"id,omitempty"`

	// IsPinned: Indicates whether or not this environment is currently pinned to the repository.
	IsPinned bool `json:"isPinned,omitempty"`

	// LatestCompletedDeployment: The latest completed deployment with status success, failure, or error if it exists.
	LatestCompletedDeployment *Deployment `json:"latestCompletedDeployment,omitempty"`

	// Name: The name of the environment.
	Name string `json:"name,omitempty"`

	// PinnedPosition: The position of the environment if it is pinned, null if it is not pinned.
	PinnedPosition int `json:"pinnedPosition,omitempty"`

	// ProtectionRules: The protection rules defined for this environment.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProtectionRules *DeploymentProtectionRuleConnection `json:"protectionRules,omitempty"`
}

func (x *Environment) GetDatabaseId() int                        { return x.DatabaseId }
func (x *Environment) GetId() ID                                 { return x.Id }
func (x *Environment) GetIsPinned() bool                         { return x.IsPinned }
func (x *Environment) GetLatestCompletedDeployment() *Deployment { return x.LatestCompletedDeployment }
func (x *Environment) GetName() string                           { return x.Name }
func (x *Environment) GetPinnedPosition() int                    { return x.PinnedPosition }
func (x *Environment) GetProtectionRules() *DeploymentProtectionRuleConnection {
	return x.ProtectionRules
}

// EnvironmentConnection (OBJECT): The connection type for Environment.
type EnvironmentConnection struct {
	// Edges: A list of edges.
	Edges []*EnvironmentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Environment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *EnvironmentConnection) GetEdges() []*EnvironmentEdge { return x.Edges }
func (x *EnvironmentConnection) GetNodes() []*Environment     { return x.Nodes }
func (x *EnvironmentConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *EnvironmentConnection) GetTotalCount() int           { return x.TotalCount }

// EnvironmentEdge (OBJECT): An edge in a connection.
type EnvironmentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Environment `json:"node,omitempty"`
}

func (x *EnvironmentEdge) GetCursor() string     { return x.Cursor }
func (x *EnvironmentEdge) GetNode() *Environment { return x.Node }

// EnvironmentOrderField (ENUM): Properties by which environments connections can be ordered.
type EnvironmentOrderField string

// EnvironmentOrderField_NAME: Order environments by name.
const EnvironmentOrderField_NAME EnvironmentOrderField = "NAME"

// EnvironmentPinnedFilterField (ENUM): Properties by which environments connections can be ordered.
type EnvironmentPinnedFilterField string

// EnvironmentPinnedFilterField_ALL: All environments will be returned.
const EnvironmentPinnedFilterField_ALL EnvironmentPinnedFilterField = "ALL"

// EnvironmentPinnedFilterField_ONLY: Only pinned environment will be returned.
const EnvironmentPinnedFilterField_ONLY EnvironmentPinnedFilterField = "ONLY"

// EnvironmentPinnedFilterField_NONE: Environments exclude pinned will be returned.
const EnvironmentPinnedFilterField_NONE EnvironmentPinnedFilterField = "NONE"

// Environments (INPUT_OBJECT): Ordering options for environments.
type Environments struct {
	// Field: The field to order environments by.
	//
	// GraphQL type: EnvironmentOrderField!
	Field EnvironmentOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order environments by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ExternalIdentity (OBJECT): An external identity provisioned by SAML SSO or SCIM. If SAML is configured on the organization, the external identity is visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. If SAML is configured on the enterprise, the external identity is visible to (1) enterprise owners, (2) enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type ExternalIdentity struct {
	// Guid: The GUID for this identity.
	Guid string `json:"guid,omitempty"`

	// Id: The Node ID of the ExternalIdentity object.
	Id ID `json:"id,omitempty"`

	// OrganizationInvitation: Organization invitation for this SCIM-provisioned external identity.
	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation,omitempty"`

	// SamlIdentity: SAML Identity attributes.
	SamlIdentity *ExternalIdentitySamlAttributes `json:"samlIdentity,omitempty"`

	// ScimIdentity: SCIM Identity attributes.
	ScimIdentity *ExternalIdentityScimAttributes `json:"scimIdentity,omitempty"`

	// User: User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
	User *User `json:"user,omitempty"`
}

func (x *ExternalIdentity) GetGuid() string { return x.Guid }
func (x *ExternalIdentity) GetId() ID       { return x.Id }
func (x *ExternalIdentity) GetOrganizationInvitation() *OrganizationInvitation {
	return x.OrganizationInvitation
}
func (x *ExternalIdentity) GetSamlIdentity() *ExternalIdentitySamlAttributes { return x.SamlIdentity }
func (x *ExternalIdentity) GetScimIdentity() *ExternalIdentityScimAttributes { return x.ScimIdentity }
func (x *ExternalIdentity) GetUser() *User                                   { return x.User }

// ExternalIdentityAttribute (OBJECT): An attribute for the External Identity attributes collection.
type ExternalIdentityAttribute struct {
	// Metadata: The attribute metadata as JSON.
	Metadata string `json:"metadata,omitempty"`

	// Name: The attribute name.
	Name string `json:"name,omitempty"`

	// Value: The attribute value.
	Value string `json:"value,omitempty"`
}

func (x *ExternalIdentityAttribute) GetMetadata() string { return x.Metadata }
func (x *ExternalIdentityAttribute) GetName() string     { return x.Name }
func (x *ExternalIdentityAttribute) GetValue() string    { return x.Value }

// ExternalIdentityConnection (OBJECT): The connection type for ExternalIdentity.
type ExternalIdentityConnection struct {
	// Edges: A list of edges.
	Edges []*ExternalIdentityEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ExternalIdentity `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ExternalIdentityConnection) GetEdges() []*ExternalIdentityEdge { return x.Edges }
func (x *ExternalIdentityConnection) GetNodes() []*ExternalIdentity     { return x.Nodes }
func (x *ExternalIdentityConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *ExternalIdentityConnection) GetTotalCount() int                { return x.TotalCount }

// ExternalIdentityEdge (OBJECT): An edge in a connection.
type ExternalIdentityEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ExternalIdentity `json:"node,omitempty"`
}

func (x *ExternalIdentityEdge) GetCursor() string          { return x.Cursor }
func (x *ExternalIdentityEdge) GetNode() *ExternalIdentity { return x.Node }

// ExternalIdentitySamlAttributes (OBJECT): SAML attributes for the External Identity.
type ExternalIdentitySamlAttributes struct {
	// Attributes: SAML Identity attributes.
	Attributes []*ExternalIdentityAttribute `json:"attributes,omitempty"`

	// Emails: The emails associated with the SAML identity.
	Emails []*UserEmailMetadata `json:"emails,omitempty"`

	// FamilyName: Family name of the SAML identity.
	FamilyName string `json:"familyName,omitempty"`

	// GivenName: Given name of the SAML identity.
	GivenName string `json:"givenName,omitempty"`

	// Groups: The groups linked to this identity in IDP.
	Groups []string `json:"groups,omitempty"`

	// NameId: The NameID of the SAML identity.
	NameId string `json:"nameId,omitempty"`

	// Username: The userName of the SAML identity.
	Username string `json:"username,omitempty"`
}

func (x *ExternalIdentitySamlAttributes) GetAttributes() []*ExternalIdentityAttribute {
	return x.Attributes
}
func (x *ExternalIdentitySamlAttributes) GetEmails() []*UserEmailMetadata { return x.Emails }
func (x *ExternalIdentitySamlAttributes) GetFamilyName() string           { return x.FamilyName }
func (x *ExternalIdentitySamlAttributes) GetGivenName() string            { return x.GivenName }
func (x *ExternalIdentitySamlAttributes) GetGroups() []string             { return x.Groups }
func (x *ExternalIdentitySamlAttributes) GetNameId() string               { return x.NameId }
func (x *ExternalIdentitySamlAttributes) GetUsername() string             { return x.Username }

// ExternalIdentityScimAttributes (OBJECT): SCIM attributes for the External Identity.
type ExternalIdentityScimAttributes struct {
	// Emails: The emails associated with the SCIM identity.
	Emails []*UserEmailMetadata `json:"emails,omitempty"`

	// FamilyName: Family name of the SCIM identity.
	FamilyName string `json:"familyName,omitempty"`

	// GivenName: Given name of the SCIM identity.
	GivenName string `json:"givenName,omitempty"`

	// Groups: The groups linked to this identity in IDP.
	Groups []string `json:"groups,omitempty"`

	// Username: The userName of the SCIM identity.
	Username string `json:"username,omitempty"`
}

func (x *ExternalIdentityScimAttributes) GetEmails() []*UserEmailMetadata { return x.Emails }
func (x *ExternalIdentityScimAttributes) GetFamilyName() string           { return x.FamilyName }
func (x *ExternalIdentityScimAttributes) GetGivenName() string            { return x.GivenName }
func (x *ExternalIdentityScimAttributes) GetGroups() []string             { return x.Groups }
func (x *ExternalIdentityScimAttributes) GetUsername() string             { return x.Username }

// FileAddition (INPUT_OBJECT): A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced.
type FileAddition struct {
	// Path: The path in the repository where the file will be located.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`

	// Contents: The base64 encoded contents of the file.
	//
	// GraphQL type: Base64String!
	Contents Base64String `json:"contents,omitempty"`
}

// FileChanges (INPUT_OBJECT): A description of a set of changes to a file tree to be made as part of
// a git commit, modeled as zero or more file `additions` and zero or more
// file `deletions`.
//
// Both fields are optional; omitting both will produce a commit with no
// file changes.
//
// `deletions` and `additions` describe changes to files identified
// by their path in the git tree using unix-style path separators, i.e.
// `/`.  The root of a git tree is an empty string, so paths are not
// slash-prefixed.
//
// `path` values must be unique across all `additions` and `deletions`
// provided.  Any duplication will result in a validation error.
//
// ### Encoding
//
// File contents must be provided in full for each `FileAddition`.
//
// The `contents` of a `FileAddition` must be encoded using RFC 4648
// compliant base64, i.e. correct padding is required and no characters
// outside the standard alphabet may be used.  Invalid base64
// encoding will be rejected with a validation error.
//
// The encoded contents may be binary.
//
// For text files, no assumptions are made about the character encoding of
// the file contents (after base64 decoding).  No charset transcoding or
// line-ending normalization will be performed; it is the client's
// responsibility to manage the character encoding of files they provide.
// However, for maximum compatibility we recommend using UTF-8 encoding
// and ensuring that all files in a repository use a consistent
// line-ending convention (`\n` or `\r\n`), and that all files end
// with a newline.
//
// ### Modeling file changes
//
// Each of the the five types of conceptual changes that can be made in a
// git commit can be described using the `FileChanges` type as follows:
//
// 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
//
//	{
//	  "additions" [
//	    {
//	      "path": "docs/README.txt",
//	      "contents": base64encode("hello world\n")
//	    }
//	  ]
//	}
//
//  2. Existing file modification: change existing `docs/README.txt` to have new
//     content `new content here\n`:
//
//     {
//     "additions" [
//     {
//     "path": "docs/README.txt",
//     "contents": base64encode("new content here\n")
//     }
//     ]
//     }
//
//  3. Existing file deletion: remove existing file `docs/README.txt`.
//     Note that the path is required to exist -- specifying a
//     path that does not exist on the given branch will abort the
//     commit and return an error.
//
//     {
//     "deletions" [
//     {
//     "path": "docs/README.txt"
//     }
//     ]
//     }
//
//  4. File rename with no changes: rename `docs/README.txt` with
//     previous content `hello world\n` to the same content at
//     `newdocs/README.txt`:
//
//     {
//     "deletions" [
//     {
//     "path": "docs/README.txt",
//     }
//     ],
//     "additions" [
//     {
//     "path": "newdocs/README.txt",
//     "contents": base64encode("hello world\n")
//     }
//     ]
//     }
//
//  5. File rename with changes: rename `docs/README.txt` with
//     previous content `hello world\n` to a file at path
//     `newdocs/README.txt` with content `new contents\n`:
//
//     {
//     "deletions" [
//     {
//     "path": "docs/README.txt",
//     }
//     ],
//     "additions" [
//     {
//     "path": "newdocs/README.txt",
//     "contents": base64encode("new contents\n")
//     }
//     ]
//     }
//
// .
type FileChanges struct {
	// Deletions: Files to delete.
	//
	// GraphQL type: [FileDeletion!]
	Deletions []*FileDeletion `json:"deletions,omitempty"`

	// Additions: File to add or change.
	//
	// GraphQL type: [FileAddition!]
	Additions []*FileAddition `json:"additions,omitempty"`
}

// FileDeletion (INPUT_OBJECT): A command to delete the file at the given path as part of a commit.
type FileDeletion struct {
	// Path: The path to delete.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`
}

// FileExtensionRestrictionParameters (OBJECT): Prevent commits that include files with specified file extensions from being pushed to the commit graph.
type FileExtensionRestrictionParameters struct {
	// RestrictedFileExtensions: The file extensions that are restricted from being pushed to the commit graph.
	RestrictedFileExtensions []string `json:"restrictedFileExtensions,omitempty"`
}

func (x *FileExtensionRestrictionParameters) GetRestrictedFileExtensions() []string {
	return x.RestrictedFileExtensions
}

// FileExtensionRestrictionParametersInput (INPUT_OBJECT): Prevent commits that include files with specified file extensions from being pushed to the commit graph.
type FileExtensionRestrictionParametersInput struct {
	// RestrictedFileExtensions: The file extensions that are restricted from being pushed to the commit graph.
	//
	// GraphQL type: [String!]!
	RestrictedFileExtensions []string `json:"restrictedFileExtensions,omitempty"`
}

// FilePathRestrictionParameters (OBJECT): Prevent commits that include changes in specified file paths from being pushed to the commit graph.
type FilePathRestrictionParameters struct {
	// RestrictedFilePaths: The file paths that are restricted from being pushed to the commit graph.
	RestrictedFilePaths []string `json:"restrictedFilePaths,omitempty"`
}

func (x *FilePathRestrictionParameters) GetRestrictedFilePaths() []string {
	return x.RestrictedFilePaths
}

// FilePathRestrictionParametersInput (INPUT_OBJECT): Prevent commits that include changes in specified file paths from being pushed to the commit graph.
type FilePathRestrictionParametersInput struct {
	// RestrictedFilePaths: The file paths that are restricted from being pushed to the commit graph.
	//
	// GraphQL type: [String!]!
	RestrictedFilePaths []string `json:"restrictedFilePaths,omitempty"`
}

// FileViewedState (ENUM): The possible viewed states of a file .
type FileViewedState string

// FileViewedState_DISMISSED: The file has new changes since last viewed.
const FileViewedState_DISMISSED FileViewedState = "DISMISSED"

// FileViewedState_VIEWED: The file has been marked as viewed.
const FileViewedState_VIEWED FileViewedState = "VIEWED"

// FileViewedState_UNVIEWED: The file has not been marked as viewed.
const FileViewedState_UNVIEWED FileViewedState = "UNVIEWED"

// Float (SCALAR): Represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
type Float float64

// FollowOrganizationInput (INPUT_OBJECT): Autogenerated input type of FollowOrganization.
type FollowOrganizationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: ID of the organization to follow.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`
}

// FollowOrganizationPayload (OBJECT): Autogenerated return type of FollowOrganization.
type FollowOrganizationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Organization: The organization that was followed.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *FollowOrganizationPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *FollowOrganizationPayload) GetOrganization() *Organization { return x.Organization }

// FollowUserInput (INPUT_OBJECT): Autogenerated input type of FollowUser.
type FollowUserInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// UserId: ID of the user to follow.
	//
	// GraphQL type: ID!
	UserId ID `json:"userId,omitempty"`
}

// FollowUserPayload (OBJECT): Autogenerated return type of FollowUser.
type FollowUserPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// User: The user that was followed.
	User *User `json:"user,omitempty"`
}

func (x *FollowUserPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *FollowUserPayload) GetUser() *User              { return x.User }

// FollowerConnection (OBJECT): The connection type for User.
type FollowerConnection struct {
	// Edges: A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *FollowerConnection) GetEdges() []*UserEdge  { return x.Edges }
func (x *FollowerConnection) GetNodes() []*User      { return x.Nodes }
func (x *FollowerConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *FollowerConnection) GetTotalCount() int     { return x.TotalCount }

// FollowingConnection (OBJECT): The connection type for User.
type FollowingConnection struct {
	// Edges: A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *FollowingConnection) GetEdges() []*UserEdge  { return x.Edges }
func (x *FollowingConnection) GetNodes() []*User      { return x.Nodes }
func (x *FollowingConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *FollowingConnection) GetTotalCount() int     { return x.TotalCount }

// FundingLink (OBJECT): A funding platform link for a repository.
type FundingLink struct {
	// Platform: The funding platform this link is for.
	Platform FundingPlatform `json:"platform,omitempty"`

	// Url: The configured URL for this funding link.
	Url URI `json:"url,omitempty"`
}

func (x *FundingLink) GetPlatform() FundingPlatform { return x.Platform }
func (x *FundingLink) GetUrl() URI                  { return x.Url }

// FundingPlatform (ENUM): The possible funding platforms for repository funding links.
type FundingPlatform string

// FundingPlatform_GITHUB: GitHub funding platform.
const FundingPlatform_GITHUB FundingPlatform = "GITHUB"

// FundingPlatform_PATREON: Patreon funding platform.
const FundingPlatform_PATREON FundingPlatform = "PATREON"

// FundingPlatform_OPEN_COLLECTIVE: Open Collective funding platform.
const FundingPlatform_OPEN_COLLECTIVE FundingPlatform = "OPEN_COLLECTIVE"

// FundingPlatform_KO_FI: Ko-fi funding platform.
const FundingPlatform_KO_FI FundingPlatform = "KO_FI"

// FundingPlatform_TIDELIFT: Tidelift funding platform.
const FundingPlatform_TIDELIFT FundingPlatform = "TIDELIFT"

// FundingPlatform_COMMUNITY_BRIDGE: Community Bridge funding platform.
const FundingPlatform_COMMUNITY_BRIDGE FundingPlatform = "COMMUNITY_BRIDGE"

// FundingPlatform_LIBERAPAY: Liberapay funding platform.
const FundingPlatform_LIBERAPAY FundingPlatform = "LIBERAPAY"

// FundingPlatform_ISSUEHUNT: IssueHunt funding platform.
const FundingPlatform_ISSUEHUNT FundingPlatform = "ISSUEHUNT"

// FundingPlatform_LFX_CROWDFUNDING: LFX Crowdfunding funding platform.
const FundingPlatform_LFX_CROWDFUNDING FundingPlatform = "LFX_CROWDFUNDING"

// FundingPlatform_POLAR: Polar funding platform.
const FundingPlatform_POLAR FundingPlatform = "POLAR"

// FundingPlatform_BUY_ME_A_COFFEE: Buy Me a Coffee funding platform.
const FundingPlatform_BUY_ME_A_COFFEE FundingPlatform = "BUY_ME_A_COFFEE"

// FundingPlatform_THANKS_DEV: thanks.dev funding platform.
const FundingPlatform_THANKS_DEV FundingPlatform = "THANKS_DEV"

// FundingPlatform_CUSTOM: Custom funding platform.
const FundingPlatform_CUSTOM FundingPlatform = "CUSTOM"

// GenericHovercardContext (OBJECT): A generic hovercard context with a message and icon.
type GenericHovercardContext struct {
	// Message: A string describing this context.
	Message string `json:"message,omitempty"`

	// Octicon: An octicon to accompany this context.
	Octicon string `json:"octicon,omitempty"`
}

func (x *GenericHovercardContext) GetMessage() string { return x.Message }
func (x *GenericHovercardContext) GetOcticon() string { return x.Octicon }

// Gist (OBJECT): A Gist.
type Gist struct {
	// Comments: A list of comments associated with the gist.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *GistCommentConnection `json:"comments,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Description: The gist description.
	Description string `json:"description,omitempty"`

	// Files: The files in this gist.
	//
	// Query arguments:
	//   - limit Int
	//   - oid GitObjectID
	Files []*GistFile `json:"files,omitempty"`

	// Forks: A list of forks associated with the gist.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy GistOrder
	Forks *GistConnection `json:"forks,omitempty"`

	// Id: The Node ID of the Gist object.
	Id ID `json:"id,omitempty"`

	// IsFork: Identifies if the gist is a fork.
	IsFork bool `json:"isFork,omitempty"`

	// IsPublic: Whether the gist is public or not.
	IsPublic bool `json:"isPublic,omitempty"`

	// Name: The gist name.
	Name string `json:"name,omitempty"`

	// Owner: The gist owner.
	Owner RepositoryOwner `json:"owner,omitempty"`

	// PushedAt: Identifies when the gist was last pushed to.
	PushedAt DateTime `json:"pushedAt,omitempty"`

	// ResourcePath: The HTML path to this resource.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// StargazerCount: Returns a count of how many stargazers there are on this object
	// .
	StargazerCount int `json:"stargazerCount,omitempty"`

	// Stargazers: A list of users who have starred this starrable.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy StarOrder
	Stargazers *StargazerConnection `json:"stargazers,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this Gist.
	Url URI `json:"url,omitempty"`

	// ViewerHasStarred: Returns a boolean indicating whether the viewing user has starred this starrable.
	ViewerHasStarred bool `json:"viewerHasStarred,omitempty"`
}

func (x *Gist) GetComments() *GistCommentConnection { return x.Comments }
func (x *Gist) GetCreatedAt() DateTime              { return x.CreatedAt }
func (x *Gist) GetDescription() string              { return x.Description }
func (x *Gist) GetFiles() []*GistFile               { return x.Files }
func (x *Gist) GetForks() *GistConnection           { return x.Forks }
func (x *Gist) GetId() ID                           { return x.Id }
func (x *Gist) GetIsFork() bool                     { return x.IsFork }
func (x *Gist) GetIsPublic() bool                   { return x.IsPublic }
func (x *Gist) GetName() string                     { return x.Name }
func (x *Gist) GetOwner() RepositoryOwner           { return x.Owner }
func (x *Gist) GetPushedAt() DateTime               { return x.PushedAt }
func (x *Gist) GetResourcePath() URI                { return x.ResourcePath }
func (x *Gist) GetStargazerCount() int              { return x.StargazerCount }
func (x *Gist) GetStargazers() *StargazerConnection { return x.Stargazers }
func (x *Gist) GetUpdatedAt() DateTime              { return x.UpdatedAt }
func (x *Gist) GetUrl() URI                         { return x.Url }
func (x *Gist) GetViewerHasStarred() bool           { return x.ViewerHasStarred }

// GistComment (OBJECT): Represents a comment on an Gist.
type GistComment struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the gist.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: Identifies the comment body.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// Gist: The associated gist.
	Gist *Gist `json:"gist,omitempty"`

	// Id: The Node ID of the GistComment object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsMinimized: Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// MinimizedReason: Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason string `json:"minimizedReason,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanMinimize: Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`
}

func (x *GistComment) GetAuthor() Actor                                { return x.Author }
func (x *GistComment) GetAuthorAssociation() CommentAuthorAssociation  { return x.AuthorAssociation }
func (x *GistComment) GetBody() string                                 { return x.Body }
func (x *GistComment) GetBodyHTML() template.HTML                      { return x.BodyHTML }
func (x *GistComment) GetBodyText() string                             { return x.BodyText }
func (x *GistComment) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *GistComment) GetCreatedViaEmail() bool                        { return x.CreatedViaEmail }
func (x *GistComment) GetDatabaseId() int                              { return x.DatabaseId }
func (x *GistComment) GetEditor() Actor                                { return x.Editor }
func (x *GistComment) GetGist() *Gist                                  { return x.Gist }
func (x *GistComment) GetId() ID                                       { return x.Id }
func (x *GistComment) GetIncludesCreatedEdit() bool                    { return x.IncludesCreatedEdit }
func (x *GistComment) GetIsMinimized() bool                            { return x.IsMinimized }
func (x *GistComment) GetLastEditedAt() DateTime                       { return x.LastEditedAt }
func (x *GistComment) GetMinimizedReason() string                      { return x.MinimizedReason }
func (x *GistComment) GetPublishedAt() DateTime                        { return x.PublishedAt }
func (x *GistComment) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *GistComment) GetUserContentEdits() *UserContentEditConnection { return x.UserContentEdits }
func (x *GistComment) GetViewerCanDelete() bool                        { return x.ViewerCanDelete }
func (x *GistComment) GetViewerCanMinimize() bool                      { return x.ViewerCanMinimize }
func (x *GistComment) GetViewerCanUpdate() bool                        { return x.ViewerCanUpdate }
func (x *GistComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *GistComment) GetViewerDidAuthor() bool { return x.ViewerDidAuthor }

// GistCommentConnection (OBJECT): The connection type for GistComment.
type GistCommentConnection struct {
	// Edges: A list of edges.
	Edges []*GistCommentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*GistComment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *GistCommentConnection) GetEdges() []*GistCommentEdge { return x.Edges }
func (x *GistCommentConnection) GetNodes() []*GistComment     { return x.Nodes }
func (x *GistCommentConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *GistCommentConnection) GetTotalCount() int           { return x.TotalCount }

// GistCommentEdge (OBJECT): An edge in a connection.
type GistCommentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *GistComment `json:"node,omitempty"`
}

func (x *GistCommentEdge) GetCursor() string     { return x.Cursor }
func (x *GistCommentEdge) GetNode() *GistComment { return x.Node }

// GistConnection (OBJECT): The connection type for Gist.
type GistConnection struct {
	// Edges: A list of edges.
	Edges []*GistEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Gist `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *GistConnection) GetEdges() []*GistEdge  { return x.Edges }
func (x *GistConnection) GetNodes() []*Gist      { return x.Nodes }
func (x *GistConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *GistConnection) GetTotalCount() int     { return x.TotalCount }

// GistEdge (OBJECT): An edge in a connection.
type GistEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Gist `json:"node,omitempty"`
}

func (x *GistEdge) GetCursor() string { return x.Cursor }
func (x *GistEdge) GetNode() *Gist    { return x.Node }

// GistFile (OBJECT): A file in a gist.
type GistFile struct {
	// EncodedName: The file name encoded to remove characters that are invalid in URL paths.
	EncodedName string `json:"encodedName,omitempty"`

	// Encoding: The gist file encoding.
	Encoding string `json:"encoding,omitempty"`

	// Extension: The file extension from the file name.
	Extension string `json:"extension,omitempty"`

	// IsImage: Indicates if this file is an image.
	IsImage bool `json:"isImage,omitempty"`

	// IsTruncated: Whether the file's contents were truncated.
	IsTruncated bool `json:"isTruncated,omitempty"`

	// Language: The programming language this file is written in.
	Language *Language `json:"language,omitempty"`

	// Name: The gist file name.
	Name string `json:"name,omitempty"`

	// Size: The gist file size in bytes.
	Size int `json:"size,omitempty"`

	// Text: UTF8 text data or null if the file is binary.
	//
	// Query arguments:
	//   - truncate Int
	Text string `json:"text,omitempty"`
}

func (x *GistFile) GetEncodedName() string { return x.EncodedName }
func (x *GistFile) GetEncoding() string    { return x.Encoding }
func (x *GistFile) GetExtension() string   { return x.Extension }
func (x *GistFile) GetIsImage() bool       { return x.IsImage }
func (x *GistFile) GetIsTruncated() bool   { return x.IsTruncated }
func (x *GistFile) GetLanguage() *Language { return x.Language }
func (x *GistFile) GetName() string        { return x.Name }
func (x *GistFile) GetSize() int           { return x.Size }
func (x *GistFile) GetText() string        { return x.Text }

// GistOrder (INPUT_OBJECT): Ordering options for gist connections.
type GistOrder struct {
	// Field: The field to order repositories by.
	//
	// GraphQL type: GistOrderField!
	Field GistOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// GistOrderField (ENUM): Properties by which gist connections can be ordered.
type GistOrderField string

// GistOrderField_CREATED_AT: Order gists by creation time.
const GistOrderField_CREATED_AT GistOrderField = "CREATED_AT"

// GistOrderField_UPDATED_AT: Order gists by update time.
const GistOrderField_UPDATED_AT GistOrderField = "UPDATED_AT"

// GistOrderField_PUSHED_AT: Order gists by push time.
const GistOrderField_PUSHED_AT GistOrderField = "PUSHED_AT"

// GistPrivacy (ENUM): The privacy of a Gist.
type GistPrivacy string

// GistPrivacy_PUBLIC: Public.
const GistPrivacy_PUBLIC GistPrivacy = "PUBLIC"

// GistPrivacy_SECRET: Secret.
const GistPrivacy_SECRET GistPrivacy = "SECRET"

// GistPrivacy_ALL: Gists that are public and secret.
const GistPrivacy_ALL GistPrivacy = "ALL"

// GitActor (OBJECT): Represents an actor in a Git commit (ie. an author or committer).
type GitActor struct {
	// AvatarUrl: A URL pointing to the author's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// Date: The timestamp of the Git action (authoring or committing).
	Date GitTimestamp `json:"date,omitempty"`

	// Email: The email in the Git commit.
	Email string `json:"email,omitempty"`

	// Name: The name in the Git commit.
	Name string `json:"name,omitempty"`

	// User: The GitHub user corresponding to the email field. Null if no such user exists.
	User *User `json:"user,omitempty"`
}

func (x *GitActor) GetAvatarUrl() URI     { return x.AvatarUrl }
func (x *GitActor) GetDate() GitTimestamp { return x.Date }
func (x *GitActor) GetEmail() string      { return x.Email }
func (x *GitActor) GetName() string       { return x.Name }
func (x *GitActor) GetUser() *User        { return x.User }

// GitActorConnection (OBJECT): The connection type for GitActor.
type GitActorConnection struct {
	// Edges: A list of edges.
	Edges []*GitActorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*GitActor `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *GitActorConnection) GetEdges() []*GitActorEdge { return x.Edges }
func (x *GitActorConnection) GetNodes() []*GitActor     { return x.Nodes }
func (x *GitActorConnection) GetPageInfo() *PageInfo    { return x.PageInfo }
func (x *GitActorConnection) GetTotalCount() int        { return x.TotalCount }

// GitActorEdge (OBJECT): An edge in a connection.
type GitActorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *GitActor `json:"node,omitempty"`
}

func (x *GitActorEdge) GetCursor() string  { return x.Cursor }
func (x *GitActorEdge) GetNode() *GitActor { return x.Node }

// GitHubMetadata (OBJECT): Represents information about the GitHub instance.
type GitHubMetadata struct {
	// GitHubServicesSha: Returns a String that's a SHA of `github-services`.
	GitHubServicesSha GitObjectID `json:"gitHubServicesSha,omitempty"`

	// GitIpAddresses: IP addresses that users connect to for git operations.
	GitIpAddresses []string `json:"gitIpAddresses,omitempty"`

	// GithubEnterpriseImporterIpAddresses: IP addresses that GitHub Enterprise Importer uses for outbound connections.
	GithubEnterpriseImporterIpAddresses []string `json:"githubEnterpriseImporterIpAddresses,omitempty"`

	// HookIpAddresses: IP addresses that service hooks are sent from.
	HookIpAddresses []string `json:"hookIpAddresses,omitempty"`

	// ImporterIpAddresses: IP addresses that the importer connects from.
	ImporterIpAddresses []string `json:"importerIpAddresses,omitempty"`

	// IsPasswordAuthenticationVerifiable: Whether or not users are verified.
	IsPasswordAuthenticationVerifiable bool `json:"isPasswordAuthenticationVerifiable,omitempty"`

	// PagesIpAddresses: IP addresses for GitHub Pages' A records.
	PagesIpAddresses []string `json:"pagesIpAddresses,omitempty"`
}

func (x *GitHubMetadata) GetGitHubServicesSha() GitObjectID { return x.GitHubServicesSha }
func (x *GitHubMetadata) GetGitIpAddresses() []string       { return x.GitIpAddresses }
func (x *GitHubMetadata) GetGithubEnterpriseImporterIpAddresses() []string {
	return x.GithubEnterpriseImporterIpAddresses
}
func (x *GitHubMetadata) GetHookIpAddresses() []string     { return x.HookIpAddresses }
func (x *GitHubMetadata) GetImporterIpAddresses() []string { return x.ImporterIpAddresses }
func (x *GitHubMetadata) GetIsPasswordAuthenticationVerifiable() bool {
	return x.IsPasswordAuthenticationVerifiable
}
func (x *GitHubMetadata) GetPagesIpAddresses() []string { return x.PagesIpAddresses }

// GitObject (INTERFACE): Represents a Git object.
// GitObject_Interface: Represents a Git object.
//
// Possible types:
//
//   - *Blob
//   - *Commit
//   - *Tag
//   - *Tree
type GitObject_Interface interface {
	isGitObject()
	GetAbbreviatedOid() string
	GetCommitResourcePath() URI
	GetCommitUrl() URI
	GetId() ID
	GetOid() GitObjectID
	GetRepository() *Repository
}

func (*Blob) isGitObject()   {}
func (*Commit) isGitObject() {}
func (*Tag) isGitObject()    {}
func (*Tree) isGitObject()   {}

type GitObject struct {
	Interface GitObject_Interface
}

func (x *GitObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *GitObject) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for GitObject", info.Typename)
	case "Blob":
		x.Interface = new(Blob)
	case "Commit":
		x.Interface = new(Commit)
	case "Tag":
		x.Interface = new(Tag)
	case "Tree":
		x.Interface = new(Tree)
	}
	return json.Unmarshal(js, x.Interface)
}

// GitObjectID (SCALAR): A Git object ID.
type GitObjectID string

// GitRefname (SCALAR): A fully qualified reference name (e.g. `refs/heads/master`).
type GitRefname string

// GitSSHRemote (SCALAR): Git SSH string.
type GitSSHRemote string

// GitSignature (INTERFACE): Information about a signature (GPG or S/MIME) on a Commit or Tag.
// GitSignature_Interface: Information about a signature (GPG or S/MIME) on a Commit or Tag.
//
// Possible types:
//
//   - *GpgSignature
//   - *SmimeSignature
//   - *SshSignature
//   - *UnknownSignature
type GitSignature_Interface interface {
	isGitSignature()
	GetEmail() string
	GetIsValid() bool
	GetPayload() string
	GetSignature() string
	GetSigner() *User
	GetState() GitSignatureState
	GetVerifiedAt() DateTime
	GetWasSignedByGitHub() bool
}

func (*GpgSignature) isGitSignature()     {}
func (*SmimeSignature) isGitSignature()   {}
func (*SshSignature) isGitSignature()     {}
func (*UnknownSignature) isGitSignature() {}

type GitSignature struct {
	Interface GitSignature_Interface
}

func (x *GitSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *GitSignature) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for GitSignature", info.Typename)
	case "GpgSignature":
		x.Interface = new(GpgSignature)
	case "SmimeSignature":
		x.Interface = new(SmimeSignature)
	case "SshSignature":
		x.Interface = new(SshSignature)
	case "UnknownSignature":
		x.Interface = new(UnknownSignature)
	}
	return json.Unmarshal(js, x.Interface)
}

// GitSignatureState (ENUM): The state of a Git signature.
type GitSignatureState string

// GitSignatureState_VALID: Valid signature and verified by GitHub.
const GitSignatureState_VALID GitSignatureState = "VALID"

// GitSignatureState_INVALID: Invalid signature.
const GitSignatureState_INVALID GitSignatureState = "INVALID"

// GitSignatureState_MALFORMED_SIG: Malformed signature.
const GitSignatureState_MALFORMED_SIG GitSignatureState = "MALFORMED_SIG"

// GitSignatureState_UNKNOWN_KEY: Key used for signing not known to GitHub.
const GitSignatureState_UNKNOWN_KEY GitSignatureState = "UNKNOWN_KEY"

// GitSignatureState_BAD_EMAIL: Invalid email used for signing.
const GitSignatureState_BAD_EMAIL GitSignatureState = "BAD_EMAIL"

// GitSignatureState_UNVERIFIED_EMAIL: Email used for signing unverified on GitHub.
const GitSignatureState_UNVERIFIED_EMAIL GitSignatureState = "UNVERIFIED_EMAIL"

// GitSignatureState_NO_USER: Email used for signing not known to GitHub.
const GitSignatureState_NO_USER GitSignatureState = "NO_USER"

// GitSignatureState_UNKNOWN_SIG_TYPE: Unknown signature type.
const GitSignatureState_UNKNOWN_SIG_TYPE GitSignatureState = "UNKNOWN_SIG_TYPE"

// GitSignatureState_UNSIGNED: Unsigned.
const GitSignatureState_UNSIGNED GitSignatureState = "UNSIGNED"

// GitSignatureState_GPGVERIFY_UNAVAILABLE: Internal error - the GPG verification service is unavailable at the moment.
const GitSignatureState_GPGVERIFY_UNAVAILABLE GitSignatureState = "GPGVERIFY_UNAVAILABLE"

// GitSignatureState_GPGVERIFY_ERROR: Internal error - the GPG verification service misbehaved.
const GitSignatureState_GPGVERIFY_ERROR GitSignatureState = "GPGVERIFY_ERROR"

// GitSignatureState_NOT_SIGNING_KEY: The usage flags for the key that signed this don't allow signing.
const GitSignatureState_NOT_SIGNING_KEY GitSignatureState = "NOT_SIGNING_KEY"

// GitSignatureState_EXPIRED_KEY: Signing key expired.
const GitSignatureState_EXPIRED_KEY GitSignatureState = "EXPIRED_KEY"

// GitSignatureState_OCSP_PENDING: Valid signature, pending certificate revocation checking.
const GitSignatureState_OCSP_PENDING GitSignatureState = "OCSP_PENDING"

// GitSignatureState_OCSP_ERROR: Valid signature, though certificate revocation check failed.
const GitSignatureState_OCSP_ERROR GitSignatureState = "OCSP_ERROR"

// GitSignatureState_BAD_CERT: The signing certificate or its chain could not be verified.
const GitSignatureState_BAD_CERT GitSignatureState = "BAD_CERT"

// GitSignatureState_OCSP_REVOKED: One or more certificates in chain has been revoked.
const GitSignatureState_OCSP_REVOKED GitSignatureState = "OCSP_REVOKED"

// GitTimestamp (SCALAR): An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
type GitTimestamp string

// GpgSignature (OBJECT): Represents a GPG signature on a Commit or Tag.
type GpgSignature struct {
	// Email: Email used to sign this object.
	Email string `json:"email,omitempty"`

	// IsValid: True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid,omitempty"`

	// KeyId: Hex-encoded ID of the key that signed this object.
	KeyId string `json:"keyId,omitempty"`

	// Payload: Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload,omitempty"`

	// Signature: ASCII-armored signature header from object.
	Signature string `json:"signature,omitempty"`

	// Signer: GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`

	// State: The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state,omitempty"`

	// VerifiedAt: The date the signature was verified, if valid.
	VerifiedAt DateTime `json:"verifiedAt,omitempty"`

	// WasSignedByGitHub: True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub,omitempty"`
}

func (x *GpgSignature) GetEmail() string            { return x.Email }
func (x *GpgSignature) GetIsValid() bool            { return x.IsValid }
func (x *GpgSignature) GetKeyId() string            { return x.KeyId }
func (x *GpgSignature) GetPayload() string          { return x.Payload }
func (x *GpgSignature) GetSignature() string        { return x.Signature }
func (x *GpgSignature) GetSigner() *User            { return x.Signer }
func (x *GpgSignature) GetState() GitSignatureState { return x.State }
func (x *GpgSignature) GetVerifiedAt() DateTime     { return x.VerifiedAt }
func (x *GpgSignature) GetWasSignedByGitHub() bool  { return x.WasSignedByGitHub }

// GrantEnterpriseOrganizationsMigratorRoleInput (INPUT_OBJECT): Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole.
type GrantEnterpriseOrganizationsMigratorRoleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of the user to grant the migrator role.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`
}

// GrantEnterpriseOrganizationsMigratorRolePayload (OBJECT): Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole.
type GrantEnterpriseOrganizationsMigratorRolePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Organizations: The organizations that had the migrator role applied to for the given user.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Organizations *OrganizationConnection `json:"organizations,omitempty"`
}

func (x *GrantEnterpriseOrganizationsMigratorRolePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *GrantEnterpriseOrganizationsMigratorRolePayload) GetOrganizations() *OrganizationConnection {
	return x.Organizations
}

// GrantMigratorRoleInput (INPUT_OBJECT): Autogenerated input type of GrantMigratorRole.
type GrantMigratorRoleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: The ID of the organization that the user/team belongs to.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// Actor: The user login or Team slug to grant the migrator role.
	//
	// GraphQL type: String!
	Actor string `json:"actor,omitempty"`

	// ActorType: Specifies the type of the actor, can be either USER or TEAM.
	//
	// GraphQL type: ActorType!
	ActorType ActorType `json:"actorType,omitempty"`
}

// GrantMigratorRolePayload (OBJECT): Autogenerated return type of GrantMigratorRole.
type GrantMigratorRolePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Success: Did the operation succeed?.
	Success bool `json:"success,omitempty"`
}

func (x *GrantMigratorRolePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *GrantMigratorRolePayload) GetSuccess() bool            { return x.Success }

// HTML (SCALAR): A string containing HTML code.
type HTML string

// HeadRefDeletedEvent (OBJECT): Represents a 'head_ref_deleted' event on a given pull request.
type HeadRefDeletedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// HeadRef: Identifies the Ref associated with the `head_ref_deleted` event.
	HeadRef *Ref `json:"headRef,omitempty"`

	// HeadRefName: Identifies the name of the Ref associated with the `head_ref_deleted` event.
	HeadRefName string `json:"headRefName,omitempty"`

	// Id: The Node ID of the HeadRefDeletedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *HeadRefDeletedEvent) GetActor() Actor              { return x.Actor }
func (x *HeadRefDeletedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *HeadRefDeletedEvent) GetHeadRef() *Ref             { return x.HeadRef }
func (x *HeadRefDeletedEvent) GetHeadRefName() string       { return x.HeadRefName }
func (x *HeadRefDeletedEvent) GetId() ID                    { return x.Id }
func (x *HeadRefDeletedEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// HeadRefForcePushedEvent (OBJECT): Represents a 'head_ref_force_pushed' event on a given pull request.
type HeadRefForcePushedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// AfterCommit: Identifies the after commit SHA for the 'head_ref_force_pushed' event.
	AfterCommit *Commit `json:"afterCommit,omitempty"`

	// BeforeCommit: Identifies the before commit SHA for the 'head_ref_force_pushed' event.
	BeforeCommit *Commit `json:"beforeCommit,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the HeadRefForcePushedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Ref: Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *HeadRefForcePushedEvent) GetActor() Actor              { return x.Actor }
func (x *HeadRefForcePushedEvent) GetAfterCommit() *Commit      { return x.AfterCommit }
func (x *HeadRefForcePushedEvent) GetBeforeCommit() *Commit     { return x.BeforeCommit }
func (x *HeadRefForcePushedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *HeadRefForcePushedEvent) GetId() ID                    { return x.Id }
func (x *HeadRefForcePushedEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *HeadRefForcePushedEvent) GetRef() *Ref                 { return x.Ref }

// HeadRefRestoredEvent (OBJECT): Represents a 'head_ref_restored' event on a given pull request.
type HeadRefRestoredEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the HeadRefRestoredEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *HeadRefRestoredEvent) GetActor() Actor              { return x.Actor }
func (x *HeadRefRestoredEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *HeadRefRestoredEvent) GetId() ID                    { return x.Id }
func (x *HeadRefRestoredEvent) GetPullRequest() *PullRequest { return x.PullRequest }

// Hovercard (OBJECT): Detail needed to display a hovercard for a user.
type Hovercard struct {
	// Contexts: Each of the contexts for this hovercard.
	Contexts []HovercardContext `json:"contexts,omitempty"`
}

func (x *Hovercard) GetContexts() []HovercardContext { return x.Contexts }

// HovercardContext (INTERFACE): An individual line of a hovercard.
// HovercardContext_Interface: An individual line of a hovercard.
//
// Possible types:
//
//   - *GenericHovercardContext
//   - *OrganizationTeamsHovercardContext
//   - *OrganizationsHovercardContext
//   - *ReviewStatusHovercardContext
//   - *ViewerHovercardContext
type HovercardContext_Interface interface {
	isHovercardContext()
	GetMessage() string
	GetOcticon() string
}

func (*GenericHovercardContext) isHovercardContext()           {}
func (*OrganizationTeamsHovercardContext) isHovercardContext() {}
func (*OrganizationsHovercardContext) isHovercardContext()     {}
func (*ReviewStatusHovercardContext) isHovercardContext()      {}
func (*ViewerHovercardContext) isHovercardContext()            {}

type HovercardContext struct {
	Interface HovercardContext_Interface
}

func (x *HovercardContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *HovercardContext) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for HovercardContext", info.Typename)
	case "GenericHovercardContext":
		x.Interface = new(GenericHovercardContext)
	case "OrganizationTeamsHovercardContext":
		x.Interface = new(OrganizationTeamsHovercardContext)
	case "OrganizationsHovercardContext":
		x.Interface = new(OrganizationsHovercardContext)
	case "ReviewStatusHovercardContext":
		x.Interface = new(ReviewStatusHovercardContext)
	case "ViewerHovercardContext":
		x.Interface = new(ViewerHovercardContext)
	}
	return json.Unmarshal(js, x.Interface)
}

// ID (SCALAR): Represents a unique identifier that is Base64 obfuscated. It is often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"VXNlci0xMA=="`) or integer (such as `4`) input value will be accepted as an ID.
type ID string

// IdentityProviderConfigurationState (ENUM): The possible states in which authentication can be configured with an identity provider.
type IdentityProviderConfigurationState string

// IdentityProviderConfigurationState_ENFORCED: Authentication with an identity provider is configured and enforced.
const IdentityProviderConfigurationState_ENFORCED IdentityProviderConfigurationState = "ENFORCED"

// IdentityProviderConfigurationState_CONFIGURED: Authentication with an identity provider is configured but not enforced.
const IdentityProviderConfigurationState_CONFIGURED IdentityProviderConfigurationState = "CONFIGURED"

// IdentityProviderConfigurationState_UNCONFIGURED: Authentication with an identity provider is not configured.
const IdentityProviderConfigurationState_UNCONFIGURED IdentityProviderConfigurationState = "UNCONFIGURED"

// ImportProjectInput (INPUT_OBJECT): Autogenerated input type of ImportProject.
type ImportProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerName: The name of the Organization or User to create the Project under.
	//
	// GraphQL type: String!
	OwnerName string `json:"ownerName,omitempty"`

	// Name: The name of Project.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Body: The description of Project.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Public: Whether the Project is public or not.
	//
	// GraphQL type: Boolean
	Public bool `json:"public,omitempty"`

	// ColumnImports: A list of columns containing issues and pull requests.
	//
	// GraphQL type: [ProjectColumnImport!]!
	ColumnImports []*ProjectColumnImport `json:"columnImports,omitempty"`
}

// ImportProjectPayload (OBJECT): Autogenerated return type of ImportProject.
type ImportProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Project: The new Project!.
	Project *Project `json:"project,omitempty"`
}

func (x *ImportProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ImportProjectPayload) GetProject() *Project        { return x.Project }

// Int (SCALAR): Represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
type Int int

// InviteEnterpriseAdminInput (INPUT_OBJECT): Autogenerated input type of InviteEnterpriseAdmin.
type InviteEnterpriseAdminInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise to which you want to invite an administrator.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Invitee: The login of a user to invite as an administrator.
	//
	// GraphQL type: String
	Invitee string `json:"invitee,omitempty"`

	// Email: The email of the person to invite as an administrator.
	//
	// GraphQL type: String
	Email string `json:"email,omitempty"`

	// Role: The role of the administrator.
	//
	// GraphQL type: EnterpriseAdministratorRole
	Role EnterpriseAdministratorRole `json:"role,omitempty"`
}

// InviteEnterpriseAdminPayload (OBJECT): Autogenerated return type of InviteEnterpriseAdmin.
type InviteEnterpriseAdminPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Invitation: The created enterprise administrator invitation.
	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
}

func (x *InviteEnterpriseAdminPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *InviteEnterpriseAdminPayload) GetInvitation() *EnterpriseAdministratorInvitation {
	return x.Invitation
}

// InviteEnterpriseMemberInput (INPUT_OBJECT): Autogenerated input type of InviteEnterpriseMember.
type InviteEnterpriseMemberInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise to which you want to invite an unaffiliated member.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Invitee: The login of a user to invite as an unaffiliated member.
	//
	// GraphQL type: String
	Invitee string `json:"invitee,omitempty"`

	// Email: The email of the person to invite as an unaffiliated member.
	//
	// GraphQL type: String
	Email string `json:"email,omitempty"`
}

// InviteEnterpriseMemberPayload (OBJECT): Autogenerated return type of InviteEnterpriseMember.
type InviteEnterpriseMemberPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Invitation: The created enterprise member invitation.
	Invitation *EnterpriseMemberInvitation `json:"invitation,omitempty"`
}

func (x *InviteEnterpriseMemberPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *InviteEnterpriseMemberPayload) GetInvitation() *EnterpriseMemberInvitation {
	return x.Invitation
}

// IpAllowListEnabledSettingValue (ENUM): The possible values for the IP allow list enabled setting.
type IpAllowListEnabledSettingValue string

// IpAllowListEnabledSettingValue_ENABLED: The setting is enabled for the owner.
const IpAllowListEnabledSettingValue_ENABLED IpAllowListEnabledSettingValue = "ENABLED"

// IpAllowListEnabledSettingValue_DISABLED: The setting is disabled for the owner.
const IpAllowListEnabledSettingValue_DISABLED IpAllowListEnabledSettingValue = "DISABLED"

// IpAllowListEntry (OBJECT): An IP address or range of addresses that is allowed to access an owner's resources.
type IpAllowListEntry struct {
	// AllowListValue: A single IP address or range of IP addresses in CIDR notation.
	AllowListValue string `json:"allowListValue,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the IpAllowListEntry object.
	Id ID `json:"id,omitempty"`

	// IsActive: Whether the entry is currently active.
	IsActive bool `json:"isActive,omitempty"`

	// Name: The name of the IP allow list entry.
	Name string `json:"name,omitempty"`

	// Owner: The owner of the IP allow list entry.
	Owner IpAllowListOwner `json:"owner,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *IpAllowListEntry) GetAllowListValue() string  { return x.AllowListValue }
func (x *IpAllowListEntry) GetCreatedAt() DateTime     { return x.CreatedAt }
func (x *IpAllowListEntry) GetId() ID                  { return x.Id }
func (x *IpAllowListEntry) GetIsActive() bool          { return x.IsActive }
func (x *IpAllowListEntry) GetName() string            { return x.Name }
func (x *IpAllowListEntry) GetOwner() IpAllowListOwner { return x.Owner }
func (x *IpAllowListEntry) GetUpdatedAt() DateTime     { return x.UpdatedAt }

// IpAllowListEntryConnection (OBJECT): The connection type for IpAllowListEntry.
type IpAllowListEntryConnection struct {
	// Edges: A list of edges.
	Edges []*IpAllowListEntryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*IpAllowListEntry `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *IpAllowListEntryConnection) GetEdges() []*IpAllowListEntryEdge { return x.Edges }
func (x *IpAllowListEntryConnection) GetNodes() []*IpAllowListEntry     { return x.Nodes }
func (x *IpAllowListEntryConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *IpAllowListEntryConnection) GetTotalCount() int                { return x.TotalCount }

// IpAllowListEntryEdge (OBJECT): An edge in a connection.
type IpAllowListEntryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *IpAllowListEntry `json:"node,omitempty"`
}

func (x *IpAllowListEntryEdge) GetCursor() string          { return x.Cursor }
func (x *IpAllowListEntryEdge) GetNode() *IpAllowListEntry { return x.Node }

// IpAllowListEntryOrder (INPUT_OBJECT): Ordering options for IP allow list entry connections.
type IpAllowListEntryOrder struct {
	// Field: The field to order IP allow list entries by.
	//
	// GraphQL type: IpAllowListEntryOrderField!
	Field IpAllowListEntryOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// IpAllowListEntryOrderField (ENUM): Properties by which IP allow list entry connections can be ordered.
type IpAllowListEntryOrderField string

// IpAllowListEntryOrderField_CREATED_AT: Order IP allow list entries by creation time.
const IpAllowListEntryOrderField_CREATED_AT IpAllowListEntryOrderField = "CREATED_AT"

// IpAllowListEntryOrderField_ALLOW_LIST_VALUE: Order IP allow list entries by the allow list value.
const IpAllowListEntryOrderField_ALLOW_LIST_VALUE IpAllowListEntryOrderField = "ALLOW_LIST_VALUE"

// IpAllowListForInstalledAppsEnabledSettingValue (ENUM): The possible values for the IP allow list configuration for installed GitHub Apps setting.
type IpAllowListForInstalledAppsEnabledSettingValue string

// IpAllowListForInstalledAppsEnabledSettingValue_ENABLED: The setting is enabled for the owner.
const IpAllowListForInstalledAppsEnabledSettingValue_ENABLED IpAllowListForInstalledAppsEnabledSettingValue = "ENABLED"

// IpAllowListForInstalledAppsEnabledSettingValue_DISABLED: The setting is disabled for the owner.
const IpAllowListForInstalledAppsEnabledSettingValue_DISABLED IpAllowListForInstalledAppsEnabledSettingValue = "DISABLED"

// IpAllowListOwner (UNION): Types that can own an IP allow list.
// IpAllowListOwner_Interface: Types that can own an IP allow list.
//
// Possible types:
//
//   - *App
//   - *Enterprise
//   - *Organization
type IpAllowListOwner_Interface interface {
	isIpAllowListOwner()
}

func (*App) isIpAllowListOwner()          {}
func (*Enterprise) isIpAllowListOwner()   {}
func (*Organization) isIpAllowListOwner() {}

type IpAllowListOwner struct {
	Interface IpAllowListOwner_Interface
}

func (x *IpAllowListOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *IpAllowListOwner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for IpAllowListOwner", info.Typename)
	case "App":
		x.Interface = new(App)
	case "Enterprise":
		x.Interface = new(Enterprise)
	case "Organization":
		x.Interface = new(Organization)
	}
	return json.Unmarshal(js, x.Interface)
}

// Issue (OBJECT): An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type Issue struct {
	// ActiveLockReason: Reason that the conversation was locked.
	ActiveLockReason LockReason `json:"activeLockReason,omitempty"`

	// Assignees: A list of Users assigned to this object.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Assignees *UserConnection `json:"assignees,omitempty"`

	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: Identifies the body of the issue.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyResourcePath: The http path for this issue body.
	BodyResourcePath URI `json:"bodyResourcePath,omitempty"`

	// BodyText: Identifies the body of the issue rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// BodyUrl: The http URL for this issue body.
	BodyUrl URI `json:"bodyUrl,omitempty"`

	// Closed: Indicates if the object is closed (definition of closed may depend on type).
	Closed bool `json:"closed,omitempty"`

	// ClosedAt: Identifies the date and time when the object was closed.
	ClosedAt DateTime `json:"closedAt,omitempty"`

	// ClosedByPullRequestsReferences: List of open pull requests referenced from this issue.
	//
	// Query arguments:
	//   - includeClosedPrs Boolean
	//   - orderByState Boolean
	//   - userLinkedOnly Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ClosedByPullRequestsReferences *PullRequestConnection `json:"closedByPullRequestsReferences,omitempty"`

	// Comments: A list of comments associated with the Issue.
	//
	// Query arguments:
	//   - orderBy IssueCommentOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *IssueCommentConnection `json:"comments,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Hovercard: The hovercard information for this issue.
	//
	// Query arguments:
	//   - includeNotificationContexts Boolean
	Hovercard *Hovercard `json:"hovercard,omitempty"`

	// Id: The Node ID of the Issue object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsPinned: Indicates whether or not this issue is currently pinned to the repository issues list.
	IsPinned bool `json:"isPinned,omitempty"`

	// IsReadByViewer: Is this issue read by the viewer.
	IsReadByViewer bool `json:"isReadByViewer,omitempty"`

	// Labels: A list of labels associated with the object.
	//
	// Query arguments:
	//   - orderBy LabelOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Labels *LabelConnection `json:"labels,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// LinkedBranches: Branches linked to this issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	LinkedBranches *LinkedBranchConnection `json:"linkedBranches,omitempty"`

	// Locked: `true` if the object is locked.
	Locked bool `json:"locked,omitempty"`

	// Milestone: Identifies the milestone associated with the issue.
	Milestone *Milestone `json:"milestone,omitempty"`

	// Number: Identifies the issue number.
	Number int `json:"number,omitempty"`

	// Parent: The parent entity of the issue.
	Parent *Issue `json:"parent,omitempty"`

	// Participants: A list of Users that are participating in the Issue conversation.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Participants *UserConnection `json:"participants,omitempty"`

	// ProjectCards: List of project cards associated with this issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - archivedStates [ProjectCardArchivedState]
	ProjectCards *ProjectCardConnection `json:"projectCards,omitempty"`

	// ProjectItems: List of project items associated with this issue.
	//
	// Query arguments:
	//   - includeArchived Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectItems *ProjectV2ItemConnection `json:"projectItems,omitempty"`

	// ProjectV2: Find a project by number.
	//
	// Query arguments:
	//   - number Int!
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`

	// ProjectsV2: A list of projects under the owner.
	//
	// Query arguments:
	//   - query String
	//   - orderBy ProjectV2Order
	//   - minPermissionLevel ProjectV2PermissionLevel
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this issue.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// State: Identifies the state of the issue.
	State IssueState `json:"state,omitempty"`

	// StateReason: Identifies the reason for the issue state.
	//
	// Query arguments:
	//   - enableDuplicate Boolean
	StateReason IssueStateReason `json:"stateReason,omitempty"`

	// SubIssues: A list of sub-issues associated with the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SubIssues *IssueConnection `json:"subIssues,omitempty"`

	// SubIssuesSummary: Summary of the state of an issue's sub-issues.
	SubIssuesSummary *SubIssuesSummary `json:"subIssuesSummary,omitempty"`

	// Timeline: A list of events, comments, commits, etc. associated with the issue.
	//
	// Deprecated: A list of events, comments, commits, etc. associated with the issue.
	//
	// Query arguments:
	//   - since DateTime
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Timeline *IssueTimelineConnection `json:"timeline,omitempty"`

	// TimelineItems: A list of events, comments, commits, etc. associated with the issue.
	//
	// Query arguments:
	//   - since DateTime
	//   - skip Int
	//   - itemTypes [IssueTimelineItemsItemType!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	TimelineItems *IssueTimelineItemsConnection `json:"timelineItems,omitempty"`

	// Title: Identifies the issue title.
	Title string `json:"title,omitempty"`

	// TitleHTML: Identifies the issue title rendered to HTML.
	TitleHTML string `json:"titleHTML,omitempty"`

	// TrackedInIssues: A list of issues that track this issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	TrackedInIssues *IssueConnection `json:"trackedInIssues,omitempty"`

	// TrackedIssues: A list of issues tracked inside the current issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	TrackedIssues *IssueConnection `json:"trackedIssues,omitempty"`

	// TrackedIssuesCount: The number of tracked issues for this issue.
	//
	// Query arguments:
	//   - states [TrackedIssueStates]
	TrackedIssuesCount int `json:"trackedIssuesCount,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this issue.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanClose: Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanLabel: Indicates if the viewer can edit labels for this object.
	ViewerCanLabel bool `json:"viewerCanLabel,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanReopen: Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`

	// ViewerThreadSubscriptionFormAction: Identifies the viewer's thread subscription form action.
	ViewerThreadSubscriptionFormAction ThreadSubscriptionFormAction `json:"viewerThreadSubscriptionFormAction,omitempty"`

	// ViewerThreadSubscriptionStatus: Identifies the viewer's thread subscription status.
	ViewerThreadSubscriptionStatus ThreadSubscriptionState `json:"viewerThreadSubscriptionStatus,omitempty"`
}

func (x *Issue) GetActiveLockReason() LockReason                { return x.ActiveLockReason }
func (x *Issue) GetAssignees() *UserConnection                  { return x.Assignees }
func (x *Issue) GetAuthor() Actor                               { return x.Author }
func (x *Issue) GetAuthorAssociation() CommentAuthorAssociation { return x.AuthorAssociation }
func (x *Issue) GetBody() string                                { return x.Body }
func (x *Issue) GetBodyHTML() template.HTML                     { return x.BodyHTML }
func (x *Issue) GetBodyResourcePath() URI                       { return x.BodyResourcePath }
func (x *Issue) GetBodyText() string                            { return x.BodyText }
func (x *Issue) GetBodyUrl() URI                                { return x.BodyUrl }
func (x *Issue) GetClosed() bool                                { return x.Closed }
func (x *Issue) GetClosedAt() DateTime                          { return x.ClosedAt }
func (x *Issue) GetClosedByPullRequestsReferences() *PullRequestConnection {
	return x.ClosedByPullRequestsReferences
}
func (x *Issue) GetComments() *IssueCommentConnection            { return x.Comments }
func (x *Issue) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *Issue) GetCreatedViaEmail() bool                        { return x.CreatedViaEmail }
func (x *Issue) GetDatabaseId() int                              { return x.DatabaseId }
func (x *Issue) GetEditor() Actor                                { return x.Editor }
func (x *Issue) GetFullDatabaseId() BigInt                       { return x.FullDatabaseId }
func (x *Issue) GetHovercard() *Hovercard                        { return x.Hovercard }
func (x *Issue) GetId() ID                                       { return x.Id }
func (x *Issue) GetIncludesCreatedEdit() bool                    { return x.IncludesCreatedEdit }
func (x *Issue) GetIsPinned() bool                               { return x.IsPinned }
func (x *Issue) GetIsReadByViewer() bool                         { return x.IsReadByViewer }
func (x *Issue) GetLabels() *LabelConnection                     { return x.Labels }
func (x *Issue) GetLastEditedAt() DateTime                       { return x.LastEditedAt }
func (x *Issue) GetLinkedBranches() *LinkedBranchConnection      { return x.LinkedBranches }
func (x *Issue) GetLocked() bool                                 { return x.Locked }
func (x *Issue) GetMilestone() *Milestone                        { return x.Milestone }
func (x *Issue) GetNumber() int                                  { return x.Number }
func (x *Issue) GetParent() *Issue                               { return x.Parent }
func (x *Issue) GetParticipants() *UserConnection                { return x.Participants }
func (x *Issue) GetProjectCards() *ProjectCardConnection         { return x.ProjectCards }
func (x *Issue) GetProjectItems() *ProjectV2ItemConnection       { return x.ProjectItems }
func (x *Issue) GetProjectV2() *ProjectV2                        { return x.ProjectV2 }
func (x *Issue) GetProjectsV2() *ProjectV2Connection             { return x.ProjectsV2 }
func (x *Issue) GetPublishedAt() DateTime                        { return x.PublishedAt }
func (x *Issue) GetReactionGroups() []*ReactionGroup             { return x.ReactionGroups }
func (x *Issue) GetReactions() *ReactionConnection               { return x.Reactions }
func (x *Issue) GetRepository() *Repository                      { return x.Repository }
func (x *Issue) GetResourcePath() URI                            { return x.ResourcePath }
func (x *Issue) GetState() IssueState                            { return x.State }
func (x *Issue) GetStateReason() IssueStateReason                { return x.StateReason }
func (x *Issue) GetSubIssues() *IssueConnection                  { return x.SubIssues }
func (x *Issue) GetSubIssuesSummary() *SubIssuesSummary          { return x.SubIssuesSummary }
func (x *Issue) GetTimeline() *IssueTimelineConnection           { return x.Timeline }
func (x *Issue) GetTimelineItems() *IssueTimelineItemsConnection { return x.TimelineItems }
func (x *Issue) GetTitle() string                                { return x.Title }
func (x *Issue) GetTitleHTML() string                            { return x.TitleHTML }
func (x *Issue) GetTrackedInIssues() *IssueConnection            { return x.TrackedInIssues }
func (x *Issue) GetTrackedIssues() *IssueConnection              { return x.TrackedIssues }
func (x *Issue) GetTrackedIssuesCount() int                      { return x.TrackedIssuesCount }
func (x *Issue) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *Issue) GetUrl() URI                                     { return x.Url }
func (x *Issue) GetUserContentEdits() *UserContentEditConnection { return x.UserContentEdits }
func (x *Issue) GetViewerCanClose() bool                         { return x.ViewerCanClose }
func (x *Issue) GetViewerCanDelete() bool                        { return x.ViewerCanDelete }
func (x *Issue) GetViewerCanLabel() bool                         { return x.ViewerCanLabel }
func (x *Issue) GetViewerCanReact() bool                         { return x.ViewerCanReact }
func (x *Issue) GetViewerCanReopen() bool                        { return x.ViewerCanReopen }
func (x *Issue) GetViewerCanSubscribe() bool                     { return x.ViewerCanSubscribe }
func (x *Issue) GetViewerCanUpdate() bool                        { return x.ViewerCanUpdate }
func (x *Issue) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *Issue) GetViewerDidAuthor() bool                 { return x.ViewerDidAuthor }
func (x *Issue) GetViewerSubscription() SubscriptionState { return x.ViewerSubscription }
func (x *Issue) GetViewerThreadSubscriptionFormAction() ThreadSubscriptionFormAction {
	return x.ViewerThreadSubscriptionFormAction
}
func (x *Issue) GetViewerThreadSubscriptionStatus() ThreadSubscriptionState {
	return x.ViewerThreadSubscriptionStatus
}

// IssueClosedStateReason (ENUM): The possible state reasons of a closed issue.
type IssueClosedStateReason string

// IssueClosedStateReason_COMPLETED: An issue that has been closed as completed.
const IssueClosedStateReason_COMPLETED IssueClosedStateReason = "COMPLETED"

// IssueClosedStateReason_NOT_PLANNED: An issue that has been closed as not planned.
const IssueClosedStateReason_NOT_PLANNED IssueClosedStateReason = "NOT_PLANNED"

// IssueClosedStateReason_DUPLICATE: An issue that has been closed as a duplicate.
const IssueClosedStateReason_DUPLICATE IssueClosedStateReason = "DUPLICATE"

// IssueComment (OBJECT): Represents a comment on an Issue.
type IssueComment struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: The body as Markdown.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the IssueComment object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsMinimized: Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized,omitempty"`

	// Issue: Identifies the issue associated with the comment.
	Issue *Issue `json:"issue,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// MinimizedReason: Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason string `json:"minimizedReason,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// PullRequest: Returns the pull request associated with the comment, if this comment was made on a
	// pull request.
	// .
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this issue comment.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this issue comment.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanMinimize: Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`
}

func (x *IssueComment) GetAuthor() Actor                                { return x.Author }
func (x *IssueComment) GetAuthorAssociation() CommentAuthorAssociation  { return x.AuthorAssociation }
func (x *IssueComment) GetBody() string                                 { return x.Body }
func (x *IssueComment) GetBodyHTML() template.HTML                      { return x.BodyHTML }
func (x *IssueComment) GetBodyText() string                             { return x.BodyText }
func (x *IssueComment) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *IssueComment) GetCreatedViaEmail() bool                        { return x.CreatedViaEmail }
func (x *IssueComment) GetDatabaseId() int                              { return x.DatabaseId }
func (x *IssueComment) GetEditor() Actor                                { return x.Editor }
func (x *IssueComment) GetFullDatabaseId() BigInt                       { return x.FullDatabaseId }
func (x *IssueComment) GetId() ID                                       { return x.Id }
func (x *IssueComment) GetIncludesCreatedEdit() bool                    { return x.IncludesCreatedEdit }
func (x *IssueComment) GetIsMinimized() bool                            { return x.IsMinimized }
func (x *IssueComment) GetIssue() *Issue                                { return x.Issue }
func (x *IssueComment) GetLastEditedAt() DateTime                       { return x.LastEditedAt }
func (x *IssueComment) GetMinimizedReason() string                      { return x.MinimizedReason }
func (x *IssueComment) GetPublishedAt() DateTime                        { return x.PublishedAt }
func (x *IssueComment) GetPullRequest() *PullRequest                    { return x.PullRequest }
func (x *IssueComment) GetReactionGroups() []*ReactionGroup             { return x.ReactionGroups }
func (x *IssueComment) GetReactions() *ReactionConnection               { return x.Reactions }
func (x *IssueComment) GetRepository() *Repository                      { return x.Repository }
func (x *IssueComment) GetResourcePath() URI                            { return x.ResourcePath }
func (x *IssueComment) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *IssueComment) GetUrl() URI                                     { return x.Url }
func (x *IssueComment) GetUserContentEdits() *UserContentEditConnection { return x.UserContentEdits }
func (x *IssueComment) GetViewerCanDelete() bool                        { return x.ViewerCanDelete }
func (x *IssueComment) GetViewerCanMinimize() bool                      { return x.ViewerCanMinimize }
func (x *IssueComment) GetViewerCanReact() bool                         { return x.ViewerCanReact }
func (x *IssueComment) GetViewerCanUpdate() bool                        { return x.ViewerCanUpdate }
func (x *IssueComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *IssueComment) GetViewerDidAuthor() bool { return x.ViewerDidAuthor }

// IssueCommentConnection (OBJECT): The connection type for IssueComment.
type IssueCommentConnection struct {
	// Edges: A list of edges.
	Edges []*IssueCommentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*IssueComment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *IssueCommentConnection) GetEdges() []*IssueCommentEdge { return x.Edges }
func (x *IssueCommentConnection) GetNodes() []*IssueComment     { return x.Nodes }
func (x *IssueCommentConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *IssueCommentConnection) GetTotalCount() int            { return x.TotalCount }

// IssueCommentEdge (OBJECT): An edge in a connection.
type IssueCommentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *IssueComment `json:"node,omitempty"`
}

func (x *IssueCommentEdge) GetCursor() string      { return x.Cursor }
func (x *IssueCommentEdge) GetNode() *IssueComment { return x.Node }

// IssueCommentOrder (INPUT_OBJECT): Ways in which lists of issue comments can be ordered upon return.
type IssueCommentOrder struct {
	// Field: The field in which to order issue comments by.
	//
	// GraphQL type: IssueCommentOrderField!
	Field IssueCommentOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order issue comments by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// IssueCommentOrderField (ENUM): Properties by which issue comment connections can be ordered.
type IssueCommentOrderField string

// IssueCommentOrderField_UPDATED_AT: Order issue comments by update time.
const IssueCommentOrderField_UPDATED_AT IssueCommentOrderField = "UPDATED_AT"

// IssueConnection (OBJECT): The connection type for Issue.
type IssueConnection struct {
	// Edges: A list of edges.
	Edges []*IssueEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Issue `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *IssueConnection) GetEdges() []*IssueEdge { return x.Edges }
func (x *IssueConnection) GetNodes() []*Issue     { return x.Nodes }
func (x *IssueConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *IssueConnection) GetTotalCount() int     { return x.TotalCount }

// IssueContributionsByRepository (OBJECT): This aggregates issues opened by a user within one repository.
type IssueContributionsByRepository struct {
	// Contributions: The issue contributions.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ContributionOrder
	Contributions *CreatedIssueContributionConnection `json:"contributions,omitempty"`

	// Repository: The repository in which the issues were opened.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *IssueContributionsByRepository) GetContributions() *CreatedIssueContributionConnection {
	return x.Contributions
}
func (x *IssueContributionsByRepository) GetRepository() *Repository { return x.Repository }

// IssueEdge (OBJECT): An edge in a connection.
type IssueEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Issue `json:"node,omitempty"`
}

func (x *IssueEdge) GetCursor() string { return x.Cursor }
func (x *IssueEdge) GetNode() *Issue   { return x.Node }

// IssueFilters (INPUT_OBJECT): Ways in which to filter lists of issues.
type IssueFilters struct {
	// Assignee: List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
	//
	// GraphQL type: String
	Assignee string `json:"assignee,omitempty"`

	// CreatedBy: List issues created by given name.
	//
	// GraphQL type: String
	CreatedBy string `json:"createdBy,omitempty"`

	// Labels: List issues where the list of label names exist on the issue.
	//
	// GraphQL type: [String!]
	Labels []string `json:"labels,omitempty"`

	// Mentioned: List issues where the given name is mentioned in the issue.
	//
	// GraphQL type: String
	Mentioned string `json:"mentioned,omitempty"`

	// Milestone: List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
	//
	// GraphQL type: String
	Milestone string `json:"milestone,omitempty"`

	// MilestoneNumber: List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
	//
	// GraphQL type: String
	MilestoneNumber string `json:"milestoneNumber,omitempty"`

	// Since: List issues that have been updated at or after the given date.
	//
	// GraphQL type: DateTime
	Since DateTime `json:"since,omitempty"`

	// States: List issues filtered by the list of states given.
	//
	// GraphQL type: [IssueState!]
	States []IssueState `json:"states,omitempty"`

	// ViewerSubscribed: List issues subscribed to by viewer.
	//
	// GraphQL type: Boolean
	ViewerSubscribed bool `json:"viewerSubscribed,omitempty"`
}

// IssueOrPullRequest (UNION): Used for return value of Repository.issueOrPullRequest.
// IssueOrPullRequest_Interface: Used for return value of Repository.issueOrPullRequest.
//
// Possible types:
//
//   - *Issue
//   - *PullRequest
type IssueOrPullRequest_Interface interface {
	isIssueOrPullRequest()
}

func (*Issue) isIssueOrPullRequest()       {}
func (*PullRequest) isIssueOrPullRequest() {}

type IssueOrPullRequest struct {
	Interface IssueOrPullRequest_Interface
}

func (x *IssueOrPullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *IssueOrPullRequest) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for IssueOrPullRequest", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// IssueOrder (INPUT_OBJECT): Ways in which lists of issues can be ordered upon return.
type IssueOrder struct {
	// Field: The field in which to order issues by.
	//
	// GraphQL type: IssueOrderField!
	Field IssueOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order issues by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// IssueOrderField (ENUM): Properties by which issue connections can be ordered.
type IssueOrderField string

// IssueOrderField_CREATED_AT: Order issues by creation time.
const IssueOrderField_CREATED_AT IssueOrderField = "CREATED_AT"

// IssueOrderField_UPDATED_AT: Order issues by update time.
const IssueOrderField_UPDATED_AT IssueOrderField = "UPDATED_AT"

// IssueOrderField_COMMENTS: Order issues by comment count.
const IssueOrderField_COMMENTS IssueOrderField = "COMMENTS"

// IssueState (ENUM): The possible states of an issue.
type IssueState string

// IssueState_OPEN: An issue that is still open.
const IssueState_OPEN IssueState = "OPEN"

// IssueState_CLOSED: An issue that has been closed.
const IssueState_CLOSED IssueState = "CLOSED"

// IssueStateReason (ENUM): The possible state reasons of an issue.
type IssueStateReason string

// IssueStateReason_REOPENED: An issue that has been reopened.
const IssueStateReason_REOPENED IssueStateReason = "REOPENED"

// IssueStateReason_NOT_PLANNED: An issue that has been closed as not planned.
const IssueStateReason_NOT_PLANNED IssueStateReason = "NOT_PLANNED"

// IssueStateReason_COMPLETED: An issue that has been closed as completed.
const IssueStateReason_COMPLETED IssueStateReason = "COMPLETED"

// IssueStateReason_DUPLICATE: An issue that has been closed as a duplicate. To retrieve this value, set `(enableDuplicate: true)` when querying the stateReason field.
const IssueStateReason_DUPLICATE IssueStateReason = "DUPLICATE"

// IssueTemplate (OBJECT): A repository issue template.
type IssueTemplate struct {
	// About: The template purpose.
	About string `json:"about,omitempty"`

	// Assignees: The suggested assignees.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Assignees *UserConnection `json:"assignees,omitempty"`

	// Body: The suggested issue body.
	Body string `json:"body,omitempty"`

	// Filename: The template filename.
	Filename string `json:"filename,omitempty"`

	// Labels: The suggested issue labels.
	//
	// Query arguments:
	//   - orderBy LabelOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Labels *LabelConnection `json:"labels,omitempty"`

	// Name: The template name.
	Name string `json:"name,omitempty"`

	// Title: The suggested issue title.
	Title string `json:"title,omitempty"`
}

func (x *IssueTemplate) GetAbout() string              { return x.About }
func (x *IssueTemplate) GetAssignees() *UserConnection { return x.Assignees }
func (x *IssueTemplate) GetBody() string               { return x.Body }
func (x *IssueTemplate) GetFilename() string           { return x.Filename }
func (x *IssueTemplate) GetLabels() *LabelConnection   { return x.Labels }
func (x *IssueTemplate) GetName() string               { return x.Name }
func (x *IssueTemplate) GetTitle() string              { return x.Title }

// IssueTimelineConnection (OBJECT): The connection type for IssueTimelineItem.
type IssueTimelineConnection struct {
	// Edges: A list of edges.
	Edges []*IssueTimelineItemEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []IssueTimelineItem `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *IssueTimelineConnection) GetEdges() []*IssueTimelineItemEdge { return x.Edges }
func (x *IssueTimelineConnection) GetNodes() []IssueTimelineItem      { return x.Nodes }
func (x *IssueTimelineConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *IssueTimelineConnection) GetTotalCount() int                 { return x.TotalCount }

// IssueTimelineItem (UNION): An item in an issue timeline.
// IssueTimelineItem_Interface: An item in an issue timeline.
//
// Possible types:
//
//   - *AssignedEvent
//   - *ClosedEvent
//   - *Commit
//   - *CrossReferencedEvent
//   - *DemilestonedEvent
//   - *IssueComment
//   - *LabeledEvent
//   - *LockedEvent
//   - *MilestonedEvent
//   - *ReferencedEvent
//   - *RenamedTitleEvent
//   - *ReopenedEvent
//   - *SubscribedEvent
//   - *TransferredEvent
//   - *UnassignedEvent
//   - *UnlabeledEvent
//   - *UnlockedEvent
//   - *UnsubscribedEvent
//   - *UserBlockedEvent
type IssueTimelineItem_Interface interface {
	isIssueTimelineItem()
}

func (*AssignedEvent) isIssueTimelineItem()        {}
func (*ClosedEvent) isIssueTimelineItem()          {}
func (*Commit) isIssueTimelineItem()               {}
func (*CrossReferencedEvent) isIssueTimelineItem() {}
func (*DemilestonedEvent) isIssueTimelineItem()    {}
func (*IssueComment) isIssueTimelineItem()         {}
func (*LabeledEvent) isIssueTimelineItem()         {}
func (*LockedEvent) isIssueTimelineItem()          {}
func (*MilestonedEvent) isIssueTimelineItem()      {}
func (*ReferencedEvent) isIssueTimelineItem()      {}
func (*RenamedTitleEvent) isIssueTimelineItem()    {}
func (*ReopenedEvent) isIssueTimelineItem()        {}
func (*SubscribedEvent) isIssueTimelineItem()      {}
func (*TransferredEvent) isIssueTimelineItem()     {}
func (*UnassignedEvent) isIssueTimelineItem()      {}
func (*UnlabeledEvent) isIssueTimelineItem()       {}
func (*UnlockedEvent) isIssueTimelineItem()        {}
func (*UnsubscribedEvent) isIssueTimelineItem()    {}
func (*UserBlockedEvent) isIssueTimelineItem()     {}

type IssueTimelineItem struct {
	Interface IssueTimelineItem_Interface
}

func (x *IssueTimelineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *IssueTimelineItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for IssueTimelineItem", info.Typename)
	case "AssignedEvent":
		x.Interface = new(AssignedEvent)
	case "ClosedEvent":
		x.Interface = new(ClosedEvent)
	case "Commit":
		x.Interface = new(Commit)
	case "CrossReferencedEvent":
		x.Interface = new(CrossReferencedEvent)
	case "DemilestonedEvent":
		x.Interface = new(DemilestonedEvent)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "LabeledEvent":
		x.Interface = new(LabeledEvent)
	case "LockedEvent":
		x.Interface = new(LockedEvent)
	case "MilestonedEvent":
		x.Interface = new(MilestonedEvent)
	case "ReferencedEvent":
		x.Interface = new(ReferencedEvent)
	case "RenamedTitleEvent":
		x.Interface = new(RenamedTitleEvent)
	case "ReopenedEvent":
		x.Interface = new(ReopenedEvent)
	case "SubscribedEvent":
		x.Interface = new(SubscribedEvent)
	case "TransferredEvent":
		x.Interface = new(TransferredEvent)
	case "UnassignedEvent":
		x.Interface = new(UnassignedEvent)
	case "UnlabeledEvent":
		x.Interface = new(UnlabeledEvent)
	case "UnlockedEvent":
		x.Interface = new(UnlockedEvent)
	case "UnsubscribedEvent":
		x.Interface = new(UnsubscribedEvent)
	case "UserBlockedEvent":
		x.Interface = new(UserBlockedEvent)
	}
	return json.Unmarshal(js, x.Interface)
}

// IssueTimelineItemEdge (OBJECT): An edge in a connection.
type IssueTimelineItemEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node IssueTimelineItem `json:"node,omitempty"`
}

func (x *IssueTimelineItemEdge) GetCursor() string          { return x.Cursor }
func (x *IssueTimelineItemEdge) GetNode() IssueTimelineItem { return x.Node }

// IssueTimelineItems (UNION): An item in an issue timeline.
// IssueTimelineItems_Interface: An item in an issue timeline.
//
// Possible types:
//
//   - *AddedToProjectEvent
//   - *AssignedEvent
//   - *ClosedEvent
//   - *CommentDeletedEvent
//   - *ConnectedEvent
//   - *ConvertedNoteToIssueEvent
//   - *ConvertedToDiscussionEvent
//   - *CrossReferencedEvent
//   - *DemilestonedEvent
//   - *DisconnectedEvent
//   - *IssueComment
//   - *LabeledEvent
//   - *LockedEvent
//   - *MarkedAsDuplicateEvent
//   - *MentionedEvent
//   - *MilestonedEvent
//   - *MovedColumnsInProjectEvent
//   - *ParentIssueAddedEvent
//   - *ParentIssueRemovedEvent
//   - *PinnedEvent
//   - *ReferencedEvent
//   - *RemovedFromProjectEvent
//   - *RenamedTitleEvent
//   - *ReopenedEvent
//   - *SubIssueAddedEvent
//   - *SubIssueRemovedEvent
//   - *SubscribedEvent
//   - *TransferredEvent
//   - *UnassignedEvent
//   - *UnlabeledEvent
//   - *UnlockedEvent
//   - *UnmarkedAsDuplicateEvent
//   - *UnpinnedEvent
//   - *UnsubscribedEvent
//   - *UserBlockedEvent
type IssueTimelineItems_Interface interface {
	isIssueTimelineItems()
}

func (*AddedToProjectEvent) isIssueTimelineItems()        {}
func (*AssignedEvent) isIssueTimelineItems()              {}
func (*ClosedEvent) isIssueTimelineItems()                {}
func (*CommentDeletedEvent) isIssueTimelineItems()        {}
func (*ConnectedEvent) isIssueTimelineItems()             {}
func (*ConvertedNoteToIssueEvent) isIssueTimelineItems()  {}
func (*ConvertedToDiscussionEvent) isIssueTimelineItems() {}
func (*CrossReferencedEvent) isIssueTimelineItems()       {}
func (*DemilestonedEvent) isIssueTimelineItems()          {}
func (*DisconnectedEvent) isIssueTimelineItems()          {}
func (*IssueComment) isIssueTimelineItems()               {}
func (*LabeledEvent) isIssueTimelineItems()               {}
func (*LockedEvent) isIssueTimelineItems()                {}
func (*MarkedAsDuplicateEvent) isIssueTimelineItems()     {}
func (*MentionedEvent) isIssueTimelineItems()             {}
func (*MilestonedEvent) isIssueTimelineItems()            {}
func (*MovedColumnsInProjectEvent) isIssueTimelineItems() {}
func (*ParentIssueAddedEvent) isIssueTimelineItems()      {}
func (*ParentIssueRemovedEvent) isIssueTimelineItems()    {}
func (*PinnedEvent) isIssueTimelineItems()                {}
func (*ReferencedEvent) isIssueTimelineItems()            {}
func (*RemovedFromProjectEvent) isIssueTimelineItems()    {}
func (*RenamedTitleEvent) isIssueTimelineItems()          {}
func (*ReopenedEvent) isIssueTimelineItems()              {}
func (*SubIssueAddedEvent) isIssueTimelineItems()         {}
func (*SubIssueRemovedEvent) isIssueTimelineItems()       {}
func (*SubscribedEvent) isIssueTimelineItems()            {}
func (*TransferredEvent) isIssueTimelineItems()           {}
func (*UnassignedEvent) isIssueTimelineItems()            {}
func (*UnlabeledEvent) isIssueTimelineItems()             {}
func (*UnlockedEvent) isIssueTimelineItems()              {}
func (*UnmarkedAsDuplicateEvent) isIssueTimelineItems()   {}
func (*UnpinnedEvent) isIssueTimelineItems()              {}
func (*UnsubscribedEvent) isIssueTimelineItems()          {}
func (*UserBlockedEvent) isIssueTimelineItems()           {}

type IssueTimelineItems struct {
	Interface IssueTimelineItems_Interface
}

func (x *IssueTimelineItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *IssueTimelineItems) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for IssueTimelineItems", info.Typename)
	case "AddedToProjectEvent":
		x.Interface = new(AddedToProjectEvent)
	case "AssignedEvent":
		x.Interface = new(AssignedEvent)
	case "ClosedEvent":
		x.Interface = new(ClosedEvent)
	case "CommentDeletedEvent":
		x.Interface = new(CommentDeletedEvent)
	case "ConnectedEvent":
		x.Interface = new(ConnectedEvent)
	case "ConvertedNoteToIssueEvent":
		x.Interface = new(ConvertedNoteToIssueEvent)
	case "ConvertedToDiscussionEvent":
		x.Interface = new(ConvertedToDiscussionEvent)
	case "CrossReferencedEvent":
		x.Interface = new(CrossReferencedEvent)
	case "DemilestonedEvent":
		x.Interface = new(DemilestonedEvent)
	case "DisconnectedEvent":
		x.Interface = new(DisconnectedEvent)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "LabeledEvent":
		x.Interface = new(LabeledEvent)
	case "LockedEvent":
		x.Interface = new(LockedEvent)
	case "MarkedAsDuplicateEvent":
		x.Interface = new(MarkedAsDuplicateEvent)
	case "MentionedEvent":
		x.Interface = new(MentionedEvent)
	case "MilestonedEvent":
		x.Interface = new(MilestonedEvent)
	case "MovedColumnsInProjectEvent":
		x.Interface = new(MovedColumnsInProjectEvent)
	case "ParentIssueAddedEvent":
		x.Interface = new(ParentIssueAddedEvent)
	case "ParentIssueRemovedEvent":
		x.Interface = new(ParentIssueRemovedEvent)
	case "PinnedEvent":
		x.Interface = new(PinnedEvent)
	case "ReferencedEvent":
		x.Interface = new(ReferencedEvent)
	case "RemovedFromProjectEvent":
		x.Interface = new(RemovedFromProjectEvent)
	case "RenamedTitleEvent":
		x.Interface = new(RenamedTitleEvent)
	case "ReopenedEvent":
		x.Interface = new(ReopenedEvent)
	case "SubIssueAddedEvent":
		x.Interface = new(SubIssueAddedEvent)
	case "SubIssueRemovedEvent":
		x.Interface = new(SubIssueRemovedEvent)
	case "SubscribedEvent":
		x.Interface = new(SubscribedEvent)
	case "TransferredEvent":
		x.Interface = new(TransferredEvent)
	case "UnassignedEvent":
		x.Interface = new(UnassignedEvent)
	case "UnlabeledEvent":
		x.Interface = new(UnlabeledEvent)
	case "UnlockedEvent":
		x.Interface = new(UnlockedEvent)
	case "UnmarkedAsDuplicateEvent":
		x.Interface = new(UnmarkedAsDuplicateEvent)
	case "UnpinnedEvent":
		x.Interface = new(UnpinnedEvent)
	case "UnsubscribedEvent":
		x.Interface = new(UnsubscribedEvent)
	case "UserBlockedEvent":
		x.Interface = new(UserBlockedEvent)
	}
	return json.Unmarshal(js, x.Interface)
}

// IssueTimelineItemsConnection (OBJECT): The connection type for IssueTimelineItems.
type IssueTimelineItemsConnection struct {
	// Edges: A list of edges.
	Edges []*IssueTimelineItemsEdge `json:"edges,omitempty"`

	// FilteredCount: Identifies the count of items after applying `before` and `after` filters.
	FilteredCount int `json:"filteredCount,omitempty"`

	// Nodes: A list of nodes.
	Nodes []IssueTimelineItems `json:"nodes,omitempty"`

	// PageCount: Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
	PageCount int `json:"pageCount,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// UpdatedAt: Identifies the date and time when the timeline was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *IssueTimelineItemsConnection) GetEdges() []*IssueTimelineItemsEdge { return x.Edges }
func (x *IssueTimelineItemsConnection) GetFilteredCount() int               { return x.FilteredCount }
func (x *IssueTimelineItemsConnection) GetNodes() []IssueTimelineItems      { return x.Nodes }
func (x *IssueTimelineItemsConnection) GetPageCount() int                   { return x.PageCount }
func (x *IssueTimelineItemsConnection) GetPageInfo() *PageInfo              { return x.PageInfo }
func (x *IssueTimelineItemsConnection) GetTotalCount() int                  { return x.TotalCount }
func (x *IssueTimelineItemsConnection) GetUpdatedAt() DateTime              { return x.UpdatedAt }

// IssueTimelineItemsEdge (OBJECT): An edge in a connection.
type IssueTimelineItemsEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node IssueTimelineItems `json:"node,omitempty"`
}

func (x *IssueTimelineItemsEdge) GetCursor() string           { return x.Cursor }
func (x *IssueTimelineItemsEdge) GetNode() IssueTimelineItems { return x.Node }

// IssueTimelineItemsItemType (ENUM): The possible item types found in a timeline.
type IssueTimelineItemsItemType string

// IssueTimelineItemsItemType_ISSUE_COMMENT: Represents a comment on an Issue.
const IssueTimelineItemsItemType_ISSUE_COMMENT IssueTimelineItemsItemType = "ISSUE_COMMENT"

// IssueTimelineItemsItemType_CROSS_REFERENCED_EVENT: Represents a mention made by one issue or pull request to another.
const IssueTimelineItemsItemType_CROSS_REFERENCED_EVENT IssueTimelineItemsItemType = "CROSS_REFERENCED_EVENT"

// IssueTimelineItemsItemType_ADDED_TO_PROJECT_EVENT: Represents a 'added_to_project' event on a given issue or pull request.
const IssueTimelineItemsItemType_ADDED_TO_PROJECT_EVENT IssueTimelineItemsItemType = "ADDED_TO_PROJECT_EVENT"

// IssueTimelineItemsItemType_ASSIGNED_EVENT: Represents an 'assigned' event on any assignable object.
const IssueTimelineItemsItemType_ASSIGNED_EVENT IssueTimelineItemsItemType = "ASSIGNED_EVENT"

// IssueTimelineItemsItemType_CLOSED_EVENT: Represents a 'closed' event on any `Closable`.
const IssueTimelineItemsItemType_CLOSED_EVENT IssueTimelineItemsItemType = "CLOSED_EVENT"

// IssueTimelineItemsItemType_COMMENT_DELETED_EVENT: Represents a 'comment_deleted' event on a given issue or pull request.
const IssueTimelineItemsItemType_COMMENT_DELETED_EVENT IssueTimelineItemsItemType = "COMMENT_DELETED_EVENT"

// IssueTimelineItemsItemType_CONNECTED_EVENT: Represents a 'connected' event on a given issue or pull request.
const IssueTimelineItemsItemType_CONNECTED_EVENT IssueTimelineItemsItemType = "CONNECTED_EVENT"

// IssueTimelineItemsItemType_CONVERTED_NOTE_TO_ISSUE_EVENT: Represents a 'converted_note_to_issue' event on a given issue or pull request.
const IssueTimelineItemsItemType_CONVERTED_NOTE_TO_ISSUE_EVENT IssueTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"

// IssueTimelineItemsItemType_CONVERTED_TO_DISCUSSION_EVENT: Represents a 'converted_to_discussion' event on a given issue.
const IssueTimelineItemsItemType_CONVERTED_TO_DISCUSSION_EVENT IssueTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"

// IssueTimelineItemsItemType_DEMILESTONED_EVENT: Represents a 'demilestoned' event on a given issue or pull request.
const IssueTimelineItemsItemType_DEMILESTONED_EVENT IssueTimelineItemsItemType = "DEMILESTONED_EVENT"

// IssueTimelineItemsItemType_DISCONNECTED_EVENT: Represents a 'disconnected' event on a given issue or pull request.
const IssueTimelineItemsItemType_DISCONNECTED_EVENT IssueTimelineItemsItemType = "DISCONNECTED_EVENT"

// IssueTimelineItemsItemType_LABELED_EVENT: Represents a 'labeled' event on a given issue or pull request.
const IssueTimelineItemsItemType_LABELED_EVENT IssueTimelineItemsItemType = "LABELED_EVENT"

// IssueTimelineItemsItemType_LOCKED_EVENT: Represents a 'locked' event on a given issue or pull request.
const IssueTimelineItemsItemType_LOCKED_EVENT IssueTimelineItemsItemType = "LOCKED_EVENT"

// IssueTimelineItemsItemType_MARKED_AS_DUPLICATE_EVENT: Represents a 'marked_as_duplicate' event on a given issue or pull request.
const IssueTimelineItemsItemType_MARKED_AS_DUPLICATE_EVENT IssueTimelineItemsItemType = "MARKED_AS_DUPLICATE_EVENT"

// IssueTimelineItemsItemType_MENTIONED_EVENT: Represents a 'mentioned' event on a given issue or pull request.
const IssueTimelineItemsItemType_MENTIONED_EVENT IssueTimelineItemsItemType = "MENTIONED_EVENT"

// IssueTimelineItemsItemType_MILESTONED_EVENT: Represents a 'milestoned' event on a given issue or pull request.
const IssueTimelineItemsItemType_MILESTONED_EVENT IssueTimelineItemsItemType = "MILESTONED_EVENT"

// IssueTimelineItemsItemType_MOVED_COLUMNS_IN_PROJECT_EVENT: Represents a 'moved_columns_in_project' event on a given issue or pull request.
const IssueTimelineItemsItemType_MOVED_COLUMNS_IN_PROJECT_EVENT IssueTimelineItemsItemType = "MOVED_COLUMNS_IN_PROJECT_EVENT"

// IssueTimelineItemsItemType_PINNED_EVENT: Represents a 'pinned' event on a given issue or pull request.
const IssueTimelineItemsItemType_PINNED_EVENT IssueTimelineItemsItemType = "PINNED_EVENT"

// IssueTimelineItemsItemType_REFERENCED_EVENT: Represents a 'referenced' event on a given `ReferencedSubject`.
const IssueTimelineItemsItemType_REFERENCED_EVENT IssueTimelineItemsItemType = "REFERENCED_EVENT"

// IssueTimelineItemsItemType_REMOVED_FROM_PROJECT_EVENT: Represents a 'removed_from_project' event on a given issue or pull request.
const IssueTimelineItemsItemType_REMOVED_FROM_PROJECT_EVENT IssueTimelineItemsItemType = "REMOVED_FROM_PROJECT_EVENT"

// IssueTimelineItemsItemType_RENAMED_TITLE_EVENT: Represents a 'renamed' event on a given issue or pull request.
const IssueTimelineItemsItemType_RENAMED_TITLE_EVENT IssueTimelineItemsItemType = "RENAMED_TITLE_EVENT"

// IssueTimelineItemsItemType_REOPENED_EVENT: Represents a 'reopened' event on any `Closable`.
const IssueTimelineItemsItemType_REOPENED_EVENT IssueTimelineItemsItemType = "REOPENED_EVENT"

// IssueTimelineItemsItemType_SUBSCRIBED_EVENT: Represents a 'subscribed' event on a given `Subscribable`.
const IssueTimelineItemsItemType_SUBSCRIBED_EVENT IssueTimelineItemsItemType = "SUBSCRIBED_EVENT"

// IssueTimelineItemsItemType_TRANSFERRED_EVENT: Represents a 'transferred' event on a given issue or pull request.
const IssueTimelineItemsItemType_TRANSFERRED_EVENT IssueTimelineItemsItemType = "TRANSFERRED_EVENT"

// IssueTimelineItemsItemType_UNASSIGNED_EVENT: Represents an 'unassigned' event on any assignable object.
const IssueTimelineItemsItemType_UNASSIGNED_EVENT IssueTimelineItemsItemType = "UNASSIGNED_EVENT"

// IssueTimelineItemsItemType_UNLABELED_EVENT: Represents an 'unlabeled' event on a given issue or pull request.
const IssueTimelineItemsItemType_UNLABELED_EVENT IssueTimelineItemsItemType = "UNLABELED_EVENT"

// IssueTimelineItemsItemType_UNLOCKED_EVENT: Represents an 'unlocked' event on a given issue or pull request.
const IssueTimelineItemsItemType_UNLOCKED_EVENT IssueTimelineItemsItemType = "UNLOCKED_EVENT"

// IssueTimelineItemsItemType_USER_BLOCKED_EVENT: Represents a 'user_blocked' event on a given user.
const IssueTimelineItemsItemType_USER_BLOCKED_EVENT IssueTimelineItemsItemType = "USER_BLOCKED_EVENT"

// IssueTimelineItemsItemType_UNMARKED_AS_DUPLICATE_EVENT: Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
const IssueTimelineItemsItemType_UNMARKED_AS_DUPLICATE_EVENT IssueTimelineItemsItemType = "UNMARKED_AS_DUPLICATE_EVENT"

// IssueTimelineItemsItemType_UNPINNED_EVENT: Represents an 'unpinned' event on a given issue or pull request.
const IssueTimelineItemsItemType_UNPINNED_EVENT IssueTimelineItemsItemType = "UNPINNED_EVENT"

// IssueTimelineItemsItemType_UNSUBSCRIBED_EVENT: Represents an 'unsubscribed' event on a given `Subscribable`.
const IssueTimelineItemsItemType_UNSUBSCRIBED_EVENT IssueTimelineItemsItemType = "UNSUBSCRIBED_EVENT"

// IssueTimelineItemsItemType_SUB_ISSUE_ADDED_EVENT: Represents a 'sub_issue_added' event on a given issue.
const IssueTimelineItemsItemType_SUB_ISSUE_ADDED_EVENT IssueTimelineItemsItemType = "SUB_ISSUE_ADDED_EVENT"

// IssueTimelineItemsItemType_SUB_ISSUE_REMOVED_EVENT: Represents a 'sub_issue_removed' event on a given issue.
const IssueTimelineItemsItemType_SUB_ISSUE_REMOVED_EVENT IssueTimelineItemsItemType = "SUB_ISSUE_REMOVED_EVENT"

// IssueTimelineItemsItemType_PARENT_ISSUE_ADDED_EVENT: Represents a 'parent_issue_added' event on a given issue.
const IssueTimelineItemsItemType_PARENT_ISSUE_ADDED_EVENT IssueTimelineItemsItemType = "PARENT_ISSUE_ADDED_EVENT"

// IssueTimelineItemsItemType_PARENT_ISSUE_REMOVED_EVENT: Represents a 'parent_issue_removed' event on a given issue.
const IssueTimelineItemsItemType_PARENT_ISSUE_REMOVED_EVENT IssueTimelineItemsItemType = "PARENT_ISSUE_REMOVED_EVENT"

// JoinedGitHubContribution (OBJECT): Represents a user signing up for a GitHub account.
type JoinedGitHubContribution struct {
	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *JoinedGitHubContribution) GetIsRestricted() bool   { return x.IsRestricted }
func (x *JoinedGitHubContribution) GetOccurredAt() DateTime { return x.OccurredAt }
func (x *JoinedGitHubContribution) GetResourcePath() URI    { return x.ResourcePath }
func (x *JoinedGitHubContribution) GetUrl() URI             { return x.Url }
func (x *JoinedGitHubContribution) GetUser() *User          { return x.User }

// Label (OBJECT): A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type Label struct {
	// Color: Identifies the label color.
	Color string `json:"color,omitempty"`

	// CreatedAt: Identifies the date and time when the label was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Description: A brief description of this label.
	Description string `json:"description,omitempty"`

	// Id: The Node ID of the Label object.
	Id ID `json:"id,omitempty"`

	// IsDefault: Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault,omitempty"`

	// Issues: A list of issues associated with this label.
	//
	// Query arguments:
	//   - orderBy IssueOrder
	//   - labels [String!]
	//   - states [IssueState!]
	//   - filterBy IssueFilters
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Issues *IssueConnection `json:"issues,omitempty"`

	// Name: Identifies the label name.
	Name string `json:"name,omitempty"`

	// PullRequests: A list of pull requests associated with this label.
	//
	// Query arguments:
	//   - states [PullRequestState!]
	//   - labels [String!]
	//   - headRefName String
	//   - baseRefName String
	//   - orderBy IssueOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`

	// Repository: The repository associated with this label.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this label.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the label was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this label.
	Url URI `json:"url,omitempty"`
}

func (x *Label) GetColor() string                        { return x.Color }
func (x *Label) GetCreatedAt() DateTime                  { return x.CreatedAt }
func (x *Label) GetDescription() string                  { return x.Description }
func (x *Label) GetId() ID                               { return x.Id }
func (x *Label) GetIsDefault() bool                      { return x.IsDefault }
func (x *Label) GetIssues() *IssueConnection             { return x.Issues }
func (x *Label) GetName() string                         { return x.Name }
func (x *Label) GetPullRequests() *PullRequestConnection { return x.PullRequests }
func (x *Label) GetRepository() *Repository              { return x.Repository }
func (x *Label) GetResourcePath() URI                    { return x.ResourcePath }
func (x *Label) GetUpdatedAt() DateTime                  { return x.UpdatedAt }
func (x *Label) GetUrl() URI                             { return x.Url }

// LabelConnection (OBJECT): The connection type for Label.
type LabelConnection struct {
	// Edges: A list of edges.
	Edges []*LabelEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Label `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *LabelConnection) GetEdges() []*LabelEdge { return x.Edges }
func (x *LabelConnection) GetNodes() []*Label     { return x.Nodes }
func (x *LabelConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *LabelConnection) GetTotalCount() int     { return x.TotalCount }

// LabelEdge (OBJECT): An edge in a connection.
type LabelEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Label `json:"node,omitempty"`
}

func (x *LabelEdge) GetCursor() string { return x.Cursor }
func (x *LabelEdge) GetNode() *Label   { return x.Node }

// LabelOrder (INPUT_OBJECT): Ways in which lists of labels can be ordered upon return.
type LabelOrder struct {
	// Field: The field in which to order labels by.
	//
	// GraphQL type: LabelOrderField!
	Field LabelOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order labels by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// LabelOrderField (ENUM): Properties by which label connections can be ordered.
type LabelOrderField string

// LabelOrderField_NAME: Order labels by name .
const LabelOrderField_NAME LabelOrderField = "NAME"

// LabelOrderField_CREATED_AT: Order labels by creation time.
const LabelOrderField_CREATED_AT LabelOrderField = "CREATED_AT"

// Labelable (INTERFACE): An object that can have labels assigned to it.
// Labelable_Interface: An object that can have labels assigned to it.
//
// Possible types:
//
//   - *Discussion
//   - *Issue
//   - *PullRequest
type Labelable_Interface interface {
	isLabelable()
	GetLabels() *LabelConnection
	GetViewerCanLabel() bool
}

func (*Discussion) isLabelable()  {}
func (*Issue) isLabelable()       {}
func (*PullRequest) isLabelable() {}

type Labelable struct {
	Interface Labelable_Interface
}

func (x *Labelable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Labelable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Labelable", info.Typename)
	case "Discussion":
		x.Interface = new(Discussion)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// LabeledEvent (OBJECT): Represents a 'labeled' event on a given issue or pull request.
type LabeledEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the LabeledEvent object.
	Id ID `json:"id,omitempty"`

	// Label: Identifies the label associated with the 'labeled' event.
	Label *Label `json:"label,omitempty"`

	// Labelable: Identifies the `Labelable` associated with the event.
	Labelable Labelable `json:"labelable,omitempty"`
}

func (x *LabeledEvent) GetActor() Actor         { return x.Actor }
func (x *LabeledEvent) GetCreatedAt() DateTime  { return x.CreatedAt }
func (x *LabeledEvent) GetId() ID               { return x.Id }
func (x *LabeledEvent) GetLabel() *Label        { return x.Label }
func (x *LabeledEvent) GetLabelable() Labelable { return x.Labelable }

// Language (OBJECT): Represents a given language found in repositories.
type Language struct {
	// Color: The color defined for the current language.
	Color string `json:"color,omitempty"`

	// Id: The Node ID of the Language object.
	Id ID `json:"id,omitempty"`

	// Name: The name of the current language.
	Name string `json:"name,omitempty"`
}

func (x *Language) GetColor() string { return x.Color }
func (x *Language) GetId() ID        { return x.Id }
func (x *Language) GetName() string  { return x.Name }

// LanguageConnection (OBJECT): A list of languages associated with the parent.
type LanguageConnection struct {
	// Edges: A list of edges.
	Edges []*LanguageEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Language `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// TotalSize: The total size in bytes of files written in that language.
	TotalSize int `json:"totalSize,omitempty"`
}

func (x *LanguageConnection) GetEdges() []*LanguageEdge { return x.Edges }
func (x *LanguageConnection) GetNodes() []*Language     { return x.Nodes }
func (x *LanguageConnection) GetPageInfo() *PageInfo    { return x.PageInfo }
func (x *LanguageConnection) GetTotalCount() int        { return x.TotalCount }
func (x *LanguageConnection) GetTotalSize() int         { return x.TotalSize }

// LanguageEdge (OBJECT): Represents the language of a repository.
type LanguageEdge struct {
	// Cursor: undocumented.
	Cursor string `json:"cursor,omitempty"`

	// Node: undocumented.
	Node *Language `json:"node,omitempty"`

	// Size: The number of bytes of code written in the language.
	Size int `json:"size,omitempty"`
}

func (x *LanguageEdge) GetCursor() string  { return x.Cursor }
func (x *LanguageEdge) GetNode() *Language { return x.Node }
func (x *LanguageEdge) GetSize() int       { return x.Size }

// LanguageOrder (INPUT_OBJECT): Ordering options for language connections.
type LanguageOrder struct {
	// Field: The field to order languages by.
	//
	// GraphQL type: LanguageOrderField!
	Field LanguageOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// LanguageOrderField (ENUM): Properties by which language connections can be ordered.
type LanguageOrderField string

// LanguageOrderField_SIZE: Order languages by the size of all files containing the language.
const LanguageOrderField_SIZE LanguageOrderField = "SIZE"

// License (OBJECT): A repository's open source license.
type License struct {
	// Body: The full text of the license.
	Body string `json:"body,omitempty"`

	// Conditions: The conditions set by the license.
	Conditions []*LicenseRule `json:"conditions,omitempty"`

	// Description: A human-readable description of the license.
	Description string `json:"description,omitempty"`

	// Featured: Whether the license should be featured.
	Featured bool `json:"featured,omitempty"`

	// Hidden: Whether the license should be displayed in license pickers.
	Hidden bool `json:"hidden,omitempty"`

	// Id: The Node ID of the License object.
	Id ID `json:"id,omitempty"`

	// Implementation: Instructions on how to implement the license.
	Implementation string `json:"implementation,omitempty"`

	// Key: The lowercased SPDX ID of the license.
	Key string `json:"key,omitempty"`

	// Limitations: The limitations set by the license.
	Limitations []*LicenseRule `json:"limitations,omitempty"`

	// Name: The license full name specified by <https://spdx.org/licenses>.
	Name string `json:"name,omitempty"`

	// Nickname: Customary short name if applicable (e.g, GPLv3).
	Nickname string `json:"nickname,omitempty"`

	// Permissions: The permissions set by the license.
	Permissions []*LicenseRule `json:"permissions,omitempty"`

	// PseudoLicense: Whether the license is a pseudo-license placeholder (e.g., other, no-license).
	PseudoLicense bool `json:"pseudoLicense,omitempty"`

	// SpdxId: Short identifier specified by <https://spdx.org/licenses>.
	SpdxId string `json:"spdxId,omitempty"`

	// Url: URL to the license on <https://choosealicense.com>.
	Url URI `json:"url,omitempty"`
}

func (x *License) GetBody() string                { return x.Body }
func (x *License) GetConditions() []*LicenseRule  { return x.Conditions }
func (x *License) GetDescription() string         { return x.Description }
func (x *License) GetFeatured() bool              { return x.Featured }
func (x *License) GetHidden() bool                { return x.Hidden }
func (x *License) GetId() ID                      { return x.Id }
func (x *License) GetImplementation() string      { return x.Implementation }
func (x *License) GetKey() string                 { return x.Key }
func (x *License) GetLimitations() []*LicenseRule { return x.Limitations }
func (x *License) GetName() string                { return x.Name }
func (x *License) GetNickname() string            { return x.Nickname }
func (x *License) GetPermissions() []*LicenseRule { return x.Permissions }
func (x *License) GetPseudoLicense() bool         { return x.PseudoLicense }
func (x *License) GetSpdxId() string              { return x.SpdxId }
func (x *License) GetUrl() URI                    { return x.Url }

// LicenseRule (OBJECT): Describes a License's conditions, permissions, and limitations.
type LicenseRule struct {
	// Description: A description of the rule.
	Description string `json:"description,omitempty"`

	// Key: The machine-readable rule key.
	Key string `json:"key,omitempty"`

	// Label: The human-readable rule label.
	Label string `json:"label,omitempty"`
}

func (x *LicenseRule) GetDescription() string { return x.Description }
func (x *LicenseRule) GetKey() string         { return x.Key }
func (x *LicenseRule) GetLabel() string       { return x.Label }

// LinkProjectV2ToRepositoryInput (INPUT_OBJECT): Autogenerated input type of LinkProjectV2ToRepository.
type LinkProjectV2ToRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the project to link to the repository.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// RepositoryId: The ID of the repository to link to the project.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// LinkProjectV2ToRepositoryPayload (OBJECT): Autogenerated return type of LinkProjectV2ToRepository.
type LinkProjectV2ToRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository the project is linked to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *LinkProjectV2ToRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *LinkProjectV2ToRepositoryPayload) GetRepository() *Repository  { return x.Repository }

// LinkProjectV2ToTeamInput (INPUT_OBJECT): Autogenerated input type of LinkProjectV2ToTeam.
type LinkProjectV2ToTeamInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the project to link to the team.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// TeamId: The ID of the team to link to the project.
	//
	// GraphQL type: ID!
	TeamId ID `json:"teamId,omitempty"`
}

// LinkProjectV2ToTeamPayload (OBJECT): Autogenerated return type of LinkProjectV2ToTeam.
type LinkProjectV2ToTeamPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Team: The team the project is linked to.
	Team *Team `json:"team,omitempty"`
}

func (x *LinkProjectV2ToTeamPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *LinkProjectV2ToTeamPayload) GetTeam() *Team              { return x.Team }

// LinkRepositoryToProjectInput (INPUT_OBJECT): Autogenerated input type of LinkRepositoryToProject.
type LinkRepositoryToProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to link to a Repository.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// RepositoryId: The ID of the Repository to link to a Project.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// LinkRepositoryToProjectPayload (OBJECT): Autogenerated return type of LinkRepositoryToProject.
type LinkRepositoryToProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Project: The linked Project.
	Project *Project `json:"project,omitempty"`

	// Repository: The linked Repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *LinkRepositoryToProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *LinkRepositoryToProjectPayload) GetProject() *Project        { return x.Project }
func (x *LinkRepositoryToProjectPayload) GetRepository() *Repository  { return x.Repository }

// LinkedBranch (OBJECT): A branch linked to an issue.
type LinkedBranch struct {
	// Id: The Node ID of the LinkedBranch object.
	Id ID `json:"id,omitempty"`

	// Ref: The branch's ref.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *LinkedBranch) GetId() ID    { return x.Id }
func (x *LinkedBranch) GetRef() *Ref { return x.Ref }

// LinkedBranchConnection (OBJECT): A list of branches linked to an issue.
type LinkedBranchConnection struct {
	// Edges: A list of edges.
	Edges []*LinkedBranchEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*LinkedBranch `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *LinkedBranchConnection) GetEdges() []*LinkedBranchEdge { return x.Edges }
func (x *LinkedBranchConnection) GetNodes() []*LinkedBranch     { return x.Nodes }
func (x *LinkedBranchConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *LinkedBranchConnection) GetTotalCount() int            { return x.TotalCount }

// LinkedBranchEdge (OBJECT): An edge in a connection.
type LinkedBranchEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *LinkedBranch `json:"node,omitempty"`
}

func (x *LinkedBranchEdge) GetCursor() string      { return x.Cursor }
func (x *LinkedBranchEdge) GetNode() *LinkedBranch { return x.Node }

// LockLockableInput (INPUT_OBJECT): Autogenerated input type of LockLockable.
type LockLockableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LockableId: ID of the item to be locked.
	//
	// GraphQL type: ID!
	LockableId ID `json:"lockableId,omitempty"`

	// LockReason: A reason for why the item will be locked.
	//
	// GraphQL type: LockReason
	LockReason LockReason `json:"lockReason,omitempty"`
}

// LockLockablePayload (OBJECT): Autogenerated return type of LockLockable.
type LockLockablePayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LockedRecord: The item that was locked.
	LockedRecord Lockable `json:"lockedRecord,omitempty"`
}

func (x *LockLockablePayload) GetActor() Actor             { return x.Actor }
func (x *LockLockablePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *LockLockablePayload) GetLockedRecord() Lockable   { return x.LockedRecord }

// LockReason (ENUM): The possible reasons that an issue or pull request was locked.
type LockReason string

// LockReason_OFF_TOPIC: The issue or pull request was locked because the conversation was off-topic.
const LockReason_OFF_TOPIC LockReason = "OFF_TOPIC"

// LockReason_TOO_HEATED: The issue or pull request was locked because the conversation was too heated.
const LockReason_TOO_HEATED LockReason = "TOO_HEATED"

// LockReason_RESOLVED: The issue or pull request was locked because the conversation was resolved.
const LockReason_RESOLVED LockReason = "RESOLVED"

// LockReason_SPAM: The issue or pull request was locked because the conversation was spam.
const LockReason_SPAM LockReason = "SPAM"

// Lockable (INTERFACE): An object that can be locked.
// Lockable_Interface: An object that can be locked.
//
// Possible types:
//
//   - *Discussion
//   - *Issue
//   - *PullRequest
type Lockable_Interface interface {
	isLockable()
	GetActiveLockReason() LockReason
	GetLocked() bool
}

func (*Discussion) isLockable()  {}
func (*Issue) isLockable()       {}
func (*PullRequest) isLockable() {}

type Lockable struct {
	Interface Lockable_Interface
}

func (x *Lockable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Lockable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Lockable", info.Typename)
	case "Discussion":
		x.Interface = new(Discussion)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// LockedEvent (OBJECT): Represents a 'locked' event on a given issue or pull request.
type LockedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the LockedEvent object.
	Id ID `json:"id,omitempty"`

	// LockReason: Reason that the conversation was locked (optional).
	LockReason LockReason `json:"lockReason,omitempty"`

	// Lockable: Object that was locked.
	Lockable Lockable `json:"lockable,omitempty"`
}

func (x *LockedEvent) GetActor() Actor           { return x.Actor }
func (x *LockedEvent) GetCreatedAt() DateTime    { return x.CreatedAt }
func (x *LockedEvent) GetId() ID                 { return x.Id }
func (x *LockedEvent) GetLockReason() LockReason { return x.LockReason }
func (x *LockedEvent) GetLockable() Lockable     { return x.Lockable }

// Mannequin (OBJECT): A placeholder user for attribution of imported data on GitHub.
type Mannequin struct {
	// AvatarUrl: A URL pointing to the GitHub App's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// Claimant: The user that has claimed the data attributed to this mannequin.
	Claimant *User `json:"claimant,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Email: The mannequin's email on the source instance.
	Email string `json:"email,omitempty"`

	// Id: The Node ID of the Mannequin object.
	Id ID `json:"id,omitempty"`

	// Login: The username of the actor.
	Login string `json:"login,omitempty"`

	// ResourcePath: The HTML path to this resource.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The URL to this resource.
	Url URI `json:"url,omitempty"`
}

func (x *Mannequin) GetAvatarUrl() URI      { return x.AvatarUrl }
func (x *Mannequin) GetClaimant() *User     { return x.Claimant }
func (x *Mannequin) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *Mannequin) GetDatabaseId() int     { return x.DatabaseId }
func (x *Mannequin) GetEmail() string       { return x.Email }
func (x *Mannequin) GetId() ID              { return x.Id }
func (x *Mannequin) GetLogin() string       { return x.Login }
func (x *Mannequin) GetResourcePath() URI   { return x.ResourcePath }
func (x *Mannequin) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *Mannequin) GetUrl() URI            { return x.Url }

// MannequinConnection (OBJECT): A list of mannequins.
type MannequinConnection struct {
	// Edges: A list of edges.
	Edges []*MannequinEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Mannequin `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *MannequinConnection) GetEdges() []*MannequinEdge { return x.Edges }
func (x *MannequinConnection) GetNodes() []*Mannequin     { return x.Nodes }
func (x *MannequinConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *MannequinConnection) GetTotalCount() int         { return x.TotalCount }

// MannequinEdge (OBJECT): Represents a mannequin.
type MannequinEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Mannequin `json:"node,omitempty"`
}

func (x *MannequinEdge) GetCursor() string   { return x.Cursor }
func (x *MannequinEdge) GetNode() *Mannequin { return x.Node }

// MannequinOrder (INPUT_OBJECT): Ordering options for mannequins.
type MannequinOrder struct {
	// Field: The field to order mannequins by.
	//
	// GraphQL type: MannequinOrderField!
	Field MannequinOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// MannequinOrderField (ENUM): Properties by which mannequins can be ordered.
type MannequinOrderField string

// MannequinOrderField_LOGIN: Order mannequins alphabetically by their source login.
const MannequinOrderField_LOGIN MannequinOrderField = "LOGIN"

// MannequinOrderField_CREATED_AT: Order mannequins why when they were created.
const MannequinOrderField_CREATED_AT MannequinOrderField = "CREATED_AT"

// MarkDiscussionCommentAsAnswerInput (INPUT_OBJECT): Autogenerated input type of MarkDiscussionCommentAsAnswer.
type MarkDiscussionCommentAsAnswerInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the discussion comment to mark as an answer.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// MarkDiscussionCommentAsAnswerPayload (OBJECT): Autogenerated return type of MarkDiscussionCommentAsAnswer.
type MarkDiscussionCommentAsAnswerPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The discussion that includes the chosen comment.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *MarkDiscussionCommentAsAnswerPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *MarkDiscussionCommentAsAnswerPayload) GetDiscussion() *Discussion { return x.Discussion }

// MarkFileAsViewedInput (INPUT_OBJECT): Autogenerated input type of MarkFileAsViewed.
type MarkFileAsViewedInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Node ID of the pull request.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// Path: The path of the file to mark as viewed.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`
}

// MarkFileAsViewedPayload (OBJECT): Autogenerated return type of MarkFileAsViewed.
type MarkFileAsViewedPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *MarkFileAsViewedPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *MarkFileAsViewedPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// MarkProjectV2AsTemplateInput (INPUT_OBJECT): Autogenerated input type of MarkProjectV2AsTemplate.
type MarkProjectV2AsTemplateInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to mark as a template.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`
}

// MarkProjectV2AsTemplatePayload (OBJECT): Autogenerated return type of MarkProjectV2AsTemplate.
type MarkProjectV2AsTemplatePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2: The project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *MarkProjectV2AsTemplatePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *MarkProjectV2AsTemplatePayload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// MarkPullRequestReadyForReviewInput (INPUT_OBJECT): Autogenerated input type of MarkPullRequestReadyForReview.
type MarkPullRequestReadyForReviewInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to be marked as ready for review.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`
}

// MarkPullRequestReadyForReviewPayload (OBJECT): Autogenerated return type of MarkPullRequestReadyForReview.
type MarkPullRequestReadyForReviewPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that is ready for review.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *MarkPullRequestReadyForReviewPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *MarkPullRequestReadyForReviewPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// MarkedAsDuplicateEvent (OBJECT): Represents a 'marked_as_duplicate' event on a given issue or pull request.
type MarkedAsDuplicateEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Canonical: The authoritative issue or pull request which has been duplicated by another.
	Canonical IssueOrPullRequest `json:"canonical,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Duplicate: The issue or pull request which has been marked as a duplicate of another.
	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`

	// Id: The Node ID of the MarkedAsDuplicateEvent object.
	Id ID `json:"id,omitempty"`

	// IsCrossRepository: Canonical and duplicate belong to different repositories.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`
}

func (x *MarkedAsDuplicateEvent) GetActor() Actor                  { return x.Actor }
func (x *MarkedAsDuplicateEvent) GetCanonical() IssueOrPullRequest { return x.Canonical }
func (x *MarkedAsDuplicateEvent) GetCreatedAt() DateTime           { return x.CreatedAt }
func (x *MarkedAsDuplicateEvent) GetDuplicate() IssueOrPullRequest { return x.Duplicate }
func (x *MarkedAsDuplicateEvent) GetId() ID                        { return x.Id }
func (x *MarkedAsDuplicateEvent) GetIsCrossRepository() bool       { return x.IsCrossRepository }

// MarketplaceCategory (OBJECT): A public description of a Marketplace category.
type MarketplaceCategory struct {
	// Description: The category's description.
	Description string `json:"description,omitempty"`

	// HowItWorks: The technical description of how apps listed in this category work with GitHub.
	HowItWorks string `json:"howItWorks,omitempty"`

	// Id: The Node ID of the MarketplaceCategory object.
	Id ID `json:"id,omitempty"`

	// Name: The category's name.
	Name string `json:"name,omitempty"`

	// PrimaryListingCount: How many Marketplace listings have this as their primary category.
	PrimaryListingCount int `json:"primaryListingCount,omitempty"`

	// ResourcePath: The HTTP path for this Marketplace category.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// SecondaryListingCount: How many Marketplace listings have this as their secondary category.
	SecondaryListingCount int `json:"secondaryListingCount,omitempty"`

	// Slug: The short name of the category used in its URL.
	Slug string `json:"slug,omitempty"`

	// Url: The HTTP URL for this Marketplace category.
	Url URI `json:"url,omitempty"`
}

func (x *MarketplaceCategory) GetDescription() string        { return x.Description }
func (x *MarketplaceCategory) GetHowItWorks() string         { return x.HowItWorks }
func (x *MarketplaceCategory) GetId() ID                     { return x.Id }
func (x *MarketplaceCategory) GetName() string               { return x.Name }
func (x *MarketplaceCategory) GetPrimaryListingCount() int   { return x.PrimaryListingCount }
func (x *MarketplaceCategory) GetResourcePath() URI          { return x.ResourcePath }
func (x *MarketplaceCategory) GetSecondaryListingCount() int { return x.SecondaryListingCount }
func (x *MarketplaceCategory) GetSlug() string               { return x.Slug }
func (x *MarketplaceCategory) GetUrl() URI                   { return x.Url }

// MarketplaceListing (OBJECT): A listing in the GitHub integration marketplace.
type MarketplaceListing struct {
	// App: The GitHub App this listing represents.
	App *App `json:"app,omitempty"`

	// CompanyUrl: URL to the listing owner's company site.
	CompanyUrl URI `json:"companyUrl,omitempty"`

	// ConfigurationResourcePath: The HTTP path for configuring access to the listing's integration or OAuth app.
	ConfigurationResourcePath URI `json:"configurationResourcePath,omitempty"`

	// ConfigurationUrl: The HTTP URL for configuring access to the listing's integration or OAuth app.
	ConfigurationUrl URI `json:"configurationUrl,omitempty"`

	// DocumentationUrl: URL to the listing's documentation.
	DocumentationUrl URI `json:"documentationUrl,omitempty"`

	// ExtendedDescription: The listing's detailed description.
	ExtendedDescription string `json:"extendedDescription,omitempty"`

	// ExtendedDescriptionHTML: The listing's detailed description rendered to HTML.
	ExtendedDescriptionHTML template.HTML `json:"extendedDescriptionHTML,omitempty"`

	// FullDescription: The listing's introductory description.
	FullDescription string `json:"fullDescription,omitempty"`

	// FullDescriptionHTML: The listing's introductory description rendered to HTML.
	FullDescriptionHTML template.HTML `json:"fullDescriptionHTML,omitempty"`

	// HasPublishedFreeTrialPlans: Does this listing have any plans with a free trial?.
	HasPublishedFreeTrialPlans bool `json:"hasPublishedFreeTrialPlans,omitempty"`

	// HasTermsOfService: Does this listing have a terms of service link?.
	HasTermsOfService bool `json:"hasTermsOfService,omitempty"`

	// HasVerifiedOwner: Whether the creator of the app is a verified org.
	HasVerifiedOwner bool `json:"hasVerifiedOwner,omitempty"`

	// HowItWorks: A technical description of how this app works with GitHub.
	HowItWorks string `json:"howItWorks,omitempty"`

	// HowItWorksHTML: The listing's technical description rendered to HTML.
	HowItWorksHTML template.HTML `json:"howItWorksHTML,omitempty"`

	// Id: The Node ID of the MarketplaceListing object.
	Id ID `json:"id,omitempty"`

	// InstallationUrl: URL to install the product to the viewer's account or organization.
	InstallationUrl URI `json:"installationUrl,omitempty"`

	// InstalledForViewer: Whether this listing's app has been installed for the current viewer.
	InstalledForViewer bool `json:"installedForViewer,omitempty"`

	// IsArchived: Whether this listing has been removed from the Marketplace.
	IsArchived bool `json:"isArchived,omitempty"`

	// IsDraft: Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
	IsDraft bool `json:"isDraft,omitempty"`

	// IsPaid: Whether the product this listing represents is available as part of a paid plan.
	IsPaid bool `json:"isPaid,omitempty"`

	// IsPublic: Whether this listing has been approved for display in the Marketplace.
	IsPublic bool `json:"isPublic,omitempty"`

	// IsRejected: Whether this listing has been rejected by GitHub for display in the Marketplace.
	IsRejected bool `json:"isRejected,omitempty"`

	// IsUnverified: Whether this listing has been approved for unverified display in the Marketplace.
	IsUnverified bool `json:"isUnverified,omitempty"`

	// IsUnverifiedPending: Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
	IsUnverifiedPending bool `json:"isUnverifiedPending,omitempty"`

	// IsVerificationPendingFromDraft: Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
	IsVerificationPendingFromDraft bool `json:"isVerificationPendingFromDraft,omitempty"`

	// IsVerificationPendingFromUnverified: Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
	IsVerificationPendingFromUnverified bool `json:"isVerificationPendingFromUnverified,omitempty"`

	// IsVerified: Whether this listing has been approved for verified display in the Marketplace.
	IsVerified bool `json:"isVerified,omitempty"`

	// LogoBackgroundColor: The hex color code, without the leading '#', for the logo background.
	LogoBackgroundColor string `json:"logoBackgroundColor,omitempty"`

	// LogoUrl: URL for the listing's logo image.
	//
	// Query arguments:
	//   - size Int
	LogoUrl URI `json:"logoUrl,omitempty"`

	// Name: The listing's full name.
	Name string `json:"name,omitempty"`

	// NormalizedShortDescription: The listing's very short description without a trailing period or ampersands.
	NormalizedShortDescription string `json:"normalizedShortDescription,omitempty"`

	// PricingUrl: URL to the listing's detailed pricing.
	PricingUrl URI `json:"pricingUrl,omitempty"`

	// PrimaryCategory: The category that best describes the listing.
	PrimaryCategory *MarketplaceCategory `json:"primaryCategory,omitempty"`

	// PrivacyPolicyUrl: URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
	PrivacyPolicyUrl URI `json:"privacyPolicyUrl,omitempty"`

	// ResourcePath: The HTTP path for the Marketplace listing.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// ScreenshotUrls: The URLs for the listing's screenshots.
	ScreenshotUrls []string `json:"screenshotUrls,omitempty"`

	// SecondaryCategory: An alternate category that describes the listing.
	SecondaryCategory *MarketplaceCategory `json:"secondaryCategory,omitempty"`

	// ShortDescription: The listing's very short description.
	ShortDescription string `json:"shortDescription,omitempty"`

	// Slug: The short name of the listing used in its URL.
	Slug string `json:"slug,omitempty"`

	// StatusUrl: URL to the listing's status page.
	StatusUrl URI `json:"statusUrl,omitempty"`

	// SupportEmail: An email address for support for this listing's app.
	SupportEmail string `json:"supportEmail,omitempty"`

	// SupportUrl: Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
	SupportUrl URI `json:"supportUrl,omitempty"`

	// TermsOfServiceUrl: URL to the listing's terms of service.
	TermsOfServiceUrl URI `json:"termsOfServiceUrl,omitempty"`

	// Url: The HTTP URL for the Marketplace listing.
	Url URI `json:"url,omitempty"`

	// ViewerCanAddPlans: Can the current viewer add plans for this Marketplace listing.
	ViewerCanAddPlans bool `json:"viewerCanAddPlans,omitempty"`

	// ViewerCanApprove: Can the current viewer approve this Marketplace listing.
	ViewerCanApprove bool `json:"viewerCanApprove,omitempty"`

	// ViewerCanDelist: Can the current viewer delist this Marketplace listing.
	ViewerCanDelist bool `json:"viewerCanDelist,omitempty"`

	// ViewerCanEdit: Can the current viewer edit this Marketplace listing.
	ViewerCanEdit bool `json:"viewerCanEdit,omitempty"`

	// ViewerCanEditCategories: Can the current viewer edit the primary and secondary category of this
	// Marketplace listing.
	// .
	ViewerCanEditCategories bool `json:"viewerCanEditCategories,omitempty"`

	// ViewerCanEditPlans: Can the current viewer edit the plans for this Marketplace listing.
	ViewerCanEditPlans bool `json:"viewerCanEditPlans,omitempty"`

	// ViewerCanRedraft: Can the current viewer return this Marketplace listing to draft state
	// so it becomes editable again.
	// .
	ViewerCanRedraft bool `json:"viewerCanRedraft,omitempty"`

	// ViewerCanReject: Can the current viewer reject this Marketplace listing by returning it to
	// an editable draft state or rejecting it entirely.
	// .
	ViewerCanReject bool `json:"viewerCanReject,omitempty"`

	// ViewerCanRequestApproval: Can the current viewer request this listing be reviewed for display in
	// the Marketplace as verified.
	// .
	ViewerCanRequestApproval bool `json:"viewerCanRequestApproval,omitempty"`

	// ViewerHasPurchased: Indicates whether the current user has an active subscription to this Marketplace listing.
	// .
	ViewerHasPurchased bool `json:"viewerHasPurchased,omitempty"`

	// ViewerHasPurchasedForAllOrganizations: Indicates if the current user has purchased a subscription to this Marketplace listing
	// for all of the organizations the user owns.
	// .
	ViewerHasPurchasedForAllOrganizations bool `json:"viewerHasPurchasedForAllOrganizations,omitempty"`

	// ViewerIsListingAdmin: Does the current viewer role allow them to administer this Marketplace listing.
	// .
	ViewerIsListingAdmin bool `json:"viewerIsListingAdmin,omitempty"`
}

func (x *MarketplaceListing) GetApp() *App                      { return x.App }
func (x *MarketplaceListing) GetCompanyUrl() URI                { return x.CompanyUrl }
func (x *MarketplaceListing) GetConfigurationResourcePath() URI { return x.ConfigurationResourcePath }
func (x *MarketplaceListing) GetConfigurationUrl() URI          { return x.ConfigurationUrl }
func (x *MarketplaceListing) GetDocumentationUrl() URI          { return x.DocumentationUrl }
func (x *MarketplaceListing) GetExtendedDescription() string    { return x.ExtendedDescription }
func (x *MarketplaceListing) GetExtendedDescriptionHTML() template.HTML {
	return x.ExtendedDescriptionHTML
}
func (x *MarketplaceListing) GetFullDescription() string            { return x.FullDescription }
func (x *MarketplaceListing) GetFullDescriptionHTML() template.HTML { return x.FullDescriptionHTML }
func (x *MarketplaceListing) GetHasPublishedFreeTrialPlans() bool {
	return x.HasPublishedFreeTrialPlans
}
func (x *MarketplaceListing) GetHasTermsOfService() bool       { return x.HasTermsOfService }
func (x *MarketplaceListing) GetHasVerifiedOwner() bool        { return x.HasVerifiedOwner }
func (x *MarketplaceListing) GetHowItWorks() string            { return x.HowItWorks }
func (x *MarketplaceListing) GetHowItWorksHTML() template.HTML { return x.HowItWorksHTML }
func (x *MarketplaceListing) GetId() ID                        { return x.Id }
func (x *MarketplaceListing) GetInstallationUrl() URI          { return x.InstallationUrl }
func (x *MarketplaceListing) GetInstalledForViewer() bool      { return x.InstalledForViewer }
func (x *MarketplaceListing) GetIsArchived() bool              { return x.IsArchived }
func (x *MarketplaceListing) GetIsDraft() bool                 { return x.IsDraft }
func (x *MarketplaceListing) GetIsPaid() bool                  { return x.IsPaid }
func (x *MarketplaceListing) GetIsPublic() bool                { return x.IsPublic }
func (x *MarketplaceListing) GetIsRejected() bool              { return x.IsRejected }
func (x *MarketplaceListing) GetIsUnverified() bool            { return x.IsUnverified }
func (x *MarketplaceListing) GetIsUnverifiedPending() bool     { return x.IsUnverifiedPending }
func (x *MarketplaceListing) GetIsVerificationPendingFromDraft() bool {
	return x.IsVerificationPendingFromDraft
}
func (x *MarketplaceListing) GetIsVerificationPendingFromUnverified() bool {
	return x.IsVerificationPendingFromUnverified
}
func (x *MarketplaceListing) GetIsVerified() bool            { return x.IsVerified }
func (x *MarketplaceListing) GetLogoBackgroundColor() string { return x.LogoBackgroundColor }
func (x *MarketplaceListing) GetLogoUrl() URI                { return x.LogoUrl }
func (x *MarketplaceListing) GetName() string                { return x.Name }
func (x *MarketplaceListing) GetNormalizedShortDescription() string {
	return x.NormalizedShortDescription
}
func (x *MarketplaceListing) GetPricingUrl() URI                         { return x.PricingUrl }
func (x *MarketplaceListing) GetPrimaryCategory() *MarketplaceCategory   { return x.PrimaryCategory }
func (x *MarketplaceListing) GetPrivacyPolicyUrl() URI                   { return x.PrivacyPolicyUrl }
func (x *MarketplaceListing) GetResourcePath() URI                       { return x.ResourcePath }
func (x *MarketplaceListing) GetScreenshotUrls() []string                { return x.ScreenshotUrls }
func (x *MarketplaceListing) GetSecondaryCategory() *MarketplaceCategory { return x.SecondaryCategory }
func (x *MarketplaceListing) GetShortDescription() string                { return x.ShortDescription }
func (x *MarketplaceListing) GetSlug() string                            { return x.Slug }
func (x *MarketplaceListing) GetStatusUrl() URI                          { return x.StatusUrl }
func (x *MarketplaceListing) GetSupportEmail() string                    { return x.SupportEmail }
func (x *MarketplaceListing) GetSupportUrl() URI                         { return x.SupportUrl }
func (x *MarketplaceListing) GetTermsOfServiceUrl() URI                  { return x.TermsOfServiceUrl }
func (x *MarketplaceListing) GetUrl() URI                                { return x.Url }
func (x *MarketplaceListing) GetViewerCanAddPlans() bool                 { return x.ViewerCanAddPlans }
func (x *MarketplaceListing) GetViewerCanApprove() bool                  { return x.ViewerCanApprove }
func (x *MarketplaceListing) GetViewerCanDelist() bool                   { return x.ViewerCanDelist }
func (x *MarketplaceListing) GetViewerCanEdit() bool                     { return x.ViewerCanEdit }
func (x *MarketplaceListing) GetViewerCanEditCategories() bool           { return x.ViewerCanEditCategories }
func (x *MarketplaceListing) GetViewerCanEditPlans() bool                { return x.ViewerCanEditPlans }
func (x *MarketplaceListing) GetViewerCanRedraft() bool                  { return x.ViewerCanRedraft }
func (x *MarketplaceListing) GetViewerCanReject() bool                   { return x.ViewerCanReject }
func (x *MarketplaceListing) GetViewerCanRequestApproval() bool          { return x.ViewerCanRequestApproval }
func (x *MarketplaceListing) GetViewerHasPurchased() bool                { return x.ViewerHasPurchased }
func (x *MarketplaceListing) GetViewerHasPurchasedForAllOrganizations() bool {
	return x.ViewerHasPurchasedForAllOrganizations
}
func (x *MarketplaceListing) GetViewerIsListingAdmin() bool { return x.ViewerIsListingAdmin }

// MarketplaceListingConnection (OBJECT): Look up Marketplace Listings.
type MarketplaceListingConnection struct {
	// Edges: A list of edges.
	Edges []*MarketplaceListingEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*MarketplaceListing `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *MarketplaceListingConnection) GetEdges() []*MarketplaceListingEdge { return x.Edges }
func (x *MarketplaceListingConnection) GetNodes() []*MarketplaceListing     { return x.Nodes }
func (x *MarketplaceListingConnection) GetPageInfo() *PageInfo              { return x.PageInfo }
func (x *MarketplaceListingConnection) GetTotalCount() int                  { return x.TotalCount }

// MarketplaceListingEdge (OBJECT): An edge in a connection.
type MarketplaceListingEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *MarketplaceListing `json:"node,omitempty"`
}

func (x *MarketplaceListingEdge) GetCursor() string            { return x.Cursor }
func (x *MarketplaceListingEdge) GetNode() *MarketplaceListing { return x.Node }

// MaxFilePathLengthParameters (OBJECT): Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.
type MaxFilePathLengthParameters struct {
	// MaxFilePathLength: The maximum amount of characters allowed in file paths.
	MaxFilePathLength int `json:"maxFilePathLength,omitempty"`
}

func (x *MaxFilePathLengthParameters) GetMaxFilePathLength() int { return x.MaxFilePathLength }

// MaxFilePathLengthParametersInput (INPUT_OBJECT): Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.
type MaxFilePathLengthParametersInput struct {
	// MaxFilePathLength: The maximum amount of characters allowed in file paths.
	//
	// GraphQL type: Int!
	MaxFilePathLength int `json:"maxFilePathLength,omitempty"`
}

// MaxFileSizeParameters (OBJECT): Prevent commits that exceed a specified file size limit from being pushed to the commit graph.
type MaxFileSizeParameters struct {
	// MaxFileSize: The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
	MaxFileSize int `json:"maxFileSize,omitempty"`
}

func (x *MaxFileSizeParameters) GetMaxFileSize() int { return x.MaxFileSize }

// MaxFileSizeParametersInput (INPUT_OBJECT): Prevent commits that exceed a specified file size limit from being pushed to the commit graph.
type MaxFileSizeParametersInput struct {
	// MaxFileSize: The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
	//
	// GraphQL type: Int!
	MaxFileSize int `json:"maxFileSize,omitempty"`
}

// MemberFeatureRequestNotification (OBJECT): Represents a member feature request notification.
type MemberFeatureRequestNotification struct {
	// Body: Represents member feature request body containing entity name and the number of feature requests.
	Body string `json:"body,omitempty"`

	// Id: The Node ID of the MemberFeatureRequestNotification object.
	Id ID `json:"id,omitempty"`

	// Title: Represents member feature request notification title.
	Title string `json:"title,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *MemberFeatureRequestNotification) GetBody() string        { return x.Body }
func (x *MemberFeatureRequestNotification) GetId() ID              { return x.Id }
func (x *MemberFeatureRequestNotification) GetTitle() string       { return x.Title }
func (x *MemberFeatureRequestNotification) GetUpdatedAt() DateTime { return x.UpdatedAt }

// MemberStatusable (INTERFACE): Entities that have members who can set status messages.
// MemberStatusable_Interface: Entities that have members who can set status messages.
//
// Possible types:
//
//   - *Organization
//   - *Team
type MemberStatusable_Interface interface {
	isMemberStatusable()
	GetMemberStatuses() *UserStatusConnection
}

func (*Organization) isMemberStatusable() {}
func (*Team) isMemberStatusable()         {}

type MemberStatusable struct {
	Interface MemberStatusable_Interface
}

func (x *MemberStatusable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *MemberStatusable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for MemberStatusable", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "Team":
		x.Interface = new(Team)
	}
	return json.Unmarshal(js, x.Interface)
}

// MembersCanDeleteReposClearAuditEntry (OBJECT): Audit log entry for a members_can_delete_repos.clear event.
type MembersCanDeleteReposClearAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the MembersCanDeleteReposClearAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *MembersCanDeleteReposClearAuditEntry) GetAction() string         { return x.Action }
func (x *MembersCanDeleteReposClearAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *MembersCanDeleteReposClearAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *MembersCanDeleteReposClearAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *MembersCanDeleteReposClearAuditEntry) GetActorLogin() string         { return x.ActorLogin }
func (x *MembersCanDeleteReposClearAuditEntry) GetActorResourcePath() URI     { return x.ActorResourcePath }
func (x *MembersCanDeleteReposClearAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *MembersCanDeleteReposClearAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *MembersCanDeleteReposClearAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *MembersCanDeleteReposClearAuditEntry) GetEnterpriseSlug() string { return x.EnterpriseSlug }
func (x *MembersCanDeleteReposClearAuditEntry) GetEnterpriseUrl() URI     { return x.EnterpriseUrl }
func (x *MembersCanDeleteReposClearAuditEntry) GetId() ID                 { return x.Id }
func (x *MembersCanDeleteReposClearAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *MembersCanDeleteReposClearAuditEntry) GetOrganization() *Organization { return x.Organization }
func (x *MembersCanDeleteReposClearAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *MembersCanDeleteReposClearAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *MembersCanDeleteReposClearAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *MembersCanDeleteReposClearAuditEntry) GetUser() *User           { return x.User }
func (x *MembersCanDeleteReposClearAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *MembersCanDeleteReposClearAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *MembersCanDeleteReposClearAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// MembersCanDeleteReposDisableAuditEntry (OBJECT): Audit log entry for a members_can_delete_repos.disable event.
type MembersCanDeleteReposDisableAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the MembersCanDeleteReposDisableAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *MembersCanDeleteReposDisableAuditEntry) GetAction() string         { return x.Action }
func (x *MembersCanDeleteReposDisableAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *MembersCanDeleteReposDisableAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *MembersCanDeleteReposDisableAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *MembersCanDeleteReposDisableAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *MembersCanDeleteReposDisableAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *MembersCanDeleteReposDisableAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetEnterpriseSlug() string { return x.EnterpriseSlug }
func (x *MembersCanDeleteReposDisableAuditEntry) GetEnterpriseUrl() URI     { return x.EnterpriseUrl }
func (x *MembersCanDeleteReposDisableAuditEntry) GetId() ID                 { return x.Id }
func (x *MembersCanDeleteReposDisableAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *MembersCanDeleteReposDisableAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *MembersCanDeleteReposDisableAuditEntry) GetUser() *User           { return x.User }
func (x *MembersCanDeleteReposDisableAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *MembersCanDeleteReposDisableAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *MembersCanDeleteReposDisableAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// MembersCanDeleteReposEnableAuditEntry (OBJECT): Audit log entry for a members_can_delete_repos.enable event.
type MembersCanDeleteReposEnableAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the MembersCanDeleteReposEnableAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *MembersCanDeleteReposEnableAuditEntry) GetAction() string         { return x.Action }
func (x *MembersCanDeleteReposEnableAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *MembersCanDeleteReposEnableAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *MembersCanDeleteReposEnableAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *MembersCanDeleteReposEnableAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *MembersCanDeleteReposEnableAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *MembersCanDeleteReposEnableAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetEnterpriseSlug() string { return x.EnterpriseSlug }
func (x *MembersCanDeleteReposEnableAuditEntry) GetEnterpriseUrl() URI     { return x.EnterpriseUrl }
func (x *MembersCanDeleteReposEnableAuditEntry) GetId() ID                 { return x.Id }
func (x *MembersCanDeleteReposEnableAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *MembersCanDeleteReposEnableAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *MembersCanDeleteReposEnableAuditEntry) GetUser() *User           { return x.User }
func (x *MembersCanDeleteReposEnableAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *MembersCanDeleteReposEnableAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *MembersCanDeleteReposEnableAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// MentionedEvent (OBJECT): Represents a 'mentioned' event on a given issue or pull request.
type MentionedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the MentionedEvent object.
	Id ID `json:"id,omitempty"`
}

func (x *MentionedEvent) GetActor() Actor        { return x.Actor }
func (x *MentionedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *MentionedEvent) GetDatabaseId() int     { return x.DatabaseId }
func (x *MentionedEvent) GetId() ID              { return x.Id }

// MergeBranchInput (INPUT_OBJECT): Autogenerated input type of MergeBranch.
type MergeBranchInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the Repository containing the base branch that will be modified.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Base: The name of the base branch that the provided head will be merged into.
	//
	// GraphQL type: String!
	Base string `json:"base,omitempty"`

	// Head: The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
	//
	// GraphQL type: String!
	Head string `json:"head,omitempty"`

	// CommitMessage: Message to use for the merge commit. If omitted, a default will be used.
	//
	// GraphQL type: String
	CommitMessage string `json:"commitMessage,omitempty"`

	// AuthorEmail: The email address to associate with this commit.
	//
	// GraphQL type: String
	AuthorEmail string `json:"authorEmail,omitempty"`
}

// MergeBranchPayload (OBJECT): Autogenerated return type of MergeBranch.
type MergeBranchPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// MergeCommit: The resulting merge Commit.
	MergeCommit *Commit `json:"mergeCommit,omitempty"`
}

func (x *MergeBranchPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *MergeBranchPayload) GetMergeCommit() *Commit     { return x.MergeCommit }

// MergeCommitMessage (ENUM): The possible default commit messages for merges.
type MergeCommitMessage string

// MergeCommitMessage_PR_TITLE: Default to the pull request's title.
const MergeCommitMessage_PR_TITLE MergeCommitMessage = "PR_TITLE"

// MergeCommitMessage_PR_BODY: Default to the pull request's body.
const MergeCommitMessage_PR_BODY MergeCommitMessage = "PR_BODY"

// MergeCommitMessage_BLANK: Default to a blank commit message.
const MergeCommitMessage_BLANK MergeCommitMessage = "BLANK"

// MergeCommitTitle (ENUM): The possible default commit titles for merges.
type MergeCommitTitle string

// MergeCommitTitle_PR_TITLE: Default to the pull request's title.
const MergeCommitTitle_PR_TITLE MergeCommitTitle = "PR_TITLE"

// MergeCommitTitle_MERGE_MESSAGE: Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
const MergeCommitTitle_MERGE_MESSAGE MergeCommitTitle = "MERGE_MESSAGE"

// MergePullRequestInput (INPUT_OBJECT): Autogenerated input type of MergePullRequest.
type MergePullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to be merged.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// CommitHeadline: Commit headline to use for the merge commit; if omitted, a default message will be used.
	//
	// GraphQL type: String
	CommitHeadline string `json:"commitHeadline,omitempty"`

	// CommitBody: Commit body to use for the merge commit; if omitted, a default message will be used.
	//
	// GraphQL type: String
	CommitBody string `json:"commitBody,omitempty"`

	// ExpectedHeadOid: OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
	//
	// GraphQL type: GitObjectID
	ExpectedHeadOid GitObjectID `json:"expectedHeadOid,omitempty"`

	// MergeMethod: The merge method to use. If omitted, defaults to 'MERGE'.
	//
	// GraphQL type: PullRequestMergeMethod
	MergeMethod PullRequestMergeMethod `json:"mergeMethod,omitempty"`

	// AuthorEmail: The email address to associate with this merge.
	//
	// GraphQL type: String
	AuthorEmail string `json:"authorEmail,omitempty"`
}

// MergePullRequestPayload (OBJECT): Autogenerated return type of MergePullRequest.
type MergePullRequestPayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that was merged.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *MergePullRequestPayload) GetActor() Actor              { return x.Actor }
func (x *MergePullRequestPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *MergePullRequestPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// MergeQueue (OBJECT): The queue of pull request entries to be merged into a protected branch in a repository.
type MergeQueue struct {
	// Configuration: The configuration for this merge queue.
	Configuration *MergeQueueConfiguration `json:"configuration,omitempty"`

	// Entries: The entries in the queue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Entries *MergeQueueEntryConnection `json:"entries,omitempty"`

	// Id: The Node ID of the MergeQueue object.
	Id ID `json:"id,omitempty"`

	// NextEntryEstimatedTimeToMerge: The estimated time in seconds until a newly added entry would be merged.
	NextEntryEstimatedTimeToMerge int `json:"nextEntryEstimatedTimeToMerge,omitempty"`

	// Repository: The repository this merge queue belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this merge queue.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this merge queue.
	Url URI `json:"url,omitempty"`
}

func (x *MergeQueue) GetConfiguration() *MergeQueueConfiguration { return x.Configuration }
func (x *MergeQueue) GetEntries() *MergeQueueEntryConnection     { return x.Entries }
func (x *MergeQueue) GetId() ID                                  { return x.Id }
func (x *MergeQueue) GetNextEntryEstimatedTimeToMerge() int      { return x.NextEntryEstimatedTimeToMerge }
func (x *MergeQueue) GetRepository() *Repository                 { return x.Repository }
func (x *MergeQueue) GetResourcePath() URI                       { return x.ResourcePath }
func (x *MergeQueue) GetUrl() URI                                { return x.Url }

// MergeQueueConfiguration (OBJECT): Configuration for a MergeQueue.
type MergeQueueConfiguration struct {
	// CheckResponseTimeout: The amount of time in minutes to wait for a check response before considering it a failure.
	CheckResponseTimeout int `json:"checkResponseTimeout,omitempty"`

	// MaximumEntriesToBuild: The maximum number of entries to build at once.
	MaximumEntriesToBuild int `json:"maximumEntriesToBuild,omitempty"`

	// MaximumEntriesToMerge: The maximum number of entries to merge at once.
	MaximumEntriesToMerge int `json:"maximumEntriesToMerge,omitempty"`

	// MergeMethod: The merge method to use for this queue.
	MergeMethod PullRequestMergeMethod `json:"mergeMethod,omitempty"`

	// MergingStrategy: The strategy to use when merging entries.
	MergingStrategy MergeQueueMergingStrategy `json:"mergingStrategy,omitempty"`

	// MinimumEntriesToMerge: The minimum number of entries required to merge at once.
	MinimumEntriesToMerge int `json:"minimumEntriesToMerge,omitempty"`

	// MinimumEntriesToMergeWaitTime: The amount of time in minutes to wait before ignoring the minimum number of entries in the queue requirement and merging a collection of entries.
	MinimumEntriesToMergeWaitTime int `json:"minimumEntriesToMergeWaitTime,omitempty"`
}

func (x *MergeQueueConfiguration) GetCheckResponseTimeout() int           { return x.CheckResponseTimeout }
func (x *MergeQueueConfiguration) GetMaximumEntriesToBuild() int          { return x.MaximumEntriesToBuild }
func (x *MergeQueueConfiguration) GetMaximumEntriesToMerge() int          { return x.MaximumEntriesToMerge }
func (x *MergeQueueConfiguration) GetMergeMethod() PullRequestMergeMethod { return x.MergeMethod }
func (x *MergeQueueConfiguration) GetMergingStrategy() MergeQueueMergingStrategy {
	return x.MergingStrategy
}
func (x *MergeQueueConfiguration) GetMinimumEntriesToMerge() int { return x.MinimumEntriesToMerge }
func (x *MergeQueueConfiguration) GetMinimumEntriesToMergeWaitTime() int {
	return x.MinimumEntriesToMergeWaitTime
}

// MergeQueueEntry (OBJECT): Entries in a MergeQueue.
type MergeQueueEntry struct {
	// BaseCommit: The base commit for this entry.
	BaseCommit *Commit `json:"baseCommit,omitempty"`

	// EnqueuedAt: The date and time this entry was added to the merge queue.
	EnqueuedAt DateTime `json:"enqueuedAt,omitempty"`

	// Enqueuer: The actor that enqueued this entry.
	Enqueuer Actor `json:"enqueuer,omitempty"`

	// EstimatedTimeToMerge: The estimated time in seconds until this entry will be merged.
	EstimatedTimeToMerge int `json:"estimatedTimeToMerge,omitempty"`

	// HeadCommit: The head commit for this entry.
	HeadCommit *Commit `json:"headCommit,omitempty"`

	// Id: The Node ID of the MergeQueueEntry object.
	Id ID `json:"id,omitempty"`

	// Jump: Whether this pull request should jump the queue.
	Jump bool `json:"jump,omitempty"`

	// MergeQueue: The merge queue that this entry belongs to.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`

	// Position: The position of this entry in the queue.
	Position int `json:"position,omitempty"`

	// PullRequest: The pull request that will be added to a merge group.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Solo: Does this pull request need to be deployed on its own.
	Solo bool `json:"solo,omitempty"`

	// State: The state of this entry in the queue.
	State MergeQueueEntryState `json:"state,omitempty"`
}

func (x *MergeQueueEntry) GetBaseCommit() *Commit         { return x.BaseCommit }
func (x *MergeQueueEntry) GetEnqueuedAt() DateTime        { return x.EnqueuedAt }
func (x *MergeQueueEntry) GetEnqueuer() Actor             { return x.Enqueuer }
func (x *MergeQueueEntry) GetEstimatedTimeToMerge() int   { return x.EstimatedTimeToMerge }
func (x *MergeQueueEntry) GetHeadCommit() *Commit         { return x.HeadCommit }
func (x *MergeQueueEntry) GetId() ID                      { return x.Id }
func (x *MergeQueueEntry) GetJump() bool                  { return x.Jump }
func (x *MergeQueueEntry) GetMergeQueue() *MergeQueue     { return x.MergeQueue }
func (x *MergeQueueEntry) GetPosition() int               { return x.Position }
func (x *MergeQueueEntry) GetPullRequest() *PullRequest   { return x.PullRequest }
func (x *MergeQueueEntry) GetSolo() bool                  { return x.Solo }
func (x *MergeQueueEntry) GetState() MergeQueueEntryState { return x.State }

// MergeQueueEntryConnection (OBJECT): The connection type for MergeQueueEntry.
type MergeQueueEntryConnection struct {
	// Edges: A list of edges.
	Edges []*MergeQueueEntryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*MergeQueueEntry `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *MergeQueueEntryConnection) GetEdges() []*MergeQueueEntryEdge { return x.Edges }
func (x *MergeQueueEntryConnection) GetNodes() []*MergeQueueEntry     { return x.Nodes }
func (x *MergeQueueEntryConnection) GetPageInfo() *PageInfo           { return x.PageInfo }
func (x *MergeQueueEntryConnection) GetTotalCount() int               { return x.TotalCount }

// MergeQueueEntryEdge (OBJECT): An edge in a connection.
type MergeQueueEntryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *MergeQueueEntry `json:"node,omitempty"`
}

func (x *MergeQueueEntryEdge) GetCursor() string         { return x.Cursor }
func (x *MergeQueueEntryEdge) GetNode() *MergeQueueEntry { return x.Node }

// MergeQueueEntryState (ENUM): The possible states for a merge queue entry.
type MergeQueueEntryState string

// MergeQueueEntryState_QUEUED: The entry is currently queued.
const MergeQueueEntryState_QUEUED MergeQueueEntryState = "QUEUED"

// MergeQueueEntryState_AWAITING_CHECKS: The entry is currently waiting for checks to pass.
const MergeQueueEntryState_AWAITING_CHECKS MergeQueueEntryState = "AWAITING_CHECKS"

// MergeQueueEntryState_MERGEABLE: The entry is currently mergeable.
const MergeQueueEntryState_MERGEABLE MergeQueueEntryState = "MERGEABLE"

// MergeQueueEntryState_UNMERGEABLE: The entry is currently unmergeable.
const MergeQueueEntryState_UNMERGEABLE MergeQueueEntryState = "UNMERGEABLE"

// MergeQueueEntryState_LOCKED: The entry is currently locked.
const MergeQueueEntryState_LOCKED MergeQueueEntryState = "LOCKED"

// MergeQueueGroupingStrategy (ENUM): When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
type MergeQueueGroupingStrategy string

// MergeQueueGroupingStrategy_ALLGREEN: The merge commit created by merge queue for each PR in the group must pass all required checks to merge.
const MergeQueueGroupingStrategy_ALLGREEN MergeQueueGroupingStrategy = "ALLGREEN"

// MergeQueueGroupingStrategy_HEADGREEN: Only the commit at the head of the merge group must pass its required checks to merge.
const MergeQueueGroupingStrategy_HEADGREEN MergeQueueGroupingStrategy = "HEADGREEN"

// MergeQueueMergeMethod (ENUM): Method to use when merging changes from queued pull requests.
type MergeQueueMergeMethod string

// MergeQueueMergeMethod_MERGE: Merge commit.
const MergeQueueMergeMethod_MERGE MergeQueueMergeMethod = "MERGE"

// MergeQueueMergeMethod_SQUASH: Squash and merge.
const MergeQueueMergeMethod_SQUASH MergeQueueMergeMethod = "SQUASH"

// MergeQueueMergeMethod_REBASE: Rebase and merge.
const MergeQueueMergeMethod_REBASE MergeQueueMergeMethod = "REBASE"

// MergeQueueMergingStrategy (ENUM): The possible merging strategies for a merge queue.
type MergeQueueMergingStrategy string

// MergeQueueMergingStrategy_ALLGREEN: Entries only allowed to merge if they are passing.
const MergeQueueMergingStrategy_ALLGREEN MergeQueueMergingStrategy = "ALLGREEN"

// MergeQueueMergingStrategy_HEADGREEN: Failing entries are allowed to merge if they are with a passing entry.
const MergeQueueMergingStrategy_HEADGREEN MergeQueueMergingStrategy = "HEADGREEN"

// MergeQueueParameters (OBJECT): Merges must be performed via a merge queue.
type MergeQueueParameters struct {
	// CheckResponseTimeoutMinutes: Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed.
	CheckResponseTimeoutMinutes int `json:"checkResponseTimeoutMinutes,omitempty"`

	// GroupingStrategy: When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
	GroupingStrategy MergeQueueGroupingStrategy `json:"groupingStrategy,omitempty"`

	// MaxEntriesToBuild: Limit the number of queued pull requests requesting checks and workflow runs at the same time.
	MaxEntriesToBuild int `json:"maxEntriesToBuild,omitempty"`

	// MaxEntriesToMerge: The maximum number of PRs that will be merged together in a group.
	MaxEntriesToMerge int `json:"maxEntriesToMerge,omitempty"`

	// MergeMethod: Method to use when merging changes from queued pull requests.
	MergeMethod MergeQueueMergeMethod `json:"mergeMethod,omitempty"`

	// MinEntriesToMerge: The minimum number of PRs that will be merged together in a group.
	MinEntriesToMerge int `json:"minEntriesToMerge,omitempty"`

	// MinEntriesToMergeWaitMinutes: The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
	MinEntriesToMergeWaitMinutes int `json:"minEntriesToMergeWaitMinutes,omitempty"`
}

func (x *MergeQueueParameters) GetCheckResponseTimeoutMinutes() int {
	return x.CheckResponseTimeoutMinutes
}
func (x *MergeQueueParameters) GetGroupingStrategy() MergeQueueGroupingStrategy {
	return x.GroupingStrategy
}
func (x *MergeQueueParameters) GetMaxEntriesToBuild() int             { return x.MaxEntriesToBuild }
func (x *MergeQueueParameters) GetMaxEntriesToMerge() int             { return x.MaxEntriesToMerge }
func (x *MergeQueueParameters) GetMergeMethod() MergeQueueMergeMethod { return x.MergeMethod }
func (x *MergeQueueParameters) GetMinEntriesToMerge() int             { return x.MinEntriesToMerge }
func (x *MergeQueueParameters) GetMinEntriesToMergeWaitMinutes() int {
	return x.MinEntriesToMergeWaitMinutes
}

// MergeQueueParametersInput (INPUT_OBJECT): Merges must be performed via a merge queue.
type MergeQueueParametersInput struct {
	// CheckResponseTimeoutMinutes: Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed.
	//
	// GraphQL type: Int!
	CheckResponseTimeoutMinutes int `json:"checkResponseTimeoutMinutes,omitempty"`

	// GroupingStrategy: When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
	//
	// GraphQL type: MergeQueueGroupingStrategy!
	GroupingStrategy MergeQueueGroupingStrategy `json:"groupingStrategy,omitempty"`

	// MaxEntriesToBuild: Limit the number of queued pull requests requesting checks and workflow runs at the same time.
	//
	// GraphQL type: Int!
	MaxEntriesToBuild int `json:"maxEntriesToBuild,omitempty"`

	// MaxEntriesToMerge: The maximum number of PRs that will be merged together in a group.
	//
	// GraphQL type: Int!
	MaxEntriesToMerge int `json:"maxEntriesToMerge,omitempty"`

	// MergeMethod: Method to use when merging changes from queued pull requests.
	//
	// GraphQL type: MergeQueueMergeMethod!
	MergeMethod MergeQueueMergeMethod `json:"mergeMethod,omitempty"`

	// MinEntriesToMerge: The minimum number of PRs that will be merged together in a group.
	//
	// GraphQL type: Int!
	MinEntriesToMerge int `json:"minEntriesToMerge,omitempty"`

	// MinEntriesToMergeWaitMinutes: The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
	//
	// GraphQL type: Int!
	MinEntriesToMergeWaitMinutes int `json:"minEntriesToMergeWaitMinutes,omitempty"`
}

// MergeStateStatus (ENUM): Detailed status information about a pull request merge.
type MergeStateStatus string

// MergeStateStatus_DIRTY: The merge commit cannot be cleanly created.
const MergeStateStatus_DIRTY MergeStateStatus = "DIRTY"

// MergeStateStatus_UNKNOWN: The state cannot currently be determined.
const MergeStateStatus_UNKNOWN MergeStateStatus = "UNKNOWN"

// MergeStateStatus_BLOCKED: The merge is blocked.
const MergeStateStatus_BLOCKED MergeStateStatus = "BLOCKED"

// MergeStateStatus_BEHIND: The head ref is out of date.
const MergeStateStatus_BEHIND MergeStateStatus = "BEHIND"

// MergeStateStatus_DRAFT: The merge is blocked due to the pull request being a draft.
const MergeStateStatus_DRAFT MergeStateStatus = "DRAFT"

// MergeStateStatus_UNSTABLE: Mergeable with non-passing commit status.
const MergeStateStatus_UNSTABLE MergeStateStatus = "UNSTABLE"

// MergeStateStatus_HAS_HOOKS: Mergeable with passing commit status and pre-receive hooks.
const MergeStateStatus_HAS_HOOKS MergeStateStatus = "HAS_HOOKS"

// MergeStateStatus_CLEAN: Mergeable and passing commit status.
const MergeStateStatus_CLEAN MergeStateStatus = "CLEAN"

// MergeableState (ENUM): Whether or not a PullRequest can be merged.
type MergeableState string

// MergeableState_MERGEABLE: The pull request can be merged.
const MergeableState_MERGEABLE MergeableState = "MERGEABLE"

// MergeableState_CONFLICTING: The pull request cannot be merged due to merge conflicts.
const MergeableState_CONFLICTING MergeableState = "CONFLICTING"

// MergeableState_UNKNOWN: The mergeability of the pull request is still being calculated.
const MergeableState_UNKNOWN MergeableState = "UNKNOWN"

// MergedEvent (OBJECT): Represents a 'merged' event on a given pull request.
type MergedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Commit: Identifies the commit associated with the `merge` event.
	Commit *Commit `json:"commit,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the MergedEvent object.
	Id ID `json:"id,omitempty"`

	// MergeRef: Identifies the Ref associated with the `merge` event.
	MergeRef *Ref `json:"mergeRef,omitempty"`

	// MergeRefName: Identifies the name of the Ref associated with the `merge` event.
	MergeRefName string `json:"mergeRefName,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ResourcePath: The HTTP path for this merged event.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this merged event.
	Url URI `json:"url,omitempty"`
}

func (x *MergedEvent) GetActor() Actor              { return x.Actor }
func (x *MergedEvent) GetCommit() *Commit           { return x.Commit }
func (x *MergedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *MergedEvent) GetId() ID                    { return x.Id }
func (x *MergedEvent) GetMergeRef() *Ref            { return x.MergeRef }
func (x *MergedEvent) GetMergeRefName() string      { return x.MergeRefName }
func (x *MergedEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *MergedEvent) GetResourcePath() URI         { return x.ResourcePath }
func (x *MergedEvent) GetUrl() URI                  { return x.Url }

// Migration (INTERFACE): Represents a GitHub Enterprise Importer (GEI) migration.
// Migration_Interface: Represents a GitHub Enterprise Importer (GEI) migration.
//
// Possible types:
//
//   - *RepositoryMigration
type Migration_Interface interface {
	isMigration()
	GetContinueOnError() bool
	GetCreatedAt() DateTime
	GetDatabaseId() string
	GetFailureReason() string
	GetId() ID
	GetMigrationLogUrl() URI
	GetMigrationSource() *MigrationSource
	GetRepositoryName() string
	GetSourceUrl() URI
	GetState() MigrationState
	GetWarningsCount() int
}

func (*RepositoryMigration) isMigration() {}

type Migration struct {
	Interface Migration_Interface
}

func (x *Migration) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Migration) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Migration", info.Typename)
	case "RepositoryMigration":
		x.Interface = new(RepositoryMigration)
	}
	return json.Unmarshal(js, x.Interface)
}

// MigrationSource (OBJECT): A GitHub Enterprise Importer (GEI) migration source.
type MigrationSource struct {
	// Id: The Node ID of the MigrationSource object.
	Id ID `json:"id,omitempty"`

	// Name: The migration source name.
	Name string `json:"name,omitempty"`

	// Type: The migration source type.
	Type MigrationSourceType `json:"type,omitempty"`

	// Url: The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	Url URI `json:"url,omitempty"`
}

func (x *MigrationSource) GetId() ID                    { return x.Id }
func (x *MigrationSource) GetName() string              { return x.Name }
func (x *MigrationSource) GetType() MigrationSourceType { return x.Type }
func (x *MigrationSource) GetUrl() URI                  { return x.Url }

// MigrationSourceType (ENUM): Represents the different GitHub Enterprise Importer (GEI) migration sources.
type MigrationSourceType string

// MigrationSourceType_AZURE_DEVOPS: An Azure DevOps migration source.
const MigrationSourceType_AZURE_DEVOPS MigrationSourceType = "AZURE_DEVOPS"

// MigrationSourceType_BITBUCKET_SERVER: A Bitbucket Server migration source.
const MigrationSourceType_BITBUCKET_SERVER MigrationSourceType = "BITBUCKET_SERVER"

// MigrationSourceType_GITHUB_ARCHIVE: A GitHub Migration API source.
const MigrationSourceType_GITHUB_ARCHIVE MigrationSourceType = "GITHUB_ARCHIVE"

// MigrationState (ENUM): The GitHub Enterprise Importer (GEI) migration state.
type MigrationState string

// MigrationState_NOT_STARTED: The migration has not started.
const MigrationState_NOT_STARTED MigrationState = "NOT_STARTED"

// MigrationState_QUEUED: The migration has been queued.
const MigrationState_QUEUED MigrationState = "QUEUED"

// MigrationState_IN_PROGRESS: The migration is in progress.
const MigrationState_IN_PROGRESS MigrationState = "IN_PROGRESS"

// MigrationState_SUCCEEDED: The migration has succeeded.
const MigrationState_SUCCEEDED MigrationState = "SUCCEEDED"

// MigrationState_FAILED: The migration has failed.
const MigrationState_FAILED MigrationState = "FAILED"

// MigrationState_PENDING_VALIDATION: The migration needs to have its credentials validated.
const MigrationState_PENDING_VALIDATION MigrationState = "PENDING_VALIDATION"

// MigrationState_FAILED_VALIDATION: The migration has invalid credentials.
const MigrationState_FAILED_VALIDATION MigrationState = "FAILED_VALIDATION"

// Milestone (OBJECT): Represents a Milestone object on a given repository.
type Milestone struct {
	// Closed: Indicates if the object is closed (definition of closed may depend on type).
	Closed bool `json:"closed,omitempty"`

	// ClosedAt: Identifies the date and time when the object was closed.
	ClosedAt DateTime `json:"closedAt,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: Identifies the actor who created the milestone.
	Creator Actor `json:"creator,omitempty"`

	// Description: Identifies the description of the milestone.
	Description string `json:"description,omitempty"`

	// DueOn: Identifies the due date of the milestone.
	DueOn DateTime `json:"dueOn,omitempty"`

	// Id: The Node ID of the Milestone object.
	Id ID `json:"id,omitempty"`

	// Issues: A list of issues associated with the milestone.
	//
	// Query arguments:
	//   - orderBy IssueOrder
	//   - labels [String!]
	//   - states [IssueState!]
	//   - filterBy IssueFilters
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Issues *IssueConnection `json:"issues,omitempty"`

	// Number: Identifies the number of the milestone.
	Number int `json:"number,omitempty"`

	// ProgressPercentage: Identifies the percentage complete for the milestone.
	ProgressPercentage float64 `json:"progressPercentage,omitempty"`

	// PullRequests: A list of pull requests associated with the milestone.
	//
	// Query arguments:
	//   - states [PullRequestState!]
	//   - labels [String!]
	//   - headRefName String
	//   - baseRefName String
	//   - orderBy IssueOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`

	// Repository: The repository associated with this milestone.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this milestone.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// State: Identifies the state of the milestone.
	State MilestoneState `json:"state,omitempty"`

	// Title: Identifies the title of the milestone.
	Title string `json:"title,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this milestone.
	Url URI `json:"url,omitempty"`

	// ViewerCanClose: Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose,omitempty"`

	// ViewerCanReopen: Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen,omitempty"`
}

func (x *Milestone) GetClosed() bool                         { return x.Closed }
func (x *Milestone) GetClosedAt() DateTime                   { return x.ClosedAt }
func (x *Milestone) GetCreatedAt() DateTime                  { return x.CreatedAt }
func (x *Milestone) GetCreator() Actor                       { return x.Creator }
func (x *Milestone) GetDescription() string                  { return x.Description }
func (x *Milestone) GetDueOn() DateTime                      { return x.DueOn }
func (x *Milestone) GetId() ID                               { return x.Id }
func (x *Milestone) GetIssues() *IssueConnection             { return x.Issues }
func (x *Milestone) GetNumber() int                          { return x.Number }
func (x *Milestone) GetProgressPercentage() float64          { return x.ProgressPercentage }
func (x *Milestone) GetPullRequests() *PullRequestConnection { return x.PullRequests }
func (x *Milestone) GetRepository() *Repository              { return x.Repository }
func (x *Milestone) GetResourcePath() URI                    { return x.ResourcePath }
func (x *Milestone) GetState() MilestoneState                { return x.State }
func (x *Milestone) GetTitle() string                        { return x.Title }
func (x *Milestone) GetUpdatedAt() DateTime                  { return x.UpdatedAt }
func (x *Milestone) GetUrl() URI                             { return x.Url }
func (x *Milestone) GetViewerCanClose() bool                 { return x.ViewerCanClose }
func (x *Milestone) GetViewerCanReopen() bool                { return x.ViewerCanReopen }

// MilestoneConnection (OBJECT): The connection type for Milestone.
type MilestoneConnection struct {
	// Edges: A list of edges.
	Edges []*MilestoneEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Milestone `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *MilestoneConnection) GetEdges() []*MilestoneEdge { return x.Edges }
func (x *MilestoneConnection) GetNodes() []*Milestone     { return x.Nodes }
func (x *MilestoneConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *MilestoneConnection) GetTotalCount() int         { return x.TotalCount }

// MilestoneEdge (OBJECT): An edge in a connection.
type MilestoneEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Milestone `json:"node,omitempty"`
}

func (x *MilestoneEdge) GetCursor() string   { return x.Cursor }
func (x *MilestoneEdge) GetNode() *Milestone { return x.Node }

// MilestoneItem (UNION): Types that can be inside a Milestone.
// MilestoneItem_Interface: Types that can be inside a Milestone.
//
// Possible types:
//
//   - *Issue
//   - *PullRequest
type MilestoneItem_Interface interface {
	isMilestoneItem()
}

func (*Issue) isMilestoneItem()       {}
func (*PullRequest) isMilestoneItem() {}

type MilestoneItem struct {
	Interface MilestoneItem_Interface
}

func (x *MilestoneItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *MilestoneItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for MilestoneItem", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// MilestoneOrder (INPUT_OBJECT): Ordering options for milestone connections.
type MilestoneOrder struct {
	// Field: The field to order milestones by.
	//
	// GraphQL type: MilestoneOrderField!
	Field MilestoneOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// MilestoneOrderField (ENUM): Properties by which milestone connections can be ordered.
type MilestoneOrderField string

// MilestoneOrderField_DUE_DATE: Order milestones by when they are due.
const MilestoneOrderField_DUE_DATE MilestoneOrderField = "DUE_DATE"

// MilestoneOrderField_CREATED_AT: Order milestones by when they were created.
const MilestoneOrderField_CREATED_AT MilestoneOrderField = "CREATED_AT"

// MilestoneOrderField_UPDATED_AT: Order milestones by when they were last updated.
const MilestoneOrderField_UPDATED_AT MilestoneOrderField = "UPDATED_AT"

// MilestoneOrderField_NUMBER: Order milestones by their number.
const MilestoneOrderField_NUMBER MilestoneOrderField = "NUMBER"

// MilestoneState (ENUM): The possible states of a milestone.
type MilestoneState string

// MilestoneState_OPEN: A milestone that is still open.
const MilestoneState_OPEN MilestoneState = "OPEN"

// MilestoneState_CLOSED: A milestone that has been closed.
const MilestoneState_CLOSED MilestoneState = "CLOSED"

// MilestonedEvent (OBJECT): Represents a 'milestoned' event on a given issue or pull request.
type MilestonedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the MilestonedEvent object.
	Id ID `json:"id,omitempty"`

	// MilestoneTitle: Identifies the milestone title associated with the 'milestoned' event.
	MilestoneTitle string `json:"milestoneTitle,omitempty"`

	// Subject: Object referenced by event.
	Subject MilestoneItem `json:"subject,omitempty"`
}

func (x *MilestonedEvent) GetActor() Actor           { return x.Actor }
func (x *MilestonedEvent) GetCreatedAt() DateTime    { return x.CreatedAt }
func (x *MilestonedEvent) GetId() ID                 { return x.Id }
func (x *MilestonedEvent) GetMilestoneTitle() string { return x.MilestoneTitle }
func (x *MilestonedEvent) GetSubject() MilestoneItem { return x.Subject }

// Minimizable (INTERFACE): Entities that can be minimized.
// Minimizable_Interface: Entities that can be minimized.
//
// Possible types:
//
//   - *CommitComment
//   - *DiscussionComment
//   - *GistComment
//   - *IssueComment
//   - *PullRequestReview
//   - *PullRequestReviewComment
type Minimizable_Interface interface {
	isMinimizable()
	GetIsMinimized() bool
	GetMinimizedReason() string
	GetViewerCanMinimize() bool
}

func (*CommitComment) isMinimizable()            {}
func (*DiscussionComment) isMinimizable()        {}
func (*GistComment) isMinimizable()              {}
func (*IssueComment) isMinimizable()             {}
func (*PullRequestReview) isMinimizable()        {}
func (*PullRequestReviewComment) isMinimizable() {}

type Minimizable struct {
	Interface Minimizable_Interface
}

func (x *Minimizable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Minimizable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Minimizable", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "GistComment":
		x.Interface = new(GistComment)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// MinimizeCommentInput (INPUT_OBJECT): Autogenerated input type of MinimizeComment.
type MinimizeCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the subject to modify.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`

	// Classifier: The classification of comment.
	//
	// GraphQL type: ReportedContentClassifiers!
	Classifier ReportedContentClassifiers `json:"classifier,omitempty"`
}

// MinimizeCommentPayload (OBJECT): Autogenerated return type of MinimizeComment.
type MinimizeCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// MinimizedComment: The comment that was minimized.
	MinimizedComment Minimizable `json:"minimizedComment,omitempty"`
}

func (x *MinimizeCommentPayload) GetClientMutationId() string      { return x.ClientMutationId }
func (x *MinimizeCommentPayload) GetMinimizedComment() Minimizable { return x.MinimizedComment }

// MoveProjectCardInput (INPUT_OBJECT): Autogenerated input type of MoveProjectCard.
type MoveProjectCardInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// CardId: The id of the card to move.
	//
	// GraphQL type: ID!
	CardId ID `json:"cardId,omitempty"`

	// ColumnId: The id of the column to move it into.
	//
	// GraphQL type: ID!
	ColumnId ID `json:"columnId,omitempty"`

	// AfterCardId: Place the new card after the card with this id. Pass null to place it at the top.
	//
	// GraphQL type: ID
	AfterCardId ID `json:"afterCardId,omitempty"`
}

// MoveProjectCardPayload (OBJECT): Autogenerated return type of MoveProjectCard.
type MoveProjectCardPayload struct {
	// CardEdge: The new edge of the moved card.
	CardEdge *ProjectCardEdge `json:"cardEdge,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *MoveProjectCardPayload) GetCardEdge() *ProjectCardEdge { return x.CardEdge }
func (x *MoveProjectCardPayload) GetClientMutationId() string   { return x.ClientMutationId }

// MoveProjectColumnInput (INPUT_OBJECT): Autogenerated input type of MoveProjectColumn.
type MoveProjectColumnInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ColumnId: The id of the column to move.
	//
	// GraphQL type: ID!
	ColumnId ID `json:"columnId,omitempty"`

	// AfterColumnId: Place the new column after the column with this id. Pass null to place it at the front.
	//
	// GraphQL type: ID
	AfterColumnId ID `json:"afterColumnId,omitempty"`
}

// MoveProjectColumnPayload (OBJECT): Autogenerated return type of MoveProjectColumn.
type MoveProjectColumnPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ColumnEdge: The new edge of the moved column.
	ColumnEdge *ProjectColumnEdge `json:"columnEdge,omitempty"`
}

func (x *MoveProjectColumnPayload) GetClientMutationId() string       { return x.ClientMutationId }
func (x *MoveProjectColumnPayload) GetColumnEdge() *ProjectColumnEdge { return x.ColumnEdge }

// MovedColumnsInProjectEvent (OBJECT): Represents a 'moved_columns_in_project' event on a given issue or pull request.
type MovedColumnsInProjectEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the MovedColumnsInProjectEvent object.
	Id ID `json:"id,omitempty"`

	// PreviousProjectColumnName: Column name the issue or pull request was moved from.
	//
	// Deprecated: Column name the issue or pull request was moved from.
	PreviousProjectColumnName string `json:"previousProjectColumnName,omitempty"`

	// Project: Project referenced by event.
	Project *Project `json:"project,omitempty"`

	// ProjectCard: Project card referenced by this project event.
	//
	// Deprecated: Project card referenced by this project event.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`

	// ProjectColumnName: Column name the issue or pull request was moved to.
	//
	// Deprecated: Column name the issue or pull request was moved to.
	ProjectColumnName string `json:"projectColumnName,omitempty"`
}

func (x *MovedColumnsInProjectEvent) GetActor() Actor        { return x.Actor }
func (x *MovedColumnsInProjectEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *MovedColumnsInProjectEvent) GetDatabaseId() int     { return x.DatabaseId }
func (x *MovedColumnsInProjectEvent) GetId() ID              { return x.Id }
func (x *MovedColumnsInProjectEvent) GetPreviousProjectColumnName() string {
	return x.PreviousProjectColumnName
}
func (x *MovedColumnsInProjectEvent) GetProject() *Project         { return x.Project }
func (x *MovedColumnsInProjectEvent) GetProjectCard() *ProjectCard { return x.ProjectCard }
func (x *MovedColumnsInProjectEvent) GetProjectColumnName() string { return x.ProjectColumnName }

// Mutation (OBJECT): The root query for implementing GraphQL mutations.
type Mutation struct {
	// AbortQueuedMigrations: Clear all of a customer's queued migrations.
	//
	// Query arguments:
	//   - input AbortQueuedMigrationsInput!
	AbortQueuedMigrations *AbortQueuedMigrationsPayload `json:"abortQueuedMigrations,omitempty"`

	// AbortRepositoryMigration: Abort a repository migration queued or in progress.
	//
	// Query arguments:
	//   - input AbortRepositoryMigrationInput!
	AbortRepositoryMigration *AbortRepositoryMigrationPayload `json:"abortRepositoryMigration,omitempty"`

	// AcceptEnterpriseAdministratorInvitation: Accepts a pending invitation for a user to become an administrator of an enterprise.
	//
	// Query arguments:
	//   - input AcceptEnterpriseAdministratorInvitationInput!
	AcceptEnterpriseAdministratorInvitation *AcceptEnterpriseAdministratorInvitationPayload `json:"acceptEnterpriseAdministratorInvitation,omitempty"`

	// AcceptEnterpriseMemberInvitation: Accepts a pending invitation for a user to become an unaffiliated member of an enterprise.
	//
	// Query arguments:
	//   - input AcceptEnterpriseMemberInvitationInput!
	AcceptEnterpriseMemberInvitation *AcceptEnterpriseMemberInvitationPayload `json:"acceptEnterpriseMemberInvitation,omitempty"`

	// AcceptTopicSuggestion: Applies a suggested topic to the repository.
	//
	// Query arguments:
	//   - input AcceptTopicSuggestionInput!
	AcceptTopicSuggestion *AcceptTopicSuggestionPayload `json:"acceptTopicSuggestion,omitempty"`

	// AccessUserNamespaceRepository: Access user namespace repository for a temporary duration.
	//
	// Query arguments:
	//   - input AccessUserNamespaceRepositoryInput!
	AccessUserNamespaceRepository *AccessUserNamespaceRepositoryPayload `json:"accessUserNamespaceRepository,omitempty"`

	// AddAssigneesToAssignable: Adds assignees to an assignable object.
	//
	// Query arguments:
	//   - input AddAssigneesToAssignableInput!
	AddAssigneesToAssignable *AddAssigneesToAssignablePayload `json:"addAssigneesToAssignable,omitempty"`

	// AddComment: Adds a comment to an Issue or Pull Request.
	//
	// Query arguments:
	//   - input AddCommentInput!
	AddComment *AddCommentPayload `json:"addComment,omitempty"`

	// AddDiscussionComment: Adds a comment to a Discussion, possibly as a reply to another comment.
	//
	// Query arguments:
	//   - input AddDiscussionCommentInput!
	AddDiscussionComment *AddDiscussionCommentPayload `json:"addDiscussionComment,omitempty"`

	// AddDiscussionPollVote: Vote for an option in a discussion poll.
	//
	// Query arguments:
	//   - input AddDiscussionPollVoteInput!
	AddDiscussionPollVote *AddDiscussionPollVotePayload `json:"addDiscussionPollVote,omitempty"`

	// AddEnterpriseOrganizationMember: Adds enterprise members to an organization within the enterprise.
	//
	// Query arguments:
	//   - input AddEnterpriseOrganizationMemberInput!
	AddEnterpriseOrganizationMember *AddEnterpriseOrganizationMemberPayload `json:"addEnterpriseOrganizationMember,omitempty"`

	// AddEnterpriseSupportEntitlement: Adds a support entitlement to an enterprise member.
	//
	// Query arguments:
	//   - input AddEnterpriseSupportEntitlementInput!
	AddEnterpriseSupportEntitlement *AddEnterpriseSupportEntitlementPayload `json:"addEnterpriseSupportEntitlement,omitempty"`

	// AddLabelsToLabelable: Adds labels to a labelable object.
	//
	// Query arguments:
	//   - input AddLabelsToLabelableInput!
	AddLabelsToLabelable *AddLabelsToLabelablePayload `json:"addLabelsToLabelable,omitempty"`

	// AddProjectCard: Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
	//
	// Deprecated: Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
	//
	// Query arguments:
	//   - input AddProjectCardInput!
	AddProjectCard *AddProjectCardPayload `json:"addProjectCard,omitempty"`

	// AddProjectColumn: Adds a column to a Project.
	//
	// Deprecated: Adds a column to a Project.
	//
	// Query arguments:
	//   - input AddProjectColumnInput!
	AddProjectColumn *AddProjectColumnPayload `json:"addProjectColumn,omitempty"`

	// AddProjectV2DraftIssue: Creates a new draft issue and add it to a Project.
	//
	// Query arguments:
	//   - input AddProjectV2DraftIssueInput!
	AddProjectV2DraftIssue *AddProjectV2DraftIssuePayload `json:"addProjectV2DraftIssue,omitempty"`

	// AddProjectV2ItemById: Links an existing content instance to a Project.
	//
	// Query arguments:
	//   - input AddProjectV2ItemByIdInput!
	AddProjectV2ItemById *AddProjectV2ItemByIdPayload `json:"addProjectV2ItemById,omitempty"`

	// AddPullRequestReview: Adds a review to a Pull Request.
	//
	// Query arguments:
	//   - input AddPullRequestReviewInput!
	AddPullRequestReview *AddPullRequestReviewPayload `json:"addPullRequestReview,omitempty"`

	// AddPullRequestReviewComment: Adds a comment to a review.
	//
	// Query arguments:
	//   - input AddPullRequestReviewCommentInput!
	AddPullRequestReviewComment *AddPullRequestReviewCommentPayload `json:"addPullRequestReviewComment,omitempty"`

	// AddPullRequestReviewThread: Adds a new thread to a pending Pull Request Review.
	//
	// Query arguments:
	//   - input AddPullRequestReviewThreadInput!
	AddPullRequestReviewThread *AddPullRequestReviewThreadPayload `json:"addPullRequestReviewThread,omitempty"`

	// AddPullRequestReviewThreadReply: Adds a reply to an existing Pull Request Review Thread.
	//
	// Query arguments:
	//   - input AddPullRequestReviewThreadReplyInput!
	AddPullRequestReviewThreadReply *AddPullRequestReviewThreadReplyPayload `json:"addPullRequestReviewThreadReply,omitempty"`

	// AddReaction: Adds a reaction to a subject.
	//
	// Query arguments:
	//   - input AddReactionInput!
	AddReaction *AddReactionPayload `json:"addReaction,omitempty"`

	// AddStar: Adds a star to a Starrable.
	//
	// Query arguments:
	//   - input AddStarInput!
	AddStar *AddStarPayload `json:"addStar,omitempty"`

	// AddSubIssue: Adds a sub-issue to a given issue.
	//
	// Query arguments:
	//   - input AddSubIssueInput!
	AddSubIssue *AddSubIssuePayload `json:"addSubIssue,omitempty"`

	// AddUpvote: Add an upvote to a discussion or discussion comment.
	//
	// Query arguments:
	//   - input AddUpvoteInput!
	AddUpvote *AddUpvotePayload `json:"addUpvote,omitempty"`

	// AddVerifiableDomain: Adds a verifiable domain to an owning account.
	//
	// Query arguments:
	//   - input AddVerifiableDomainInput!
	AddVerifiableDomain *AddVerifiableDomainPayload `json:"addVerifiableDomain,omitempty"`

	// ApproveDeployments: Approve all pending deployments under one or more environments.
	//
	// Query arguments:
	//   - input ApproveDeploymentsInput!
	ApproveDeployments *ApproveDeploymentsPayload `json:"approveDeployments,omitempty"`

	// ApproveVerifiableDomain: Approve a verifiable domain for notification delivery.
	//
	// Query arguments:
	//   - input ApproveVerifiableDomainInput!
	ApproveVerifiableDomain *ApproveVerifiableDomainPayload `json:"approveVerifiableDomain,omitempty"`

	// ArchiveProjectV2Item: Archives a ProjectV2Item.
	//
	// Query arguments:
	//   - input ArchiveProjectV2ItemInput!
	ArchiveProjectV2Item *ArchiveProjectV2ItemPayload `json:"archiveProjectV2Item,omitempty"`

	// ArchiveRepository: Marks a repository as archived.
	//
	// Query arguments:
	//   - input ArchiveRepositoryInput!
	ArchiveRepository *ArchiveRepositoryPayload `json:"archiveRepository,omitempty"`

	// CancelEnterpriseAdminInvitation: Cancels a pending invitation for an administrator to join an enterprise.
	//
	// Query arguments:
	//   - input CancelEnterpriseAdminInvitationInput!
	CancelEnterpriseAdminInvitation *CancelEnterpriseAdminInvitationPayload `json:"cancelEnterpriseAdminInvitation,omitempty"`

	// CancelEnterpriseMemberInvitation: Cancels a pending invitation for an unaffiliated member to join an enterprise.
	//
	// Query arguments:
	//   - input CancelEnterpriseMemberInvitationInput!
	CancelEnterpriseMemberInvitation *CancelEnterpriseMemberInvitationPayload `json:"cancelEnterpriseMemberInvitation,omitempty"`

	// CancelSponsorship: Cancel an active sponsorship.
	//
	// Query arguments:
	//   - input CancelSponsorshipInput!
	CancelSponsorship *CancelSponsorshipPayload `json:"cancelSponsorship,omitempty"`

	// ChangeUserStatus: Update your status on GitHub.
	//
	// Query arguments:
	//   - input ChangeUserStatusInput!
	ChangeUserStatus *ChangeUserStatusPayload `json:"changeUserStatus,omitempty"`

	// ClearLabelsFromLabelable: Clears all labels from a labelable object.
	//
	// Query arguments:
	//   - input ClearLabelsFromLabelableInput!
	ClearLabelsFromLabelable *ClearLabelsFromLabelablePayload `json:"clearLabelsFromLabelable,omitempty"`

	// ClearProjectV2ItemFieldValue: This mutation clears the value of a field for an item in a Project. Currently only text, number, date, assignees, labels, single-select, iteration and milestone fields are supported.
	//
	// Query arguments:
	//   - input ClearProjectV2ItemFieldValueInput!
	ClearProjectV2ItemFieldValue *ClearProjectV2ItemFieldValuePayload `json:"clearProjectV2ItemFieldValue,omitempty"`

	// CloneProject: Creates a new project by cloning configuration from an existing project.
	//
	// Deprecated: Creates a new project by cloning configuration from an existing project.
	//
	// Query arguments:
	//   - input CloneProjectInput!
	CloneProject *CloneProjectPayload `json:"cloneProject,omitempty"`

	// CloneTemplateRepository: Create a new repository with the same files and directory structure as a template repository.
	//
	// Query arguments:
	//   - input CloneTemplateRepositoryInput!
	CloneTemplateRepository *CloneTemplateRepositoryPayload `json:"cloneTemplateRepository,omitempty"`

	// CloseDiscussion: Close a discussion.
	//
	// Query arguments:
	//   - input CloseDiscussionInput!
	CloseDiscussion *CloseDiscussionPayload `json:"closeDiscussion,omitempty"`

	// CloseIssue: Close an issue.
	//
	// Query arguments:
	//   - input CloseIssueInput!
	CloseIssue *CloseIssuePayload `json:"closeIssue,omitempty"`

	// ClosePullRequest: Close a pull request.
	//
	// Query arguments:
	//   - input ClosePullRequestInput!
	ClosePullRequest *ClosePullRequestPayload `json:"closePullRequest,omitempty"`

	// ConvertProjectCardNoteToIssue: Convert a project note card to one associated with a newly created issue.
	//
	// Deprecated: Convert a project note card to one associated with a newly created issue.
	//
	// Query arguments:
	//   - input ConvertProjectCardNoteToIssueInput!
	ConvertProjectCardNoteToIssue *ConvertProjectCardNoteToIssuePayload `json:"convertProjectCardNoteToIssue,omitempty"`

	// ConvertProjectV2DraftIssueItemToIssue: Converts a projectV2 draft issue item to an issue.
	//
	// Query arguments:
	//   - input ConvertProjectV2DraftIssueItemToIssueInput!
	ConvertProjectV2DraftIssueItemToIssue *ConvertProjectV2DraftIssueItemToIssuePayload `json:"convertProjectV2DraftIssueItemToIssue,omitempty"`

	// ConvertPullRequestToDraft: Converts a pull request to draft.
	//
	// Query arguments:
	//   - input ConvertPullRequestToDraftInput!
	ConvertPullRequestToDraft *ConvertPullRequestToDraftPayload `json:"convertPullRequestToDraft,omitempty"`

	// CopyProjectV2: Copy a project.
	//
	// Query arguments:
	//   - input CopyProjectV2Input!
	CopyProjectV2 *CopyProjectV2Payload `json:"copyProjectV2,omitempty"`

	// CreateAttributionInvitation: Invites a user to claim reattributable data.
	//
	// Query arguments:
	//   - input CreateAttributionInvitationInput!
	CreateAttributionInvitation *CreateAttributionInvitationPayload `json:"createAttributionInvitation,omitempty"`

	// CreateBranchProtectionRule: Create a new branch protection rule.
	//
	// Query arguments:
	//   - input CreateBranchProtectionRuleInput!
	CreateBranchProtectionRule *CreateBranchProtectionRulePayload `json:"createBranchProtectionRule,omitempty"`

	// CreateCheckRun: Create a check run.
	//
	// Query arguments:
	//   - input CreateCheckRunInput!
	CreateCheckRun *CreateCheckRunPayload `json:"createCheckRun,omitempty"`

	// CreateCheckSuite: Create a check suite.
	//
	// Query arguments:
	//   - input CreateCheckSuiteInput!
	CreateCheckSuite *CreateCheckSuitePayload `json:"createCheckSuite,omitempty"`

	// CreateCommitOnBranch: Appends a commit to the given branch as the authenticated user.
	//
	// This mutation creates a commit whose parent is the HEAD of the provided
	// branch and also updates that branch to point to the new commit.
	// It can be thought of as similar to `git commit`.
	//
	// ### Locating a Branch
	//
	// Commits are appended to a `branch` of type `Ref`.
	// This must refer to a git branch (i.e.  the fully qualified path must
	// begin with `refs/heads/`, although including this prefix is optional.
	//
	// Callers may specify the `branch` to commit to either by its global node
	// ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
	// more details see the documentation for `CommittableBranch`.
	//
	// ### Describing Changes
	//
	// `fileChanges` are specified as a `FilesChanges` object describing
	// `FileAdditions` and `FileDeletions`.
	//
	// Please see the documentation for `FileChanges` for more information on
	// how to use this argument to describe any set of file changes.
	//
	// ### Authorship
	//
	// Similar to the web commit interface, this mutation does not support
	// specifying the author or committer of the commit and will not add
	// support for this in the future.
	//
	// A commit created by a successful execution of this mutation will be
	// authored by the owner of the credential which authenticates the API
	// request.  The committer will be identical to that of commits authored
	// using the web interface.
	//
	// If you need full control over author and committer information, please
	// use the Git Database REST API instead.
	//
	// ### Commit Signing
	//
	// Commits made using this mutation are automatically signed by GitHub if
	// supported and will be marked as verified in the user interface.
	// .
	//
	// Query arguments:
	//   - input CreateCommitOnBranchInput!
	CreateCommitOnBranch *CreateCommitOnBranchPayload `json:"createCommitOnBranch,omitempty"`

	// CreateDeployment: Creates a new deployment event.
	//
	// Query arguments:
	//   - input CreateDeploymentInput!
	CreateDeployment *CreateDeploymentPayload `json:"createDeployment,omitempty"`

	// CreateDeploymentStatus: Create a deployment status.
	//
	// Query arguments:
	//   - input CreateDeploymentStatusInput!
	CreateDeploymentStatus *CreateDeploymentStatusPayload `json:"createDeploymentStatus,omitempty"`

	// CreateDiscussion: Create a discussion.
	//
	// Query arguments:
	//   - input CreateDiscussionInput!
	CreateDiscussion *CreateDiscussionPayload `json:"createDiscussion,omitempty"`

	// CreateEnterpriseOrganization: Creates an organization as part of an enterprise account. A personal access token used to create an organization is implicitly permitted to update the organization it created, if the organization is part of an enterprise that has SAML enabled or uses Enterprise Managed Users. If the organization is not part of such an enterprise, and instead has SAML enabled for it individually, the token will then require SAML authorization to continue working against that organization.
	//
	// Query arguments:
	//   - input CreateEnterpriseOrganizationInput!
	CreateEnterpriseOrganization *CreateEnterpriseOrganizationPayload `json:"createEnterpriseOrganization,omitempty"`

	// CreateEnvironment: Creates an environment or simply returns it if already exists.
	//
	// Query arguments:
	//   - input CreateEnvironmentInput!
	CreateEnvironment *CreateEnvironmentPayload `json:"createEnvironment,omitempty"`

	// CreateIpAllowListEntry: Creates a new IP allow list entry.
	//
	// Query arguments:
	//   - input CreateIpAllowListEntryInput!
	CreateIpAllowListEntry *CreateIpAllowListEntryPayload `json:"createIpAllowListEntry,omitempty"`

	// CreateIssue: Creates a new issue.
	//
	// Query arguments:
	//   - input CreateIssueInput!
	CreateIssue *CreateIssuePayload `json:"createIssue,omitempty"`

	// CreateLabel: Creates a new label.
	//
	// Query arguments:
	//   - input CreateLabelInput!
	CreateLabel *CreateLabelPayload `json:"createLabel,omitempty"`

	// CreateLinkedBranch: Create a branch linked to an issue.
	//
	// Query arguments:
	//   - input CreateLinkedBranchInput!
	CreateLinkedBranch *CreateLinkedBranchPayload `json:"createLinkedBranch,omitempty"`

	// CreateMigrationSource: Creates a GitHub Enterprise Importer (GEI) migration source.
	//
	// Query arguments:
	//   - input CreateMigrationSourceInput!
	CreateMigrationSource *CreateMigrationSourcePayload `json:"createMigrationSource,omitempty"`

	// CreateProject: Creates a new project.
	//
	// Deprecated: Creates a new project.
	//
	// Query arguments:
	//   - input CreateProjectInput!
	CreateProject *CreateProjectPayload `json:"createProject,omitempty"`

	// CreateProjectV2: Creates a new project.
	//
	// Query arguments:
	//   - input CreateProjectV2Input!
	CreateProjectV2 *CreateProjectV2Payload `json:"createProjectV2,omitempty"`

	// CreateProjectV2Field: Create a new project field.
	//
	// Query arguments:
	//   - input CreateProjectV2FieldInput!
	CreateProjectV2Field *CreateProjectV2FieldPayload `json:"createProjectV2Field,omitempty"`

	// CreateProjectV2StatusUpdate: Creates a status update within a Project.
	//
	// Query arguments:
	//   - input CreateProjectV2StatusUpdateInput!
	CreateProjectV2StatusUpdate *CreateProjectV2StatusUpdatePayload `json:"createProjectV2StatusUpdate,omitempty"`

	// CreatePullRequest: Create a new pull request.
	//
	// Query arguments:
	//   - input CreatePullRequestInput!
	CreatePullRequest *CreatePullRequestPayload `json:"createPullRequest,omitempty"`

	// CreateRef: Create a new Git Ref.
	//
	// Query arguments:
	//   - input CreateRefInput!
	CreateRef *CreateRefPayload `json:"createRef,omitempty"`

	// CreateRepository: Create a new repository.
	//
	// Query arguments:
	//   - input CreateRepositoryInput!
	CreateRepository *CreateRepositoryPayload `json:"createRepository,omitempty"`

	// CreateRepositoryRuleset: Create a repository ruleset.
	//
	// Query arguments:
	//   - input CreateRepositoryRulesetInput!
	CreateRepositoryRuleset *CreateRepositoryRulesetPayload `json:"createRepositoryRuleset,omitempty"`

	// CreateSponsorsListing: Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
	//
	// Query arguments:
	//   - input CreateSponsorsListingInput!
	CreateSponsorsListing *CreateSponsorsListingPayload `json:"createSponsorsListing,omitempty"`

	// CreateSponsorsTier: Create a new payment tier for your GitHub Sponsors profile.
	//
	// Query arguments:
	//   - input CreateSponsorsTierInput!
	CreateSponsorsTier *CreateSponsorsTierPayload `json:"createSponsorsTier,omitempty"`

	// CreateSponsorship: Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
	//
	// Query arguments:
	//   - input CreateSponsorshipInput!
	CreateSponsorship *CreateSponsorshipPayload `json:"createSponsorship,omitempty"`

	// CreateSponsorships: Make many sponsorships for different sponsorable users or organizations at once. Can only sponsor those who have a public GitHub Sponsors profile.
	//
	// Query arguments:
	//   - input CreateSponsorshipsInput!
	CreateSponsorships *CreateSponsorshipsPayload `json:"createSponsorships,omitempty"`

	// CreateTeamDiscussion: Creates a new team discussion.
	//
	// Query arguments:
	//   - input CreateTeamDiscussionInput!
	CreateTeamDiscussion *CreateTeamDiscussionPayload `json:"createTeamDiscussion,omitempty"`

	// CreateTeamDiscussionComment: Creates a new team discussion comment.
	//
	// Query arguments:
	//   - input CreateTeamDiscussionCommentInput!
	CreateTeamDiscussionComment *CreateTeamDiscussionCommentPayload `json:"createTeamDiscussionComment,omitempty"`

	// CreateUserList: Creates a new user list.
	//
	// Query arguments:
	//   - input CreateUserListInput!
	CreateUserList *CreateUserListPayload `json:"createUserList,omitempty"`

	// DeclineTopicSuggestion: Rejects a suggested topic for the repository.
	//
	// Query arguments:
	//   - input DeclineTopicSuggestionInput!
	DeclineTopicSuggestion *DeclineTopicSuggestionPayload `json:"declineTopicSuggestion,omitempty"`

	// DeleteBranchProtectionRule: Delete a branch protection rule.
	//
	// Query arguments:
	//   - input DeleteBranchProtectionRuleInput!
	DeleteBranchProtectionRule *DeleteBranchProtectionRulePayload `json:"deleteBranchProtectionRule,omitempty"`

	// DeleteDeployment: Deletes a deployment.
	//
	// Query arguments:
	//   - input DeleteDeploymentInput!
	DeleteDeployment *DeleteDeploymentPayload `json:"deleteDeployment,omitempty"`

	// DeleteDiscussion: Delete a discussion and all of its replies.
	//
	// Query arguments:
	//   - input DeleteDiscussionInput!
	DeleteDiscussion *DeleteDiscussionPayload `json:"deleteDiscussion,omitempty"`

	// DeleteDiscussionComment: Delete a discussion comment. If it has replies, wipe it instead.
	//
	// Query arguments:
	//   - input DeleteDiscussionCommentInput!
	DeleteDiscussionComment *DeleteDiscussionCommentPayload `json:"deleteDiscussionComment,omitempty"`

	// DeleteEnvironment: Deletes an environment.
	//
	// Query arguments:
	//   - input DeleteEnvironmentInput!
	DeleteEnvironment *DeleteEnvironmentPayload `json:"deleteEnvironment,omitempty"`

	// DeleteIpAllowListEntry: Deletes an IP allow list entry.
	//
	// Query arguments:
	//   - input DeleteIpAllowListEntryInput!
	DeleteIpAllowListEntry *DeleteIpAllowListEntryPayload `json:"deleteIpAllowListEntry,omitempty"`

	// DeleteIssue: Deletes an Issue object.
	//
	// Query arguments:
	//   - input DeleteIssueInput!
	DeleteIssue *DeleteIssuePayload `json:"deleteIssue,omitempty"`

	// DeleteIssueComment: Deletes an IssueComment object.
	//
	// Query arguments:
	//   - input DeleteIssueCommentInput!
	DeleteIssueComment *DeleteIssueCommentPayload `json:"deleteIssueComment,omitempty"`

	// DeleteLabel: Deletes a label.
	//
	// Query arguments:
	//   - input DeleteLabelInput!
	DeleteLabel *DeleteLabelPayload `json:"deleteLabel,omitempty"`

	// DeleteLinkedBranch: Unlink a branch from an issue.
	//
	// Query arguments:
	//   - input DeleteLinkedBranchInput!
	DeleteLinkedBranch *DeleteLinkedBranchPayload `json:"deleteLinkedBranch,omitempty"`

	// DeletePackageVersion: Delete a package version.
	//
	// Query arguments:
	//   - input DeletePackageVersionInput!
	DeletePackageVersion *DeletePackageVersionPayload `json:"deletePackageVersion,omitempty"`

	// DeleteProject: Deletes a project.
	//
	// Deprecated: Deletes a project.
	//
	// Query arguments:
	//   - input DeleteProjectInput!
	DeleteProject *DeleteProjectPayload `json:"deleteProject,omitempty"`

	// DeleteProjectCard: Deletes a project card.
	//
	// Deprecated: Deletes a project card.
	//
	// Query arguments:
	//   - input DeleteProjectCardInput!
	DeleteProjectCard *DeleteProjectCardPayload `json:"deleteProjectCard,omitempty"`

	// DeleteProjectColumn: Deletes a project column.
	//
	// Deprecated: Deletes a project column.
	//
	// Query arguments:
	//   - input DeleteProjectColumnInput!
	DeleteProjectColumn *DeleteProjectColumnPayload `json:"deleteProjectColumn,omitempty"`

	// DeleteProjectV2: Delete a project.
	//
	// Query arguments:
	//   - input DeleteProjectV2Input!
	DeleteProjectV2 *DeleteProjectV2Payload `json:"deleteProjectV2,omitempty"`

	// DeleteProjectV2Field: Delete a project field.
	//
	// Query arguments:
	//   - input DeleteProjectV2FieldInput!
	DeleteProjectV2Field *DeleteProjectV2FieldPayload `json:"deleteProjectV2Field,omitempty"`

	// DeleteProjectV2Item: Deletes an item from a Project.
	//
	// Query arguments:
	//   - input DeleteProjectV2ItemInput!
	DeleteProjectV2Item *DeleteProjectV2ItemPayload `json:"deleteProjectV2Item,omitempty"`

	// DeleteProjectV2StatusUpdate: Deletes a project status update.
	//
	// Query arguments:
	//   - input DeleteProjectV2StatusUpdateInput!
	DeleteProjectV2StatusUpdate *DeleteProjectV2StatusUpdatePayload `json:"deleteProjectV2StatusUpdate,omitempty"`

	// DeleteProjectV2Workflow: Deletes a project workflow.
	//
	// Query arguments:
	//   - input DeleteProjectV2WorkflowInput!
	DeleteProjectV2Workflow *DeleteProjectV2WorkflowPayload `json:"deleteProjectV2Workflow,omitempty"`

	// DeletePullRequestReview: Deletes a pull request review.
	//
	// Query arguments:
	//   - input DeletePullRequestReviewInput!
	DeletePullRequestReview *DeletePullRequestReviewPayload `json:"deletePullRequestReview,omitempty"`

	// DeletePullRequestReviewComment: Deletes a pull request review comment.
	//
	// Query arguments:
	//   - input DeletePullRequestReviewCommentInput!
	DeletePullRequestReviewComment *DeletePullRequestReviewCommentPayload `json:"deletePullRequestReviewComment,omitempty"`

	// DeleteRef: Delete a Git Ref.
	//
	// Query arguments:
	//   - input DeleteRefInput!
	DeleteRef *DeleteRefPayload `json:"deleteRef,omitempty"`

	// DeleteRepositoryRuleset: Delete a repository ruleset.
	//
	// Query arguments:
	//   - input DeleteRepositoryRulesetInput!
	DeleteRepositoryRuleset *DeleteRepositoryRulesetPayload `json:"deleteRepositoryRuleset,omitempty"`

	// DeleteTeamDiscussion: Deletes a team discussion.
	//
	// Query arguments:
	//   - input DeleteTeamDiscussionInput!
	DeleteTeamDiscussion *DeleteTeamDiscussionPayload `json:"deleteTeamDiscussion,omitempty"`

	// DeleteTeamDiscussionComment: Deletes a team discussion comment.
	//
	// Query arguments:
	//   - input DeleteTeamDiscussionCommentInput!
	DeleteTeamDiscussionComment *DeleteTeamDiscussionCommentPayload `json:"deleteTeamDiscussionComment,omitempty"`

	// DeleteUserList: Deletes a user list.
	//
	// Query arguments:
	//   - input DeleteUserListInput!
	DeleteUserList *DeleteUserListPayload `json:"deleteUserList,omitempty"`

	// DeleteVerifiableDomain: Deletes a verifiable domain.
	//
	// Query arguments:
	//   - input DeleteVerifiableDomainInput!
	DeleteVerifiableDomain *DeleteVerifiableDomainPayload `json:"deleteVerifiableDomain,omitempty"`

	// DequeuePullRequest: Remove a pull request from the merge queue.
	//
	// Query arguments:
	//   - input DequeuePullRequestInput!
	DequeuePullRequest *DequeuePullRequestPayload `json:"dequeuePullRequest,omitempty"`

	// DisablePullRequestAutoMerge: Disable auto merge on the given pull request.
	//
	// Query arguments:
	//   - input DisablePullRequestAutoMergeInput!
	DisablePullRequestAutoMerge *DisablePullRequestAutoMergePayload `json:"disablePullRequestAutoMerge,omitempty"`

	// DismissPullRequestReview: Dismisses an approved or rejected pull request review.
	//
	// Query arguments:
	//   - input DismissPullRequestReviewInput!
	DismissPullRequestReview *DismissPullRequestReviewPayload `json:"dismissPullRequestReview,omitempty"`

	// DismissRepositoryVulnerabilityAlert: Dismisses the Dependabot alert.
	//
	// Query arguments:
	//   - input DismissRepositoryVulnerabilityAlertInput!
	DismissRepositoryVulnerabilityAlert *DismissRepositoryVulnerabilityAlertPayload `json:"dismissRepositoryVulnerabilityAlert,omitempty"`

	// EnablePullRequestAutoMerge: Enable the default auto-merge on a pull request.
	//
	// Query arguments:
	//   - input EnablePullRequestAutoMergeInput!
	EnablePullRequestAutoMerge *EnablePullRequestAutoMergePayload `json:"enablePullRequestAutoMerge,omitempty"`

	// EnqueuePullRequest: Add a pull request to the merge queue.
	//
	// Query arguments:
	//   - input EnqueuePullRequestInput!
	EnqueuePullRequest *EnqueuePullRequestPayload `json:"enqueuePullRequest,omitempty"`

	// FollowOrganization: Follow an organization.
	//
	// Query arguments:
	//   - input FollowOrganizationInput!
	FollowOrganization *FollowOrganizationPayload `json:"followOrganization,omitempty"`

	// FollowUser: Follow a user.
	//
	// Query arguments:
	//   - input FollowUserInput!
	FollowUser *FollowUserPayload `json:"followUser,omitempty"`

	// GrantEnterpriseOrganizationsMigratorRole: Grant the migrator role to a user for all organizations under an enterprise account.
	//
	// Query arguments:
	//   - input GrantEnterpriseOrganizationsMigratorRoleInput!
	GrantEnterpriseOrganizationsMigratorRole *GrantEnterpriseOrganizationsMigratorRolePayload `json:"grantEnterpriseOrganizationsMigratorRole,omitempty"`

	// GrantMigratorRole: Grant the migrator role to a user or a team.
	//
	// Query arguments:
	//   - input GrantMigratorRoleInput!
	GrantMigratorRole *GrantMigratorRolePayload `json:"grantMigratorRole,omitempty"`

	// ImportProject: Creates a new project by importing columns and a list of issues/PRs.
	//
	// Deprecated: Creates a new project by importing columns and a list of issues/PRs.
	//
	// Query arguments:
	//   - input ImportProjectInput!
	ImportProject *ImportProjectPayload `json:"importProject,omitempty"`

	// InviteEnterpriseAdmin: Invite someone to become an administrator of the enterprise.
	//
	// Query arguments:
	//   - input InviteEnterpriseAdminInput!
	InviteEnterpriseAdmin *InviteEnterpriseAdminPayload `json:"inviteEnterpriseAdmin,omitempty"`

	// InviteEnterpriseMember: Invite someone to become an unaffiliated member of the enterprise.
	//
	// Query arguments:
	//   - input InviteEnterpriseMemberInput!
	InviteEnterpriseMember *InviteEnterpriseMemberPayload `json:"inviteEnterpriseMember,omitempty"`

	// LinkProjectV2ToRepository: Links a project to a repository.
	//
	// Query arguments:
	//   - input LinkProjectV2ToRepositoryInput!
	LinkProjectV2ToRepository *LinkProjectV2ToRepositoryPayload `json:"linkProjectV2ToRepository,omitempty"`

	// LinkProjectV2ToTeam: Links a project to a team.
	//
	// Query arguments:
	//   - input LinkProjectV2ToTeamInput!
	LinkProjectV2ToTeam *LinkProjectV2ToTeamPayload `json:"linkProjectV2ToTeam,omitempty"`

	// LinkRepositoryToProject: Creates a repository link for a project.
	//
	// Deprecated: Creates a repository link for a project.
	//
	// Query arguments:
	//   - input LinkRepositoryToProjectInput!
	LinkRepositoryToProject *LinkRepositoryToProjectPayload `json:"linkRepositoryToProject,omitempty"`

	// LockLockable: Lock a lockable object.
	//
	// Query arguments:
	//   - input LockLockableInput!
	LockLockable *LockLockablePayload `json:"lockLockable,omitempty"`

	// MarkDiscussionCommentAsAnswer: Mark a discussion comment as the chosen answer for discussions in an answerable category.
	//
	// Query arguments:
	//   - input MarkDiscussionCommentAsAnswerInput!
	MarkDiscussionCommentAsAnswer *MarkDiscussionCommentAsAnswerPayload `json:"markDiscussionCommentAsAnswer,omitempty"`

	// MarkFileAsViewed: Mark a pull request file as viewed.
	//
	// Query arguments:
	//   - input MarkFileAsViewedInput!
	MarkFileAsViewed *MarkFileAsViewedPayload `json:"markFileAsViewed,omitempty"`

	// MarkProjectV2AsTemplate: Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
	//
	// Query arguments:
	//   - input MarkProjectV2AsTemplateInput!
	MarkProjectV2AsTemplate *MarkProjectV2AsTemplatePayload `json:"markProjectV2AsTemplate,omitempty"`

	// MarkPullRequestReadyForReview: Marks a pull request ready for review.
	//
	// Query arguments:
	//   - input MarkPullRequestReadyForReviewInput!
	MarkPullRequestReadyForReview *MarkPullRequestReadyForReviewPayload `json:"markPullRequestReadyForReview,omitempty"`

	// MergeBranch: Merge a head into a branch.
	//
	// Query arguments:
	//   - input MergeBranchInput!
	MergeBranch *MergeBranchPayload `json:"mergeBranch,omitempty"`

	// MergePullRequest: Merge a pull request.
	//
	// Query arguments:
	//   - input MergePullRequestInput!
	MergePullRequest *MergePullRequestPayload `json:"mergePullRequest,omitempty"`

	// MinimizeComment: Minimizes a comment on an Issue, Commit, Pull Request, or Gist.
	//
	// Query arguments:
	//   - input MinimizeCommentInput!
	MinimizeComment *MinimizeCommentPayload `json:"minimizeComment,omitempty"`

	// MoveProjectCard: Moves a project card to another place.
	//
	// Deprecated: Moves a project card to another place.
	//
	// Query arguments:
	//   - input MoveProjectCardInput!
	MoveProjectCard *MoveProjectCardPayload `json:"moveProjectCard,omitempty"`

	// MoveProjectColumn: Moves a project column to another place.
	//
	// Deprecated: Moves a project column to another place.
	//
	// Query arguments:
	//   - input MoveProjectColumnInput!
	MoveProjectColumn *MoveProjectColumnPayload `json:"moveProjectColumn,omitempty"`

	// PinEnvironment: Pin an environment to a repository.
	//
	// Query arguments:
	//   - input PinEnvironmentInput!
	PinEnvironment *PinEnvironmentPayload `json:"pinEnvironment,omitempty"`

	// PinIssue: Pin an issue to a repository.
	//
	// Query arguments:
	//   - input PinIssueInput!
	PinIssue *PinIssuePayload `json:"pinIssue,omitempty"`

	// PublishSponsorsTier: Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
	//
	// Query arguments:
	//   - input PublishSponsorsTierInput!
	PublishSponsorsTier *PublishSponsorsTierPayload `json:"publishSponsorsTier,omitempty"`

	// RegenerateEnterpriseIdentityProviderRecoveryCodes: Regenerates the identity provider recovery codes for an enterprise.
	//
	// Query arguments:
	//   - input RegenerateEnterpriseIdentityProviderRecoveryCodesInput!
	RegenerateEnterpriseIdentityProviderRecoveryCodes *RegenerateEnterpriseIdentityProviderRecoveryCodesPayload `json:"regenerateEnterpriseIdentityProviderRecoveryCodes,omitempty"`

	// RegenerateVerifiableDomainToken: Regenerates a verifiable domain's verification token.
	//
	// Query arguments:
	//   - input RegenerateVerifiableDomainTokenInput!
	RegenerateVerifiableDomainToken *RegenerateVerifiableDomainTokenPayload `json:"regenerateVerifiableDomainToken,omitempty"`

	// RejectDeployments: Reject all pending deployments under one or more environments.
	//
	// Query arguments:
	//   - input RejectDeploymentsInput!
	RejectDeployments *RejectDeploymentsPayload `json:"rejectDeployments,omitempty"`

	// RemoveAssigneesFromAssignable: Removes assignees from an assignable object.
	//
	// Query arguments:
	//   - input RemoveAssigneesFromAssignableInput!
	RemoveAssigneesFromAssignable *RemoveAssigneesFromAssignablePayload `json:"removeAssigneesFromAssignable,omitempty"`

	// RemoveEnterpriseAdmin: Removes an administrator from the enterprise.
	//
	// Query arguments:
	//   - input RemoveEnterpriseAdminInput!
	RemoveEnterpriseAdmin *RemoveEnterpriseAdminPayload `json:"removeEnterpriseAdmin,omitempty"`

	// RemoveEnterpriseIdentityProvider: Removes the identity provider from an enterprise. Owners of enterprises both with and without Enterprise Managed Users may use this mutation.
	//
	// Query arguments:
	//   - input RemoveEnterpriseIdentityProviderInput!
	RemoveEnterpriseIdentityProvider *RemoveEnterpriseIdentityProviderPayload `json:"removeEnterpriseIdentityProvider,omitempty"`

	// RemoveEnterpriseMember: Removes a user from all organizations within the enterprise.
	//
	// Query arguments:
	//   - input RemoveEnterpriseMemberInput!
	RemoveEnterpriseMember *RemoveEnterpriseMemberPayload `json:"removeEnterpriseMember,omitempty"`

	// RemoveEnterpriseOrganization: Removes an organization from the enterprise.
	//
	// Query arguments:
	//   - input RemoveEnterpriseOrganizationInput!
	RemoveEnterpriseOrganization *RemoveEnterpriseOrganizationPayload `json:"removeEnterpriseOrganization,omitempty"`

	// RemoveEnterpriseSupportEntitlement: Removes a support entitlement from an enterprise member.
	//
	// Query arguments:
	//   - input RemoveEnterpriseSupportEntitlementInput!
	RemoveEnterpriseSupportEntitlement *RemoveEnterpriseSupportEntitlementPayload `json:"removeEnterpriseSupportEntitlement,omitempty"`

	// RemoveLabelsFromLabelable: Removes labels from a Labelable object.
	//
	// Query arguments:
	//   - input RemoveLabelsFromLabelableInput!
	RemoveLabelsFromLabelable *RemoveLabelsFromLabelablePayload `json:"removeLabelsFromLabelable,omitempty"`

	// RemoveOutsideCollaborator: Removes outside collaborator from all repositories in an organization.
	//
	// Query arguments:
	//   - input RemoveOutsideCollaboratorInput!
	RemoveOutsideCollaborator *RemoveOutsideCollaboratorPayload `json:"removeOutsideCollaborator,omitempty"`

	// RemoveReaction: Removes a reaction from a subject.
	//
	// Query arguments:
	//   - input RemoveReactionInput!
	RemoveReaction *RemoveReactionPayload `json:"removeReaction,omitempty"`

	// RemoveStar: Removes a star from a Starrable.
	//
	// Query arguments:
	//   - input RemoveStarInput!
	RemoveStar *RemoveStarPayload `json:"removeStar,omitempty"`

	// RemoveSubIssue: Removes a sub-issue from a given issue.
	//
	// Query arguments:
	//   - input RemoveSubIssueInput!
	RemoveSubIssue *RemoveSubIssuePayload `json:"removeSubIssue,omitempty"`

	// RemoveUpvote: Remove an upvote to a discussion or discussion comment.
	//
	// Query arguments:
	//   - input RemoveUpvoteInput!
	RemoveUpvote *RemoveUpvotePayload `json:"removeUpvote,omitempty"`

	// ReopenDiscussion: Reopen a discussion.
	//
	// Query arguments:
	//   - input ReopenDiscussionInput!
	ReopenDiscussion *ReopenDiscussionPayload `json:"reopenDiscussion,omitempty"`

	// ReopenIssue: Reopen a issue.
	//
	// Query arguments:
	//   - input ReopenIssueInput!
	ReopenIssue *ReopenIssuePayload `json:"reopenIssue,omitempty"`

	// ReopenPullRequest: Reopen a pull request.
	//
	// Query arguments:
	//   - input ReopenPullRequestInput!
	ReopenPullRequest *ReopenPullRequestPayload `json:"reopenPullRequest,omitempty"`

	// ReorderEnvironment: Reorder a pinned repository environment.
	//
	// Query arguments:
	//   - input ReorderEnvironmentInput!
	ReorderEnvironment *ReorderEnvironmentPayload `json:"reorderEnvironment,omitempty"`

	// ReprioritizeSubIssue: Reprioritizes a sub-issue to a different position in the parent list.
	//
	// Query arguments:
	//   - input ReprioritizeSubIssueInput!
	ReprioritizeSubIssue *ReprioritizeSubIssuePayload `json:"reprioritizeSubIssue,omitempty"`

	// RequestReviews: Set review requests on a pull request.
	//
	// Query arguments:
	//   - input RequestReviewsInput!
	RequestReviews *RequestReviewsPayload `json:"requestReviews,omitempty"`

	// RerequestCheckSuite: Rerequests an existing check suite.
	//
	// Query arguments:
	//   - input RerequestCheckSuiteInput!
	RerequestCheckSuite *RerequestCheckSuitePayload `json:"rerequestCheckSuite,omitempty"`

	// ResolveReviewThread: Marks a review thread as resolved.
	//
	// Query arguments:
	//   - input ResolveReviewThreadInput!
	ResolveReviewThread *ResolveReviewThreadPayload `json:"resolveReviewThread,omitempty"`

	// RetireSponsorsTier: Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
	//
	// Query arguments:
	//   - input RetireSponsorsTierInput!
	RetireSponsorsTier *RetireSponsorsTierPayload `json:"retireSponsorsTier,omitempty"`

	// RevertPullRequest: Create a pull request that reverts the changes from a merged pull request.
	//
	// Query arguments:
	//   - input RevertPullRequestInput!
	RevertPullRequest *RevertPullRequestPayload `json:"revertPullRequest,omitempty"`

	// RevokeEnterpriseOrganizationsMigratorRole: Revoke the migrator role to a user for all organizations under an enterprise account.
	//
	// Query arguments:
	//   - input RevokeEnterpriseOrganizationsMigratorRoleInput!
	RevokeEnterpriseOrganizationsMigratorRole *RevokeEnterpriseOrganizationsMigratorRolePayload `json:"revokeEnterpriseOrganizationsMigratorRole,omitempty"`

	// RevokeMigratorRole: Revoke the migrator role from a user or a team.
	//
	// Query arguments:
	//   - input RevokeMigratorRoleInput!
	RevokeMigratorRole *RevokeMigratorRolePayload `json:"revokeMigratorRole,omitempty"`

	// SetEnterpriseIdentityProvider: Creates or updates the identity provider for an enterprise.
	//
	// Query arguments:
	//   - input SetEnterpriseIdentityProviderInput!
	SetEnterpriseIdentityProvider *SetEnterpriseIdentityProviderPayload `json:"setEnterpriseIdentityProvider,omitempty"`

	// SetOrganizationInteractionLimit: Set an organization level interaction limit for an organization's public repositories.
	//
	// Query arguments:
	//   - input SetOrganizationInteractionLimitInput!
	SetOrganizationInteractionLimit *SetOrganizationInteractionLimitPayload `json:"setOrganizationInteractionLimit,omitempty"`

	// SetRepositoryInteractionLimit: Sets an interaction limit setting for a repository.
	//
	// Query arguments:
	//   - input SetRepositoryInteractionLimitInput!
	SetRepositoryInteractionLimit *SetRepositoryInteractionLimitPayload `json:"setRepositoryInteractionLimit,omitempty"`

	// SetUserInteractionLimit: Set a user level interaction limit for an user's public repositories.
	//
	// Query arguments:
	//   - input SetUserInteractionLimitInput!
	SetUserInteractionLimit *SetUserInteractionLimitPayload `json:"setUserInteractionLimit,omitempty"`

	// StartOrganizationMigration: Starts a GitHub Enterprise Importer organization migration.
	//
	// Query arguments:
	//   - input StartOrganizationMigrationInput!
	StartOrganizationMigration *StartOrganizationMigrationPayload `json:"startOrganizationMigration,omitempty"`

	// StartRepositoryMigration: Starts a GitHub Enterprise Importer (GEI) repository migration.
	//
	// Query arguments:
	//   - input StartRepositoryMigrationInput!
	StartRepositoryMigration *StartRepositoryMigrationPayload `json:"startRepositoryMigration,omitempty"`

	// SubmitPullRequestReview: Submits a pending pull request review.
	//
	// Query arguments:
	//   - input SubmitPullRequestReviewInput!
	SubmitPullRequestReview *SubmitPullRequestReviewPayload `json:"submitPullRequestReview,omitempty"`

	// TransferEnterpriseOrganization: Transfer an organization from one enterprise to another enterprise.
	//
	// Query arguments:
	//   - input TransferEnterpriseOrganizationInput!
	TransferEnterpriseOrganization *TransferEnterpriseOrganizationPayload `json:"transferEnterpriseOrganization,omitempty"`

	// TransferIssue: Transfer an issue to a different repository.
	//
	// Query arguments:
	//   - input TransferIssueInput!
	TransferIssue *TransferIssuePayload `json:"transferIssue,omitempty"`

	// UnarchiveProjectV2Item: Unarchives a ProjectV2Item.
	//
	// Query arguments:
	//   - input UnarchiveProjectV2ItemInput!
	UnarchiveProjectV2Item *UnarchiveProjectV2ItemPayload `json:"unarchiveProjectV2Item,omitempty"`

	// UnarchiveRepository: Unarchives a repository.
	//
	// Query arguments:
	//   - input UnarchiveRepositoryInput!
	UnarchiveRepository *UnarchiveRepositoryPayload `json:"unarchiveRepository,omitempty"`

	// UnfollowOrganization: Unfollow an organization.
	//
	// Query arguments:
	//   - input UnfollowOrganizationInput!
	UnfollowOrganization *UnfollowOrganizationPayload `json:"unfollowOrganization,omitempty"`

	// UnfollowUser: Unfollow a user.
	//
	// Query arguments:
	//   - input UnfollowUserInput!
	UnfollowUser *UnfollowUserPayload `json:"unfollowUser,omitempty"`

	// UnlinkProjectV2FromRepository: Unlinks a project from a repository.
	//
	// Query arguments:
	//   - input UnlinkProjectV2FromRepositoryInput!
	UnlinkProjectV2FromRepository *UnlinkProjectV2FromRepositoryPayload `json:"unlinkProjectV2FromRepository,omitempty"`

	// UnlinkProjectV2FromTeam: Unlinks a project to a team.
	//
	// Query arguments:
	//   - input UnlinkProjectV2FromTeamInput!
	UnlinkProjectV2FromTeam *UnlinkProjectV2FromTeamPayload `json:"unlinkProjectV2FromTeam,omitempty"`

	// UnlinkRepositoryFromProject: Deletes a repository link from a project.
	//
	// Deprecated: Deletes a repository link from a project.
	//
	// Query arguments:
	//   - input UnlinkRepositoryFromProjectInput!
	UnlinkRepositoryFromProject *UnlinkRepositoryFromProjectPayload `json:"unlinkRepositoryFromProject,omitempty"`

	// UnlockLockable: Unlock a lockable object.
	//
	// Query arguments:
	//   - input UnlockLockableInput!
	UnlockLockable *UnlockLockablePayload `json:"unlockLockable,omitempty"`

	// UnmarkDiscussionCommentAsAnswer: Unmark a discussion comment as the chosen answer for discussions in an answerable category.
	//
	// Query arguments:
	//   - input UnmarkDiscussionCommentAsAnswerInput!
	UnmarkDiscussionCommentAsAnswer *UnmarkDiscussionCommentAsAnswerPayload `json:"unmarkDiscussionCommentAsAnswer,omitempty"`

	// UnmarkFileAsViewed: Unmark a pull request file as viewed.
	//
	// Query arguments:
	//   - input UnmarkFileAsViewedInput!
	UnmarkFileAsViewed *UnmarkFileAsViewedPayload `json:"unmarkFileAsViewed,omitempty"`

	// UnmarkIssueAsDuplicate: Unmark an issue as a duplicate of another issue.
	//
	// Query arguments:
	//   - input UnmarkIssueAsDuplicateInput!
	UnmarkIssueAsDuplicate *UnmarkIssueAsDuplicatePayload `json:"unmarkIssueAsDuplicate,omitempty"`

	// UnmarkProjectV2AsTemplate: Unmark a project as a template.
	//
	// Query arguments:
	//   - input UnmarkProjectV2AsTemplateInput!
	UnmarkProjectV2AsTemplate *UnmarkProjectV2AsTemplatePayload `json:"unmarkProjectV2AsTemplate,omitempty"`

	// UnminimizeComment: Unminimizes a comment on an Issue, Commit, Pull Request, or Gist.
	//
	// Query arguments:
	//   - input UnminimizeCommentInput!
	UnminimizeComment *UnminimizeCommentPayload `json:"unminimizeComment,omitempty"`

	// UnpinIssue: Unpin a pinned issue from a repository.
	//
	// Query arguments:
	//   - input UnpinIssueInput!
	UnpinIssue *UnpinIssuePayload `json:"unpinIssue,omitempty"`

	// UnresolveReviewThread: Marks a review thread as unresolved.
	//
	// Query arguments:
	//   - input UnresolveReviewThreadInput!
	UnresolveReviewThread *UnresolveReviewThreadPayload `json:"unresolveReviewThread,omitempty"`

	// UpdateBranchProtectionRule: Update a branch protection rule.
	//
	// Query arguments:
	//   - input UpdateBranchProtectionRuleInput!
	UpdateBranchProtectionRule *UpdateBranchProtectionRulePayload `json:"updateBranchProtectionRule,omitempty"`

	// UpdateCheckRun: Update a check run.
	//
	// Query arguments:
	//   - input UpdateCheckRunInput!
	UpdateCheckRun *UpdateCheckRunPayload `json:"updateCheckRun,omitempty"`

	// UpdateCheckSuitePreferences: Modifies the settings of an existing check suite.
	//
	// Query arguments:
	//   - input UpdateCheckSuitePreferencesInput!
	UpdateCheckSuitePreferences *UpdateCheckSuitePreferencesPayload `json:"updateCheckSuitePreferences,omitempty"`

	// UpdateDiscussion: Update a discussion.
	//
	// Query arguments:
	//   - input UpdateDiscussionInput!
	UpdateDiscussion *UpdateDiscussionPayload `json:"updateDiscussion,omitempty"`

	// UpdateDiscussionComment: Update the contents of a comment on a Discussion.
	//
	// Query arguments:
	//   - input UpdateDiscussionCommentInput!
	UpdateDiscussionComment *UpdateDiscussionCommentPayload `json:"updateDiscussionComment,omitempty"`

	// UpdateEnterpriseAdministratorRole: Updates the role of an enterprise administrator.
	//
	// Query arguments:
	//   - input UpdateEnterpriseAdministratorRoleInput!
	UpdateEnterpriseAdministratorRole *UpdateEnterpriseAdministratorRolePayload `json:"updateEnterpriseAdministratorRole,omitempty"`

	// UpdateEnterpriseAllowPrivateRepositoryForkingSetting: Sets whether private repository forks are enabled for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!
	UpdateEnterpriseAllowPrivateRepositoryForkingSetting *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload `json:"updateEnterpriseAllowPrivateRepositoryForkingSetting,omitempty"`

	// UpdateEnterpriseDefaultRepositoryPermissionSetting: Sets the base repository permission for organizations in an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseDefaultRepositoryPermissionSettingInput!
	UpdateEnterpriseDefaultRepositoryPermissionSetting *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload `json:"updateEnterpriseDefaultRepositoryPermissionSetting,omitempty"`

	// UpdateEnterpriseDeployKeySetting: Sets whether deploy keys are allowed to be created and used for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseDeployKeySettingInput!
	UpdateEnterpriseDeployKeySetting *UpdateEnterpriseDeployKeySettingPayload `json:"updateEnterpriseDeployKeySetting,omitempty"`

	// UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting: Sets whether organization members with admin permissions on a repository can change repository visibility.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!
	UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload `json:"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting,omitempty"`

	// UpdateEnterpriseMembersCanCreateRepositoriesSetting: Sets the members can create repositories setting for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!
	UpdateEnterpriseMembersCanCreateRepositoriesSetting *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload `json:"updateEnterpriseMembersCanCreateRepositoriesSetting,omitempty"`

	// UpdateEnterpriseMembersCanDeleteIssuesSetting: Sets the members can delete issues setting for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanDeleteIssuesSettingInput!
	UpdateEnterpriseMembersCanDeleteIssuesSetting *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload `json:"updateEnterpriseMembersCanDeleteIssuesSetting,omitempty"`

	// UpdateEnterpriseMembersCanDeleteRepositoriesSetting: Sets the members can delete repositories setting for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!
	UpdateEnterpriseMembersCanDeleteRepositoriesSetting *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload `json:"updateEnterpriseMembersCanDeleteRepositoriesSetting,omitempty"`

	// UpdateEnterpriseMembersCanInviteCollaboratorsSetting: Sets whether members can invite collaborators are enabled for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!
	UpdateEnterpriseMembersCanInviteCollaboratorsSetting *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload `json:"updateEnterpriseMembersCanInviteCollaboratorsSetting,omitempty"`

	// UpdateEnterpriseMembersCanMakePurchasesSetting: Sets whether or not an organization owner can make purchases.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanMakePurchasesSettingInput!
	UpdateEnterpriseMembersCanMakePurchasesSetting *UpdateEnterpriseMembersCanMakePurchasesSettingPayload `json:"updateEnterpriseMembersCanMakePurchasesSetting,omitempty"`

	// UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting: Sets the members can update protected branches setting for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!
	UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload `json:"updateEnterpriseMembersCanUpdateProtectedBranchesSetting,omitempty"`

	// UpdateEnterpriseMembersCanViewDependencyInsightsSetting: Sets the members can view dependency insights for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!
	UpdateEnterpriseMembersCanViewDependencyInsightsSetting *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload `json:"updateEnterpriseMembersCanViewDependencyInsightsSetting,omitempty"`

	// UpdateEnterpriseOrganizationProjectsSetting: Sets whether organization projects are enabled for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseOrganizationProjectsSettingInput!
	UpdateEnterpriseOrganizationProjectsSetting *UpdateEnterpriseOrganizationProjectsSettingPayload `json:"updateEnterpriseOrganizationProjectsSetting,omitempty"`

	// UpdateEnterpriseOwnerOrganizationRole: Updates the role of an enterprise owner with an organization.
	//
	// Query arguments:
	//   - input UpdateEnterpriseOwnerOrganizationRoleInput!
	UpdateEnterpriseOwnerOrganizationRole *UpdateEnterpriseOwnerOrganizationRolePayload `json:"updateEnterpriseOwnerOrganizationRole,omitempty"`

	// UpdateEnterpriseProfile: Updates an enterprise's profile.
	//
	// Query arguments:
	//   - input UpdateEnterpriseProfileInput!
	UpdateEnterpriseProfile *UpdateEnterpriseProfilePayload `json:"updateEnterpriseProfile,omitempty"`

	// UpdateEnterpriseRepositoryProjectsSetting: Sets whether repository projects are enabled for a enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseRepositoryProjectsSettingInput!
	UpdateEnterpriseRepositoryProjectsSetting *UpdateEnterpriseRepositoryProjectsSettingPayload `json:"updateEnterpriseRepositoryProjectsSetting,omitempty"`

	// UpdateEnterpriseTeamDiscussionsSetting: Sets whether team discussions are enabled for an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseTeamDiscussionsSettingInput!
	UpdateEnterpriseTeamDiscussionsSetting *UpdateEnterpriseTeamDiscussionsSettingPayload `json:"updateEnterpriseTeamDiscussionsSetting,omitempty"`

	// UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting: Sets the two-factor authentication methods that users of an enterprise may not use.
	//
	// Query arguments:
	//   - input UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput!
	UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting *UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload `json:"updateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting,omitempty"`

	// UpdateEnterpriseTwoFactorAuthenticationRequiredSetting: Sets whether two factor authentication is required for all users in an enterprise.
	//
	// Query arguments:
	//   - input UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!
	UpdateEnterpriseTwoFactorAuthenticationRequiredSetting *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload `json:"updateEnterpriseTwoFactorAuthenticationRequiredSetting,omitempty"`

	// UpdateEnvironment: Updates an environment.
	//
	// Query arguments:
	//   - input UpdateEnvironmentInput!
	UpdateEnvironment *UpdateEnvironmentPayload `json:"updateEnvironment,omitempty"`

	// UpdateIpAllowListEnabledSetting: Sets whether an IP allow list is enabled on an owner.
	//
	// Query arguments:
	//   - input UpdateIpAllowListEnabledSettingInput!
	UpdateIpAllowListEnabledSetting *UpdateIpAllowListEnabledSettingPayload `json:"updateIpAllowListEnabledSetting,omitempty"`

	// UpdateIpAllowListEntry: Updates an IP allow list entry.
	//
	// Query arguments:
	//   - input UpdateIpAllowListEntryInput!
	UpdateIpAllowListEntry *UpdateIpAllowListEntryPayload `json:"updateIpAllowListEntry,omitempty"`

	// UpdateIpAllowListForInstalledAppsEnabledSetting: Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
	//
	// Query arguments:
	//   - input UpdateIpAllowListForInstalledAppsEnabledSettingInput!
	UpdateIpAllowListForInstalledAppsEnabledSetting *UpdateIpAllowListForInstalledAppsEnabledSettingPayload `json:"updateIpAllowListForInstalledAppsEnabledSetting,omitempty"`

	// UpdateIssue: Updates an Issue.
	//
	// Query arguments:
	//   - input UpdateIssueInput!
	UpdateIssue *UpdateIssuePayload `json:"updateIssue,omitempty"`

	// UpdateIssueComment: Updates an IssueComment object.
	//
	// Query arguments:
	//   - input UpdateIssueCommentInput!
	UpdateIssueComment *UpdateIssueCommentPayload `json:"updateIssueComment,omitempty"`

	// UpdateLabel: Updates an existing label.
	//
	// Query arguments:
	//   - input UpdateLabelInput!
	UpdateLabel *UpdateLabelPayload `json:"updateLabel,omitempty"`

	// UpdateNotificationRestrictionSetting: Update the setting to restrict notifications to only verified or approved domains available to an owner.
	//
	// Query arguments:
	//   - input UpdateNotificationRestrictionSettingInput!
	UpdateNotificationRestrictionSetting *UpdateNotificationRestrictionSettingPayload `json:"updateNotificationRestrictionSetting,omitempty"`

	// UpdateOrganizationAllowPrivateRepositoryForkingSetting: Sets whether private repository forks are enabled for an organization.
	//
	// Query arguments:
	//   - input UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!
	UpdateOrganizationAllowPrivateRepositoryForkingSetting *UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload `json:"updateOrganizationAllowPrivateRepositoryForkingSetting,omitempty"`

	// UpdateOrganizationWebCommitSignoffSetting: Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
	//
	// Query arguments:
	//   - input UpdateOrganizationWebCommitSignoffSettingInput!
	UpdateOrganizationWebCommitSignoffSetting *UpdateOrganizationWebCommitSignoffSettingPayload `json:"updateOrganizationWebCommitSignoffSetting,omitempty"`

	// UpdatePatreonSponsorability: Toggle the setting for your GitHub Sponsors profile that allows other GitHub accounts to sponsor you on GitHub while paying for the sponsorship on Patreon. Only applicable when you have a GitHub Sponsors profile and have connected your GitHub account with Patreon.
	//
	// Query arguments:
	//   - input UpdatePatreonSponsorabilityInput!
	UpdatePatreonSponsorability *UpdatePatreonSponsorabilityPayload `json:"updatePatreonSponsorability,omitempty"`

	// UpdateProject: Updates an existing project.
	//
	// Deprecated: Updates an existing project.
	//
	// Query arguments:
	//   - input UpdateProjectInput!
	UpdateProject *UpdateProjectPayload `json:"updateProject,omitempty"`

	// UpdateProjectCard: Updates an existing project card.
	//
	// Deprecated: Updates an existing project card.
	//
	// Query arguments:
	//   - input UpdateProjectCardInput!
	UpdateProjectCard *UpdateProjectCardPayload `json:"updateProjectCard,omitempty"`

	// UpdateProjectColumn: Updates an existing project column.
	//
	// Deprecated: Updates an existing project column.
	//
	// Query arguments:
	//   - input UpdateProjectColumnInput!
	UpdateProjectColumn *UpdateProjectColumnPayload `json:"updateProjectColumn,omitempty"`

	// UpdateProjectV2: Updates an existing project.
	//
	// Query arguments:
	//   - input UpdateProjectV2Input!
	UpdateProjectV2 *UpdateProjectV2Payload `json:"updateProjectV2,omitempty"`

	// UpdateProjectV2Collaborators: Update the collaborators on a team or a project.
	//
	// Query arguments:
	//   - input UpdateProjectV2CollaboratorsInput!
	UpdateProjectV2Collaborators *UpdateProjectV2CollaboratorsPayload `json:"updateProjectV2Collaborators,omitempty"`

	// UpdateProjectV2DraftIssue: Updates a draft issue within a Project.
	//
	// Query arguments:
	//   - input UpdateProjectV2DraftIssueInput!
	UpdateProjectV2DraftIssue *UpdateProjectV2DraftIssuePayload `json:"updateProjectV2DraftIssue,omitempty"`

	// UpdateProjectV2Field: Update a project field.
	//
	// Query arguments:
	//   - input UpdateProjectV2FieldInput!
	UpdateProjectV2Field *UpdateProjectV2FieldPayload `json:"updateProjectV2Field,omitempty"`

	// UpdateProjectV2ItemFieldValue: This mutation updates the value of a field for an item in a Project. Currently only single-select, text, number, date, and iteration fields are supported.
	//
	// Query arguments:
	//   - input UpdateProjectV2ItemFieldValueInput!
	UpdateProjectV2ItemFieldValue *UpdateProjectV2ItemFieldValuePayload `json:"updateProjectV2ItemFieldValue,omitempty"`

	// UpdateProjectV2ItemPosition: This mutation updates the position of the item in the project, where the position represents the priority of an item.
	//
	// Query arguments:
	//   - input UpdateProjectV2ItemPositionInput!
	UpdateProjectV2ItemPosition *UpdateProjectV2ItemPositionPayload `json:"updateProjectV2ItemPosition,omitempty"`

	// UpdateProjectV2StatusUpdate: Updates a status update within a Project.
	//
	// Query arguments:
	//   - input UpdateProjectV2StatusUpdateInput!
	UpdateProjectV2StatusUpdate *UpdateProjectV2StatusUpdatePayload `json:"updateProjectV2StatusUpdate,omitempty"`

	// UpdatePullRequest: Update a pull request.
	//
	// Query arguments:
	//   - input UpdatePullRequestInput!
	UpdatePullRequest *UpdatePullRequestPayload `json:"updatePullRequest,omitempty"`

	// UpdatePullRequestBranch: Merge or Rebase HEAD from upstream branch into pull request branch.
	//
	// Query arguments:
	//   - input UpdatePullRequestBranchInput!
	UpdatePullRequestBranch *UpdatePullRequestBranchPayload `json:"updatePullRequestBranch,omitempty"`

	// UpdatePullRequestReview: Updates the body of a pull request review.
	//
	// Query arguments:
	//   - input UpdatePullRequestReviewInput!
	UpdatePullRequestReview *UpdatePullRequestReviewPayload `json:"updatePullRequestReview,omitempty"`

	// UpdatePullRequestReviewComment: Updates a pull request review comment.
	//
	// Query arguments:
	//   - input UpdatePullRequestReviewCommentInput!
	UpdatePullRequestReviewComment *UpdatePullRequestReviewCommentPayload `json:"updatePullRequestReviewComment,omitempty"`

	// UpdateRef: Update a Git Ref.
	//
	// Query arguments:
	//   - input UpdateRefInput!
	UpdateRef *UpdateRefPayload `json:"updateRef,omitempty"`

	// UpdateRefs: Creates, updates and/or deletes multiple refs in a repository.
	//
	// This mutation takes a list of `RefUpdate`s and performs these updates
	// on the repository. All updates are performed atomically, meaning that
	// if one of them is rejected, no other ref will be modified.
	//
	// `RefUpdate.beforeOid` specifies that the given reference needs to point
	// to the given value before performing any updates. A value of
	// `0000000000000000000000000000000000000000` can be used to verify that
	// the references should not exist.
	//
	// `RefUpdate.afterOid` specifies the value that the given reference
	// will point to after performing all updates. A value of
	// `0000000000000000000000000000000000000000` can be used to delete a
	// reference.
	//
	// If `RefUpdate.force` is set to `true`, a non-fast-forward updates
	// for the given reference will be allowed.
	// .
	//
	// Query arguments:
	//   - input UpdateRefsInput!
	UpdateRefs *UpdateRefsPayload `json:"updateRefs,omitempty"`

	// UpdateRepository: Update information about a repository.
	//
	// Query arguments:
	//   - input UpdateRepositoryInput!
	UpdateRepository *UpdateRepositoryPayload `json:"updateRepository,omitempty"`

	// UpdateRepositoryRuleset: Update a repository ruleset.
	//
	// Query arguments:
	//   - input UpdateRepositoryRulesetInput!
	UpdateRepositoryRuleset *UpdateRepositoryRulesetPayload `json:"updateRepositoryRuleset,omitempty"`

	// UpdateRepositoryWebCommitSignoffSetting: Sets whether contributors are required to sign off on web-based commits for a repository.
	//
	// Query arguments:
	//   - input UpdateRepositoryWebCommitSignoffSettingInput!
	UpdateRepositoryWebCommitSignoffSetting *UpdateRepositoryWebCommitSignoffSettingPayload `json:"updateRepositoryWebCommitSignoffSetting,omitempty"`

	// UpdateSponsorshipPreferences: Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
	//
	// Query arguments:
	//   - input UpdateSponsorshipPreferencesInput!
	UpdateSponsorshipPreferences *UpdateSponsorshipPreferencesPayload `json:"updateSponsorshipPreferences,omitempty"`

	// UpdateSubscription: Updates the state for subscribable subjects.
	//
	// Query arguments:
	//   - input UpdateSubscriptionInput!
	UpdateSubscription *UpdateSubscriptionPayload `json:"updateSubscription,omitempty"`

	// UpdateTeamDiscussion: Updates a team discussion.
	//
	// Query arguments:
	//   - input UpdateTeamDiscussionInput!
	UpdateTeamDiscussion *UpdateTeamDiscussionPayload `json:"updateTeamDiscussion,omitempty"`

	// UpdateTeamDiscussionComment: Updates a discussion comment.
	//
	// Query arguments:
	//   - input UpdateTeamDiscussionCommentInput!
	UpdateTeamDiscussionComment *UpdateTeamDiscussionCommentPayload `json:"updateTeamDiscussionComment,omitempty"`

	// UpdateTeamReviewAssignment: Updates team review assignment.
	//
	// Query arguments:
	//   - input UpdateTeamReviewAssignmentInput!
	UpdateTeamReviewAssignment *UpdateTeamReviewAssignmentPayload `json:"updateTeamReviewAssignment,omitempty"`

	// UpdateTeamsRepository: Update team repository.
	//
	// Query arguments:
	//   - input UpdateTeamsRepositoryInput!
	UpdateTeamsRepository *UpdateTeamsRepositoryPayload `json:"updateTeamsRepository,omitempty"`

	// UpdateTopics: Replaces the repository's topics with the given topics.
	//
	// Query arguments:
	//   - input UpdateTopicsInput!
	UpdateTopics *UpdateTopicsPayload `json:"updateTopics,omitempty"`

	// UpdateUserList: Updates an existing user list.
	//
	// Query arguments:
	//   - input UpdateUserListInput!
	UpdateUserList *UpdateUserListPayload `json:"updateUserList,omitempty"`

	// UpdateUserListsForItem: Updates which of the viewer's lists an item belongs to.
	//
	// Query arguments:
	//   - input UpdateUserListsForItemInput!
	UpdateUserListsForItem *UpdateUserListsForItemPayload `json:"updateUserListsForItem,omitempty"`

	// VerifyVerifiableDomain: Verify that a verifiable domain has the expected DNS record.
	//
	// Query arguments:
	//   - input VerifyVerifiableDomainInput!
	VerifyVerifiableDomain *VerifyVerifiableDomainPayload `json:"verifyVerifiableDomain,omitempty"`
}

func (x *Mutation) GetAbortQueuedMigrations() *AbortQueuedMigrationsPayload {
	return x.AbortQueuedMigrations
}
func (x *Mutation) GetAbortRepositoryMigration() *AbortRepositoryMigrationPayload {
	return x.AbortRepositoryMigration
}
func (x *Mutation) GetAcceptEnterpriseAdministratorInvitation() *AcceptEnterpriseAdministratorInvitationPayload {
	return x.AcceptEnterpriseAdministratorInvitation
}
func (x *Mutation) GetAcceptEnterpriseMemberInvitation() *AcceptEnterpriseMemberInvitationPayload {
	return x.AcceptEnterpriseMemberInvitation
}
func (x *Mutation) GetAcceptTopicSuggestion() *AcceptTopicSuggestionPayload {
	return x.AcceptTopicSuggestion
}
func (x *Mutation) GetAccessUserNamespaceRepository() *AccessUserNamespaceRepositoryPayload {
	return x.AccessUserNamespaceRepository
}
func (x *Mutation) GetAddAssigneesToAssignable() *AddAssigneesToAssignablePayload {
	return x.AddAssigneesToAssignable
}
func (x *Mutation) GetAddComment() *AddCommentPayload { return x.AddComment }
func (x *Mutation) GetAddDiscussionComment() *AddDiscussionCommentPayload {
	return x.AddDiscussionComment
}
func (x *Mutation) GetAddDiscussionPollVote() *AddDiscussionPollVotePayload {
	return x.AddDiscussionPollVote
}
func (x *Mutation) GetAddEnterpriseOrganizationMember() *AddEnterpriseOrganizationMemberPayload {
	return x.AddEnterpriseOrganizationMember
}
func (x *Mutation) GetAddEnterpriseSupportEntitlement() *AddEnterpriseSupportEntitlementPayload {
	return x.AddEnterpriseSupportEntitlement
}
func (x *Mutation) GetAddLabelsToLabelable() *AddLabelsToLabelablePayload {
	return x.AddLabelsToLabelable
}
func (x *Mutation) GetAddProjectCard() *AddProjectCardPayload     { return x.AddProjectCard }
func (x *Mutation) GetAddProjectColumn() *AddProjectColumnPayload { return x.AddProjectColumn }
func (x *Mutation) GetAddProjectV2DraftIssue() *AddProjectV2DraftIssuePayload {
	return x.AddProjectV2DraftIssue
}
func (x *Mutation) GetAddProjectV2ItemById() *AddProjectV2ItemByIdPayload {
	return x.AddProjectV2ItemById
}
func (x *Mutation) GetAddPullRequestReview() *AddPullRequestReviewPayload {
	return x.AddPullRequestReview
}
func (x *Mutation) GetAddPullRequestReviewComment() *AddPullRequestReviewCommentPayload {
	return x.AddPullRequestReviewComment
}
func (x *Mutation) GetAddPullRequestReviewThread() *AddPullRequestReviewThreadPayload {
	return x.AddPullRequestReviewThread
}
func (x *Mutation) GetAddPullRequestReviewThreadReply() *AddPullRequestReviewThreadReplyPayload {
	return x.AddPullRequestReviewThreadReply
}
func (x *Mutation) GetAddReaction() *AddReactionPayload                 { return x.AddReaction }
func (x *Mutation) GetAddStar() *AddStarPayload                         { return x.AddStar }
func (x *Mutation) GetAddSubIssue() *AddSubIssuePayload                 { return x.AddSubIssue }
func (x *Mutation) GetAddUpvote() *AddUpvotePayload                     { return x.AddUpvote }
func (x *Mutation) GetAddVerifiableDomain() *AddVerifiableDomainPayload { return x.AddVerifiableDomain }
func (x *Mutation) GetApproveDeployments() *ApproveDeploymentsPayload   { return x.ApproveDeployments }
func (x *Mutation) GetApproveVerifiableDomain() *ApproveVerifiableDomainPayload {
	return x.ApproveVerifiableDomain
}
func (x *Mutation) GetArchiveProjectV2Item() *ArchiveProjectV2ItemPayload {
	return x.ArchiveProjectV2Item
}
func (x *Mutation) GetArchiveRepository() *ArchiveRepositoryPayload { return x.ArchiveRepository }
func (x *Mutation) GetCancelEnterpriseAdminInvitation() *CancelEnterpriseAdminInvitationPayload {
	return x.CancelEnterpriseAdminInvitation
}
func (x *Mutation) GetCancelEnterpriseMemberInvitation() *CancelEnterpriseMemberInvitationPayload {
	return x.CancelEnterpriseMemberInvitation
}
func (x *Mutation) GetCancelSponsorship() *CancelSponsorshipPayload { return x.CancelSponsorship }
func (x *Mutation) GetChangeUserStatus() *ChangeUserStatusPayload   { return x.ChangeUserStatus }
func (x *Mutation) GetClearLabelsFromLabelable() *ClearLabelsFromLabelablePayload {
	return x.ClearLabelsFromLabelable
}
func (x *Mutation) GetClearProjectV2ItemFieldValue() *ClearProjectV2ItemFieldValuePayload {
	return x.ClearProjectV2ItemFieldValue
}
func (x *Mutation) GetCloneProject() *CloneProjectPayload { return x.CloneProject }
func (x *Mutation) GetCloneTemplateRepository() *CloneTemplateRepositoryPayload {
	return x.CloneTemplateRepository
}
func (x *Mutation) GetCloseDiscussion() *CloseDiscussionPayload   { return x.CloseDiscussion }
func (x *Mutation) GetCloseIssue() *CloseIssuePayload             { return x.CloseIssue }
func (x *Mutation) GetClosePullRequest() *ClosePullRequestPayload { return x.ClosePullRequest }
func (x *Mutation) GetConvertProjectCardNoteToIssue() *ConvertProjectCardNoteToIssuePayload {
	return x.ConvertProjectCardNoteToIssue
}
func (x *Mutation) GetConvertProjectV2DraftIssueItemToIssue() *ConvertProjectV2DraftIssueItemToIssuePayload {
	return x.ConvertProjectV2DraftIssueItemToIssue
}
func (x *Mutation) GetConvertPullRequestToDraft() *ConvertPullRequestToDraftPayload {
	return x.ConvertPullRequestToDraft
}
func (x *Mutation) GetCopyProjectV2() *CopyProjectV2Payload { return x.CopyProjectV2 }
func (x *Mutation) GetCreateAttributionInvitation() *CreateAttributionInvitationPayload {
	return x.CreateAttributionInvitation
}
func (x *Mutation) GetCreateBranchProtectionRule() *CreateBranchProtectionRulePayload {
	return x.CreateBranchProtectionRule
}
func (x *Mutation) GetCreateCheckRun() *CreateCheckRunPayload     { return x.CreateCheckRun }
func (x *Mutation) GetCreateCheckSuite() *CreateCheckSuitePayload { return x.CreateCheckSuite }
func (x *Mutation) GetCreateCommitOnBranch() *CreateCommitOnBranchPayload {
	return x.CreateCommitOnBranch
}
func (x *Mutation) GetCreateDeployment() *CreateDeploymentPayload { return x.CreateDeployment }
func (x *Mutation) GetCreateDeploymentStatus() *CreateDeploymentStatusPayload {
	return x.CreateDeploymentStatus
}
func (x *Mutation) GetCreateDiscussion() *CreateDiscussionPayload { return x.CreateDiscussion }
func (x *Mutation) GetCreateEnterpriseOrganization() *CreateEnterpriseOrganizationPayload {
	return x.CreateEnterpriseOrganization
}
func (x *Mutation) GetCreateEnvironment() *CreateEnvironmentPayload { return x.CreateEnvironment }
func (x *Mutation) GetCreateIpAllowListEntry() *CreateIpAllowListEntryPayload {
	return x.CreateIpAllowListEntry
}
func (x *Mutation) GetCreateIssue() *CreateIssuePayload               { return x.CreateIssue }
func (x *Mutation) GetCreateLabel() *CreateLabelPayload               { return x.CreateLabel }
func (x *Mutation) GetCreateLinkedBranch() *CreateLinkedBranchPayload { return x.CreateLinkedBranch }
func (x *Mutation) GetCreateMigrationSource() *CreateMigrationSourcePayload {
	return x.CreateMigrationSource
}
func (x *Mutation) GetCreateProject() *CreateProjectPayload     { return x.CreateProject }
func (x *Mutation) GetCreateProjectV2() *CreateProjectV2Payload { return x.CreateProjectV2 }
func (x *Mutation) GetCreateProjectV2Field() *CreateProjectV2FieldPayload {
	return x.CreateProjectV2Field
}
func (x *Mutation) GetCreateProjectV2StatusUpdate() *CreateProjectV2StatusUpdatePayload {
	return x.CreateProjectV2StatusUpdate
}
func (x *Mutation) GetCreatePullRequest() *CreatePullRequestPayload { return x.CreatePullRequest }
func (x *Mutation) GetCreateRef() *CreateRefPayload                 { return x.CreateRef }
func (x *Mutation) GetCreateRepository() *CreateRepositoryPayload   { return x.CreateRepository }
func (x *Mutation) GetCreateRepositoryRuleset() *CreateRepositoryRulesetPayload {
	return x.CreateRepositoryRuleset
}
func (x *Mutation) GetCreateSponsorsListing() *CreateSponsorsListingPayload {
	return x.CreateSponsorsListing
}
func (x *Mutation) GetCreateSponsorsTier() *CreateSponsorsTierPayload { return x.CreateSponsorsTier }
func (x *Mutation) GetCreateSponsorship() *CreateSponsorshipPayload   { return x.CreateSponsorship }
func (x *Mutation) GetCreateSponsorships() *CreateSponsorshipsPayload { return x.CreateSponsorships }
func (x *Mutation) GetCreateTeamDiscussion() *CreateTeamDiscussionPayload {
	return x.CreateTeamDiscussion
}
func (x *Mutation) GetCreateTeamDiscussionComment() *CreateTeamDiscussionCommentPayload {
	return x.CreateTeamDiscussionComment
}
func (x *Mutation) GetCreateUserList() *CreateUserListPayload { return x.CreateUserList }
func (x *Mutation) GetDeclineTopicSuggestion() *DeclineTopicSuggestionPayload {
	return x.DeclineTopicSuggestion
}
func (x *Mutation) GetDeleteBranchProtectionRule() *DeleteBranchProtectionRulePayload {
	return x.DeleteBranchProtectionRule
}
func (x *Mutation) GetDeleteDeployment() *DeleteDeploymentPayload { return x.DeleteDeployment }
func (x *Mutation) GetDeleteDiscussion() *DeleteDiscussionPayload { return x.DeleteDiscussion }
func (x *Mutation) GetDeleteDiscussionComment() *DeleteDiscussionCommentPayload {
	return x.DeleteDiscussionComment
}
func (x *Mutation) GetDeleteEnvironment() *DeleteEnvironmentPayload { return x.DeleteEnvironment }
func (x *Mutation) GetDeleteIpAllowListEntry() *DeleteIpAllowListEntryPayload {
	return x.DeleteIpAllowListEntry
}
func (x *Mutation) GetDeleteIssue() *DeleteIssuePayload               { return x.DeleteIssue }
func (x *Mutation) GetDeleteIssueComment() *DeleteIssueCommentPayload { return x.DeleteIssueComment }
func (x *Mutation) GetDeleteLabel() *DeleteLabelPayload               { return x.DeleteLabel }
func (x *Mutation) GetDeleteLinkedBranch() *DeleteLinkedBranchPayload { return x.DeleteLinkedBranch }
func (x *Mutation) GetDeletePackageVersion() *DeletePackageVersionPayload {
	return x.DeletePackageVersion
}
func (x *Mutation) GetDeleteProject() *DeleteProjectPayload             { return x.DeleteProject }
func (x *Mutation) GetDeleteProjectCard() *DeleteProjectCardPayload     { return x.DeleteProjectCard }
func (x *Mutation) GetDeleteProjectColumn() *DeleteProjectColumnPayload { return x.DeleteProjectColumn }
func (x *Mutation) GetDeleteProjectV2() *DeleteProjectV2Payload         { return x.DeleteProjectV2 }
func (x *Mutation) GetDeleteProjectV2Field() *DeleteProjectV2FieldPayload {
	return x.DeleteProjectV2Field
}
func (x *Mutation) GetDeleteProjectV2Item() *DeleteProjectV2ItemPayload { return x.DeleteProjectV2Item }
func (x *Mutation) GetDeleteProjectV2StatusUpdate() *DeleteProjectV2StatusUpdatePayload {
	return x.DeleteProjectV2StatusUpdate
}
func (x *Mutation) GetDeleteProjectV2Workflow() *DeleteProjectV2WorkflowPayload {
	return x.DeleteProjectV2Workflow
}
func (x *Mutation) GetDeletePullRequestReview() *DeletePullRequestReviewPayload {
	return x.DeletePullRequestReview
}
func (x *Mutation) GetDeletePullRequestReviewComment() *DeletePullRequestReviewCommentPayload {
	return x.DeletePullRequestReviewComment
}
func (x *Mutation) GetDeleteRef() *DeleteRefPayload { return x.DeleteRef }
func (x *Mutation) GetDeleteRepositoryRuleset() *DeleteRepositoryRulesetPayload {
	return x.DeleteRepositoryRuleset
}
func (x *Mutation) GetDeleteTeamDiscussion() *DeleteTeamDiscussionPayload {
	return x.DeleteTeamDiscussion
}
func (x *Mutation) GetDeleteTeamDiscussionComment() *DeleteTeamDiscussionCommentPayload {
	return x.DeleteTeamDiscussionComment
}
func (x *Mutation) GetDeleteUserList() *DeleteUserListPayload { return x.DeleteUserList }
func (x *Mutation) GetDeleteVerifiableDomain() *DeleteVerifiableDomainPayload {
	return x.DeleteVerifiableDomain
}
func (x *Mutation) GetDequeuePullRequest() *DequeuePullRequestPayload { return x.DequeuePullRequest }
func (x *Mutation) GetDisablePullRequestAutoMerge() *DisablePullRequestAutoMergePayload {
	return x.DisablePullRequestAutoMerge
}
func (x *Mutation) GetDismissPullRequestReview() *DismissPullRequestReviewPayload {
	return x.DismissPullRequestReview
}
func (x *Mutation) GetDismissRepositoryVulnerabilityAlert() *DismissRepositoryVulnerabilityAlertPayload {
	return x.DismissRepositoryVulnerabilityAlert
}
func (x *Mutation) GetEnablePullRequestAutoMerge() *EnablePullRequestAutoMergePayload {
	return x.EnablePullRequestAutoMerge
}
func (x *Mutation) GetEnqueuePullRequest() *EnqueuePullRequestPayload { return x.EnqueuePullRequest }
func (x *Mutation) GetFollowOrganization() *FollowOrganizationPayload { return x.FollowOrganization }
func (x *Mutation) GetFollowUser() *FollowUserPayload                 { return x.FollowUser }
func (x *Mutation) GetGrantEnterpriseOrganizationsMigratorRole() *GrantEnterpriseOrganizationsMigratorRolePayload {
	return x.GrantEnterpriseOrganizationsMigratorRole
}
func (x *Mutation) GetGrantMigratorRole() *GrantMigratorRolePayload { return x.GrantMigratorRole }
func (x *Mutation) GetImportProject() *ImportProjectPayload         { return x.ImportProject }
func (x *Mutation) GetInviteEnterpriseAdmin() *InviteEnterpriseAdminPayload {
	return x.InviteEnterpriseAdmin
}
func (x *Mutation) GetInviteEnterpriseMember() *InviteEnterpriseMemberPayload {
	return x.InviteEnterpriseMember
}
func (x *Mutation) GetLinkProjectV2ToRepository() *LinkProjectV2ToRepositoryPayload {
	return x.LinkProjectV2ToRepository
}
func (x *Mutation) GetLinkProjectV2ToTeam() *LinkProjectV2ToTeamPayload { return x.LinkProjectV2ToTeam }
func (x *Mutation) GetLinkRepositoryToProject() *LinkRepositoryToProjectPayload {
	return x.LinkRepositoryToProject
}
func (x *Mutation) GetLockLockable() *LockLockablePayload { return x.LockLockable }
func (x *Mutation) GetMarkDiscussionCommentAsAnswer() *MarkDiscussionCommentAsAnswerPayload {
	return x.MarkDiscussionCommentAsAnswer
}
func (x *Mutation) GetMarkFileAsViewed() *MarkFileAsViewedPayload { return x.MarkFileAsViewed }
func (x *Mutation) GetMarkProjectV2AsTemplate() *MarkProjectV2AsTemplatePayload {
	return x.MarkProjectV2AsTemplate
}
func (x *Mutation) GetMarkPullRequestReadyForReview() *MarkPullRequestReadyForReviewPayload {
	return x.MarkPullRequestReadyForReview
}
func (x *Mutation) GetMergeBranch() *MergeBranchPayload                 { return x.MergeBranch }
func (x *Mutation) GetMergePullRequest() *MergePullRequestPayload       { return x.MergePullRequest }
func (x *Mutation) GetMinimizeComment() *MinimizeCommentPayload         { return x.MinimizeComment }
func (x *Mutation) GetMoveProjectCard() *MoveProjectCardPayload         { return x.MoveProjectCard }
func (x *Mutation) GetMoveProjectColumn() *MoveProjectColumnPayload     { return x.MoveProjectColumn }
func (x *Mutation) GetPinEnvironment() *PinEnvironmentPayload           { return x.PinEnvironment }
func (x *Mutation) GetPinIssue() *PinIssuePayload                       { return x.PinIssue }
func (x *Mutation) GetPublishSponsorsTier() *PublishSponsorsTierPayload { return x.PublishSponsorsTier }
func (x *Mutation) GetRegenerateEnterpriseIdentityProviderRecoveryCodes() *RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
	return x.RegenerateEnterpriseIdentityProviderRecoveryCodes
}
func (x *Mutation) GetRegenerateVerifiableDomainToken() *RegenerateVerifiableDomainTokenPayload {
	return x.RegenerateVerifiableDomainToken
}
func (x *Mutation) GetRejectDeployments() *RejectDeploymentsPayload { return x.RejectDeployments }
func (x *Mutation) GetRemoveAssigneesFromAssignable() *RemoveAssigneesFromAssignablePayload {
	return x.RemoveAssigneesFromAssignable
}
func (x *Mutation) GetRemoveEnterpriseAdmin() *RemoveEnterpriseAdminPayload {
	return x.RemoveEnterpriseAdmin
}
func (x *Mutation) GetRemoveEnterpriseIdentityProvider() *RemoveEnterpriseIdentityProviderPayload {
	return x.RemoveEnterpriseIdentityProvider
}
func (x *Mutation) GetRemoveEnterpriseMember() *RemoveEnterpriseMemberPayload {
	return x.RemoveEnterpriseMember
}
func (x *Mutation) GetRemoveEnterpriseOrganization() *RemoveEnterpriseOrganizationPayload {
	return x.RemoveEnterpriseOrganization
}
func (x *Mutation) GetRemoveEnterpriseSupportEntitlement() *RemoveEnterpriseSupportEntitlementPayload {
	return x.RemoveEnterpriseSupportEntitlement
}
func (x *Mutation) GetRemoveLabelsFromLabelable() *RemoveLabelsFromLabelablePayload {
	return x.RemoveLabelsFromLabelable
}
func (x *Mutation) GetRemoveOutsideCollaborator() *RemoveOutsideCollaboratorPayload {
	return x.RemoveOutsideCollaborator
}
func (x *Mutation) GetRemoveReaction() *RemoveReactionPayload         { return x.RemoveReaction }
func (x *Mutation) GetRemoveStar() *RemoveStarPayload                 { return x.RemoveStar }
func (x *Mutation) GetRemoveSubIssue() *RemoveSubIssuePayload         { return x.RemoveSubIssue }
func (x *Mutation) GetRemoveUpvote() *RemoveUpvotePayload             { return x.RemoveUpvote }
func (x *Mutation) GetReopenDiscussion() *ReopenDiscussionPayload     { return x.ReopenDiscussion }
func (x *Mutation) GetReopenIssue() *ReopenIssuePayload               { return x.ReopenIssue }
func (x *Mutation) GetReopenPullRequest() *ReopenPullRequestPayload   { return x.ReopenPullRequest }
func (x *Mutation) GetReorderEnvironment() *ReorderEnvironmentPayload { return x.ReorderEnvironment }
func (x *Mutation) GetReprioritizeSubIssue() *ReprioritizeSubIssuePayload {
	return x.ReprioritizeSubIssue
}
func (x *Mutation) GetRequestReviews() *RequestReviewsPayload           { return x.RequestReviews }
func (x *Mutation) GetRerequestCheckSuite() *RerequestCheckSuitePayload { return x.RerequestCheckSuite }
func (x *Mutation) GetResolveReviewThread() *ResolveReviewThreadPayload { return x.ResolveReviewThread }
func (x *Mutation) GetRetireSponsorsTier() *RetireSponsorsTierPayload   { return x.RetireSponsorsTier }
func (x *Mutation) GetRevertPullRequest() *RevertPullRequestPayload     { return x.RevertPullRequest }
func (x *Mutation) GetRevokeEnterpriseOrganizationsMigratorRole() *RevokeEnterpriseOrganizationsMigratorRolePayload {
	return x.RevokeEnterpriseOrganizationsMigratorRole
}
func (x *Mutation) GetRevokeMigratorRole() *RevokeMigratorRolePayload { return x.RevokeMigratorRole }
func (x *Mutation) GetSetEnterpriseIdentityProvider() *SetEnterpriseIdentityProviderPayload {
	return x.SetEnterpriseIdentityProvider
}
func (x *Mutation) GetSetOrganizationInteractionLimit() *SetOrganizationInteractionLimitPayload {
	return x.SetOrganizationInteractionLimit
}
func (x *Mutation) GetSetRepositoryInteractionLimit() *SetRepositoryInteractionLimitPayload {
	return x.SetRepositoryInteractionLimit
}
func (x *Mutation) GetSetUserInteractionLimit() *SetUserInteractionLimitPayload {
	return x.SetUserInteractionLimit
}
func (x *Mutation) GetStartOrganizationMigration() *StartOrganizationMigrationPayload {
	return x.StartOrganizationMigration
}
func (x *Mutation) GetStartRepositoryMigration() *StartRepositoryMigrationPayload {
	return x.StartRepositoryMigration
}
func (x *Mutation) GetSubmitPullRequestReview() *SubmitPullRequestReviewPayload {
	return x.SubmitPullRequestReview
}
func (x *Mutation) GetTransferEnterpriseOrganization() *TransferEnterpriseOrganizationPayload {
	return x.TransferEnterpriseOrganization
}
func (x *Mutation) GetTransferIssue() *TransferIssuePayload { return x.TransferIssue }
func (x *Mutation) GetUnarchiveProjectV2Item() *UnarchiveProjectV2ItemPayload {
	return x.UnarchiveProjectV2Item
}
func (x *Mutation) GetUnarchiveRepository() *UnarchiveRepositoryPayload { return x.UnarchiveRepository }
func (x *Mutation) GetUnfollowOrganization() *UnfollowOrganizationPayload {
	return x.UnfollowOrganization
}
func (x *Mutation) GetUnfollowUser() *UnfollowUserPayload { return x.UnfollowUser }
func (x *Mutation) GetUnlinkProjectV2FromRepository() *UnlinkProjectV2FromRepositoryPayload {
	return x.UnlinkProjectV2FromRepository
}
func (x *Mutation) GetUnlinkProjectV2FromTeam() *UnlinkProjectV2FromTeamPayload {
	return x.UnlinkProjectV2FromTeam
}
func (x *Mutation) GetUnlinkRepositoryFromProject() *UnlinkRepositoryFromProjectPayload {
	return x.UnlinkRepositoryFromProject
}
func (x *Mutation) GetUnlockLockable() *UnlockLockablePayload { return x.UnlockLockable }
func (x *Mutation) GetUnmarkDiscussionCommentAsAnswer() *UnmarkDiscussionCommentAsAnswerPayload {
	return x.UnmarkDiscussionCommentAsAnswer
}
func (x *Mutation) GetUnmarkFileAsViewed() *UnmarkFileAsViewedPayload { return x.UnmarkFileAsViewed }
func (x *Mutation) GetUnmarkIssueAsDuplicate() *UnmarkIssueAsDuplicatePayload {
	return x.UnmarkIssueAsDuplicate
}
func (x *Mutation) GetUnmarkProjectV2AsTemplate() *UnmarkProjectV2AsTemplatePayload {
	return x.UnmarkProjectV2AsTemplate
}
func (x *Mutation) GetUnminimizeComment() *UnminimizeCommentPayload { return x.UnminimizeComment }
func (x *Mutation) GetUnpinIssue() *UnpinIssuePayload               { return x.UnpinIssue }
func (x *Mutation) GetUnresolveReviewThread() *UnresolveReviewThreadPayload {
	return x.UnresolveReviewThread
}
func (x *Mutation) GetUpdateBranchProtectionRule() *UpdateBranchProtectionRulePayload {
	return x.UpdateBranchProtectionRule
}
func (x *Mutation) GetUpdateCheckRun() *UpdateCheckRunPayload { return x.UpdateCheckRun }
func (x *Mutation) GetUpdateCheckSuitePreferences() *UpdateCheckSuitePreferencesPayload {
	return x.UpdateCheckSuitePreferences
}
func (x *Mutation) GetUpdateDiscussion() *UpdateDiscussionPayload { return x.UpdateDiscussion }
func (x *Mutation) GetUpdateDiscussionComment() *UpdateDiscussionCommentPayload {
	return x.UpdateDiscussionComment
}
func (x *Mutation) GetUpdateEnterpriseAdministratorRole() *UpdateEnterpriseAdministratorRolePayload {
	return x.UpdateEnterpriseAdministratorRole
}
func (x *Mutation) GetUpdateEnterpriseAllowPrivateRepositoryForkingSetting() *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
	return x.UpdateEnterpriseAllowPrivateRepositoryForkingSetting
}
func (x *Mutation) GetUpdateEnterpriseDefaultRepositoryPermissionSetting() *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
	return x.UpdateEnterpriseDefaultRepositoryPermissionSetting
}
func (x *Mutation) GetUpdateEnterpriseDeployKeySetting() *UpdateEnterpriseDeployKeySettingPayload {
	return x.UpdateEnterpriseDeployKeySetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting() *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
	return x.UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanCreateRepositoriesSetting() *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
	return x.UpdateEnterpriseMembersCanCreateRepositoriesSetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanDeleteIssuesSetting() *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
	return x.UpdateEnterpriseMembersCanDeleteIssuesSetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanDeleteRepositoriesSetting() *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
	return x.UpdateEnterpriseMembersCanDeleteRepositoriesSetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanInviteCollaboratorsSetting() *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
	return x.UpdateEnterpriseMembersCanInviteCollaboratorsSetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanMakePurchasesSetting() *UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
	return x.UpdateEnterpriseMembersCanMakePurchasesSetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanUpdateProtectedBranchesSetting() *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
	return x.UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
}
func (x *Mutation) GetUpdateEnterpriseMembersCanViewDependencyInsightsSetting() *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
	return x.UpdateEnterpriseMembersCanViewDependencyInsightsSetting
}
func (x *Mutation) GetUpdateEnterpriseOrganizationProjectsSetting() *UpdateEnterpriseOrganizationProjectsSettingPayload {
	return x.UpdateEnterpriseOrganizationProjectsSetting
}
func (x *Mutation) GetUpdateEnterpriseOwnerOrganizationRole() *UpdateEnterpriseOwnerOrganizationRolePayload {
	return x.UpdateEnterpriseOwnerOrganizationRole
}
func (x *Mutation) GetUpdateEnterpriseProfile() *UpdateEnterpriseProfilePayload {
	return x.UpdateEnterpriseProfile
}
func (x *Mutation) GetUpdateEnterpriseRepositoryProjectsSetting() *UpdateEnterpriseRepositoryProjectsSettingPayload {
	return x.UpdateEnterpriseRepositoryProjectsSetting
}
func (x *Mutation) GetUpdateEnterpriseTeamDiscussionsSetting() *UpdateEnterpriseTeamDiscussionsSettingPayload {
	return x.UpdateEnterpriseTeamDiscussionsSetting
}
func (x *Mutation) GetUpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting() *UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload {
	return x.UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting
}
func (x *Mutation) GetUpdateEnterpriseTwoFactorAuthenticationRequiredSetting() *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
	return x.UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
}
func (x *Mutation) GetUpdateEnvironment() *UpdateEnvironmentPayload { return x.UpdateEnvironment }
func (x *Mutation) GetUpdateIpAllowListEnabledSetting() *UpdateIpAllowListEnabledSettingPayload {
	return x.UpdateIpAllowListEnabledSetting
}
func (x *Mutation) GetUpdateIpAllowListEntry() *UpdateIpAllowListEntryPayload {
	return x.UpdateIpAllowListEntry
}
func (x *Mutation) GetUpdateIpAllowListForInstalledAppsEnabledSetting() *UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
	return x.UpdateIpAllowListForInstalledAppsEnabledSetting
}
func (x *Mutation) GetUpdateIssue() *UpdateIssuePayload               { return x.UpdateIssue }
func (x *Mutation) GetUpdateIssueComment() *UpdateIssueCommentPayload { return x.UpdateIssueComment }
func (x *Mutation) GetUpdateLabel() *UpdateLabelPayload               { return x.UpdateLabel }
func (x *Mutation) GetUpdateNotificationRestrictionSetting() *UpdateNotificationRestrictionSettingPayload {
	return x.UpdateNotificationRestrictionSetting
}
func (x *Mutation) GetUpdateOrganizationAllowPrivateRepositoryForkingSetting() *UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
	return x.UpdateOrganizationAllowPrivateRepositoryForkingSetting
}
func (x *Mutation) GetUpdateOrganizationWebCommitSignoffSetting() *UpdateOrganizationWebCommitSignoffSettingPayload {
	return x.UpdateOrganizationWebCommitSignoffSetting
}
func (x *Mutation) GetUpdatePatreonSponsorability() *UpdatePatreonSponsorabilityPayload {
	return x.UpdatePatreonSponsorability
}
func (x *Mutation) GetUpdateProject() *UpdateProjectPayload             { return x.UpdateProject }
func (x *Mutation) GetUpdateProjectCard() *UpdateProjectCardPayload     { return x.UpdateProjectCard }
func (x *Mutation) GetUpdateProjectColumn() *UpdateProjectColumnPayload { return x.UpdateProjectColumn }
func (x *Mutation) GetUpdateProjectV2() *UpdateProjectV2Payload         { return x.UpdateProjectV2 }
func (x *Mutation) GetUpdateProjectV2Collaborators() *UpdateProjectV2CollaboratorsPayload {
	return x.UpdateProjectV2Collaborators
}
func (x *Mutation) GetUpdateProjectV2DraftIssue() *UpdateProjectV2DraftIssuePayload {
	return x.UpdateProjectV2DraftIssue
}
func (x *Mutation) GetUpdateProjectV2Field() *UpdateProjectV2FieldPayload {
	return x.UpdateProjectV2Field
}
func (x *Mutation) GetUpdateProjectV2ItemFieldValue() *UpdateProjectV2ItemFieldValuePayload {
	return x.UpdateProjectV2ItemFieldValue
}
func (x *Mutation) GetUpdateProjectV2ItemPosition() *UpdateProjectV2ItemPositionPayload {
	return x.UpdateProjectV2ItemPosition
}
func (x *Mutation) GetUpdateProjectV2StatusUpdate() *UpdateProjectV2StatusUpdatePayload {
	return x.UpdateProjectV2StatusUpdate
}
func (x *Mutation) GetUpdatePullRequest() *UpdatePullRequestPayload { return x.UpdatePullRequest }
func (x *Mutation) GetUpdatePullRequestBranch() *UpdatePullRequestBranchPayload {
	return x.UpdatePullRequestBranch
}
func (x *Mutation) GetUpdatePullRequestReview() *UpdatePullRequestReviewPayload {
	return x.UpdatePullRequestReview
}
func (x *Mutation) GetUpdatePullRequestReviewComment() *UpdatePullRequestReviewCommentPayload {
	return x.UpdatePullRequestReviewComment
}
func (x *Mutation) GetUpdateRef() *UpdateRefPayload               { return x.UpdateRef }
func (x *Mutation) GetUpdateRefs() *UpdateRefsPayload             { return x.UpdateRefs }
func (x *Mutation) GetUpdateRepository() *UpdateRepositoryPayload { return x.UpdateRepository }
func (x *Mutation) GetUpdateRepositoryRuleset() *UpdateRepositoryRulesetPayload {
	return x.UpdateRepositoryRuleset
}
func (x *Mutation) GetUpdateRepositoryWebCommitSignoffSetting() *UpdateRepositoryWebCommitSignoffSettingPayload {
	return x.UpdateRepositoryWebCommitSignoffSetting
}
func (x *Mutation) GetUpdateSponsorshipPreferences() *UpdateSponsorshipPreferencesPayload {
	return x.UpdateSponsorshipPreferences
}
func (x *Mutation) GetUpdateSubscription() *UpdateSubscriptionPayload { return x.UpdateSubscription }
func (x *Mutation) GetUpdateTeamDiscussion() *UpdateTeamDiscussionPayload {
	return x.UpdateTeamDiscussion
}
func (x *Mutation) GetUpdateTeamDiscussionComment() *UpdateTeamDiscussionCommentPayload {
	return x.UpdateTeamDiscussionComment
}
func (x *Mutation) GetUpdateTeamReviewAssignment() *UpdateTeamReviewAssignmentPayload {
	return x.UpdateTeamReviewAssignment
}
func (x *Mutation) GetUpdateTeamsRepository() *UpdateTeamsRepositoryPayload {
	return x.UpdateTeamsRepository
}
func (x *Mutation) GetUpdateTopics() *UpdateTopicsPayload     { return x.UpdateTopics }
func (x *Mutation) GetUpdateUserList() *UpdateUserListPayload { return x.UpdateUserList }
func (x *Mutation) GetUpdateUserListsForItem() *UpdateUserListsForItemPayload {
	return x.UpdateUserListsForItem
}
func (x *Mutation) GetVerifyVerifiableDomain() *VerifyVerifiableDomainPayload {
	return x.VerifyVerifiableDomain
}

// Node (INTERFACE): An object with an ID.
// Node_Interface: An object with an ID.
//
// Possible types:
//
//   - *AddedToMergeQueueEvent
//   - *AddedToProjectEvent
//   - *App
//   - *AssignedEvent
//   - *AutoMergeDisabledEvent
//   - *AutoMergeEnabledEvent
//   - *AutoRebaseEnabledEvent
//   - *AutoSquashEnabledEvent
//   - *AutomaticBaseChangeFailedEvent
//   - *AutomaticBaseChangeSucceededEvent
//   - *BaseRefChangedEvent
//   - *BaseRefDeletedEvent
//   - *BaseRefForcePushedEvent
//   - *Blob
//   - *Bot
//   - *BranchProtectionRule
//   - *BypassForcePushAllowance
//   - *BypassPullRequestAllowance
//   - *CWE
//   - *CheckRun
//   - *CheckSuite
//   - *ClosedEvent
//   - *CodeOfConduct
//   - *CommentDeletedEvent
//   - *Commit
//   - *CommitComment
//   - *CommitCommentThread
//   - *Comparison
//   - *ConnectedEvent
//   - *ConvertToDraftEvent
//   - *ConvertedNoteToIssueEvent
//   - *ConvertedToDiscussionEvent
//   - *CrossReferencedEvent
//   - *DemilestonedEvent
//   - *DependencyGraphManifest
//   - *DeployKey
//   - *DeployedEvent
//   - *Deployment
//   - *DeploymentEnvironmentChangedEvent
//   - *DeploymentReview
//   - *DeploymentStatus
//   - *DisconnectedEvent
//   - *Discussion
//   - *DiscussionCategory
//   - *DiscussionComment
//   - *DiscussionPoll
//   - *DiscussionPollOption
//   - *DraftIssue
//   - *Enterprise
//   - *EnterpriseAdministratorInvitation
//   - *EnterpriseIdentityProvider
//   - *EnterpriseMemberInvitation
//   - *EnterpriseRepositoryInfo
//   - *EnterpriseServerInstallation
//   - *EnterpriseServerUserAccount
//   - *EnterpriseServerUserAccountEmail
//   - *EnterpriseServerUserAccountsUpload
//   - *EnterpriseUserAccount
//   - *Environment
//   - *ExternalIdentity
//   - *Gist
//   - *GistComment
//   - *HeadRefDeletedEvent
//   - *HeadRefForcePushedEvent
//   - *HeadRefRestoredEvent
//   - *IpAllowListEntry
//   - *Issue
//   - *IssueComment
//   - *Label
//   - *LabeledEvent
//   - *Language
//   - *License
//   - *LinkedBranch
//   - *LockedEvent
//   - *Mannequin
//   - *MarkedAsDuplicateEvent
//   - *MarketplaceCategory
//   - *MarketplaceListing
//   - *MemberFeatureRequestNotification
//   - *MembersCanDeleteReposClearAuditEntry
//   - *MembersCanDeleteReposDisableAuditEntry
//   - *MembersCanDeleteReposEnableAuditEntry
//   - *MentionedEvent
//   - *MergeQueue
//   - *MergeQueueEntry
//   - *MergedEvent
//   - *MigrationSource
//   - *Milestone
//   - *MilestonedEvent
//   - *MovedColumnsInProjectEvent
//   - *OIDCProvider
//   - *OauthApplicationCreateAuditEntry
//   - *OrgAddBillingManagerAuditEntry
//   - *OrgAddMemberAuditEntry
//   - *OrgBlockUserAuditEntry
//   - *OrgConfigDisableCollaboratorsOnlyAuditEntry
//   - *OrgConfigEnableCollaboratorsOnlyAuditEntry
//   - *OrgCreateAuditEntry
//   - *OrgDisableOauthAppRestrictionsAuditEntry
//   - *OrgDisableSamlAuditEntry
//   - *OrgDisableTwoFactorRequirementAuditEntry
//   - *OrgEnableOauthAppRestrictionsAuditEntry
//   - *OrgEnableSamlAuditEntry
//   - *OrgEnableTwoFactorRequirementAuditEntry
//   - *OrgInviteMemberAuditEntry
//   - *OrgInviteToBusinessAuditEntry
//   - *OrgOauthAppAccessApprovedAuditEntry
//   - *OrgOauthAppAccessBlockedAuditEntry
//   - *OrgOauthAppAccessDeniedAuditEntry
//   - *OrgOauthAppAccessRequestedAuditEntry
//   - *OrgOauthAppAccessUnblockedAuditEntry
//   - *OrgRemoveBillingManagerAuditEntry
//   - *OrgRemoveMemberAuditEntry
//   - *OrgRemoveOutsideCollaboratorAuditEntry
//   - *OrgRestoreMemberAuditEntry
//   - *OrgUnblockUserAuditEntry
//   - *OrgUpdateDefaultRepositoryPermissionAuditEntry
//   - *OrgUpdateMemberAuditEntry
//   - *OrgUpdateMemberRepositoryCreationPermissionAuditEntry
//   - *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
//   - *Organization
//   - *OrganizationIdentityProvider
//   - *OrganizationInvitation
//   - *OrganizationMigration
//   - *Package
//   - *PackageFile
//   - *PackageTag
//   - *PackageVersion
//   - *ParentIssueAddedEvent
//   - *ParentIssueRemovedEvent
//   - *PinnedDiscussion
//   - *PinnedEnvironment
//   - *PinnedEvent
//   - *PinnedIssue
//   - *PrivateRepositoryForkingDisableAuditEntry
//   - *PrivateRepositoryForkingEnableAuditEntry
//   - *Project
//   - *ProjectCard
//   - *ProjectColumn
//   - *ProjectV2
//   - *ProjectV2Field
//   - *ProjectV2Item
//   - *ProjectV2ItemFieldDateValue
//   - *ProjectV2ItemFieldIterationValue
//   - *ProjectV2ItemFieldNumberValue
//   - *ProjectV2ItemFieldSingleSelectValue
//   - *ProjectV2ItemFieldTextValue
//   - *ProjectV2IterationField
//   - *ProjectV2SingleSelectField
//   - *ProjectV2StatusUpdate
//   - *ProjectV2View
//   - *ProjectV2Workflow
//   - *PublicKey
//   - *PullRequest
//   - *PullRequestCommit
//   - *PullRequestCommitCommentThread
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *PullRequestReviewThread
//   - *PullRequestThread
//   - *Push
//   - *PushAllowance
//   - *Query
//   - *Reaction
//   - *ReadyForReviewEvent
//   - *Ref
//   - *ReferencedEvent
//   - *Release
//   - *ReleaseAsset
//   - *RemovedFromMergeQueueEvent
//   - *RemovedFromProjectEvent
//   - *RenamedTitleEvent
//   - *ReopenedEvent
//   - *RepoAccessAuditEntry
//   - *RepoAddMemberAuditEntry
//   - *RepoAddTopicAuditEntry
//   - *RepoArchivedAuditEntry
//   - *RepoChangeMergeSettingAuditEntry
//   - *RepoConfigDisableAnonymousGitAccessAuditEntry
//   - *RepoConfigDisableCollaboratorsOnlyAuditEntry
//   - *RepoConfigDisableContributorsOnlyAuditEntry
//   - *RepoConfigDisableSockpuppetDisallowedAuditEntry
//   - *RepoConfigEnableAnonymousGitAccessAuditEntry
//   - *RepoConfigEnableCollaboratorsOnlyAuditEntry
//   - *RepoConfigEnableContributorsOnlyAuditEntry
//   - *RepoConfigEnableSockpuppetDisallowedAuditEntry
//   - *RepoConfigLockAnonymousGitAccessAuditEntry
//   - *RepoConfigUnlockAnonymousGitAccessAuditEntry
//   - *RepoCreateAuditEntry
//   - *RepoDestroyAuditEntry
//   - *RepoRemoveMemberAuditEntry
//   - *RepoRemoveTopicAuditEntry
//   - *Repository
//   - *RepositoryInvitation
//   - *RepositoryMigration
//   - *RepositoryRule
//   - *RepositoryRuleset
//   - *RepositoryRulesetBypassActor
//   - *RepositoryTopic
//   - *RepositoryVisibilityChangeDisableAuditEntry
//   - *RepositoryVisibilityChangeEnableAuditEntry
//   - *RepositoryVulnerabilityAlert
//   - *ReviewDismissalAllowance
//   - *ReviewDismissedEvent
//   - *ReviewRequest
//   - *ReviewRequestRemovedEvent
//   - *ReviewRequestedEvent
//   - *SavedReply
//   - *SecurityAdvisory
//   - *SponsorsActivity
//   - *SponsorsListing
//   - *SponsorsListingFeaturedItem
//   - *SponsorsTier
//   - *Sponsorship
//   - *SponsorshipNewsletter
//   - *Status
//   - *StatusCheckRollup
//   - *StatusContext
//   - *SubIssueAddedEvent
//   - *SubIssueRemovedEvent
//   - *SubscribedEvent
//   - *Tag
//   - *Team
//   - *TeamAddMemberAuditEntry
//   - *TeamAddRepositoryAuditEntry
//   - *TeamChangeParentTeamAuditEntry
//   - *TeamDiscussion
//   - *TeamDiscussionComment
//   - *TeamRemoveMemberAuditEntry
//   - *TeamRemoveRepositoryAuditEntry
//   - *Topic
//   - *TransferredEvent
//   - *Tree
//   - *UnassignedEvent
//   - *UnlabeledEvent
//   - *UnlockedEvent
//   - *UnmarkedAsDuplicateEvent
//   - *UnpinnedEvent
//   - *UnsubscribedEvent
//   - *User
//   - *UserBlockedEvent
//   - *UserContentEdit
//   - *UserList
//   - *UserNamespaceRepository
//   - *UserStatus
//   - *VerifiableDomain
//   - *Workflow
//   - *WorkflowRun
//   - *WorkflowRunFile
type Node_Interface interface {
	isNode()
	GetId() ID
}

func (*AddedToMergeQueueEvent) isNode()                                  {}
func (*AddedToProjectEvent) isNode()                                     {}
func (*App) isNode()                                                     {}
func (*AssignedEvent) isNode()                                           {}
func (*AutoMergeDisabledEvent) isNode()                                  {}
func (*AutoMergeEnabledEvent) isNode()                                   {}
func (*AutoRebaseEnabledEvent) isNode()                                  {}
func (*AutoSquashEnabledEvent) isNode()                                  {}
func (*AutomaticBaseChangeFailedEvent) isNode()                          {}
func (*AutomaticBaseChangeSucceededEvent) isNode()                       {}
func (*BaseRefChangedEvent) isNode()                                     {}
func (*BaseRefDeletedEvent) isNode()                                     {}
func (*BaseRefForcePushedEvent) isNode()                                 {}
func (*Blob) isNode()                                                    {}
func (*Bot) isNode()                                                     {}
func (*BranchProtectionRule) isNode()                                    {}
func (*BypassForcePushAllowance) isNode()                                {}
func (*BypassPullRequestAllowance) isNode()                              {}
func (*CWE) isNode()                                                     {}
func (*CheckRun) isNode()                                                {}
func (*CheckSuite) isNode()                                              {}
func (*ClosedEvent) isNode()                                             {}
func (*CodeOfConduct) isNode()                                           {}
func (*CommentDeletedEvent) isNode()                                     {}
func (*Commit) isNode()                                                  {}
func (*CommitComment) isNode()                                           {}
func (*CommitCommentThread) isNode()                                     {}
func (*Comparison) isNode()                                              {}
func (*ConnectedEvent) isNode()                                          {}
func (*ConvertToDraftEvent) isNode()                                     {}
func (*ConvertedNoteToIssueEvent) isNode()                               {}
func (*ConvertedToDiscussionEvent) isNode()                              {}
func (*CrossReferencedEvent) isNode()                                    {}
func (*DemilestonedEvent) isNode()                                       {}
func (*DependencyGraphManifest) isNode()                                 {}
func (*DeployKey) isNode()                                               {}
func (*DeployedEvent) isNode()                                           {}
func (*Deployment) isNode()                                              {}
func (*DeploymentEnvironmentChangedEvent) isNode()                       {}
func (*DeploymentReview) isNode()                                        {}
func (*DeploymentStatus) isNode()                                        {}
func (*DisconnectedEvent) isNode()                                       {}
func (*Discussion) isNode()                                              {}
func (*DiscussionCategory) isNode()                                      {}
func (*DiscussionComment) isNode()                                       {}
func (*DiscussionPoll) isNode()                                          {}
func (*DiscussionPollOption) isNode()                                    {}
func (*DraftIssue) isNode()                                              {}
func (*Enterprise) isNode()                                              {}
func (*EnterpriseAdministratorInvitation) isNode()                       {}
func (*EnterpriseIdentityProvider) isNode()                              {}
func (*EnterpriseMemberInvitation) isNode()                              {}
func (*EnterpriseRepositoryInfo) isNode()                                {}
func (*EnterpriseServerInstallation) isNode()                            {}
func (*EnterpriseServerUserAccount) isNode()                             {}
func (*EnterpriseServerUserAccountEmail) isNode()                        {}
func (*EnterpriseServerUserAccountsUpload) isNode()                      {}
func (*EnterpriseUserAccount) isNode()                                   {}
func (*Environment) isNode()                                             {}
func (*ExternalIdentity) isNode()                                        {}
func (*Gist) isNode()                                                    {}
func (*GistComment) isNode()                                             {}
func (*HeadRefDeletedEvent) isNode()                                     {}
func (*HeadRefForcePushedEvent) isNode()                                 {}
func (*HeadRefRestoredEvent) isNode()                                    {}
func (*IpAllowListEntry) isNode()                                        {}
func (*Issue) isNode()                                                   {}
func (*IssueComment) isNode()                                            {}
func (*Label) isNode()                                                   {}
func (*LabeledEvent) isNode()                                            {}
func (*Language) isNode()                                                {}
func (*License) isNode()                                                 {}
func (*LinkedBranch) isNode()                                            {}
func (*LockedEvent) isNode()                                             {}
func (*Mannequin) isNode()                                               {}
func (*MarkedAsDuplicateEvent) isNode()                                  {}
func (*MarketplaceCategory) isNode()                                     {}
func (*MarketplaceListing) isNode()                                      {}
func (*MemberFeatureRequestNotification) isNode()                        {}
func (*MembersCanDeleteReposClearAuditEntry) isNode()                    {}
func (*MembersCanDeleteReposDisableAuditEntry) isNode()                  {}
func (*MembersCanDeleteReposEnableAuditEntry) isNode()                   {}
func (*MentionedEvent) isNode()                                          {}
func (*MergeQueue) isNode()                                              {}
func (*MergeQueueEntry) isNode()                                         {}
func (*MergedEvent) isNode()                                             {}
func (*MigrationSource) isNode()                                         {}
func (*Milestone) isNode()                                               {}
func (*MilestonedEvent) isNode()                                         {}
func (*MovedColumnsInProjectEvent) isNode()                              {}
func (*OIDCProvider) isNode()                                            {}
func (*OauthApplicationCreateAuditEntry) isNode()                        {}
func (*OrgAddBillingManagerAuditEntry) isNode()                          {}
func (*OrgAddMemberAuditEntry) isNode()                                  {}
func (*OrgBlockUserAuditEntry) isNode()                                  {}
func (*OrgConfigDisableCollaboratorsOnlyAuditEntry) isNode()             {}
func (*OrgConfigEnableCollaboratorsOnlyAuditEntry) isNode()              {}
func (*OrgCreateAuditEntry) isNode()                                     {}
func (*OrgDisableOauthAppRestrictionsAuditEntry) isNode()                {}
func (*OrgDisableSamlAuditEntry) isNode()                                {}
func (*OrgDisableTwoFactorRequirementAuditEntry) isNode()                {}
func (*OrgEnableOauthAppRestrictionsAuditEntry) isNode()                 {}
func (*OrgEnableSamlAuditEntry) isNode()                                 {}
func (*OrgEnableTwoFactorRequirementAuditEntry) isNode()                 {}
func (*OrgInviteMemberAuditEntry) isNode()                               {}
func (*OrgInviteToBusinessAuditEntry) isNode()                           {}
func (*OrgOauthAppAccessApprovedAuditEntry) isNode()                     {}
func (*OrgOauthAppAccessBlockedAuditEntry) isNode()                      {}
func (*OrgOauthAppAccessDeniedAuditEntry) isNode()                       {}
func (*OrgOauthAppAccessRequestedAuditEntry) isNode()                    {}
func (*OrgOauthAppAccessUnblockedAuditEntry) isNode()                    {}
func (*OrgRemoveBillingManagerAuditEntry) isNode()                       {}
func (*OrgRemoveMemberAuditEntry) isNode()                               {}
func (*OrgRemoveOutsideCollaboratorAuditEntry) isNode()                  {}
func (*OrgRestoreMemberAuditEntry) isNode()                              {}
func (*OrgUnblockUserAuditEntry) isNode()                                {}
func (*OrgUpdateDefaultRepositoryPermissionAuditEntry) isNode()          {}
func (*OrgUpdateMemberAuditEntry) isNode()                               {}
func (*OrgUpdateMemberRepositoryCreationPermissionAuditEntry) isNode()   {}
func (*OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) isNode() {}
func (*Organization) isNode()                                            {}
func (*OrganizationIdentityProvider) isNode()                            {}
func (*OrganizationInvitation) isNode()                                  {}
func (*OrganizationMigration) isNode()                                   {}
func (*Package) isNode()                                                 {}
func (*PackageFile) isNode()                                             {}
func (*PackageTag) isNode()                                              {}
func (*PackageVersion) isNode()                                          {}
func (*ParentIssueAddedEvent) isNode()                                   {}
func (*ParentIssueRemovedEvent) isNode()                                 {}
func (*PinnedDiscussion) isNode()                                        {}
func (*PinnedEnvironment) isNode()                                       {}
func (*PinnedEvent) isNode()                                             {}
func (*PinnedIssue) isNode()                                             {}
func (*PrivateRepositoryForkingDisableAuditEntry) isNode()               {}
func (*PrivateRepositoryForkingEnableAuditEntry) isNode()                {}
func (*Project) isNode()                                                 {}
func (*ProjectCard) isNode()                                             {}
func (*ProjectColumn) isNode()                                           {}
func (*ProjectV2) isNode()                                               {}
func (*ProjectV2Field) isNode()                                          {}
func (*ProjectV2Item) isNode()                                           {}
func (*ProjectV2ItemFieldDateValue) isNode()                             {}
func (*ProjectV2ItemFieldIterationValue) isNode()                        {}
func (*ProjectV2ItemFieldNumberValue) isNode()                           {}
func (*ProjectV2ItemFieldSingleSelectValue) isNode()                     {}
func (*ProjectV2ItemFieldTextValue) isNode()                             {}
func (*ProjectV2IterationField) isNode()                                 {}
func (*ProjectV2SingleSelectField) isNode()                              {}
func (*ProjectV2StatusUpdate) isNode()                                   {}
func (*ProjectV2View) isNode()                                           {}
func (*ProjectV2Workflow) isNode()                                       {}
func (*PublicKey) isNode()                                               {}
func (*PullRequest) isNode()                                             {}
func (*PullRequestCommit) isNode()                                       {}
func (*PullRequestCommitCommentThread) isNode()                          {}
func (*PullRequestReview) isNode()                                       {}
func (*PullRequestReviewComment) isNode()                                {}
func (*PullRequestReviewThread) isNode()                                 {}
func (*PullRequestThread) isNode()                                       {}
func (*Push) isNode()                                                    {}
func (*PushAllowance) isNode()                                           {}
func (*Query) isNode()                                                   {}
func (*Reaction) isNode()                                                {}
func (*ReadyForReviewEvent) isNode()                                     {}
func (*Ref) isNode()                                                     {}
func (*ReferencedEvent) isNode()                                         {}
func (*Release) isNode()                                                 {}
func (*ReleaseAsset) isNode()                                            {}
func (*RemovedFromMergeQueueEvent) isNode()                              {}
func (*RemovedFromProjectEvent) isNode()                                 {}
func (*RenamedTitleEvent) isNode()                                       {}
func (*ReopenedEvent) isNode()                                           {}
func (*RepoAccessAuditEntry) isNode()                                    {}
func (*RepoAddMemberAuditEntry) isNode()                                 {}
func (*RepoAddTopicAuditEntry) isNode()                                  {}
func (*RepoArchivedAuditEntry) isNode()                                  {}
func (*RepoChangeMergeSettingAuditEntry) isNode()                        {}
func (*RepoConfigDisableAnonymousGitAccessAuditEntry) isNode()           {}
func (*RepoConfigDisableCollaboratorsOnlyAuditEntry) isNode()            {}
func (*RepoConfigDisableContributorsOnlyAuditEntry) isNode()             {}
func (*RepoConfigDisableSockpuppetDisallowedAuditEntry) isNode()         {}
func (*RepoConfigEnableAnonymousGitAccessAuditEntry) isNode()            {}
func (*RepoConfigEnableCollaboratorsOnlyAuditEntry) isNode()             {}
func (*RepoConfigEnableContributorsOnlyAuditEntry) isNode()              {}
func (*RepoConfigEnableSockpuppetDisallowedAuditEntry) isNode()          {}
func (*RepoConfigLockAnonymousGitAccessAuditEntry) isNode()              {}
func (*RepoConfigUnlockAnonymousGitAccessAuditEntry) isNode()            {}
func (*RepoCreateAuditEntry) isNode()                                    {}
func (*RepoDestroyAuditEntry) isNode()                                   {}
func (*RepoRemoveMemberAuditEntry) isNode()                              {}
func (*RepoRemoveTopicAuditEntry) isNode()                               {}
func (*Repository) isNode()                                              {}
func (*RepositoryInvitation) isNode()                                    {}
func (*RepositoryMigration) isNode()                                     {}
func (*RepositoryRule) isNode()                                          {}
func (*RepositoryRuleset) isNode()                                       {}
func (*RepositoryRulesetBypassActor) isNode()                            {}
func (*RepositoryTopic) isNode()                                         {}
func (*RepositoryVisibilityChangeDisableAuditEntry) isNode()             {}
func (*RepositoryVisibilityChangeEnableAuditEntry) isNode()              {}
func (*RepositoryVulnerabilityAlert) isNode()                            {}
func (*ReviewDismissalAllowance) isNode()                                {}
func (*ReviewDismissedEvent) isNode()                                    {}
func (*ReviewRequest) isNode()                                           {}
func (*ReviewRequestRemovedEvent) isNode()                               {}
func (*ReviewRequestedEvent) isNode()                                    {}
func (*SavedReply) isNode()                                              {}
func (*SecurityAdvisory) isNode()                                        {}
func (*SponsorsActivity) isNode()                                        {}
func (*SponsorsListing) isNode()                                         {}
func (*SponsorsListingFeaturedItem) isNode()                             {}
func (*SponsorsTier) isNode()                                            {}
func (*Sponsorship) isNode()                                             {}
func (*SponsorshipNewsletter) isNode()                                   {}
func (*Status) isNode()                                                  {}
func (*StatusCheckRollup) isNode()                                       {}
func (*StatusContext) isNode()                                           {}
func (*SubIssueAddedEvent) isNode()                                      {}
func (*SubIssueRemovedEvent) isNode()                                    {}
func (*SubscribedEvent) isNode()                                         {}
func (*Tag) isNode()                                                     {}
func (*Team) isNode()                                                    {}
func (*TeamAddMemberAuditEntry) isNode()                                 {}
func (*TeamAddRepositoryAuditEntry) isNode()                             {}
func (*TeamChangeParentTeamAuditEntry) isNode()                          {}
func (*TeamDiscussion) isNode()                                          {}
func (*TeamDiscussionComment) isNode()                                   {}
func (*TeamRemoveMemberAuditEntry) isNode()                              {}
func (*TeamRemoveRepositoryAuditEntry) isNode()                          {}
func (*Topic) isNode()                                                   {}
func (*TransferredEvent) isNode()                                        {}
func (*Tree) isNode()                                                    {}
func (*UnassignedEvent) isNode()                                         {}
func (*UnlabeledEvent) isNode()                                          {}
func (*UnlockedEvent) isNode()                                           {}
func (*UnmarkedAsDuplicateEvent) isNode()                                {}
func (*UnpinnedEvent) isNode()                                           {}
func (*UnsubscribedEvent) isNode()                                       {}
func (*User) isNode()                                                    {}
func (*UserBlockedEvent) isNode()                                        {}
func (*UserContentEdit) isNode()                                         {}
func (*UserList) isNode()                                                {}
func (*UserNamespaceRepository) isNode()                                 {}
func (*UserStatus) isNode()                                              {}
func (*VerifiableDomain) isNode()                                        {}
func (*Workflow) isNode()                                                {}
func (*WorkflowRun) isNode()                                             {}
func (*WorkflowRunFile) isNode()                                         {}

type Node struct {
	Interface Node_Interface
}

func (x *Node) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Node) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Node", info.Typename)
	case "AddedToMergeQueueEvent":
		x.Interface = new(AddedToMergeQueueEvent)
	case "AddedToProjectEvent":
		x.Interface = new(AddedToProjectEvent)
	case "App":
		x.Interface = new(App)
	case "AssignedEvent":
		x.Interface = new(AssignedEvent)
	case "AutoMergeDisabledEvent":
		x.Interface = new(AutoMergeDisabledEvent)
	case "AutoMergeEnabledEvent":
		x.Interface = new(AutoMergeEnabledEvent)
	case "AutoRebaseEnabledEvent":
		x.Interface = new(AutoRebaseEnabledEvent)
	case "AutoSquashEnabledEvent":
		x.Interface = new(AutoSquashEnabledEvent)
	case "AutomaticBaseChangeFailedEvent":
		x.Interface = new(AutomaticBaseChangeFailedEvent)
	case "AutomaticBaseChangeSucceededEvent":
		x.Interface = new(AutomaticBaseChangeSucceededEvent)
	case "BaseRefChangedEvent":
		x.Interface = new(BaseRefChangedEvent)
	case "BaseRefDeletedEvent":
		x.Interface = new(BaseRefDeletedEvent)
	case "BaseRefForcePushedEvent":
		x.Interface = new(BaseRefForcePushedEvent)
	case "Blob":
		x.Interface = new(Blob)
	case "Bot":
		x.Interface = new(Bot)
	case "BranchProtectionRule":
		x.Interface = new(BranchProtectionRule)
	case "BypassForcePushAllowance":
		x.Interface = new(BypassForcePushAllowance)
	case "BypassPullRequestAllowance":
		x.Interface = new(BypassPullRequestAllowance)
	case "CWE":
		x.Interface = new(CWE)
	case "CheckRun":
		x.Interface = new(CheckRun)
	case "CheckSuite":
		x.Interface = new(CheckSuite)
	case "ClosedEvent":
		x.Interface = new(ClosedEvent)
	case "CodeOfConduct":
		x.Interface = new(CodeOfConduct)
	case "CommentDeletedEvent":
		x.Interface = new(CommentDeletedEvent)
	case "Commit":
		x.Interface = new(Commit)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "CommitCommentThread":
		x.Interface = new(CommitCommentThread)
	case "Comparison":
		x.Interface = new(Comparison)
	case "ConnectedEvent":
		x.Interface = new(ConnectedEvent)
	case "ConvertToDraftEvent":
		x.Interface = new(ConvertToDraftEvent)
	case "ConvertedNoteToIssueEvent":
		x.Interface = new(ConvertedNoteToIssueEvent)
	case "ConvertedToDiscussionEvent":
		x.Interface = new(ConvertedToDiscussionEvent)
	case "CrossReferencedEvent":
		x.Interface = new(CrossReferencedEvent)
	case "DemilestonedEvent":
		x.Interface = new(DemilestonedEvent)
	case "DependencyGraphManifest":
		x.Interface = new(DependencyGraphManifest)
	case "DeployKey":
		x.Interface = new(DeployKey)
	case "DeployedEvent":
		x.Interface = new(DeployedEvent)
	case "Deployment":
		x.Interface = new(Deployment)
	case "DeploymentEnvironmentChangedEvent":
		x.Interface = new(DeploymentEnvironmentChangedEvent)
	case "DeploymentReview":
		x.Interface = new(DeploymentReview)
	case "DeploymentStatus":
		x.Interface = new(DeploymentStatus)
	case "DisconnectedEvent":
		x.Interface = new(DisconnectedEvent)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionCategory":
		x.Interface = new(DiscussionCategory)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "DiscussionPoll":
		x.Interface = new(DiscussionPoll)
	case "DiscussionPollOption":
		x.Interface = new(DiscussionPollOption)
	case "DraftIssue":
		x.Interface = new(DraftIssue)
	case "Enterprise":
		x.Interface = new(Enterprise)
	case "EnterpriseAdministratorInvitation":
		x.Interface = new(EnterpriseAdministratorInvitation)
	case "EnterpriseIdentityProvider":
		x.Interface = new(EnterpriseIdentityProvider)
	case "EnterpriseMemberInvitation":
		x.Interface = new(EnterpriseMemberInvitation)
	case "EnterpriseRepositoryInfo":
		x.Interface = new(EnterpriseRepositoryInfo)
	case "EnterpriseServerInstallation":
		x.Interface = new(EnterpriseServerInstallation)
	case "EnterpriseServerUserAccount":
		x.Interface = new(EnterpriseServerUserAccount)
	case "EnterpriseServerUserAccountEmail":
		x.Interface = new(EnterpriseServerUserAccountEmail)
	case "EnterpriseServerUserAccountsUpload":
		x.Interface = new(EnterpriseServerUserAccountsUpload)
	case "EnterpriseUserAccount":
		x.Interface = new(EnterpriseUserAccount)
	case "Environment":
		x.Interface = new(Environment)
	case "ExternalIdentity":
		x.Interface = new(ExternalIdentity)
	case "Gist":
		x.Interface = new(Gist)
	case "GistComment":
		x.Interface = new(GistComment)
	case "HeadRefDeletedEvent":
		x.Interface = new(HeadRefDeletedEvent)
	case "HeadRefForcePushedEvent":
		x.Interface = new(HeadRefForcePushedEvent)
	case "HeadRefRestoredEvent":
		x.Interface = new(HeadRefRestoredEvent)
	case "IpAllowListEntry":
		x.Interface = new(IpAllowListEntry)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "Label":
		x.Interface = new(Label)
	case "LabeledEvent":
		x.Interface = new(LabeledEvent)
	case "Language":
		x.Interface = new(Language)
	case "License":
		x.Interface = new(License)
	case "LinkedBranch":
		x.Interface = new(LinkedBranch)
	case "LockedEvent":
		x.Interface = new(LockedEvent)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "MarkedAsDuplicateEvent":
		x.Interface = new(MarkedAsDuplicateEvent)
	case "MarketplaceCategory":
		x.Interface = new(MarketplaceCategory)
	case "MarketplaceListing":
		x.Interface = new(MarketplaceListing)
	case "MemberFeatureRequestNotification":
		x.Interface = new(MemberFeatureRequestNotification)
	case "MembersCanDeleteReposClearAuditEntry":
		x.Interface = new(MembersCanDeleteReposClearAuditEntry)
	case "MembersCanDeleteReposDisableAuditEntry":
		x.Interface = new(MembersCanDeleteReposDisableAuditEntry)
	case "MembersCanDeleteReposEnableAuditEntry":
		x.Interface = new(MembersCanDeleteReposEnableAuditEntry)
	case "MentionedEvent":
		x.Interface = new(MentionedEvent)
	case "MergeQueue":
		x.Interface = new(MergeQueue)
	case "MergeQueueEntry":
		x.Interface = new(MergeQueueEntry)
	case "MergedEvent":
		x.Interface = new(MergedEvent)
	case "MigrationSource":
		x.Interface = new(MigrationSource)
	case "Milestone":
		x.Interface = new(Milestone)
	case "MilestonedEvent":
		x.Interface = new(MilestonedEvent)
	case "MovedColumnsInProjectEvent":
		x.Interface = new(MovedColumnsInProjectEvent)
	case "OIDCProvider":
		x.Interface = new(OIDCProvider)
	case "OauthApplicationCreateAuditEntry":
		x.Interface = new(OauthApplicationCreateAuditEntry)
	case "OrgAddBillingManagerAuditEntry":
		x.Interface = new(OrgAddBillingManagerAuditEntry)
	case "OrgAddMemberAuditEntry":
		x.Interface = new(OrgAddMemberAuditEntry)
	case "OrgBlockUserAuditEntry":
		x.Interface = new(OrgBlockUserAuditEntry)
	case "OrgConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigDisableCollaboratorsOnlyAuditEntry)
	case "OrgConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigEnableCollaboratorsOnlyAuditEntry)
	case "OrgCreateAuditEntry":
		x.Interface = new(OrgCreateAuditEntry)
	case "OrgDisableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgDisableOauthAppRestrictionsAuditEntry)
	case "OrgDisableSamlAuditEntry":
		x.Interface = new(OrgDisableSamlAuditEntry)
	case "OrgDisableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgDisableTwoFactorRequirementAuditEntry)
	case "OrgEnableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgEnableOauthAppRestrictionsAuditEntry)
	case "OrgEnableSamlAuditEntry":
		x.Interface = new(OrgEnableSamlAuditEntry)
	case "OrgEnableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgEnableTwoFactorRequirementAuditEntry)
	case "OrgInviteMemberAuditEntry":
		x.Interface = new(OrgInviteMemberAuditEntry)
	case "OrgInviteToBusinessAuditEntry":
		x.Interface = new(OrgInviteToBusinessAuditEntry)
	case "OrgOauthAppAccessApprovedAuditEntry":
		x.Interface = new(OrgOauthAppAccessApprovedAuditEntry)
	case "OrgOauthAppAccessBlockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessBlockedAuditEntry)
	case "OrgOauthAppAccessDeniedAuditEntry":
		x.Interface = new(OrgOauthAppAccessDeniedAuditEntry)
	case "OrgOauthAppAccessRequestedAuditEntry":
		x.Interface = new(OrgOauthAppAccessRequestedAuditEntry)
	case "OrgOauthAppAccessUnblockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessUnblockedAuditEntry)
	case "OrgRemoveBillingManagerAuditEntry":
		x.Interface = new(OrgRemoveBillingManagerAuditEntry)
	case "OrgRemoveMemberAuditEntry":
		x.Interface = new(OrgRemoveMemberAuditEntry)
	case "OrgRemoveOutsideCollaboratorAuditEntry":
		x.Interface = new(OrgRemoveOutsideCollaboratorAuditEntry)
	case "OrgRestoreMemberAuditEntry":
		x.Interface = new(OrgRestoreMemberAuditEntry)
	case "OrgUnblockUserAuditEntry":
		x.Interface = new(OrgUnblockUserAuditEntry)
	case "OrgUpdateDefaultRepositoryPermissionAuditEntry":
		x.Interface = new(OrgUpdateDefaultRepositoryPermissionAuditEntry)
	case "OrgUpdateMemberAuditEntry":
		x.Interface = new(OrgUpdateMemberAuditEntry)
	case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryCreationPermissionAuditEntry)
	case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryInvitationPermissionAuditEntry)
	case "Organization":
		x.Interface = new(Organization)
	case "OrganizationIdentityProvider":
		x.Interface = new(OrganizationIdentityProvider)
	case "OrganizationInvitation":
		x.Interface = new(OrganizationInvitation)
	case "OrganizationMigration":
		x.Interface = new(OrganizationMigration)
	case "Package":
		x.Interface = new(Package)
	case "PackageFile":
		x.Interface = new(PackageFile)
	case "PackageTag":
		x.Interface = new(PackageTag)
	case "PackageVersion":
		x.Interface = new(PackageVersion)
	case "ParentIssueAddedEvent":
		x.Interface = new(ParentIssueAddedEvent)
	case "ParentIssueRemovedEvent":
		x.Interface = new(ParentIssueRemovedEvent)
	case "PinnedDiscussion":
		x.Interface = new(PinnedDiscussion)
	case "PinnedEnvironment":
		x.Interface = new(PinnedEnvironment)
	case "PinnedEvent":
		x.Interface = new(PinnedEvent)
	case "PinnedIssue":
		x.Interface = new(PinnedIssue)
	case "PrivateRepositoryForkingDisableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingDisableAuditEntry)
	case "PrivateRepositoryForkingEnableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingEnableAuditEntry)
	case "Project":
		x.Interface = new(Project)
	case "ProjectCard":
		x.Interface = new(ProjectCard)
	case "ProjectColumn":
		x.Interface = new(ProjectColumn)
	case "ProjectV2":
		x.Interface = new(ProjectV2)
	case "ProjectV2Field":
		x.Interface = new(ProjectV2Field)
	case "ProjectV2Item":
		x.Interface = new(ProjectV2Item)
	case "ProjectV2ItemFieldDateValue":
		x.Interface = new(ProjectV2ItemFieldDateValue)
	case "ProjectV2ItemFieldIterationValue":
		x.Interface = new(ProjectV2ItemFieldIterationValue)
	case "ProjectV2ItemFieldNumberValue":
		x.Interface = new(ProjectV2ItemFieldNumberValue)
	case "ProjectV2ItemFieldSingleSelectValue":
		x.Interface = new(ProjectV2ItemFieldSingleSelectValue)
	case "ProjectV2ItemFieldTextValue":
		x.Interface = new(ProjectV2ItemFieldTextValue)
	case "ProjectV2IterationField":
		x.Interface = new(ProjectV2IterationField)
	case "ProjectV2SingleSelectField":
		x.Interface = new(ProjectV2SingleSelectField)
	case "ProjectV2StatusUpdate":
		x.Interface = new(ProjectV2StatusUpdate)
	case "ProjectV2View":
		x.Interface = new(ProjectV2View)
	case "ProjectV2Workflow":
		x.Interface = new(ProjectV2Workflow)
	case "PublicKey":
		x.Interface = new(PublicKey)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestCommit":
		x.Interface = new(PullRequestCommit)
	case "PullRequestCommitCommentThread":
		x.Interface = new(PullRequestCommitCommentThread)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "PullRequestReviewThread":
		x.Interface = new(PullRequestReviewThread)
	case "PullRequestThread":
		x.Interface = new(PullRequestThread)
	case "Push":
		x.Interface = new(Push)
	case "PushAllowance":
		x.Interface = new(PushAllowance)
	case "Query":
		x.Interface = new(Query)
	case "Reaction":
		x.Interface = new(Reaction)
	case "ReadyForReviewEvent":
		x.Interface = new(ReadyForReviewEvent)
	case "Ref":
		x.Interface = new(Ref)
	case "ReferencedEvent":
		x.Interface = new(ReferencedEvent)
	case "Release":
		x.Interface = new(Release)
	case "ReleaseAsset":
		x.Interface = new(ReleaseAsset)
	case "RemovedFromMergeQueueEvent":
		x.Interface = new(RemovedFromMergeQueueEvent)
	case "RemovedFromProjectEvent":
		x.Interface = new(RemovedFromProjectEvent)
	case "RenamedTitleEvent":
		x.Interface = new(RenamedTitleEvent)
	case "ReopenedEvent":
		x.Interface = new(ReopenedEvent)
	case "RepoAccessAuditEntry":
		x.Interface = new(RepoAccessAuditEntry)
	case "RepoAddMemberAuditEntry":
		x.Interface = new(RepoAddMemberAuditEntry)
	case "RepoAddTopicAuditEntry":
		x.Interface = new(RepoAddTopicAuditEntry)
	case "RepoArchivedAuditEntry":
		x.Interface = new(RepoArchivedAuditEntry)
	case "RepoChangeMergeSettingAuditEntry":
		x.Interface = new(RepoChangeMergeSettingAuditEntry)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigDisableAnonymousGitAccessAuditEntry)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableCollaboratorsOnlyAuditEntry)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableContributorsOnlyAuditEntry)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigDisableSockpuppetDisallowedAuditEntry)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigEnableAnonymousGitAccessAuditEntry)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableCollaboratorsOnlyAuditEntry)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableContributorsOnlyAuditEntry)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigEnableSockpuppetDisallowedAuditEntry)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigLockAnonymousGitAccessAuditEntry)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigUnlockAnonymousGitAccessAuditEntry)
	case "RepoCreateAuditEntry":
		x.Interface = new(RepoCreateAuditEntry)
	case "RepoDestroyAuditEntry":
		x.Interface = new(RepoDestroyAuditEntry)
	case "RepoRemoveMemberAuditEntry":
		x.Interface = new(RepoRemoveMemberAuditEntry)
	case "RepoRemoveTopicAuditEntry":
		x.Interface = new(RepoRemoveTopicAuditEntry)
	case "Repository":
		x.Interface = new(Repository)
	case "RepositoryInvitation":
		x.Interface = new(RepositoryInvitation)
	case "RepositoryMigration":
		x.Interface = new(RepositoryMigration)
	case "RepositoryRule":
		x.Interface = new(RepositoryRule)
	case "RepositoryRuleset":
		x.Interface = new(RepositoryRuleset)
	case "RepositoryRulesetBypassActor":
		x.Interface = new(RepositoryRulesetBypassActor)
	case "RepositoryTopic":
		x.Interface = new(RepositoryTopic)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeDisableAuditEntry)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeEnableAuditEntry)
	case "RepositoryVulnerabilityAlert":
		x.Interface = new(RepositoryVulnerabilityAlert)
	case "ReviewDismissalAllowance":
		x.Interface = new(ReviewDismissalAllowance)
	case "ReviewDismissedEvent":
		x.Interface = new(ReviewDismissedEvent)
	case "ReviewRequest":
		x.Interface = new(ReviewRequest)
	case "ReviewRequestRemovedEvent":
		x.Interface = new(ReviewRequestRemovedEvent)
	case "ReviewRequestedEvent":
		x.Interface = new(ReviewRequestedEvent)
	case "SavedReply":
		x.Interface = new(SavedReply)
	case "SecurityAdvisory":
		x.Interface = new(SecurityAdvisory)
	case "SponsorsActivity":
		x.Interface = new(SponsorsActivity)
	case "SponsorsListing":
		x.Interface = new(SponsorsListing)
	case "SponsorsListingFeaturedItem":
		x.Interface = new(SponsorsListingFeaturedItem)
	case "SponsorsTier":
		x.Interface = new(SponsorsTier)
	case "Sponsorship":
		x.Interface = new(Sponsorship)
	case "SponsorshipNewsletter":
		x.Interface = new(SponsorshipNewsletter)
	case "Status":
		x.Interface = new(Status)
	case "StatusCheckRollup":
		x.Interface = new(StatusCheckRollup)
	case "StatusContext":
		x.Interface = new(StatusContext)
	case "SubIssueAddedEvent":
		x.Interface = new(SubIssueAddedEvent)
	case "SubIssueRemovedEvent":
		x.Interface = new(SubIssueRemovedEvent)
	case "SubscribedEvent":
		x.Interface = new(SubscribedEvent)
	case "Tag":
		x.Interface = new(Tag)
	case "Team":
		x.Interface = new(Team)
	case "TeamAddMemberAuditEntry":
		x.Interface = new(TeamAddMemberAuditEntry)
	case "TeamAddRepositoryAuditEntry":
		x.Interface = new(TeamAddRepositoryAuditEntry)
	case "TeamChangeParentTeamAuditEntry":
		x.Interface = new(TeamChangeParentTeamAuditEntry)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	case "TeamRemoveMemberAuditEntry":
		x.Interface = new(TeamRemoveMemberAuditEntry)
	case "TeamRemoveRepositoryAuditEntry":
		x.Interface = new(TeamRemoveRepositoryAuditEntry)
	case "Topic":
		x.Interface = new(Topic)
	case "TransferredEvent":
		x.Interface = new(TransferredEvent)
	case "Tree":
		x.Interface = new(Tree)
	case "UnassignedEvent":
		x.Interface = new(UnassignedEvent)
	case "UnlabeledEvent":
		x.Interface = new(UnlabeledEvent)
	case "UnlockedEvent":
		x.Interface = new(UnlockedEvent)
	case "UnmarkedAsDuplicateEvent":
		x.Interface = new(UnmarkedAsDuplicateEvent)
	case "UnpinnedEvent":
		x.Interface = new(UnpinnedEvent)
	case "UnsubscribedEvent":
		x.Interface = new(UnsubscribedEvent)
	case "User":
		x.Interface = new(User)
	case "UserBlockedEvent":
		x.Interface = new(UserBlockedEvent)
	case "UserContentEdit":
		x.Interface = new(UserContentEdit)
	case "UserList":
		x.Interface = new(UserList)
	case "UserNamespaceRepository":
		x.Interface = new(UserNamespaceRepository)
	case "UserStatus":
		x.Interface = new(UserStatus)
	case "VerifiableDomain":
		x.Interface = new(VerifiableDomain)
	case "Workflow":
		x.Interface = new(Workflow)
	case "WorkflowRun":
		x.Interface = new(WorkflowRun)
	case "WorkflowRunFile":
		x.Interface = new(WorkflowRunFile)
	}
	return json.Unmarshal(js, x.Interface)
}

// NotificationRestrictionSettingValue (ENUM): The possible values for the notification restriction setting.
type NotificationRestrictionSettingValue string

// NotificationRestrictionSettingValue_ENABLED: The setting is enabled for the owner.
const NotificationRestrictionSettingValue_ENABLED NotificationRestrictionSettingValue = "ENABLED"

// NotificationRestrictionSettingValue_DISABLED: The setting is disabled for the owner.
const NotificationRestrictionSettingValue_DISABLED NotificationRestrictionSettingValue = "DISABLED"

// OIDCProvider (OBJECT): An OIDC identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
type OIDCProvider struct {
	// Enterprise: The enterprise this identity provider belongs to.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// ExternalIdentities: ExternalIdentities provisioned by this identity provider.
	//
	// Query arguments:
	//   - membersOnly Boolean
	//   - login String
	//   - userName String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities,omitempty"`

	// Id: The Node ID of the OIDCProvider object.
	Id ID `json:"id,omitempty"`

	// ProviderType: The OIDC identity provider type.
	ProviderType OIDCProviderType `json:"providerType,omitempty"`

	// TenantId: The id of the tenant this provider is attached to.
	TenantId string `json:"tenantId,omitempty"`
}

func (x *OIDCProvider) GetEnterprise() *Enterprise { return x.Enterprise }
func (x *OIDCProvider) GetExternalIdentities() *ExternalIdentityConnection {
	return x.ExternalIdentities
}
func (x *OIDCProvider) GetId() ID                         { return x.Id }
func (x *OIDCProvider) GetProviderType() OIDCProviderType { return x.ProviderType }
func (x *OIDCProvider) GetTenantId() string               { return x.TenantId }

// OIDCProviderType (ENUM): The OIDC identity provider type.
type OIDCProviderType string

// OIDCProviderType_AAD: Azure Active Directory.
const OIDCProviderType_AAD OIDCProviderType = "AAD"

// OauthApplicationAuditEntryData (INTERFACE): Metadata for an audit entry with action oauth_application.*.
// OauthApplicationAuditEntryData_Interface: Metadata for an audit entry with action oauth_application.*.
//
// Possible types:
//
//   - *OauthApplicationCreateAuditEntry
//   - *OrgOauthAppAccessApprovedAuditEntry
//   - *OrgOauthAppAccessBlockedAuditEntry
//   - *OrgOauthAppAccessDeniedAuditEntry
//   - *OrgOauthAppAccessRequestedAuditEntry
//   - *OrgOauthAppAccessUnblockedAuditEntry
type OauthApplicationAuditEntryData_Interface interface {
	isOauthApplicationAuditEntryData()
	GetOauthApplicationName() string
	GetOauthApplicationResourcePath() URI
	GetOauthApplicationUrl() URI
}

func (*OauthApplicationCreateAuditEntry) isOauthApplicationAuditEntryData()     {}
func (*OrgOauthAppAccessApprovedAuditEntry) isOauthApplicationAuditEntryData()  {}
func (*OrgOauthAppAccessBlockedAuditEntry) isOauthApplicationAuditEntryData()   {}
func (*OrgOauthAppAccessDeniedAuditEntry) isOauthApplicationAuditEntryData()    {}
func (*OrgOauthAppAccessRequestedAuditEntry) isOauthApplicationAuditEntryData() {}
func (*OrgOauthAppAccessUnblockedAuditEntry) isOauthApplicationAuditEntryData() {}

type OauthApplicationAuditEntryData struct {
	Interface OauthApplicationAuditEntryData_Interface
}

func (x *OauthApplicationAuditEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *OauthApplicationAuditEntryData) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for OauthApplicationAuditEntryData", info.Typename)
	case "OauthApplicationCreateAuditEntry":
		x.Interface = new(OauthApplicationCreateAuditEntry)
	case "OrgOauthAppAccessApprovedAuditEntry":
		x.Interface = new(OrgOauthAppAccessApprovedAuditEntry)
	case "OrgOauthAppAccessBlockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessBlockedAuditEntry)
	case "OrgOauthAppAccessDeniedAuditEntry":
		x.Interface = new(OrgOauthAppAccessDeniedAuditEntry)
	case "OrgOauthAppAccessRequestedAuditEntry":
		x.Interface = new(OrgOauthAppAccessRequestedAuditEntry)
	case "OrgOauthAppAccessUnblockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessUnblockedAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// OauthApplicationCreateAuditEntry (OBJECT): Audit log entry for a oauth_application.create event.
type OauthApplicationCreateAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// ApplicationUrl: The application URL of the OAuth application.
	ApplicationUrl URI `json:"applicationUrl,omitempty"`

	// CallbackUrl: The callback URL of the OAuth application.
	CallbackUrl URI `json:"callbackUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OauthApplicationCreateAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OauthApplicationName: The name of the OAuth application.
	OauthApplicationName string `json:"oauthApplicationName,omitempty"`

	// OauthApplicationResourcePath: The HTTP path for the OAuth application.
	OauthApplicationResourcePath URI `json:"oauthApplicationResourcePath,omitempty"`

	// OauthApplicationUrl: The HTTP URL for the OAuth application.
	OauthApplicationUrl URI `json:"oauthApplicationUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// RateLimit: The rate limit of the OAuth application.
	RateLimit int `json:"rateLimit,omitempty"`

	// State: The state of the OAuth application.
	State OauthApplicationCreateAuditEntryState `json:"state,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OauthApplicationCreateAuditEntry) GetAction() string                { return x.Action }
func (x *OauthApplicationCreateAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OauthApplicationCreateAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OauthApplicationCreateAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OauthApplicationCreateAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OauthApplicationCreateAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OauthApplicationCreateAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OauthApplicationCreateAuditEntry) GetApplicationUrl() URI           { return x.ApplicationUrl }
func (x *OauthApplicationCreateAuditEntry) GetCallbackUrl() URI              { return x.CallbackUrl }
func (x *OauthApplicationCreateAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OauthApplicationCreateAuditEntry) GetId() ID                        { return x.Id }
func (x *OauthApplicationCreateAuditEntry) GetOauthApplicationName() string {
	return x.OauthApplicationName
}
func (x *OauthApplicationCreateAuditEntry) GetOauthApplicationResourcePath() URI {
	return x.OauthApplicationResourcePath
}
func (x *OauthApplicationCreateAuditEntry) GetOauthApplicationUrl() URI     { return x.OauthApplicationUrl }
func (x *OauthApplicationCreateAuditEntry) GetOperationType() OperationType { return x.OperationType }
func (x *OauthApplicationCreateAuditEntry) GetOrganization() *Organization  { return x.Organization }
func (x *OauthApplicationCreateAuditEntry) GetOrganizationName() string     { return x.OrganizationName }
func (x *OauthApplicationCreateAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OauthApplicationCreateAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OauthApplicationCreateAuditEntry) GetRateLimit() int       { return x.RateLimit }
func (x *OauthApplicationCreateAuditEntry) GetState() OauthApplicationCreateAuditEntryState {
	return x.State
}
func (x *OauthApplicationCreateAuditEntry) GetUser() *User           { return x.User }
func (x *OauthApplicationCreateAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OauthApplicationCreateAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OauthApplicationCreateAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OauthApplicationCreateAuditEntryState (ENUM): The state of an OAuth application when it was created.
type OauthApplicationCreateAuditEntryState string

// OauthApplicationCreateAuditEntryState_ACTIVE: The OAuth application was active and allowed to have OAuth Accesses.
const OauthApplicationCreateAuditEntryState_ACTIVE OauthApplicationCreateAuditEntryState = "ACTIVE"

// OauthApplicationCreateAuditEntryState_SUSPENDED: The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
const OauthApplicationCreateAuditEntryState_SUSPENDED OauthApplicationCreateAuditEntryState = "SUSPENDED"

// OauthApplicationCreateAuditEntryState_PENDING_DELETION: The OAuth application was in the process of being deleted.
const OauthApplicationCreateAuditEntryState_PENDING_DELETION OauthApplicationCreateAuditEntryState = "PENDING_DELETION"

// OperationType (ENUM): The corresponding operation type for the action.
type OperationType string

// OperationType_ACCESS: An existing resource was accessed.
const OperationType_ACCESS OperationType = "ACCESS"

// OperationType_AUTHENTICATION: A resource performed an authentication event.
const OperationType_AUTHENTICATION OperationType = "AUTHENTICATION"

// OperationType_CREATE: A new resource was created.
const OperationType_CREATE OperationType = "CREATE"

// OperationType_MODIFY: An existing resource was modified.
const OperationType_MODIFY OperationType = "MODIFY"

// OperationType_REMOVE: An existing resource was removed.
const OperationType_REMOVE OperationType = "REMOVE"

// OperationType_RESTORE: An existing resource was restored.
const OperationType_RESTORE OperationType = "RESTORE"

// OperationType_TRANSFER: An existing resource was transferred between multiple resources.
const OperationType_TRANSFER OperationType = "TRANSFER"

// OrderDirection (ENUM): Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

// OrderDirection_ASC: Specifies an ascending order for a given `orderBy` argument.
const OrderDirection_ASC OrderDirection = "ASC"

// OrderDirection_DESC: Specifies a descending order for a given `orderBy` argument.
const OrderDirection_DESC OrderDirection = "DESC"

// OrgAddBillingManagerAuditEntry (OBJECT): Audit log entry for a org.add_billing_manager.
type OrgAddBillingManagerAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgAddBillingManagerAuditEntry object.
	Id ID `json:"id,omitempty"`

	// InvitationEmail: The email address used to invite a billing manager for the organization.
	InvitationEmail string `json:"invitationEmail,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgAddBillingManagerAuditEntry) GetAction() string                { return x.Action }
func (x *OrgAddBillingManagerAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgAddBillingManagerAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgAddBillingManagerAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgAddBillingManagerAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgAddBillingManagerAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgAddBillingManagerAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgAddBillingManagerAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgAddBillingManagerAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgAddBillingManagerAuditEntry) GetInvitationEmail() string       { return x.InvitationEmail }
func (x *OrgAddBillingManagerAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgAddBillingManagerAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgAddBillingManagerAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgAddBillingManagerAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgAddBillingManagerAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgAddBillingManagerAuditEntry) GetUser() *User           { return x.User }
func (x *OrgAddBillingManagerAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgAddBillingManagerAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgAddBillingManagerAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgAddMemberAuditEntry (OBJECT): Audit log entry for a org.add_member.
type OrgAddMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgAddMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Permission: The permission level of the member added to the organization.
	Permission OrgAddMemberAuditEntryPermission `json:"permission,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgAddMemberAuditEntry) GetAction() string                { return x.Action }
func (x *OrgAddMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgAddMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgAddMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgAddMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgAddMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgAddMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgAddMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgAddMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgAddMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgAddMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgAddMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgAddMemberAuditEntry) GetOrganizationResourcePath() URI { return x.OrganizationResourcePath }
func (x *OrgAddMemberAuditEntry) GetOrganizationUrl() URI          { return x.OrganizationUrl }
func (x *OrgAddMemberAuditEntry) GetPermission() OrgAddMemberAuditEntryPermission {
	return x.Permission
}
func (x *OrgAddMemberAuditEntry) GetUser() *User           { return x.User }
func (x *OrgAddMemberAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgAddMemberAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgAddMemberAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgAddMemberAuditEntryPermission (ENUM): The permissions available to members on an Organization.
type OrgAddMemberAuditEntryPermission string

// OrgAddMemberAuditEntryPermission_READ: Can read and clone repositories.
const OrgAddMemberAuditEntryPermission_READ OrgAddMemberAuditEntryPermission = "READ"

// OrgAddMemberAuditEntryPermission_ADMIN: Can read, clone, push, and add collaborators to repositories.
const OrgAddMemberAuditEntryPermission_ADMIN OrgAddMemberAuditEntryPermission = "ADMIN"

// OrgBlockUserAuditEntry (OBJECT): Audit log entry for a org.block_user.
type OrgBlockUserAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// BlockedUser: The blocked user.
	BlockedUser *User `json:"blockedUser,omitempty"`

	// BlockedUserName: The username of the blocked user.
	BlockedUserName string `json:"blockedUserName,omitempty"`

	// BlockedUserResourcePath: The HTTP path for the blocked user.
	BlockedUserResourcePath URI `json:"blockedUserResourcePath,omitempty"`

	// BlockedUserUrl: The HTTP URL for the blocked user.
	BlockedUserUrl URI `json:"blockedUserUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgBlockUserAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgBlockUserAuditEntry) GetAction() string                { return x.Action }
func (x *OrgBlockUserAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgBlockUserAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgBlockUserAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgBlockUserAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgBlockUserAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgBlockUserAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgBlockUserAuditEntry) GetBlockedUser() *User            { return x.BlockedUser }
func (x *OrgBlockUserAuditEntry) GetBlockedUserName() string       { return x.BlockedUserName }
func (x *OrgBlockUserAuditEntry) GetBlockedUserResourcePath() URI  { return x.BlockedUserResourcePath }
func (x *OrgBlockUserAuditEntry) GetBlockedUserUrl() URI           { return x.BlockedUserUrl }
func (x *OrgBlockUserAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgBlockUserAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgBlockUserAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgBlockUserAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgBlockUserAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgBlockUserAuditEntry) GetOrganizationResourcePath() URI { return x.OrganizationResourcePath }
func (x *OrgBlockUserAuditEntry) GetOrganizationUrl() URI          { return x.OrganizationUrl }
func (x *OrgBlockUserAuditEntry) GetUser() *User                   { return x.User }
func (x *OrgBlockUserAuditEntry) GetUserLogin() string             { return x.UserLogin }
func (x *OrgBlockUserAuditEntry) GetUserResourcePath() URI         { return x.UserResourcePath }
func (x *OrgBlockUserAuditEntry) GetUserUrl() URI                  { return x.UserUrl }

// OrgConfigDisableCollaboratorsOnlyAuditEntry (OBJECT): Audit log entry for a org.config.disable_collaborators_only event.
type OrgConfigDisableCollaboratorsOnlyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetAction() string         { return x.Action }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetId() ID { return x.Id }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUser() *User       { return x.User }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgConfigDisableCollaboratorsOnlyAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgConfigEnableCollaboratorsOnlyAuditEntry (OBJECT): Audit log entry for a org.config.enable_collaborators_only event.
type OrgConfigEnableCollaboratorsOnlyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetAction() string         { return x.Action }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetId() ID { return x.Id }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUser() *User       { return x.User }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgConfigEnableCollaboratorsOnlyAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgCreateAuditEntry (OBJECT): Audit log entry for a org.create event.
type OrgCreateAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// BillingPlan: The billing plan for the Organization.
	BillingPlan OrgCreateAuditEntryBillingPlan `json:"billingPlan,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgCreateAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgCreateAuditEntry) GetAction() string                              { return x.Action }
func (x *OrgCreateAuditEntry) GetActor() AuditEntryActor                      { return x.Actor }
func (x *OrgCreateAuditEntry) GetActorIp() string                             { return x.ActorIp }
func (x *OrgCreateAuditEntry) GetActorLocation() *ActorLocation               { return x.ActorLocation }
func (x *OrgCreateAuditEntry) GetActorLogin() string                          { return x.ActorLogin }
func (x *OrgCreateAuditEntry) GetActorResourcePath() URI                      { return x.ActorResourcePath }
func (x *OrgCreateAuditEntry) GetActorUrl() URI                               { return x.ActorUrl }
func (x *OrgCreateAuditEntry) GetBillingPlan() OrgCreateAuditEntryBillingPlan { return x.BillingPlan }
func (x *OrgCreateAuditEntry) GetCreatedAt() PreciseDateTime                  { return x.CreatedAt }
func (x *OrgCreateAuditEntry) GetId() ID                                      { return x.Id }
func (x *OrgCreateAuditEntry) GetOperationType() OperationType                { return x.OperationType }
func (x *OrgCreateAuditEntry) GetOrganization() *Organization                 { return x.Organization }
func (x *OrgCreateAuditEntry) GetOrganizationName() string                    { return x.OrganizationName }
func (x *OrgCreateAuditEntry) GetOrganizationResourcePath() URI               { return x.OrganizationResourcePath }
func (x *OrgCreateAuditEntry) GetOrganizationUrl() URI                        { return x.OrganizationUrl }
func (x *OrgCreateAuditEntry) GetUser() *User                                 { return x.User }
func (x *OrgCreateAuditEntry) GetUserLogin() string                           { return x.UserLogin }
func (x *OrgCreateAuditEntry) GetUserResourcePath() URI                       { return x.UserResourcePath }
func (x *OrgCreateAuditEntry) GetUserUrl() URI                                { return x.UserUrl }

// OrgCreateAuditEntryBillingPlan (ENUM): The billing plans available for organizations.
type OrgCreateAuditEntryBillingPlan string

// OrgCreateAuditEntryBillingPlan_FREE: Free Plan.
const OrgCreateAuditEntryBillingPlan_FREE OrgCreateAuditEntryBillingPlan = "FREE"

// OrgCreateAuditEntryBillingPlan_BUSINESS: Team Plan.
const OrgCreateAuditEntryBillingPlan_BUSINESS OrgCreateAuditEntryBillingPlan = "BUSINESS"

// OrgCreateAuditEntryBillingPlan_BUSINESS_PLUS: Enterprise Cloud Plan.
const OrgCreateAuditEntryBillingPlan_BUSINESS_PLUS OrgCreateAuditEntryBillingPlan = "BUSINESS_PLUS"

// OrgCreateAuditEntryBillingPlan_UNLIMITED: Legacy Unlimited Plan.
const OrgCreateAuditEntryBillingPlan_UNLIMITED OrgCreateAuditEntryBillingPlan = "UNLIMITED"

// OrgCreateAuditEntryBillingPlan_TIERED_PER_SEAT: Tiered Per Seat Plan.
const OrgCreateAuditEntryBillingPlan_TIERED_PER_SEAT OrgCreateAuditEntryBillingPlan = "TIERED_PER_SEAT"

// OrgDisableOauthAppRestrictionsAuditEntry (OBJECT): Audit log entry for a org.disable_oauth_app_restrictions event.
type OrgDisableOauthAppRestrictionsAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetAction() string         { return x.Action }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetUser() *User          { return x.User }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetUserLogin() string    { return x.UserLogin }
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgDisableOauthAppRestrictionsAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgDisableSamlAuditEntry (OBJECT): Audit log entry for a org.disable_saml event.
type OrgDisableSamlAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// DigestMethodUrl: The SAML provider's digest algorithm URL.
	DigestMethodUrl URI `json:"digestMethodUrl,omitempty"`

	// Id: The Node ID of the OrgDisableSamlAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IssuerUrl: The SAML provider's issuer URL.
	IssuerUrl URI `json:"issuerUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// SignatureMethodUrl: The SAML provider's signature algorithm URL.
	SignatureMethodUrl URI `json:"signatureMethodUrl,omitempty"`

	// SingleSignOnUrl: The SAML provider's single sign-on URL.
	SingleSignOnUrl URI `json:"singleSignOnUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgDisableSamlAuditEntry) GetAction() string                { return x.Action }
func (x *OrgDisableSamlAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgDisableSamlAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgDisableSamlAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgDisableSamlAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgDisableSamlAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgDisableSamlAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgDisableSamlAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgDisableSamlAuditEntry) GetDigestMethodUrl() URI          { return x.DigestMethodUrl }
func (x *OrgDisableSamlAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgDisableSamlAuditEntry) GetIssuerUrl() URI                { return x.IssuerUrl }
func (x *OrgDisableSamlAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgDisableSamlAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgDisableSamlAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgDisableSamlAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgDisableSamlAuditEntry) GetOrganizationUrl() URI    { return x.OrganizationUrl }
func (x *OrgDisableSamlAuditEntry) GetSignatureMethodUrl() URI { return x.SignatureMethodUrl }
func (x *OrgDisableSamlAuditEntry) GetSingleSignOnUrl() URI    { return x.SingleSignOnUrl }
func (x *OrgDisableSamlAuditEntry) GetUser() *User             { return x.User }
func (x *OrgDisableSamlAuditEntry) GetUserLogin() string       { return x.UserLogin }
func (x *OrgDisableSamlAuditEntry) GetUserResourcePath() URI   { return x.UserResourcePath }
func (x *OrgDisableSamlAuditEntry) GetUserUrl() URI            { return x.UserUrl }

// OrgDisableTwoFactorRequirementAuditEntry (OBJECT): Audit log entry for a org.disable_two_factor_requirement event.
type OrgDisableTwoFactorRequirementAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgDisableTwoFactorRequirementAuditEntry) GetAction() string         { return x.Action }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetUser() *User          { return x.User }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetUserLogin() string    { return x.UserLogin }
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgDisableTwoFactorRequirementAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgEnableOauthAppRestrictionsAuditEntry (OBJECT): Audit log entry for a org.enable_oauth_app_restrictions event.
type OrgEnableOauthAppRestrictionsAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetAction() string         { return x.Action }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetUser() *User          { return x.User }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetUserLogin() string    { return x.UserLogin }
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgEnableOauthAppRestrictionsAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgEnableSamlAuditEntry (OBJECT): Audit log entry for a org.enable_saml event.
type OrgEnableSamlAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// DigestMethodUrl: The SAML provider's digest algorithm URL.
	DigestMethodUrl URI `json:"digestMethodUrl,omitempty"`

	// Id: The Node ID of the OrgEnableSamlAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IssuerUrl: The SAML provider's issuer URL.
	IssuerUrl URI `json:"issuerUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// SignatureMethodUrl: The SAML provider's signature algorithm URL.
	SignatureMethodUrl URI `json:"signatureMethodUrl,omitempty"`

	// SingleSignOnUrl: The SAML provider's single sign-on URL.
	SingleSignOnUrl URI `json:"singleSignOnUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgEnableSamlAuditEntry) GetAction() string                { return x.Action }
func (x *OrgEnableSamlAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgEnableSamlAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgEnableSamlAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgEnableSamlAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgEnableSamlAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgEnableSamlAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgEnableSamlAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgEnableSamlAuditEntry) GetDigestMethodUrl() URI          { return x.DigestMethodUrl }
func (x *OrgEnableSamlAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgEnableSamlAuditEntry) GetIssuerUrl() URI                { return x.IssuerUrl }
func (x *OrgEnableSamlAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgEnableSamlAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgEnableSamlAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgEnableSamlAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgEnableSamlAuditEntry) GetOrganizationUrl() URI    { return x.OrganizationUrl }
func (x *OrgEnableSamlAuditEntry) GetSignatureMethodUrl() URI { return x.SignatureMethodUrl }
func (x *OrgEnableSamlAuditEntry) GetSingleSignOnUrl() URI    { return x.SingleSignOnUrl }
func (x *OrgEnableSamlAuditEntry) GetUser() *User             { return x.User }
func (x *OrgEnableSamlAuditEntry) GetUserLogin() string       { return x.UserLogin }
func (x *OrgEnableSamlAuditEntry) GetUserResourcePath() URI   { return x.UserResourcePath }
func (x *OrgEnableSamlAuditEntry) GetUserUrl() URI            { return x.UserUrl }

// OrgEnableTwoFactorRequirementAuditEntry (OBJECT): Audit log entry for a org.enable_two_factor_requirement event.
type OrgEnableTwoFactorRequirementAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgEnableTwoFactorRequirementAuditEntry) GetAction() string         { return x.Action }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetUser() *User          { return x.User }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetUserLogin() string    { return x.UserLogin }
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgEnableTwoFactorRequirementAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgEnterpriseOwnerOrder (INPUT_OBJECT): Ordering options for an organization's enterprise owner connections.
type OrgEnterpriseOwnerOrder struct {
	// Field: The field to order enterprise owners by.
	//
	// GraphQL type: OrgEnterpriseOwnerOrderField!
	Field OrgEnterpriseOwnerOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// OrgEnterpriseOwnerOrderField (ENUM): Properties by which enterprise owners can be ordered.
type OrgEnterpriseOwnerOrderField string

// OrgEnterpriseOwnerOrderField_LOGIN: Order enterprise owners by login.
const OrgEnterpriseOwnerOrderField_LOGIN OrgEnterpriseOwnerOrderField = "LOGIN"

// OrgInviteMemberAuditEntry (OBJECT): Audit log entry for a org.invite_member event.
type OrgInviteMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Email: The email address of the organization invitation.
	Email string `json:"email,omitempty"`

	// Id: The Node ID of the OrgInviteMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationInvitation: The organization invitation.
	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgInviteMemberAuditEntry) GetAction() string                { return x.Action }
func (x *OrgInviteMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgInviteMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgInviteMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgInviteMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgInviteMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgInviteMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgInviteMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgInviteMemberAuditEntry) GetEmail() string                 { return x.Email }
func (x *OrgInviteMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgInviteMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgInviteMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgInviteMemberAuditEntry) GetOrganizationInvitation() *OrganizationInvitation {
	return x.OrganizationInvitation
}
func (x *OrgInviteMemberAuditEntry) GetOrganizationName() string { return x.OrganizationName }
func (x *OrgInviteMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgInviteMemberAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgInviteMemberAuditEntry) GetUser() *User           { return x.User }
func (x *OrgInviteMemberAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgInviteMemberAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgInviteMemberAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgInviteToBusinessAuditEntry (OBJECT): Audit log entry for a org.invite_to_business event.
type OrgInviteToBusinessAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the OrgInviteToBusinessAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgInviteToBusinessAuditEntry) GetAction() string                { return x.Action }
func (x *OrgInviteToBusinessAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgInviteToBusinessAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgInviteToBusinessAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgInviteToBusinessAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgInviteToBusinessAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgInviteToBusinessAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgInviteToBusinessAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgInviteToBusinessAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *OrgInviteToBusinessAuditEntry) GetEnterpriseSlug() string       { return x.EnterpriseSlug }
func (x *OrgInviteToBusinessAuditEntry) GetEnterpriseUrl() URI           { return x.EnterpriseUrl }
func (x *OrgInviteToBusinessAuditEntry) GetId() ID                       { return x.Id }
func (x *OrgInviteToBusinessAuditEntry) GetOperationType() OperationType { return x.OperationType }
func (x *OrgInviteToBusinessAuditEntry) GetOrganization() *Organization  { return x.Organization }
func (x *OrgInviteToBusinessAuditEntry) GetOrganizationName() string     { return x.OrganizationName }
func (x *OrgInviteToBusinessAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgInviteToBusinessAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgInviteToBusinessAuditEntry) GetUser() *User           { return x.User }
func (x *OrgInviteToBusinessAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgInviteToBusinessAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgInviteToBusinessAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgOauthAppAccessApprovedAuditEntry (OBJECT): Audit log entry for a org.oauth_app_access_approved event.
type OrgOauthAppAccessApprovedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgOauthAppAccessApprovedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OauthApplicationName: The name of the OAuth application.
	OauthApplicationName string `json:"oauthApplicationName,omitempty"`

	// OauthApplicationResourcePath: The HTTP path for the OAuth application.
	OauthApplicationResourcePath URI `json:"oauthApplicationResourcePath,omitempty"`

	// OauthApplicationUrl: The HTTP URL for the OAuth application.
	OauthApplicationUrl URI `json:"oauthApplicationUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgOauthAppAccessApprovedAuditEntry) GetAction() string         { return x.Action }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgOauthAppAccessApprovedAuditEntry) GetActorLogin() string         { return x.ActorLogin }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetActorResourcePath() URI     { return x.ActorResourcePath }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOauthApplicationName() string {
	return x.OauthApplicationName
}
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOauthApplicationResourcePath() URI {
	return x.OauthApplicationResourcePath
}
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOauthApplicationUrl() URI {
	return x.OauthApplicationUrl
}
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOrganization() *Organization { return x.Organization }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOrganizationName() string    { return x.OrganizationName }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgOauthAppAccessApprovedAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetUser() *User           { return x.User }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgOauthAppAccessApprovedAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgOauthAppAccessBlockedAuditEntry (OBJECT): Audit log entry for a org.oauth_app_access_blocked event.
type OrgOauthAppAccessBlockedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgOauthAppAccessBlockedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OauthApplicationName: The name of the OAuth application.
	OauthApplicationName string `json:"oauthApplicationName,omitempty"`

	// OauthApplicationResourcePath: The HTTP path for the OAuth application.
	OauthApplicationResourcePath URI `json:"oauthApplicationResourcePath,omitempty"`

	// OauthApplicationUrl: The HTTP URL for the OAuth application.
	OauthApplicationUrl URI `json:"oauthApplicationUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgOauthAppAccessBlockedAuditEntry) GetAction() string         { return x.Action }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgOauthAppAccessBlockedAuditEntry) GetActorLogin() string         { return x.ActorLogin }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetActorResourcePath() URI     { return x.ActorResourcePath }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOauthApplicationName() string {
	return x.OauthApplicationName
}
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOauthApplicationResourcePath() URI {
	return x.OauthApplicationResourcePath
}
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOauthApplicationUrl() URI {
	return x.OauthApplicationUrl
}
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOperationType() OperationType { return x.OperationType }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOrganization() *Organization  { return x.Organization }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOrganizationName() string     { return x.OrganizationName }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgOauthAppAccessBlockedAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetUser() *User           { return x.User }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgOauthAppAccessBlockedAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgOauthAppAccessDeniedAuditEntry (OBJECT): Audit log entry for a org.oauth_app_access_denied event.
type OrgOauthAppAccessDeniedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgOauthAppAccessDeniedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OauthApplicationName: The name of the OAuth application.
	OauthApplicationName string `json:"oauthApplicationName,omitempty"`

	// OauthApplicationResourcePath: The HTTP path for the OAuth application.
	OauthApplicationResourcePath URI `json:"oauthApplicationResourcePath,omitempty"`

	// OauthApplicationUrl: The HTTP URL for the OAuth application.
	OauthApplicationUrl URI `json:"oauthApplicationUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgOauthAppAccessDeniedAuditEntry) GetAction() string                { return x.Action }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOauthApplicationName() string {
	return x.OauthApplicationName
}
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOauthApplicationResourcePath() URI {
	return x.OauthApplicationResourcePath
}
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOauthApplicationUrl() URI {
	return x.OauthApplicationUrl
}
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOperationType() OperationType { return x.OperationType }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOrganization() *Organization  { return x.Organization }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOrganizationName() string     { return x.OrganizationName }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgOauthAppAccessDeniedAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetUser() *User           { return x.User }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgOauthAppAccessDeniedAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgOauthAppAccessRequestedAuditEntry (OBJECT): Audit log entry for a org.oauth_app_access_requested event.
type OrgOauthAppAccessRequestedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgOauthAppAccessRequestedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OauthApplicationName: The name of the OAuth application.
	OauthApplicationName string `json:"oauthApplicationName,omitempty"`

	// OauthApplicationResourcePath: The HTTP path for the OAuth application.
	OauthApplicationResourcePath URI `json:"oauthApplicationResourcePath,omitempty"`

	// OauthApplicationUrl: The HTTP URL for the OAuth application.
	OauthApplicationUrl URI `json:"oauthApplicationUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgOauthAppAccessRequestedAuditEntry) GetAction() string         { return x.Action }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetActorLogin() string         { return x.ActorLogin }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetActorResourcePath() URI     { return x.ActorResourcePath }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOauthApplicationName() string {
	return x.OauthApplicationName
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOauthApplicationResourcePath() URI {
	return x.OauthApplicationResourcePath
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOauthApplicationUrl() URI {
	return x.OauthApplicationUrl
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOrganization() *Organization { return x.Organization }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgOauthAppAccessRequestedAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetUser() *User           { return x.User }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgOauthAppAccessRequestedAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgOauthAppAccessUnblockedAuditEntry (OBJECT): Audit log entry for a org.oauth_app_access_unblocked event.
type OrgOauthAppAccessUnblockedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OauthApplicationName: The name of the OAuth application.
	OauthApplicationName string `json:"oauthApplicationName,omitempty"`

	// OauthApplicationResourcePath: The HTTP path for the OAuth application.
	OauthApplicationResourcePath URI `json:"oauthApplicationResourcePath,omitempty"`

	// OauthApplicationUrl: The HTTP URL for the OAuth application.
	OauthApplicationUrl URI `json:"oauthApplicationUrl,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgOauthAppAccessUnblockedAuditEntry) GetAction() string         { return x.Action }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetActorLogin() string         { return x.ActorLogin }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetActorResourcePath() URI     { return x.ActorResourcePath }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOauthApplicationName() string {
	return x.OauthApplicationName
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOauthApplicationResourcePath() URI {
	return x.OauthApplicationResourcePath
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOauthApplicationUrl() URI {
	return x.OauthApplicationUrl
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOrganization() *Organization { return x.Organization }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetUser() *User           { return x.User }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgOauthAppAccessUnblockedAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgRemoveBillingManagerAuditEntry (OBJECT): Audit log entry for a org.remove_billing_manager event.
type OrgRemoveBillingManagerAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgRemoveBillingManagerAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Reason: The reason for the billing manager being removed.
	Reason OrgRemoveBillingManagerAuditEntryReason `json:"reason,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgRemoveBillingManagerAuditEntry) GetAction() string                { return x.Action }
func (x *OrgRemoveBillingManagerAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgRemoveBillingManagerAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgRemoveBillingManagerAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgRemoveBillingManagerAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgRemoveBillingManagerAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgRemoveBillingManagerAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgRemoveBillingManagerAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgRemoveBillingManagerAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgRemoveBillingManagerAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgRemoveBillingManagerAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgRemoveBillingManagerAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgRemoveBillingManagerAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgRemoveBillingManagerAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgRemoveBillingManagerAuditEntry) GetReason() OrgRemoveBillingManagerAuditEntryReason {
	return x.Reason
}
func (x *OrgRemoveBillingManagerAuditEntry) GetUser() *User           { return x.User }
func (x *OrgRemoveBillingManagerAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgRemoveBillingManagerAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgRemoveBillingManagerAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgRemoveBillingManagerAuditEntryReason (ENUM): The reason a billing manager was removed from an Organization.
type OrgRemoveBillingManagerAuditEntryReason string

// OrgRemoveBillingManagerAuditEntryReason_TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE: The organization required 2FA of its billing managers and this user did not have 2FA enabled.
const OrgRemoveBillingManagerAuditEntryReason_TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE OrgRemoveBillingManagerAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"

// OrgRemoveBillingManagerAuditEntryReason_SAML_EXTERNAL_IDENTITY_MISSING: SAML external identity missing.
const OrgRemoveBillingManagerAuditEntryReason_SAML_EXTERNAL_IDENTITY_MISSING OrgRemoveBillingManagerAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"

// OrgRemoveBillingManagerAuditEntryReason_SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY: SAML SSO enforcement requires an external identity.
const OrgRemoveBillingManagerAuditEntryReason_SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY OrgRemoveBillingManagerAuditEntryReason = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"

// OrgRemoveMemberAuditEntry (OBJECT): Audit log entry for a org.remove_member event.
type OrgRemoveMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgRemoveMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// MembershipTypes: The types of membership the member has with the organization.
	MembershipTypes []OrgRemoveMemberAuditEntryMembershipType `json:"membershipTypes,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Reason: The reason for the member being removed.
	Reason OrgRemoveMemberAuditEntryReason `json:"reason,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgRemoveMemberAuditEntry) GetAction() string                { return x.Action }
func (x *OrgRemoveMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgRemoveMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgRemoveMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgRemoveMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgRemoveMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgRemoveMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgRemoveMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgRemoveMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgRemoveMemberAuditEntry) GetMembershipTypes() []OrgRemoveMemberAuditEntryMembershipType {
	return x.MembershipTypes
}
func (x *OrgRemoveMemberAuditEntry) GetOperationType() OperationType { return x.OperationType }
func (x *OrgRemoveMemberAuditEntry) GetOrganization() *Organization  { return x.Organization }
func (x *OrgRemoveMemberAuditEntry) GetOrganizationName() string     { return x.OrganizationName }
func (x *OrgRemoveMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgRemoveMemberAuditEntry) GetOrganizationUrl() URI                    { return x.OrganizationUrl }
func (x *OrgRemoveMemberAuditEntry) GetReason() OrgRemoveMemberAuditEntryReason { return x.Reason }
func (x *OrgRemoveMemberAuditEntry) GetUser() *User                             { return x.User }
func (x *OrgRemoveMemberAuditEntry) GetUserLogin() string                       { return x.UserLogin }
func (x *OrgRemoveMemberAuditEntry) GetUserResourcePath() URI                   { return x.UserResourcePath }
func (x *OrgRemoveMemberAuditEntry) GetUserUrl() URI                            { return x.UserUrl }

// OrgRemoveMemberAuditEntryMembershipType (ENUM): The type of membership a user has with an Organization.
type OrgRemoveMemberAuditEntryMembershipType string

// OrgRemoveMemberAuditEntryMembershipType_SUSPENDED: A suspended member.
const OrgRemoveMemberAuditEntryMembershipType_SUSPENDED OrgRemoveMemberAuditEntryMembershipType = "SUSPENDED"

// OrgRemoveMemberAuditEntryMembershipType_DIRECT_MEMBER: A direct member is a user that is a member of the Organization.
const OrgRemoveMemberAuditEntryMembershipType_DIRECT_MEMBER OrgRemoveMemberAuditEntryMembershipType = "DIRECT_MEMBER"

// OrgRemoveMemberAuditEntryMembershipType_ADMIN: Organization owners have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization owners can delete the organization and all of its repositories.
const OrgRemoveMemberAuditEntryMembershipType_ADMIN OrgRemoveMemberAuditEntryMembershipType = "ADMIN"

// OrgRemoveMemberAuditEntryMembershipType_BILLING_MANAGER: A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
const OrgRemoveMemberAuditEntryMembershipType_BILLING_MANAGER OrgRemoveMemberAuditEntryMembershipType = "BILLING_MANAGER"

// OrgRemoveMemberAuditEntryMembershipType_UNAFFILIATED: An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
const OrgRemoveMemberAuditEntryMembershipType_UNAFFILIATED OrgRemoveMemberAuditEntryMembershipType = "UNAFFILIATED"

// OrgRemoveMemberAuditEntryMembershipType_OUTSIDE_COLLABORATOR: An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
const OrgRemoveMemberAuditEntryMembershipType_OUTSIDE_COLLABORATOR OrgRemoveMemberAuditEntryMembershipType = "OUTSIDE_COLLABORATOR"

// OrgRemoveMemberAuditEntryReason (ENUM): The reason a member was removed from an Organization.
type OrgRemoveMemberAuditEntryReason string

// OrgRemoveMemberAuditEntryReason_TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE: The organization required 2FA of its billing managers and this user did not have 2FA enabled.
const OrgRemoveMemberAuditEntryReason_TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE OrgRemoveMemberAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"

// OrgRemoveMemberAuditEntryReason_SAML_EXTERNAL_IDENTITY_MISSING: SAML external identity missing.
const OrgRemoveMemberAuditEntryReason_SAML_EXTERNAL_IDENTITY_MISSING OrgRemoveMemberAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"

// OrgRemoveMemberAuditEntryReason_SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY: SAML SSO enforcement requires an external identity.
const OrgRemoveMemberAuditEntryReason_SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY OrgRemoveMemberAuditEntryReason = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"

// OrgRemoveMemberAuditEntryReason_USER_ACCOUNT_DELETED: User account has been deleted.
const OrgRemoveMemberAuditEntryReason_USER_ACCOUNT_DELETED OrgRemoveMemberAuditEntryReason = "USER_ACCOUNT_DELETED"

// OrgRemoveMemberAuditEntryReason_TWO_FACTOR_ACCOUNT_RECOVERY: User was removed from organization during account recovery.
const OrgRemoveMemberAuditEntryReason_TWO_FACTOR_ACCOUNT_RECOVERY OrgRemoveMemberAuditEntryReason = "TWO_FACTOR_ACCOUNT_RECOVERY"

// OrgRemoveOutsideCollaboratorAuditEntry (OBJECT): Audit log entry for a org.remove_outside_collaborator event.
type OrgRemoveOutsideCollaboratorAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object.
	Id ID `json:"id,omitempty"`

	// MembershipTypes: The types of membership the outside collaborator has with the organization.
	MembershipTypes []OrgRemoveOutsideCollaboratorAuditEntryMembershipType `json:"membershipTypes,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Reason: The reason for the outside collaborator being removed from the Organization.
	Reason OrgRemoveOutsideCollaboratorAuditEntryReason `json:"reason,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetAction() string         { return x.Action }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetId() ID                     { return x.Id }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetMembershipTypes() []OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
	return x.MembershipTypes
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetReason() OrgRemoveOutsideCollaboratorAuditEntryReason {
	return x.Reason
}
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetUser() *User           { return x.User }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgRemoveOutsideCollaboratorAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgRemoveOutsideCollaboratorAuditEntryMembershipType (ENUM): The type of membership a user has with an Organization.
type OrgRemoveOutsideCollaboratorAuditEntryMembershipType string

// OrgRemoveOutsideCollaboratorAuditEntryMembershipType_OUTSIDE_COLLABORATOR: An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
const OrgRemoveOutsideCollaboratorAuditEntryMembershipType_OUTSIDE_COLLABORATOR OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "OUTSIDE_COLLABORATOR"

// OrgRemoveOutsideCollaboratorAuditEntryMembershipType_UNAFFILIATED: An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
const OrgRemoveOutsideCollaboratorAuditEntryMembershipType_UNAFFILIATED OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "UNAFFILIATED"

// OrgRemoveOutsideCollaboratorAuditEntryMembershipType_BILLING_MANAGER: A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
const OrgRemoveOutsideCollaboratorAuditEntryMembershipType_BILLING_MANAGER OrgRemoveOutsideCollaboratorAuditEntryMembershipType = "BILLING_MANAGER"

// OrgRemoveOutsideCollaboratorAuditEntryReason (ENUM): The reason an outside collaborator was removed from an Organization.
type OrgRemoveOutsideCollaboratorAuditEntryReason string

// OrgRemoveOutsideCollaboratorAuditEntryReason_TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE: The organization required 2FA of its billing managers and this user did not have 2FA enabled.
const OrgRemoveOutsideCollaboratorAuditEntryReason_TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE OrgRemoveOutsideCollaboratorAuditEntryReason = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"

// OrgRemoveOutsideCollaboratorAuditEntryReason_SAML_EXTERNAL_IDENTITY_MISSING: SAML external identity missing.
const OrgRemoveOutsideCollaboratorAuditEntryReason_SAML_EXTERNAL_IDENTITY_MISSING OrgRemoveOutsideCollaboratorAuditEntryReason = "SAML_EXTERNAL_IDENTITY_MISSING"

// OrgRestoreMemberAuditEntry (OBJECT): Audit log entry for a org.restore_member event.
type OrgRestoreMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgRestoreMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// RestoredCustomEmailRoutingsCount: The number of custom email routings for the restored member.
	RestoredCustomEmailRoutingsCount int `json:"restoredCustomEmailRoutingsCount,omitempty"`

	// RestoredIssueAssignmentsCount: The number of issue assignments for the restored member.
	RestoredIssueAssignmentsCount int `json:"restoredIssueAssignmentsCount,omitempty"`

	// RestoredMemberships: Restored organization membership objects.
	RestoredMemberships []OrgRestoreMemberAuditEntryMembership `json:"restoredMemberships,omitempty"`

	// RestoredMembershipsCount: The number of restored memberships.
	RestoredMembershipsCount int `json:"restoredMembershipsCount,omitempty"`

	// RestoredRepositoriesCount: The number of repositories of the restored member.
	RestoredRepositoriesCount int `json:"restoredRepositoriesCount,omitempty"`

	// RestoredRepositoryStarsCount: The number of starred repositories for the restored member.
	RestoredRepositoryStarsCount int `json:"restoredRepositoryStarsCount,omitempty"`

	// RestoredRepositoryWatchesCount: The number of watched repositories for the restored member.
	RestoredRepositoryWatchesCount int `json:"restoredRepositoryWatchesCount,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgRestoreMemberAuditEntry) GetAction() string                { return x.Action }
func (x *OrgRestoreMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgRestoreMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgRestoreMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgRestoreMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgRestoreMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgRestoreMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgRestoreMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgRestoreMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgRestoreMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgRestoreMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgRestoreMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgRestoreMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgRestoreMemberAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgRestoreMemberAuditEntry) GetRestoredCustomEmailRoutingsCount() int {
	return x.RestoredCustomEmailRoutingsCount
}
func (x *OrgRestoreMemberAuditEntry) GetRestoredIssueAssignmentsCount() int {
	return x.RestoredIssueAssignmentsCount
}
func (x *OrgRestoreMemberAuditEntry) GetRestoredMemberships() []OrgRestoreMemberAuditEntryMembership {
	return x.RestoredMemberships
}
func (x *OrgRestoreMemberAuditEntry) GetRestoredMembershipsCount() int {
	return x.RestoredMembershipsCount
}
func (x *OrgRestoreMemberAuditEntry) GetRestoredRepositoriesCount() int {
	return x.RestoredRepositoriesCount
}
func (x *OrgRestoreMemberAuditEntry) GetRestoredRepositoryStarsCount() int {
	return x.RestoredRepositoryStarsCount
}
func (x *OrgRestoreMemberAuditEntry) GetRestoredRepositoryWatchesCount() int {
	return x.RestoredRepositoryWatchesCount
}
func (x *OrgRestoreMemberAuditEntry) GetUser() *User           { return x.User }
func (x *OrgRestoreMemberAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgRestoreMemberAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgRestoreMemberAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgRestoreMemberAuditEntryMembership (UNION): Types of memberships that can be restored for an Organization member.
// OrgRestoreMemberAuditEntryMembership_Interface: Types of memberships that can be restored for an Organization member.
//
// Possible types:
//
//   - *OrgRestoreMemberMembershipOrganizationAuditEntryData
//   - *OrgRestoreMemberMembershipRepositoryAuditEntryData
//   - *OrgRestoreMemberMembershipTeamAuditEntryData
type OrgRestoreMemberAuditEntryMembership_Interface interface {
	isOrgRestoreMemberAuditEntryMembership()
}

func (*OrgRestoreMemberMembershipOrganizationAuditEntryData) isOrgRestoreMemberAuditEntryMembership() {
}
func (*OrgRestoreMemberMembershipRepositoryAuditEntryData) isOrgRestoreMemberAuditEntryMembership() {}
func (*OrgRestoreMemberMembershipTeamAuditEntryData) isOrgRestoreMemberAuditEntryMembership()       {}

type OrgRestoreMemberAuditEntryMembership struct {
	Interface OrgRestoreMemberAuditEntryMembership_Interface
}

func (x *OrgRestoreMemberAuditEntryMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *OrgRestoreMemberAuditEntryMembership) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for OrgRestoreMemberAuditEntryMembership", info.Typename)
	case "OrgRestoreMemberMembershipOrganizationAuditEntryData":
		x.Interface = new(OrgRestoreMemberMembershipOrganizationAuditEntryData)
	case "OrgRestoreMemberMembershipRepositoryAuditEntryData":
		x.Interface = new(OrgRestoreMemberMembershipRepositoryAuditEntryData)
	case "OrgRestoreMemberMembershipTeamAuditEntryData":
		x.Interface = new(OrgRestoreMemberMembershipTeamAuditEntryData)
	}
	return json.Unmarshal(js, x.Interface)
}

// OrgRestoreMemberMembershipOrganizationAuditEntryData (OBJECT): Metadata for an organization membership for org.restore_member actions.
type OrgRestoreMemberMembershipOrganizationAuditEntryData struct {
	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`
}

func (x *OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgRestoreMemberMembershipOrganizationAuditEntryData) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}

// OrgRestoreMemberMembershipRepositoryAuditEntryData (OBJECT): Metadata for a repository membership for org.restore_member actions.
type OrgRestoreMemberMembershipRepositoryAuditEntryData struct {
	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`
}

func (x *OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepository() *Repository {
	return x.Repository
}
func (x *OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *OrgRestoreMemberMembershipRepositoryAuditEntryData) GetRepositoryUrl() URI {
	return x.RepositoryUrl
}

// OrgRestoreMemberMembershipTeamAuditEntryData (OBJECT): Metadata for a team membership for org.restore_member actions.
type OrgRestoreMemberMembershipTeamAuditEntryData struct {
	// Team: The team associated with the action.
	Team *Team `json:"team,omitempty"`

	// TeamName: The name of the team.
	TeamName string `json:"teamName,omitempty"`

	// TeamResourcePath: The HTTP path for this team.
	TeamResourcePath URI `json:"teamResourcePath,omitempty"`

	// TeamUrl: The HTTP URL for this team.
	TeamUrl URI `json:"teamUrl,omitempty"`
}

func (x *OrgRestoreMemberMembershipTeamAuditEntryData) GetTeam() *Team      { return x.Team }
func (x *OrgRestoreMemberMembershipTeamAuditEntryData) GetTeamName() string { return x.TeamName }
func (x *OrgRestoreMemberMembershipTeamAuditEntryData) GetTeamResourcePath() URI {
	return x.TeamResourcePath
}
func (x *OrgRestoreMemberMembershipTeamAuditEntryData) GetTeamUrl() URI { return x.TeamUrl }

// OrgUnblockUserAuditEntry (OBJECT): Audit log entry for a org.unblock_user.
type OrgUnblockUserAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// BlockedUser: The user being unblocked by the organization.
	BlockedUser *User `json:"blockedUser,omitempty"`

	// BlockedUserName: The username of the blocked user.
	BlockedUserName string `json:"blockedUserName,omitempty"`

	// BlockedUserResourcePath: The HTTP path for the blocked user.
	BlockedUserResourcePath URI `json:"blockedUserResourcePath,omitempty"`

	// BlockedUserUrl: The HTTP URL for the blocked user.
	BlockedUserUrl URI `json:"blockedUserUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgUnblockUserAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgUnblockUserAuditEntry) GetAction() string                { return x.Action }
func (x *OrgUnblockUserAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgUnblockUserAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgUnblockUserAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgUnblockUserAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgUnblockUserAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgUnblockUserAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgUnblockUserAuditEntry) GetBlockedUser() *User            { return x.BlockedUser }
func (x *OrgUnblockUserAuditEntry) GetBlockedUserName() string       { return x.BlockedUserName }
func (x *OrgUnblockUserAuditEntry) GetBlockedUserResourcePath() URI  { return x.BlockedUserResourcePath }
func (x *OrgUnblockUserAuditEntry) GetBlockedUserUrl() URI           { return x.BlockedUserUrl }
func (x *OrgUnblockUserAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgUnblockUserAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgUnblockUserAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgUnblockUserAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgUnblockUserAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgUnblockUserAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgUnblockUserAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *OrgUnblockUserAuditEntry) GetUser() *User           { return x.User }
func (x *OrgUnblockUserAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgUnblockUserAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgUnblockUserAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgUpdateDefaultRepositoryPermissionAuditEntry (OBJECT): Audit log entry for a org.update_default_repository_permission.
type OrgUpdateDefaultRepositoryPermissionAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Permission: The new base repository permission level for the organization.
	Permission OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permission,omitempty"`

	// PermissionWas: The former base repository permission level for the organization.
	PermissionWas OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permissionWas,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetAction() string         { return x.Action }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetId() ID { return x.Id }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetPermission() OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
	return x.Permission
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetPermissionWas() OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
	return x.PermissionWas
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUser() *User       { return x.User }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgUpdateDefaultRepositoryPermissionAuditEntry) GetUserUrl() URI { return x.UserUrl }

// OrgUpdateDefaultRepositoryPermissionAuditEntryPermission (ENUM): The default permission a repository can have in an Organization.
type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission string

// OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_READ: Can read and clone repositories.
const OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_READ OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "READ"

// OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_WRITE: Can read, clone and push to repositories.
const OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_WRITE OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "WRITE"

// OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_ADMIN: Can read, clone, push, and add collaborators to repositories.
const OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_ADMIN OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "ADMIN"

// OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_NONE: No default permission value.
const OrgUpdateDefaultRepositoryPermissionAuditEntryPermission_NONE OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = "NONE"

// OrgUpdateMemberAuditEntry (OBJECT): Audit log entry for a org.update_member event.
type OrgUpdateMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgUpdateMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Permission: The new member permission level for the organization.
	Permission OrgUpdateMemberAuditEntryPermission `json:"permission,omitempty"`

	// PermissionWas: The former member permission level for the organization.
	PermissionWas OrgUpdateMemberAuditEntryPermission `json:"permissionWas,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgUpdateMemberAuditEntry) GetAction() string                { return x.Action }
func (x *OrgUpdateMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *OrgUpdateMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *OrgUpdateMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *OrgUpdateMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *OrgUpdateMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *OrgUpdateMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *OrgUpdateMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *OrgUpdateMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *OrgUpdateMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *OrgUpdateMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *OrgUpdateMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *OrgUpdateMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgUpdateMemberAuditEntry) GetOrganizationUrl() URI { return x.OrganizationUrl }
func (x *OrgUpdateMemberAuditEntry) GetPermission() OrgUpdateMemberAuditEntryPermission {
	return x.Permission
}
func (x *OrgUpdateMemberAuditEntry) GetPermissionWas() OrgUpdateMemberAuditEntryPermission {
	return x.PermissionWas
}
func (x *OrgUpdateMemberAuditEntry) GetUser() *User           { return x.User }
func (x *OrgUpdateMemberAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *OrgUpdateMemberAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *OrgUpdateMemberAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// OrgUpdateMemberAuditEntryPermission (ENUM): The permissions available to members on an Organization.
type OrgUpdateMemberAuditEntryPermission string

// OrgUpdateMemberAuditEntryPermission_READ: Can read and clone repositories.
const OrgUpdateMemberAuditEntryPermission_READ OrgUpdateMemberAuditEntryPermission = "READ"

// OrgUpdateMemberAuditEntryPermission_ADMIN: Can read, clone, push, and add collaborators to repositories.
const OrgUpdateMemberAuditEntryPermission_ADMIN OrgUpdateMemberAuditEntryPermission = "ADMIN"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntry (OBJECT): Audit log entry for a org.update_member_repository_creation_permission event.
type OrgUpdateMemberRepositoryCreationPermissionAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CanCreateRepositories: Can members create repositories in the organization.
	CanCreateRepositories bool `json:"canCreateRepositories,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The permission for visibility level of repositories for this organization.
	Visibility OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetAction() string { return x.Action }
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActor() AuditEntryActor {
	return x.Actor
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorIp() string { return x.ActorIp }
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorLogin() string {
	return x.ActorLogin
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetCanCreateRepositories() bool {
	return x.CanCreateRepositories
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetId() ID { return x.Id }
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUser() *User { return x.User }
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUserLogin() string {
	return x.UserLogin
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetUserUrl() URI { return x.UserUrl }
func (x *OrgUpdateMemberRepositoryCreationPermissionAuditEntry) GetVisibility() OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
	return x.Visibility
}

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility (ENUM): The permissions available for repository creation on an Organization.
type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility string

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_ALL: All organization members are restricted from creating any repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_ALL OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "ALL"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PUBLIC: All organization members are restricted from creating public repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PUBLIC OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_NONE: All organization members are allowed to create any repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_NONE OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "NONE"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PRIVATE: All organization members are restricted from creating private repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PRIVATE OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PRIVATE"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_INTERNAL: All organization members are restricted from creating internal repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_INTERNAL OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "INTERNAL"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PUBLIC_INTERNAL: All organization members are restricted from creating public or internal repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PUBLIC_INTERNAL OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC_INTERNAL"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PRIVATE_INTERNAL: All organization members are restricted from creating private or internal repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PRIVATE_INTERNAL OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PRIVATE_INTERNAL"

// OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PUBLIC_PRIVATE: All organization members are restricted from creating public or private repositories.
const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility_PUBLIC_PRIVATE OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = "PUBLIC_PRIVATE"

// OrgUpdateMemberRepositoryInvitationPermissionAuditEntry (OBJECT): Audit log entry for a org.update_member_repository_invitation_permission event.
type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CanInviteOutsideCollaboratorsToRepositories: Can outside collaborators be invited to repositories in the organization.
	CanInviteOutsideCollaboratorsToRepositories bool `json:"canInviteOutsideCollaboratorsToRepositories,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetAction() string { return x.Action }
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActor() AuditEntryActor {
	return x.Actor
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorIp() string {
	return x.ActorIp
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorLogin() string {
	return x.ActorLogin
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetActorUrl() URI {
	return x.ActorUrl
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetCanInviteOutsideCollaboratorsToRepositories() bool {
	return x.CanInviteOutsideCollaboratorsToRepositories
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetId() ID { return x.Id }
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUser() *User { return x.User }
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUserLogin() string {
	return x.UserLogin
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) GetUserUrl() URI { return x.UserUrl }

// Organization (OBJECT): An account on GitHub, with one or more owners, that has repositories, members and teams.
type Organization struct {
	// Announcement: The text of the announcement.
	//
	// Deprecated: The text of the announcement.
	Announcement string `json:"announcement,omitempty"`

	// AnnouncementBanner: The announcement banner set on this organization, if any. Only visible to members of the organization's enterprise.
	AnnouncementBanner *AnnouncementBanner `json:"announcementBanner,omitempty"`

	// AnnouncementCreatedAt: The date the announcement was created.
	//
	// Deprecated: The date the announcement was created.
	AnnouncementCreatedAt DateTime `json:"announcementCreatedAt,omitempty"`

	// AnnouncementExpiresAt: The expiration date of the announcement, if any.
	//
	// Deprecated: The expiration date of the announcement, if any.
	AnnouncementExpiresAt DateTime `json:"announcementExpiresAt,omitempty"`

	// AnnouncementUserDismissible: Whether the announcement can be dismissed by the user.
	//
	// Deprecated: Whether the announcement can be dismissed by the user.
	AnnouncementUserDismissible bool `json:"announcementUserDismissible,omitempty"`

	// AnyPinnableItems: Determine if this repository owner has any items that can be pinned to their profile.
	//
	// Query arguments:
	//   - type PinnableItemType
	AnyPinnableItems bool `json:"anyPinnableItems,omitempty"`

	// ArchivedAt: Identifies the date and time when the organization was archived.
	ArchivedAt DateTime `json:"archivedAt,omitempty"`

	// AuditLog: Audit log entries of the organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - query String
	//   - orderBy AuditLogOrder
	AuditLog *OrganizationAuditEntryConnection `json:"auditLog,omitempty"`

	// AvatarUrl: A URL pointing to the organization's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: The organization's public profile description.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The organization's public profile description rendered to HTML.
	DescriptionHTML string `json:"descriptionHTML,omitempty"`

	// Domains: A list of domains owned by the organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - isVerified Boolean
	//   - isApproved Boolean
	//   - orderBy VerifiableDomainOrder
	Domains *VerifiableDomainConnection `json:"domains,omitempty"`

	// Email: The organization's public email.
	Email string `json:"email,omitempty"`

	// EnterpriseOwners: A list of owners of the organization's enterprise account.
	//
	// Query arguments:
	//   - query String
	//   - organizationRole RoleInOrganization
	//   - orderBy OrgEnterpriseOwnerOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	EnterpriseOwners *OrganizationEnterpriseOwnerConnection `json:"enterpriseOwners,omitempty"`

	// EstimatedNextSponsorsPayoutInCents: The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
	EstimatedNextSponsorsPayoutInCents int `json:"estimatedNextSponsorsPayoutInCents,omitempty"`

	// HasSponsorsListing: True if this user/organization has a GitHub Sponsors listing.
	HasSponsorsListing bool `json:"hasSponsorsListing,omitempty"`

	// Id: The Node ID of the Organization object.
	Id ID `json:"id,omitempty"`

	// InteractionAbility: The interaction ability settings for this organization.
	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`

	// IpAllowListEnabledSetting: The setting value for whether the organization has an IP allow list enabled.
	IpAllowListEnabledSetting IpAllowListEnabledSettingValue `json:"ipAllowListEnabledSetting,omitempty"`

	// IpAllowListEntries: The IP addresses that are allowed to access resources owned by the organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy IpAllowListEntryOrder
	IpAllowListEntries *IpAllowListEntryConnection `json:"ipAllowListEntries,omitempty"`

	// IpAllowListForInstalledAppsEnabledSetting: The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
	IpAllowListForInstalledAppsEnabledSetting IpAllowListForInstalledAppsEnabledSettingValue `json:"ipAllowListForInstalledAppsEnabledSetting,omitempty"`

	// IsSponsoredBy: Whether the given account is sponsoring this user/organization.
	//
	// Query arguments:
	//   - accountLogin String!
	IsSponsoredBy bool `json:"isSponsoredBy,omitempty"`

	// IsSponsoringViewer: True if the viewer is sponsored by this user/organization.
	IsSponsoringViewer bool `json:"isSponsoringViewer,omitempty"`

	// IsVerified: Whether the organization has verified its profile email and website.
	IsVerified bool `json:"isVerified,omitempty"`

	// ItemShowcase: Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
	ItemShowcase *ProfileItemShowcase `json:"itemShowcase,omitempty"`

	// LifetimeReceivedSponsorshipValues: Calculate how much each sponsor has ever paid total to this maintainer via GitHub Sponsors. Does not include sponsorships paid via Patreon.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorAndLifetimeValueOrder
	LifetimeReceivedSponsorshipValues *SponsorAndLifetimeValueConnection `json:"lifetimeReceivedSponsorshipValues,omitempty"`

	// Location: The organization's public profile location.
	Location string `json:"location,omitempty"`

	// Login: The organization's login name.
	Login string `json:"login,omitempty"`

	// Mannequins: A list of all mannequins for this organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - login String
	//   - orderBy MannequinOrder
	Mannequins *MannequinConnection `json:"mannequins,omitempty"`

	// MemberStatuses: Get the status messages members of this entity have set that are either public or visible only to the organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy UserStatusOrder
	MemberStatuses *UserStatusConnection `json:"memberStatuses,omitempty"`

	// MembersCanForkPrivateRepositories: Members can fork private repositories in this organization.
	MembersCanForkPrivateRepositories bool `json:"membersCanForkPrivateRepositories,omitempty"`

	// MembersWithRole: A list of users who are members of this organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	MembersWithRole *OrganizationMemberConnection `json:"membersWithRole,omitempty"`

	// MonthlyEstimatedSponsorsIncomeInCents: The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
	MonthlyEstimatedSponsorsIncomeInCents int `json:"monthlyEstimatedSponsorsIncomeInCents,omitempty"`

	// Name: The organization's public profile name.
	Name string `json:"name,omitempty"`

	// NewTeamResourcePath: The HTTP path creating a new team.
	NewTeamResourcePath URI `json:"newTeamResourcePath,omitempty"`

	// NewTeamUrl: The HTTP URL creating a new team.
	NewTeamUrl URI `json:"newTeamUrl,omitempty"`

	// NotificationDeliveryRestrictionEnabledSetting: Indicates if email notification delivery for this organization is restricted to verified or approved domains.
	NotificationDeliveryRestrictionEnabledSetting NotificationRestrictionSettingValue `json:"notificationDeliveryRestrictionEnabledSetting,omitempty"`

	// OrganizationBillingEmail: The billing email for the organization.
	OrganizationBillingEmail string `json:"organizationBillingEmail,omitempty"`

	// Packages: A list of packages under the owner.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - names [String]
	//   - repositoryId ID
	//   - packageType PackageType
	//   - orderBy PackageOrder
	Packages *PackageConnection `json:"packages,omitempty"`

	// PendingMembers: A list of users who have been invited to join this organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PendingMembers *UserConnection `json:"pendingMembers,omitempty"`

	// PinnableItems: A list of repositories and gists this profile owner can pin to their profile.
	//
	// Query arguments:
	//   - types [PinnableItemType!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PinnableItems *PinnableItemConnection `json:"pinnableItems,omitempty"`

	// PinnedItems: A list of repositories and gists this profile owner has pinned to their profile.
	//
	// Query arguments:
	//   - types [PinnableItemType!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PinnedItems *PinnableItemConnection `json:"pinnedItems,omitempty"`

	// PinnedItemsRemaining: Returns how many more items this profile owner can pin to their profile.
	PinnedItemsRemaining int `json:"pinnedItemsRemaining,omitempty"`

	// Project: Find project by number.
	//
	// Deprecated: Find project by number.
	//
	// Query arguments:
	//   - number Int!
	Project *Project `json:"project,omitempty"`

	// ProjectV2: Find a project by number.
	//
	// Query arguments:
	//   - number Int!
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`

	// Projects: A list of projects under the owner.
	//
	// Deprecated: A list of projects under the owner.
	//
	// Query arguments:
	//   - orderBy ProjectOrder
	//   - search String
	//   - states [ProjectState!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Projects *ProjectConnection `json:"projects,omitempty"`

	// ProjectsResourcePath: The HTTP path listing organization's projects.
	ProjectsResourcePath URI `json:"projectsResourcePath,omitempty"`

	// ProjectsUrl: The HTTP URL listing organization's projects.
	ProjectsUrl URI `json:"projectsUrl,omitempty"`

	// ProjectsV2: A list of projects under the owner.
	//
	// Query arguments:
	//   - query String
	//   - orderBy ProjectV2Order
	//   - minPermissionLevel ProjectV2PermissionLevel
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// RecentProjects: Recent projects that this user has modified in the context of the owner.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RecentProjects *ProjectV2Connection `json:"recentProjects,omitempty"`

	// Repositories: A list of repositories that the user owns.
	//
	// Query arguments:
	//   - privacy RepositoryPrivacy
	//   - visibility RepositoryVisibility
	//   - orderBy RepositoryOrder
	//   - affiliations [RepositoryAffiliation]
	//   - ownerAffiliations [RepositoryAffiliation]
	//   - isLocked Boolean
	//   - hasIssuesEnabled Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - isArchived Boolean
	//   - isFork Boolean
	Repositories *RepositoryConnection `json:"repositories,omitempty"`

	// Repository: Find Repository.
	//
	// Query arguments:
	//   - name String!
	//   - followRenames Boolean
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryDiscussionComments: Discussion comments this user has authored.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - repositoryId ID
	//   - onlyAnswers Boolean
	RepositoryDiscussionComments *DiscussionCommentConnection `json:"repositoryDiscussionComments,omitempty"`

	// RepositoryDiscussions: Discussions this user has started.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy DiscussionOrder
	//   - repositoryId ID
	//   - answered Boolean
	//   - states [DiscussionState!]
	RepositoryDiscussions *DiscussionConnection `json:"repositoryDiscussions,omitempty"`

	// RepositoryMigrations: A list of all repository migrations for this organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - state MigrationState
	//   - repositoryName String
	//   - orderBy RepositoryMigrationOrder
	RepositoryMigrations *RepositoryMigrationConnection `json:"repositoryMigrations,omitempty"`

	// RequiresTwoFactorAuthentication: When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
	RequiresTwoFactorAuthentication bool `json:"requiresTwoFactorAuthentication,omitempty"`

	// ResourcePath: The HTTP path for this organization.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Ruleset: Returns a single ruleset from the current organization by ID.
	//
	// Query arguments:
	//   - databaseId Int!
	//   - includeParents Boolean
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`

	// Rulesets: A list of rulesets for this organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - includeParents Boolean
	//   - targets [RepositoryRulesetTarget!]
	Rulesets *RepositoryRulesetConnection `json:"rulesets,omitempty"`

	// SamlIdentityProvider: The Organization's SAML identity provider. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members.
	SamlIdentityProvider *OrganizationIdentityProvider `json:"samlIdentityProvider,omitempty"`

	// Sponsoring: List of users and organizations this entity is sponsoring.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorOrder
	Sponsoring *SponsorConnection `json:"sponsoring,omitempty"`

	// Sponsors: List of sponsors for this user or organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - tierId ID
	//   - orderBy SponsorOrder
	Sponsors *SponsorConnection `json:"sponsors,omitempty"`

	// SponsorsActivities: Events involving this sponsorable, such as new sponsorships.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - period SponsorsActivityPeriod
	//   - since DateTime
	//   - until DateTime
	//   - orderBy SponsorsActivityOrder
	//   - actions [SponsorsActivityAction!]
	//   - includeAsSponsor Boolean
	//   - includePrivate Boolean
	SponsorsActivities *SponsorsActivityConnection `json:"sponsorsActivities,omitempty"`

	// SponsorsListing: The GitHub Sponsors listing for this user or organization.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`

	// SponsorshipForViewerAsSponsor: The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
	//
	// Query arguments:
	//   - activeOnly Boolean
	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor,omitempty"`

	// SponsorshipForViewerAsSponsorable: The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
	//
	// Query arguments:
	//   - activeOnly Boolean
	SponsorshipForViewerAsSponsorable *Sponsorship `json:"sponsorshipForViewerAsSponsorable,omitempty"`

	// SponsorshipNewsletters: List of sponsorship updates sent from this sponsorable to sponsors.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorshipNewsletterOrder
	SponsorshipNewsletters *SponsorshipNewsletterConnection `json:"sponsorshipNewsletters,omitempty"`

	// SponsorshipsAsMaintainer: The sponsorships where this user or organization is the maintainer receiving the funds.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - includePrivate Boolean
	//   - orderBy SponsorshipOrder
	//   - activeOnly Boolean
	SponsorshipsAsMaintainer *SponsorshipConnection `json:"sponsorshipsAsMaintainer,omitempty"`

	// SponsorshipsAsSponsor: The sponsorships where this user or organization is the funder.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorshipOrder
	//   - maintainerLogins [String!]
	//   - activeOnly Boolean
	SponsorshipsAsSponsor *SponsorshipConnection `json:"sponsorshipsAsSponsor,omitempty"`

	// Team: Find an organization's team by its slug.
	//
	// Query arguments:
	//   - slug String!
	Team *Team `json:"team,omitempty"`

	// Teams: A list of teams in this organization.
	//
	// Query arguments:
	//   - privacy TeamPrivacy
	//   - notificationSetting TeamNotificationSetting
	//   - role TeamRole
	//   - query String
	//   - userLogins [String!]
	//   - orderBy TeamOrder
	//   - ldapMapped Boolean
	//   - rootTeamsOnly Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Teams *TeamConnection `json:"teams,omitempty"`

	// TeamsResourcePath: The HTTP path listing organization's teams.
	TeamsResourcePath URI `json:"teamsResourcePath,omitempty"`

	// TeamsUrl: The HTTP URL listing organization's teams.
	TeamsUrl URI `json:"teamsUrl,omitempty"`

	// TotalSponsorshipAmountAsSponsorInCents: The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
	//
	// Query arguments:
	//   - since DateTime
	//   - until DateTime
	//   - sponsorableLogins [String!]
	TotalSponsorshipAmountAsSponsorInCents int `json:"totalSponsorshipAmountAsSponsorInCents,omitempty"`

	// TwitterUsername: The organization's Twitter username.
	TwitterUsername string `json:"twitterUsername,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this organization.
	Url URI `json:"url,omitempty"`

	// ViewerCanAdminister: Organization is adminable by the viewer.
	ViewerCanAdminister bool `json:"viewerCanAdminister,omitempty"`

	// ViewerCanChangePinnedItems: Can the viewer pin repositories and gists to the profile?.
	ViewerCanChangePinnedItems bool `json:"viewerCanChangePinnedItems,omitempty"`

	// ViewerCanCreateProjects: Can the current viewer create new projects on this owner.
	ViewerCanCreateProjects bool `json:"viewerCanCreateProjects,omitempty"`

	// ViewerCanCreateRepositories: Viewer can create repositories on this organization.
	ViewerCanCreateRepositories bool `json:"viewerCanCreateRepositories,omitempty"`

	// ViewerCanCreateTeams: Viewer can create teams on this organization.
	ViewerCanCreateTeams bool `json:"viewerCanCreateTeams,omitempty"`

	// ViewerCanSponsor: Whether or not the viewer is able to sponsor this user/organization.
	ViewerCanSponsor bool `json:"viewerCanSponsor,omitempty"`

	// ViewerIsAMember: Viewer is an active member of this organization.
	ViewerIsAMember bool `json:"viewerIsAMember,omitempty"`

	// ViewerIsFollowing: Whether or not this Organization is followed by the viewer.
	ViewerIsFollowing bool `json:"viewerIsFollowing,omitempty"`

	// ViewerIsSponsoring: True if the viewer is sponsoring this user/organization.
	ViewerIsSponsoring bool `json:"viewerIsSponsoring,omitempty"`

	// WebCommitSignoffRequired: Whether contributors are required to sign off on web-based commits for repositories in this organization.
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired,omitempty"`

	// WebsiteUrl: The organization's public profile URL.
	WebsiteUrl URI `json:"websiteUrl,omitempty"`
}

func (x *Organization) GetAnnouncement() string                        { return x.Announcement }
func (x *Organization) GetAnnouncementBanner() *AnnouncementBanner     { return x.AnnouncementBanner }
func (x *Organization) GetAnnouncementCreatedAt() DateTime             { return x.AnnouncementCreatedAt }
func (x *Organization) GetAnnouncementExpiresAt() DateTime             { return x.AnnouncementExpiresAt }
func (x *Organization) GetAnnouncementUserDismissible() bool           { return x.AnnouncementUserDismissible }
func (x *Organization) GetAnyPinnableItems() bool                      { return x.AnyPinnableItems }
func (x *Organization) GetArchivedAt() DateTime                        { return x.ArchivedAt }
func (x *Organization) GetAuditLog() *OrganizationAuditEntryConnection { return x.AuditLog }
func (x *Organization) GetAvatarUrl() URI                              { return x.AvatarUrl }
func (x *Organization) GetCreatedAt() DateTime                         { return x.CreatedAt }
func (x *Organization) GetDatabaseId() int                             { return x.DatabaseId }
func (x *Organization) GetDescription() string                         { return x.Description }
func (x *Organization) GetDescriptionHTML() string                     { return x.DescriptionHTML }
func (x *Organization) GetDomains() *VerifiableDomainConnection        { return x.Domains }
func (x *Organization) GetEmail() string                               { return x.Email }
func (x *Organization) GetEnterpriseOwners() *OrganizationEnterpriseOwnerConnection {
	return x.EnterpriseOwners
}
func (x *Organization) GetEstimatedNextSponsorsPayoutInCents() int {
	return x.EstimatedNextSponsorsPayoutInCents
}
func (x *Organization) GetHasSponsorsListing() bool { return x.HasSponsorsListing }
func (x *Organization) GetId() ID                   { return x.Id }
func (x *Organization) GetInteractionAbility() *RepositoryInteractionAbility {
	return x.InteractionAbility
}
func (x *Organization) GetIpAllowListEnabledSetting() IpAllowListEnabledSettingValue {
	return x.IpAllowListEnabledSetting
}
func (x *Organization) GetIpAllowListEntries() *IpAllowListEntryConnection {
	return x.IpAllowListEntries
}
func (x *Organization) GetIpAllowListForInstalledAppsEnabledSetting() IpAllowListForInstalledAppsEnabledSettingValue {
	return x.IpAllowListForInstalledAppsEnabledSetting
}
func (x *Organization) GetIsSponsoredBy() bool                { return x.IsSponsoredBy }
func (x *Organization) GetIsSponsoringViewer() bool           { return x.IsSponsoringViewer }
func (x *Organization) GetIsVerified() bool                   { return x.IsVerified }
func (x *Organization) GetItemShowcase() *ProfileItemShowcase { return x.ItemShowcase }
func (x *Organization) GetLifetimeReceivedSponsorshipValues() *SponsorAndLifetimeValueConnection {
	return x.LifetimeReceivedSponsorshipValues
}
func (x *Organization) GetLocation() string                      { return x.Location }
func (x *Organization) GetLogin() string                         { return x.Login }
func (x *Organization) GetMannequins() *MannequinConnection      { return x.Mannequins }
func (x *Organization) GetMemberStatuses() *UserStatusConnection { return x.MemberStatuses }
func (x *Organization) GetMembersCanForkPrivateRepositories() bool {
	return x.MembersCanForkPrivateRepositories
}
func (x *Organization) GetMembersWithRole() *OrganizationMemberConnection { return x.MembersWithRole }
func (x *Organization) GetMonthlyEstimatedSponsorsIncomeInCents() int {
	return x.MonthlyEstimatedSponsorsIncomeInCents
}
func (x *Organization) GetName() string             { return x.Name }
func (x *Organization) GetNewTeamResourcePath() URI { return x.NewTeamResourcePath }
func (x *Organization) GetNewTeamUrl() URI          { return x.NewTeamUrl }
func (x *Organization) GetNotificationDeliveryRestrictionEnabledSetting() NotificationRestrictionSettingValue {
	return x.NotificationDeliveryRestrictionEnabledSetting
}
func (x *Organization) GetOrganizationBillingEmail() string       { return x.OrganizationBillingEmail }
func (x *Organization) GetPackages() *PackageConnection           { return x.Packages }
func (x *Organization) GetPendingMembers() *UserConnection        { return x.PendingMembers }
func (x *Organization) GetPinnableItems() *PinnableItemConnection { return x.PinnableItems }
func (x *Organization) GetPinnedItems() *PinnableItemConnection   { return x.PinnedItems }
func (x *Organization) GetPinnedItemsRemaining() int              { return x.PinnedItemsRemaining }
func (x *Organization) GetProject() *Project                      { return x.Project }
func (x *Organization) GetProjectV2() *ProjectV2                  { return x.ProjectV2 }
func (x *Organization) GetProjects() *ProjectConnection           { return x.Projects }
func (x *Organization) GetProjectsResourcePath() URI              { return x.ProjectsResourcePath }
func (x *Organization) GetProjectsUrl() URI                       { return x.ProjectsUrl }
func (x *Organization) GetProjectsV2() *ProjectV2Connection       { return x.ProjectsV2 }
func (x *Organization) GetRecentProjects() *ProjectV2Connection   { return x.RecentProjects }
func (x *Organization) GetRepositories() *RepositoryConnection    { return x.Repositories }
func (x *Organization) GetRepository() *Repository                { return x.Repository }
func (x *Organization) GetRepositoryDiscussionComments() *DiscussionCommentConnection {
	return x.RepositoryDiscussionComments
}
func (x *Organization) GetRepositoryDiscussions() *DiscussionConnection {
	return x.RepositoryDiscussions
}
func (x *Organization) GetRepositoryMigrations() *RepositoryMigrationConnection {
	return x.RepositoryMigrations
}
func (x *Organization) GetRequiresTwoFactorAuthentication() bool {
	return x.RequiresTwoFactorAuthentication
}
func (x *Organization) GetResourcePath() URI                      { return x.ResourcePath }
func (x *Organization) GetRuleset() *RepositoryRuleset            { return x.Ruleset }
func (x *Organization) GetRulesets() *RepositoryRulesetConnection { return x.Rulesets }
func (x *Organization) GetSamlIdentityProvider() *OrganizationIdentityProvider {
	return x.SamlIdentityProvider
}
func (x *Organization) GetSponsoring() *SponsorConnection { return x.Sponsoring }
func (x *Organization) GetSponsors() *SponsorConnection   { return x.Sponsors }
func (x *Organization) GetSponsorsActivities() *SponsorsActivityConnection {
	return x.SponsorsActivities
}
func (x *Organization) GetSponsorsListing() *SponsorsListing { return x.SponsorsListing }
func (x *Organization) GetSponsorshipForViewerAsSponsor() *Sponsorship {
	return x.SponsorshipForViewerAsSponsor
}
func (x *Organization) GetSponsorshipForViewerAsSponsorable() *Sponsorship {
	return x.SponsorshipForViewerAsSponsorable
}
func (x *Organization) GetSponsorshipNewsletters() *SponsorshipNewsletterConnection {
	return x.SponsorshipNewsletters
}
func (x *Organization) GetSponsorshipsAsMaintainer() *SponsorshipConnection {
	return x.SponsorshipsAsMaintainer
}
func (x *Organization) GetSponsorshipsAsSponsor() *SponsorshipConnection {
	return x.SponsorshipsAsSponsor
}
func (x *Organization) GetTeam() *Team            { return x.Team }
func (x *Organization) GetTeams() *TeamConnection { return x.Teams }
func (x *Organization) GetTeamsResourcePath() URI { return x.TeamsResourcePath }
func (x *Organization) GetTeamsUrl() URI          { return x.TeamsUrl }
func (x *Organization) GetTotalSponsorshipAmountAsSponsorInCents() int {
	return x.TotalSponsorshipAmountAsSponsorInCents
}
func (x *Organization) GetTwitterUsername() string           { return x.TwitterUsername }
func (x *Organization) GetUpdatedAt() DateTime               { return x.UpdatedAt }
func (x *Organization) GetUrl() URI                          { return x.Url }
func (x *Organization) GetViewerCanAdminister() bool         { return x.ViewerCanAdminister }
func (x *Organization) GetViewerCanChangePinnedItems() bool  { return x.ViewerCanChangePinnedItems }
func (x *Organization) GetViewerCanCreateProjects() bool     { return x.ViewerCanCreateProjects }
func (x *Organization) GetViewerCanCreateRepositories() bool { return x.ViewerCanCreateRepositories }
func (x *Organization) GetViewerCanCreateTeams() bool        { return x.ViewerCanCreateTeams }
func (x *Organization) GetViewerCanSponsor() bool            { return x.ViewerCanSponsor }
func (x *Organization) GetViewerIsAMember() bool             { return x.ViewerIsAMember }
func (x *Organization) GetViewerIsFollowing() bool           { return x.ViewerIsFollowing }
func (x *Organization) GetViewerIsSponsoring() bool          { return x.ViewerIsSponsoring }
func (x *Organization) GetWebCommitSignoffRequired() bool    { return x.WebCommitSignoffRequired }
func (x *Organization) GetWebsiteUrl() URI                   { return x.WebsiteUrl }

// OrganizationAuditEntry (UNION): An audit entry in an organization audit log.
// OrganizationAuditEntry_Interface: An audit entry in an organization audit log.
//
// Possible types:
//
//   - *MembersCanDeleteReposClearAuditEntry
//   - *MembersCanDeleteReposDisableAuditEntry
//   - *MembersCanDeleteReposEnableAuditEntry
//   - *OauthApplicationCreateAuditEntry
//   - *OrgAddBillingManagerAuditEntry
//   - *OrgAddMemberAuditEntry
//   - *OrgBlockUserAuditEntry
//   - *OrgConfigDisableCollaboratorsOnlyAuditEntry
//   - *OrgConfigEnableCollaboratorsOnlyAuditEntry
//   - *OrgCreateAuditEntry
//   - *OrgDisableOauthAppRestrictionsAuditEntry
//   - *OrgDisableSamlAuditEntry
//   - *OrgDisableTwoFactorRequirementAuditEntry
//   - *OrgEnableOauthAppRestrictionsAuditEntry
//   - *OrgEnableSamlAuditEntry
//   - *OrgEnableTwoFactorRequirementAuditEntry
//   - *OrgInviteMemberAuditEntry
//   - *OrgInviteToBusinessAuditEntry
//   - *OrgOauthAppAccessApprovedAuditEntry
//   - *OrgOauthAppAccessBlockedAuditEntry
//   - *OrgOauthAppAccessDeniedAuditEntry
//   - *OrgOauthAppAccessRequestedAuditEntry
//   - *OrgOauthAppAccessUnblockedAuditEntry
//   - *OrgRemoveBillingManagerAuditEntry
//   - *OrgRemoveMemberAuditEntry
//   - *OrgRemoveOutsideCollaboratorAuditEntry
//   - *OrgRestoreMemberAuditEntry
//   - *OrgUnblockUserAuditEntry
//   - *OrgUpdateDefaultRepositoryPermissionAuditEntry
//   - *OrgUpdateMemberAuditEntry
//   - *OrgUpdateMemberRepositoryCreationPermissionAuditEntry
//   - *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
//   - *PrivateRepositoryForkingDisableAuditEntry
//   - *PrivateRepositoryForkingEnableAuditEntry
//   - *RepoAccessAuditEntry
//   - *RepoAddMemberAuditEntry
//   - *RepoAddTopicAuditEntry
//   - *RepoArchivedAuditEntry
//   - *RepoChangeMergeSettingAuditEntry
//   - *RepoConfigDisableAnonymousGitAccessAuditEntry
//   - *RepoConfigDisableCollaboratorsOnlyAuditEntry
//   - *RepoConfigDisableContributorsOnlyAuditEntry
//   - *RepoConfigDisableSockpuppetDisallowedAuditEntry
//   - *RepoConfigEnableAnonymousGitAccessAuditEntry
//   - *RepoConfigEnableCollaboratorsOnlyAuditEntry
//   - *RepoConfigEnableContributorsOnlyAuditEntry
//   - *RepoConfigEnableSockpuppetDisallowedAuditEntry
//   - *RepoConfigLockAnonymousGitAccessAuditEntry
//   - *RepoConfigUnlockAnonymousGitAccessAuditEntry
//   - *RepoCreateAuditEntry
//   - *RepoDestroyAuditEntry
//   - *RepoRemoveMemberAuditEntry
//   - *RepoRemoveTopicAuditEntry
//   - *RepositoryVisibilityChangeDisableAuditEntry
//   - *RepositoryVisibilityChangeEnableAuditEntry
//   - *TeamAddMemberAuditEntry
//   - *TeamAddRepositoryAuditEntry
//   - *TeamChangeParentTeamAuditEntry
//   - *TeamRemoveMemberAuditEntry
//   - *TeamRemoveRepositoryAuditEntry
type OrganizationAuditEntry_Interface interface {
	isOrganizationAuditEntry()
}

func (*MembersCanDeleteReposClearAuditEntry) isOrganizationAuditEntry()                    {}
func (*MembersCanDeleteReposDisableAuditEntry) isOrganizationAuditEntry()                  {}
func (*MembersCanDeleteReposEnableAuditEntry) isOrganizationAuditEntry()                   {}
func (*OauthApplicationCreateAuditEntry) isOrganizationAuditEntry()                        {}
func (*OrgAddBillingManagerAuditEntry) isOrganizationAuditEntry()                          {}
func (*OrgAddMemberAuditEntry) isOrganizationAuditEntry()                                  {}
func (*OrgBlockUserAuditEntry) isOrganizationAuditEntry()                                  {}
func (*OrgConfigDisableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntry()             {}
func (*OrgConfigEnableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntry()              {}
func (*OrgCreateAuditEntry) isOrganizationAuditEntry()                                     {}
func (*OrgDisableOauthAppRestrictionsAuditEntry) isOrganizationAuditEntry()                {}
func (*OrgDisableSamlAuditEntry) isOrganizationAuditEntry()                                {}
func (*OrgDisableTwoFactorRequirementAuditEntry) isOrganizationAuditEntry()                {}
func (*OrgEnableOauthAppRestrictionsAuditEntry) isOrganizationAuditEntry()                 {}
func (*OrgEnableSamlAuditEntry) isOrganizationAuditEntry()                                 {}
func (*OrgEnableTwoFactorRequirementAuditEntry) isOrganizationAuditEntry()                 {}
func (*OrgInviteMemberAuditEntry) isOrganizationAuditEntry()                               {}
func (*OrgInviteToBusinessAuditEntry) isOrganizationAuditEntry()                           {}
func (*OrgOauthAppAccessApprovedAuditEntry) isOrganizationAuditEntry()                     {}
func (*OrgOauthAppAccessBlockedAuditEntry) isOrganizationAuditEntry()                      {}
func (*OrgOauthAppAccessDeniedAuditEntry) isOrganizationAuditEntry()                       {}
func (*OrgOauthAppAccessRequestedAuditEntry) isOrganizationAuditEntry()                    {}
func (*OrgOauthAppAccessUnblockedAuditEntry) isOrganizationAuditEntry()                    {}
func (*OrgRemoveBillingManagerAuditEntry) isOrganizationAuditEntry()                       {}
func (*OrgRemoveMemberAuditEntry) isOrganizationAuditEntry()                               {}
func (*OrgRemoveOutsideCollaboratorAuditEntry) isOrganizationAuditEntry()                  {}
func (*OrgRestoreMemberAuditEntry) isOrganizationAuditEntry()                              {}
func (*OrgUnblockUserAuditEntry) isOrganizationAuditEntry()                                {}
func (*OrgUpdateDefaultRepositoryPermissionAuditEntry) isOrganizationAuditEntry()          {}
func (*OrgUpdateMemberAuditEntry) isOrganizationAuditEntry()                               {}
func (*OrgUpdateMemberRepositoryCreationPermissionAuditEntry) isOrganizationAuditEntry()   {}
func (*OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) isOrganizationAuditEntry() {}
func (*PrivateRepositoryForkingDisableAuditEntry) isOrganizationAuditEntry()               {}
func (*PrivateRepositoryForkingEnableAuditEntry) isOrganizationAuditEntry()                {}
func (*RepoAccessAuditEntry) isOrganizationAuditEntry()                                    {}
func (*RepoAddMemberAuditEntry) isOrganizationAuditEntry()                                 {}
func (*RepoAddTopicAuditEntry) isOrganizationAuditEntry()                                  {}
func (*RepoArchivedAuditEntry) isOrganizationAuditEntry()                                  {}
func (*RepoChangeMergeSettingAuditEntry) isOrganizationAuditEntry()                        {}
func (*RepoConfigDisableAnonymousGitAccessAuditEntry) isOrganizationAuditEntry()           {}
func (*RepoConfigDisableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntry()            {}
func (*RepoConfigDisableContributorsOnlyAuditEntry) isOrganizationAuditEntry()             {}
func (*RepoConfigDisableSockpuppetDisallowedAuditEntry) isOrganizationAuditEntry()         {}
func (*RepoConfigEnableAnonymousGitAccessAuditEntry) isOrganizationAuditEntry()            {}
func (*RepoConfigEnableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntry()             {}
func (*RepoConfigEnableContributorsOnlyAuditEntry) isOrganizationAuditEntry()              {}
func (*RepoConfigEnableSockpuppetDisallowedAuditEntry) isOrganizationAuditEntry()          {}
func (*RepoConfigLockAnonymousGitAccessAuditEntry) isOrganizationAuditEntry()              {}
func (*RepoConfigUnlockAnonymousGitAccessAuditEntry) isOrganizationAuditEntry()            {}
func (*RepoCreateAuditEntry) isOrganizationAuditEntry()                                    {}
func (*RepoDestroyAuditEntry) isOrganizationAuditEntry()                                   {}
func (*RepoRemoveMemberAuditEntry) isOrganizationAuditEntry()                              {}
func (*RepoRemoveTopicAuditEntry) isOrganizationAuditEntry()                               {}
func (*RepositoryVisibilityChangeDisableAuditEntry) isOrganizationAuditEntry()             {}
func (*RepositoryVisibilityChangeEnableAuditEntry) isOrganizationAuditEntry()              {}
func (*TeamAddMemberAuditEntry) isOrganizationAuditEntry()                                 {}
func (*TeamAddRepositoryAuditEntry) isOrganizationAuditEntry()                             {}
func (*TeamChangeParentTeamAuditEntry) isOrganizationAuditEntry()                          {}
func (*TeamRemoveMemberAuditEntry) isOrganizationAuditEntry()                              {}
func (*TeamRemoveRepositoryAuditEntry) isOrganizationAuditEntry()                          {}

type OrganizationAuditEntry struct {
	Interface OrganizationAuditEntry_Interface
}

func (x *OrganizationAuditEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *OrganizationAuditEntry) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for OrganizationAuditEntry", info.Typename)
	case "MembersCanDeleteReposClearAuditEntry":
		x.Interface = new(MembersCanDeleteReposClearAuditEntry)
	case "MembersCanDeleteReposDisableAuditEntry":
		x.Interface = new(MembersCanDeleteReposDisableAuditEntry)
	case "MembersCanDeleteReposEnableAuditEntry":
		x.Interface = new(MembersCanDeleteReposEnableAuditEntry)
	case "OauthApplicationCreateAuditEntry":
		x.Interface = new(OauthApplicationCreateAuditEntry)
	case "OrgAddBillingManagerAuditEntry":
		x.Interface = new(OrgAddBillingManagerAuditEntry)
	case "OrgAddMemberAuditEntry":
		x.Interface = new(OrgAddMemberAuditEntry)
	case "OrgBlockUserAuditEntry":
		x.Interface = new(OrgBlockUserAuditEntry)
	case "OrgConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigDisableCollaboratorsOnlyAuditEntry)
	case "OrgConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigEnableCollaboratorsOnlyAuditEntry)
	case "OrgCreateAuditEntry":
		x.Interface = new(OrgCreateAuditEntry)
	case "OrgDisableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgDisableOauthAppRestrictionsAuditEntry)
	case "OrgDisableSamlAuditEntry":
		x.Interface = new(OrgDisableSamlAuditEntry)
	case "OrgDisableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgDisableTwoFactorRequirementAuditEntry)
	case "OrgEnableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgEnableOauthAppRestrictionsAuditEntry)
	case "OrgEnableSamlAuditEntry":
		x.Interface = new(OrgEnableSamlAuditEntry)
	case "OrgEnableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgEnableTwoFactorRequirementAuditEntry)
	case "OrgInviteMemberAuditEntry":
		x.Interface = new(OrgInviteMemberAuditEntry)
	case "OrgInviteToBusinessAuditEntry":
		x.Interface = new(OrgInviteToBusinessAuditEntry)
	case "OrgOauthAppAccessApprovedAuditEntry":
		x.Interface = new(OrgOauthAppAccessApprovedAuditEntry)
	case "OrgOauthAppAccessBlockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessBlockedAuditEntry)
	case "OrgOauthAppAccessDeniedAuditEntry":
		x.Interface = new(OrgOauthAppAccessDeniedAuditEntry)
	case "OrgOauthAppAccessRequestedAuditEntry":
		x.Interface = new(OrgOauthAppAccessRequestedAuditEntry)
	case "OrgOauthAppAccessUnblockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessUnblockedAuditEntry)
	case "OrgRemoveBillingManagerAuditEntry":
		x.Interface = new(OrgRemoveBillingManagerAuditEntry)
	case "OrgRemoveMemberAuditEntry":
		x.Interface = new(OrgRemoveMemberAuditEntry)
	case "OrgRemoveOutsideCollaboratorAuditEntry":
		x.Interface = new(OrgRemoveOutsideCollaboratorAuditEntry)
	case "OrgRestoreMemberAuditEntry":
		x.Interface = new(OrgRestoreMemberAuditEntry)
	case "OrgUnblockUserAuditEntry":
		x.Interface = new(OrgUnblockUserAuditEntry)
	case "OrgUpdateDefaultRepositoryPermissionAuditEntry":
		x.Interface = new(OrgUpdateDefaultRepositoryPermissionAuditEntry)
	case "OrgUpdateMemberAuditEntry":
		x.Interface = new(OrgUpdateMemberAuditEntry)
	case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryCreationPermissionAuditEntry)
	case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryInvitationPermissionAuditEntry)
	case "PrivateRepositoryForkingDisableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingDisableAuditEntry)
	case "PrivateRepositoryForkingEnableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingEnableAuditEntry)
	case "RepoAccessAuditEntry":
		x.Interface = new(RepoAccessAuditEntry)
	case "RepoAddMemberAuditEntry":
		x.Interface = new(RepoAddMemberAuditEntry)
	case "RepoAddTopicAuditEntry":
		x.Interface = new(RepoAddTopicAuditEntry)
	case "RepoArchivedAuditEntry":
		x.Interface = new(RepoArchivedAuditEntry)
	case "RepoChangeMergeSettingAuditEntry":
		x.Interface = new(RepoChangeMergeSettingAuditEntry)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigDisableAnonymousGitAccessAuditEntry)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableCollaboratorsOnlyAuditEntry)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableContributorsOnlyAuditEntry)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigDisableSockpuppetDisallowedAuditEntry)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigEnableAnonymousGitAccessAuditEntry)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableCollaboratorsOnlyAuditEntry)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableContributorsOnlyAuditEntry)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigEnableSockpuppetDisallowedAuditEntry)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigLockAnonymousGitAccessAuditEntry)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigUnlockAnonymousGitAccessAuditEntry)
	case "RepoCreateAuditEntry":
		x.Interface = new(RepoCreateAuditEntry)
	case "RepoDestroyAuditEntry":
		x.Interface = new(RepoDestroyAuditEntry)
	case "RepoRemoveMemberAuditEntry":
		x.Interface = new(RepoRemoveMemberAuditEntry)
	case "RepoRemoveTopicAuditEntry":
		x.Interface = new(RepoRemoveTopicAuditEntry)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeDisableAuditEntry)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeEnableAuditEntry)
	case "TeamAddMemberAuditEntry":
		x.Interface = new(TeamAddMemberAuditEntry)
	case "TeamAddRepositoryAuditEntry":
		x.Interface = new(TeamAddRepositoryAuditEntry)
	case "TeamChangeParentTeamAuditEntry":
		x.Interface = new(TeamChangeParentTeamAuditEntry)
	case "TeamRemoveMemberAuditEntry":
		x.Interface = new(TeamRemoveMemberAuditEntry)
	case "TeamRemoveRepositoryAuditEntry":
		x.Interface = new(TeamRemoveRepositoryAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// OrganizationAuditEntryConnection (OBJECT): The connection type for OrganizationAuditEntry.
type OrganizationAuditEntryConnection struct {
	// Edges: A list of edges.
	Edges []*OrganizationAuditEntryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []OrganizationAuditEntry `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *OrganizationAuditEntryConnection) GetEdges() []*OrganizationAuditEntryEdge { return x.Edges }
func (x *OrganizationAuditEntryConnection) GetNodes() []OrganizationAuditEntry      { return x.Nodes }
func (x *OrganizationAuditEntryConnection) GetPageInfo() *PageInfo                  { return x.PageInfo }
func (x *OrganizationAuditEntryConnection) GetTotalCount() int                      { return x.TotalCount }

// OrganizationAuditEntryData (INTERFACE): Metadata for an audit entry with action org.*.
// OrganizationAuditEntryData_Interface: Metadata for an audit entry with action org.*.
//
// Possible types:
//
//   - *MembersCanDeleteReposClearAuditEntry
//   - *MembersCanDeleteReposDisableAuditEntry
//   - *MembersCanDeleteReposEnableAuditEntry
//   - *OauthApplicationCreateAuditEntry
//   - *OrgAddBillingManagerAuditEntry
//   - *OrgAddMemberAuditEntry
//   - *OrgBlockUserAuditEntry
//   - *OrgConfigDisableCollaboratorsOnlyAuditEntry
//   - *OrgConfigEnableCollaboratorsOnlyAuditEntry
//   - *OrgCreateAuditEntry
//   - *OrgDisableOauthAppRestrictionsAuditEntry
//   - *OrgDisableSamlAuditEntry
//   - *OrgDisableTwoFactorRequirementAuditEntry
//   - *OrgEnableOauthAppRestrictionsAuditEntry
//   - *OrgEnableSamlAuditEntry
//   - *OrgEnableTwoFactorRequirementAuditEntry
//   - *OrgInviteMemberAuditEntry
//   - *OrgInviteToBusinessAuditEntry
//   - *OrgOauthAppAccessApprovedAuditEntry
//   - *OrgOauthAppAccessBlockedAuditEntry
//   - *OrgOauthAppAccessDeniedAuditEntry
//   - *OrgOauthAppAccessRequestedAuditEntry
//   - *OrgOauthAppAccessUnblockedAuditEntry
//   - *OrgRemoveBillingManagerAuditEntry
//   - *OrgRemoveMemberAuditEntry
//   - *OrgRemoveOutsideCollaboratorAuditEntry
//   - *OrgRestoreMemberAuditEntry
//   - *OrgRestoreMemberMembershipOrganizationAuditEntryData
//   - *OrgUnblockUserAuditEntry
//   - *OrgUpdateDefaultRepositoryPermissionAuditEntry
//   - *OrgUpdateMemberAuditEntry
//   - *OrgUpdateMemberRepositoryCreationPermissionAuditEntry
//   - *OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
//   - *PrivateRepositoryForkingDisableAuditEntry
//   - *PrivateRepositoryForkingEnableAuditEntry
//   - *RepoAccessAuditEntry
//   - *RepoAddMemberAuditEntry
//   - *RepoAddTopicAuditEntry
//   - *RepoArchivedAuditEntry
//   - *RepoChangeMergeSettingAuditEntry
//   - *RepoConfigDisableAnonymousGitAccessAuditEntry
//   - *RepoConfigDisableCollaboratorsOnlyAuditEntry
//   - *RepoConfigDisableContributorsOnlyAuditEntry
//   - *RepoConfigDisableSockpuppetDisallowedAuditEntry
//   - *RepoConfigEnableAnonymousGitAccessAuditEntry
//   - *RepoConfigEnableCollaboratorsOnlyAuditEntry
//   - *RepoConfigEnableContributorsOnlyAuditEntry
//   - *RepoConfigEnableSockpuppetDisallowedAuditEntry
//   - *RepoConfigLockAnonymousGitAccessAuditEntry
//   - *RepoConfigUnlockAnonymousGitAccessAuditEntry
//   - *RepoCreateAuditEntry
//   - *RepoDestroyAuditEntry
//   - *RepoRemoveMemberAuditEntry
//   - *RepoRemoveTopicAuditEntry
//   - *RepositoryVisibilityChangeDisableAuditEntry
//   - *RepositoryVisibilityChangeEnableAuditEntry
//   - *TeamAddMemberAuditEntry
//   - *TeamAddRepositoryAuditEntry
//   - *TeamChangeParentTeamAuditEntry
//   - *TeamRemoveMemberAuditEntry
//   - *TeamRemoveRepositoryAuditEntry
type OrganizationAuditEntryData_Interface interface {
	isOrganizationAuditEntryData()
	GetOrganization() *Organization
	GetOrganizationName() string
	GetOrganizationResourcePath() URI
	GetOrganizationUrl() URI
}

func (*MembersCanDeleteReposClearAuditEntry) isOrganizationAuditEntryData()                    {}
func (*MembersCanDeleteReposDisableAuditEntry) isOrganizationAuditEntryData()                  {}
func (*MembersCanDeleteReposEnableAuditEntry) isOrganizationAuditEntryData()                   {}
func (*OauthApplicationCreateAuditEntry) isOrganizationAuditEntryData()                        {}
func (*OrgAddBillingManagerAuditEntry) isOrganizationAuditEntryData()                          {}
func (*OrgAddMemberAuditEntry) isOrganizationAuditEntryData()                                  {}
func (*OrgBlockUserAuditEntry) isOrganizationAuditEntryData()                                  {}
func (*OrgConfigDisableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntryData()             {}
func (*OrgConfigEnableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntryData()              {}
func (*OrgCreateAuditEntry) isOrganizationAuditEntryData()                                     {}
func (*OrgDisableOauthAppRestrictionsAuditEntry) isOrganizationAuditEntryData()                {}
func (*OrgDisableSamlAuditEntry) isOrganizationAuditEntryData()                                {}
func (*OrgDisableTwoFactorRequirementAuditEntry) isOrganizationAuditEntryData()                {}
func (*OrgEnableOauthAppRestrictionsAuditEntry) isOrganizationAuditEntryData()                 {}
func (*OrgEnableSamlAuditEntry) isOrganizationAuditEntryData()                                 {}
func (*OrgEnableTwoFactorRequirementAuditEntry) isOrganizationAuditEntryData()                 {}
func (*OrgInviteMemberAuditEntry) isOrganizationAuditEntryData()                               {}
func (*OrgInviteToBusinessAuditEntry) isOrganizationAuditEntryData()                           {}
func (*OrgOauthAppAccessApprovedAuditEntry) isOrganizationAuditEntryData()                     {}
func (*OrgOauthAppAccessBlockedAuditEntry) isOrganizationAuditEntryData()                      {}
func (*OrgOauthAppAccessDeniedAuditEntry) isOrganizationAuditEntryData()                       {}
func (*OrgOauthAppAccessRequestedAuditEntry) isOrganizationAuditEntryData()                    {}
func (*OrgOauthAppAccessUnblockedAuditEntry) isOrganizationAuditEntryData()                    {}
func (*OrgRemoveBillingManagerAuditEntry) isOrganizationAuditEntryData()                       {}
func (*OrgRemoveMemberAuditEntry) isOrganizationAuditEntryData()                               {}
func (*OrgRemoveOutsideCollaboratorAuditEntry) isOrganizationAuditEntryData()                  {}
func (*OrgRestoreMemberAuditEntry) isOrganizationAuditEntryData()                              {}
func (*OrgRestoreMemberMembershipOrganizationAuditEntryData) isOrganizationAuditEntryData()    {}
func (*OrgUnblockUserAuditEntry) isOrganizationAuditEntryData()                                {}
func (*OrgUpdateDefaultRepositoryPermissionAuditEntry) isOrganizationAuditEntryData()          {}
func (*OrgUpdateMemberAuditEntry) isOrganizationAuditEntryData()                               {}
func (*OrgUpdateMemberRepositoryCreationPermissionAuditEntry) isOrganizationAuditEntryData()   {}
func (*OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) isOrganizationAuditEntryData() {}
func (*PrivateRepositoryForkingDisableAuditEntry) isOrganizationAuditEntryData()               {}
func (*PrivateRepositoryForkingEnableAuditEntry) isOrganizationAuditEntryData()                {}
func (*RepoAccessAuditEntry) isOrganizationAuditEntryData()                                    {}
func (*RepoAddMemberAuditEntry) isOrganizationAuditEntryData()                                 {}
func (*RepoAddTopicAuditEntry) isOrganizationAuditEntryData()                                  {}
func (*RepoArchivedAuditEntry) isOrganizationAuditEntryData()                                  {}
func (*RepoChangeMergeSettingAuditEntry) isOrganizationAuditEntryData()                        {}
func (*RepoConfigDisableAnonymousGitAccessAuditEntry) isOrganizationAuditEntryData()           {}
func (*RepoConfigDisableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntryData()            {}
func (*RepoConfigDisableContributorsOnlyAuditEntry) isOrganizationAuditEntryData()             {}
func (*RepoConfigDisableSockpuppetDisallowedAuditEntry) isOrganizationAuditEntryData()         {}
func (*RepoConfigEnableAnonymousGitAccessAuditEntry) isOrganizationAuditEntryData()            {}
func (*RepoConfigEnableCollaboratorsOnlyAuditEntry) isOrganizationAuditEntryData()             {}
func (*RepoConfigEnableContributorsOnlyAuditEntry) isOrganizationAuditEntryData()              {}
func (*RepoConfigEnableSockpuppetDisallowedAuditEntry) isOrganizationAuditEntryData()          {}
func (*RepoConfigLockAnonymousGitAccessAuditEntry) isOrganizationAuditEntryData()              {}
func (*RepoConfigUnlockAnonymousGitAccessAuditEntry) isOrganizationAuditEntryData()            {}
func (*RepoCreateAuditEntry) isOrganizationAuditEntryData()                                    {}
func (*RepoDestroyAuditEntry) isOrganizationAuditEntryData()                                   {}
func (*RepoRemoveMemberAuditEntry) isOrganizationAuditEntryData()                              {}
func (*RepoRemoveTopicAuditEntry) isOrganizationAuditEntryData()                               {}
func (*RepositoryVisibilityChangeDisableAuditEntry) isOrganizationAuditEntryData()             {}
func (*RepositoryVisibilityChangeEnableAuditEntry) isOrganizationAuditEntryData()              {}
func (*TeamAddMemberAuditEntry) isOrganizationAuditEntryData()                                 {}
func (*TeamAddRepositoryAuditEntry) isOrganizationAuditEntryData()                             {}
func (*TeamChangeParentTeamAuditEntry) isOrganizationAuditEntryData()                          {}
func (*TeamRemoveMemberAuditEntry) isOrganizationAuditEntryData()                              {}
func (*TeamRemoveRepositoryAuditEntry) isOrganizationAuditEntryData()                          {}

type OrganizationAuditEntryData struct {
	Interface OrganizationAuditEntryData_Interface
}

func (x *OrganizationAuditEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *OrganizationAuditEntryData) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for OrganizationAuditEntryData", info.Typename)
	case "MembersCanDeleteReposClearAuditEntry":
		x.Interface = new(MembersCanDeleteReposClearAuditEntry)
	case "MembersCanDeleteReposDisableAuditEntry":
		x.Interface = new(MembersCanDeleteReposDisableAuditEntry)
	case "MembersCanDeleteReposEnableAuditEntry":
		x.Interface = new(MembersCanDeleteReposEnableAuditEntry)
	case "OauthApplicationCreateAuditEntry":
		x.Interface = new(OauthApplicationCreateAuditEntry)
	case "OrgAddBillingManagerAuditEntry":
		x.Interface = new(OrgAddBillingManagerAuditEntry)
	case "OrgAddMemberAuditEntry":
		x.Interface = new(OrgAddMemberAuditEntry)
	case "OrgBlockUserAuditEntry":
		x.Interface = new(OrgBlockUserAuditEntry)
	case "OrgConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigDisableCollaboratorsOnlyAuditEntry)
	case "OrgConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(OrgConfigEnableCollaboratorsOnlyAuditEntry)
	case "OrgCreateAuditEntry":
		x.Interface = new(OrgCreateAuditEntry)
	case "OrgDisableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgDisableOauthAppRestrictionsAuditEntry)
	case "OrgDisableSamlAuditEntry":
		x.Interface = new(OrgDisableSamlAuditEntry)
	case "OrgDisableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgDisableTwoFactorRequirementAuditEntry)
	case "OrgEnableOauthAppRestrictionsAuditEntry":
		x.Interface = new(OrgEnableOauthAppRestrictionsAuditEntry)
	case "OrgEnableSamlAuditEntry":
		x.Interface = new(OrgEnableSamlAuditEntry)
	case "OrgEnableTwoFactorRequirementAuditEntry":
		x.Interface = new(OrgEnableTwoFactorRequirementAuditEntry)
	case "OrgInviteMemberAuditEntry":
		x.Interface = new(OrgInviteMemberAuditEntry)
	case "OrgInviteToBusinessAuditEntry":
		x.Interface = new(OrgInviteToBusinessAuditEntry)
	case "OrgOauthAppAccessApprovedAuditEntry":
		x.Interface = new(OrgOauthAppAccessApprovedAuditEntry)
	case "OrgOauthAppAccessBlockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessBlockedAuditEntry)
	case "OrgOauthAppAccessDeniedAuditEntry":
		x.Interface = new(OrgOauthAppAccessDeniedAuditEntry)
	case "OrgOauthAppAccessRequestedAuditEntry":
		x.Interface = new(OrgOauthAppAccessRequestedAuditEntry)
	case "OrgOauthAppAccessUnblockedAuditEntry":
		x.Interface = new(OrgOauthAppAccessUnblockedAuditEntry)
	case "OrgRemoveBillingManagerAuditEntry":
		x.Interface = new(OrgRemoveBillingManagerAuditEntry)
	case "OrgRemoveMemberAuditEntry":
		x.Interface = new(OrgRemoveMemberAuditEntry)
	case "OrgRemoveOutsideCollaboratorAuditEntry":
		x.Interface = new(OrgRemoveOutsideCollaboratorAuditEntry)
	case "OrgRestoreMemberAuditEntry":
		x.Interface = new(OrgRestoreMemberAuditEntry)
	case "OrgRestoreMemberMembershipOrganizationAuditEntryData":
		x.Interface = new(OrgRestoreMemberMembershipOrganizationAuditEntryData)
	case "OrgUnblockUserAuditEntry":
		x.Interface = new(OrgUnblockUserAuditEntry)
	case "OrgUpdateDefaultRepositoryPermissionAuditEntry":
		x.Interface = new(OrgUpdateDefaultRepositoryPermissionAuditEntry)
	case "OrgUpdateMemberAuditEntry":
		x.Interface = new(OrgUpdateMemberAuditEntry)
	case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryCreationPermissionAuditEntry)
	case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry":
		x.Interface = new(OrgUpdateMemberRepositoryInvitationPermissionAuditEntry)
	case "PrivateRepositoryForkingDisableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingDisableAuditEntry)
	case "PrivateRepositoryForkingEnableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingEnableAuditEntry)
	case "RepoAccessAuditEntry":
		x.Interface = new(RepoAccessAuditEntry)
	case "RepoAddMemberAuditEntry":
		x.Interface = new(RepoAddMemberAuditEntry)
	case "RepoAddTopicAuditEntry":
		x.Interface = new(RepoAddTopicAuditEntry)
	case "RepoArchivedAuditEntry":
		x.Interface = new(RepoArchivedAuditEntry)
	case "RepoChangeMergeSettingAuditEntry":
		x.Interface = new(RepoChangeMergeSettingAuditEntry)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigDisableAnonymousGitAccessAuditEntry)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableCollaboratorsOnlyAuditEntry)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableContributorsOnlyAuditEntry)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigDisableSockpuppetDisallowedAuditEntry)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigEnableAnonymousGitAccessAuditEntry)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableCollaboratorsOnlyAuditEntry)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableContributorsOnlyAuditEntry)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigEnableSockpuppetDisallowedAuditEntry)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigLockAnonymousGitAccessAuditEntry)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigUnlockAnonymousGitAccessAuditEntry)
	case "RepoCreateAuditEntry":
		x.Interface = new(RepoCreateAuditEntry)
	case "RepoDestroyAuditEntry":
		x.Interface = new(RepoDestroyAuditEntry)
	case "RepoRemoveMemberAuditEntry":
		x.Interface = new(RepoRemoveMemberAuditEntry)
	case "RepoRemoveTopicAuditEntry":
		x.Interface = new(RepoRemoveTopicAuditEntry)
	case "RepositoryVisibilityChangeDisableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeDisableAuditEntry)
	case "RepositoryVisibilityChangeEnableAuditEntry":
		x.Interface = new(RepositoryVisibilityChangeEnableAuditEntry)
	case "TeamAddMemberAuditEntry":
		x.Interface = new(TeamAddMemberAuditEntry)
	case "TeamAddRepositoryAuditEntry":
		x.Interface = new(TeamAddRepositoryAuditEntry)
	case "TeamChangeParentTeamAuditEntry":
		x.Interface = new(TeamChangeParentTeamAuditEntry)
	case "TeamRemoveMemberAuditEntry":
		x.Interface = new(TeamRemoveMemberAuditEntry)
	case "TeamRemoveRepositoryAuditEntry":
		x.Interface = new(TeamRemoveRepositoryAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// OrganizationAuditEntryEdge (OBJECT): An edge in a connection.
type OrganizationAuditEntryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node OrganizationAuditEntry `json:"node,omitempty"`
}

func (x *OrganizationAuditEntryEdge) GetCursor() string               { return x.Cursor }
func (x *OrganizationAuditEntryEdge) GetNode() OrganizationAuditEntry { return x.Node }

// OrganizationConnection (OBJECT): A list of organizations managed by an enterprise.
type OrganizationConnection struct {
	// Edges: A list of edges.
	Edges []*OrganizationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Organization `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *OrganizationConnection) GetEdges() []*OrganizationEdge { return x.Edges }
func (x *OrganizationConnection) GetNodes() []*Organization     { return x.Nodes }
func (x *OrganizationConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *OrganizationConnection) GetTotalCount() int            { return x.TotalCount }

// OrganizationEdge (OBJECT): An edge in a connection.
type OrganizationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Organization `json:"node,omitempty"`
}

func (x *OrganizationEdge) GetCursor() string      { return x.Cursor }
func (x *OrganizationEdge) GetNode() *Organization { return x.Node }

// OrganizationEnterpriseOwnerConnection (OBJECT): The connection type for User.
type OrganizationEnterpriseOwnerConnection struct {
	// Edges: A list of edges.
	Edges []*OrganizationEnterpriseOwnerEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *OrganizationEnterpriseOwnerConnection) GetEdges() []*OrganizationEnterpriseOwnerEdge {
	return x.Edges
}
func (x *OrganizationEnterpriseOwnerConnection) GetNodes() []*User      { return x.Nodes }
func (x *OrganizationEnterpriseOwnerConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *OrganizationEnterpriseOwnerConnection) GetTotalCount() int     { return x.TotalCount }

// OrganizationEnterpriseOwnerEdge (OBJECT): An enterprise owner in the context of an organization that is part of the enterprise.
type OrganizationEnterpriseOwnerEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *User `json:"node,omitempty"`

	// OrganizationRole: The role of the owner with respect to the organization.
	OrganizationRole RoleInOrganization `json:"organizationRole,omitempty"`
}

func (x *OrganizationEnterpriseOwnerEdge) GetCursor() string { return x.Cursor }
func (x *OrganizationEnterpriseOwnerEdge) GetNode() *User    { return x.Node }
func (x *OrganizationEnterpriseOwnerEdge) GetOrganizationRole() RoleInOrganization {
	return x.OrganizationRole
}

// OrganizationIdentityProvider (OBJECT): An Identity Provider configured to provision SAML and SCIM identities for Organizations. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members.
type OrganizationIdentityProvider struct {
	// DigestMethod: The digest algorithm used to sign SAML requests for the Identity Provider.
	DigestMethod URI `json:"digestMethod,omitempty"`

	// ExternalIdentities: External Identities provisioned by this Identity Provider.
	//
	// Query arguments:
	//   - membersOnly Boolean
	//   - login String
	//   - userName String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities,omitempty"`

	// Id: The Node ID of the OrganizationIdentityProvider object.
	Id ID `json:"id,omitempty"`

	// IdpCertificate: The x509 certificate used by the Identity Provider to sign assertions and responses.
	IdpCertificate X509Certificate `json:"idpCertificate,omitempty"`

	// Issuer: The Issuer Entity ID for the SAML Identity Provider.
	Issuer string `json:"issuer,omitempty"`

	// Organization: Organization this Identity Provider belongs to.
	Organization *Organization `json:"organization,omitempty"`

	// SignatureMethod: The signature algorithm used to sign SAML requests for the Identity Provider.
	SignatureMethod URI `json:"signatureMethod,omitempty"`

	// SsoUrl: The URL endpoint for the Identity Provider's SAML SSO.
	SsoUrl URI `json:"ssoUrl,omitempty"`
}

func (x *OrganizationIdentityProvider) GetDigestMethod() URI { return x.DigestMethod }
func (x *OrganizationIdentityProvider) GetExternalIdentities() *ExternalIdentityConnection {
	return x.ExternalIdentities
}
func (x *OrganizationIdentityProvider) GetId() ID                          { return x.Id }
func (x *OrganizationIdentityProvider) GetIdpCertificate() X509Certificate { return x.IdpCertificate }
func (x *OrganizationIdentityProvider) GetIssuer() string                  { return x.Issuer }
func (x *OrganizationIdentityProvider) GetOrganization() *Organization     { return x.Organization }
func (x *OrganizationIdentityProvider) GetSignatureMethod() URI            { return x.SignatureMethod }
func (x *OrganizationIdentityProvider) GetSsoUrl() URI                     { return x.SsoUrl }

// OrganizationInvitation (OBJECT): An Invitation for a user to an organization.
type OrganizationInvitation struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Email: The email address of the user invited to the organization.
	Email string `json:"email,omitempty"`

	// Id: The Node ID of the OrganizationInvitation object.
	Id ID `json:"id,omitempty"`

	// InvitationSource: The source of the invitation.
	InvitationSource OrganizationInvitationSource `json:"invitationSource,omitempty"`

	// InvitationType: The type of invitation that was sent (e.g. email, user).
	InvitationType OrganizationInvitationType `json:"invitationType,omitempty"`

	// Invitee: The user who was invited to the organization.
	Invitee *User `json:"invitee,omitempty"`

	// Inviter: The user who created the invitation.
	//
	// Deprecated: The user who created the invitation.
	Inviter *User `json:"inviter,omitempty"`

	// InviterActor: The user who created the invitation.
	InviterActor *User `json:"inviterActor,omitempty"`

	// Organization: The organization the invite is for.
	Organization *Organization `json:"organization,omitempty"`

	// Role: The user's pending role in the organization (e.g. member, owner).
	Role OrganizationInvitationRole `json:"role,omitempty"`
}

func (x *OrganizationInvitation) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *OrganizationInvitation) GetEmail() string       { return x.Email }
func (x *OrganizationInvitation) GetId() ID              { return x.Id }
func (x *OrganizationInvitation) GetInvitationSource() OrganizationInvitationSource {
	return x.InvitationSource
}
func (x *OrganizationInvitation) GetInvitationType() OrganizationInvitationType {
	return x.InvitationType
}
func (x *OrganizationInvitation) GetInvitee() *User                   { return x.Invitee }
func (x *OrganizationInvitation) GetInviter() *User                   { return x.Inviter }
func (x *OrganizationInvitation) GetInviterActor() *User              { return x.InviterActor }
func (x *OrganizationInvitation) GetOrganization() *Organization      { return x.Organization }
func (x *OrganizationInvitation) GetRole() OrganizationInvitationRole { return x.Role }

// OrganizationInvitationConnection (OBJECT): The connection type for OrganizationInvitation.
type OrganizationInvitationConnection struct {
	// Edges: A list of edges.
	Edges []*OrganizationInvitationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *OrganizationInvitationConnection) GetEdges() []*OrganizationInvitationEdge { return x.Edges }
func (x *OrganizationInvitationConnection) GetNodes() []*OrganizationInvitation     { return x.Nodes }
func (x *OrganizationInvitationConnection) GetPageInfo() *PageInfo                  { return x.PageInfo }
func (x *OrganizationInvitationConnection) GetTotalCount() int                      { return x.TotalCount }

// OrganizationInvitationEdge (OBJECT): An edge in a connection.
type OrganizationInvitationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *OrganizationInvitation `json:"node,omitempty"`
}

func (x *OrganizationInvitationEdge) GetCursor() string                { return x.Cursor }
func (x *OrganizationInvitationEdge) GetNode() *OrganizationInvitation { return x.Node }

// OrganizationInvitationRole (ENUM): The possible organization invitation roles.
type OrganizationInvitationRole string

// OrganizationInvitationRole_DIRECT_MEMBER: The user is invited to be a direct member of the organization.
const OrganizationInvitationRole_DIRECT_MEMBER OrganizationInvitationRole = "DIRECT_MEMBER"

// OrganizationInvitationRole_ADMIN: The user is invited to be an admin of the organization.
const OrganizationInvitationRole_ADMIN OrganizationInvitationRole = "ADMIN"

// OrganizationInvitationRole_BILLING_MANAGER: The user is invited to be a billing manager of the organization.
const OrganizationInvitationRole_BILLING_MANAGER OrganizationInvitationRole = "BILLING_MANAGER"

// OrganizationInvitationRole_REINSTATE: The user's previous role will be reinstated.
const OrganizationInvitationRole_REINSTATE OrganizationInvitationRole = "REINSTATE"

// OrganizationInvitationSource (ENUM): The possible organization invitation sources.
type OrganizationInvitationSource string

// OrganizationInvitationSource_UNKNOWN: The invitation was sent before this feature was added.
const OrganizationInvitationSource_UNKNOWN OrganizationInvitationSource = "UNKNOWN"

// OrganizationInvitationSource_MEMBER: The invitation was created from the web interface or from API.
const OrganizationInvitationSource_MEMBER OrganizationInvitationSource = "MEMBER"

// OrganizationInvitationSource_SCIM: The invitation was created from SCIM.
const OrganizationInvitationSource_SCIM OrganizationInvitationSource = "SCIM"

// OrganizationInvitationType (ENUM): The possible organization invitation types.
type OrganizationInvitationType string

// OrganizationInvitationType_USER: The invitation was to an existing user.
const OrganizationInvitationType_USER OrganizationInvitationType = "USER"

// OrganizationInvitationType_EMAIL: The invitation was to an email address.
const OrganizationInvitationType_EMAIL OrganizationInvitationType = "EMAIL"

// OrganizationMemberConnection (OBJECT): A list of users who belong to the organization.
type OrganizationMemberConnection struct {
	// Edges: A list of edges.
	Edges []*OrganizationMemberEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *OrganizationMemberConnection) GetEdges() []*OrganizationMemberEdge { return x.Edges }
func (x *OrganizationMemberConnection) GetNodes() []*User                   { return x.Nodes }
func (x *OrganizationMemberConnection) GetPageInfo() *PageInfo              { return x.PageInfo }
func (x *OrganizationMemberConnection) GetTotalCount() int                  { return x.TotalCount }

// OrganizationMemberEdge (OBJECT): Represents a user within an organization.
type OrganizationMemberEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// HasTwoFactorEnabled: Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
	HasTwoFactorEnabled bool `json:"hasTwoFactorEnabled,omitempty"`

	// Node: The item at the end of the edge.
	Node *User `json:"node,omitempty"`

	// Role: The role this user has in the organization.
	Role OrganizationMemberRole `json:"role,omitempty"`
}

func (x *OrganizationMemberEdge) GetCursor() string               { return x.Cursor }
func (x *OrganizationMemberEdge) GetHasTwoFactorEnabled() bool    { return x.HasTwoFactorEnabled }
func (x *OrganizationMemberEdge) GetNode() *User                  { return x.Node }
func (x *OrganizationMemberEdge) GetRole() OrganizationMemberRole { return x.Role }

// OrganizationMemberRole (ENUM): The possible roles within an organization for its members.
type OrganizationMemberRole string

// OrganizationMemberRole_MEMBER: The user is a member of the organization.
const OrganizationMemberRole_MEMBER OrganizationMemberRole = "MEMBER"

// OrganizationMemberRole_ADMIN: The user is an administrator of the organization.
const OrganizationMemberRole_ADMIN OrganizationMemberRole = "ADMIN"

// OrganizationMembersCanCreateRepositoriesSettingValue (ENUM): The possible values for the members can create repositories setting on an organization.
type OrganizationMembersCanCreateRepositoriesSettingValue string

// OrganizationMembersCanCreateRepositoriesSettingValue_ALL: Members will be able to create public and private repositories.
const OrganizationMembersCanCreateRepositoriesSettingValue_ALL OrganizationMembersCanCreateRepositoriesSettingValue = "ALL"

// OrganizationMembersCanCreateRepositoriesSettingValue_PRIVATE: Members will be able to create only private repositories.
const OrganizationMembersCanCreateRepositoriesSettingValue_PRIVATE OrganizationMembersCanCreateRepositoriesSettingValue = "PRIVATE"

// OrganizationMembersCanCreateRepositoriesSettingValue_INTERNAL: Members will be able to create only internal repositories.
const OrganizationMembersCanCreateRepositoriesSettingValue_INTERNAL OrganizationMembersCanCreateRepositoriesSettingValue = "INTERNAL"

// OrganizationMembersCanCreateRepositoriesSettingValue_DISABLED: Members will not be able to create public or private repositories.
const OrganizationMembersCanCreateRepositoriesSettingValue_DISABLED OrganizationMembersCanCreateRepositoriesSettingValue = "DISABLED"

// OrganizationMigration (OBJECT): A GitHub Enterprise Importer (GEI) organization migration.
type OrganizationMigration struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId string `json:"databaseId,omitempty"`

	// FailureReason: The reason the organization migration failed.
	FailureReason string `json:"failureReason,omitempty"`

	// Id: The Node ID of the OrganizationMigration object.
	Id ID `json:"id,omitempty"`

	// RemainingRepositoriesCount: The remaining amount of repos to be migrated.
	RemainingRepositoriesCount int `json:"remainingRepositoriesCount,omitempty"`

	// SourceOrgName: The name of the source organization to be migrated.
	SourceOrgName string `json:"sourceOrgName,omitempty"`

	// SourceOrgUrl: The URL of the source organization to migrate.
	SourceOrgUrl URI `json:"sourceOrgUrl,omitempty"`

	// State: The migration state.
	State OrganizationMigrationState `json:"state,omitempty"`

	// TargetOrgName: The name of the target organization.
	TargetOrgName string `json:"targetOrgName,omitempty"`

	// TotalRepositoriesCount: The total amount of repositories to be migrated.
	TotalRepositoriesCount int `json:"totalRepositoriesCount,omitempty"`
}

func (x *OrganizationMigration) GetCreatedAt() DateTime   { return x.CreatedAt }
func (x *OrganizationMigration) GetDatabaseId() string    { return x.DatabaseId }
func (x *OrganizationMigration) GetFailureReason() string { return x.FailureReason }
func (x *OrganizationMigration) GetId() ID                { return x.Id }
func (x *OrganizationMigration) GetRemainingRepositoriesCount() int {
	return x.RemainingRepositoriesCount
}
func (x *OrganizationMigration) GetSourceOrgName() string             { return x.SourceOrgName }
func (x *OrganizationMigration) GetSourceOrgUrl() URI                 { return x.SourceOrgUrl }
func (x *OrganizationMigration) GetState() OrganizationMigrationState { return x.State }
func (x *OrganizationMigration) GetTargetOrgName() string             { return x.TargetOrgName }
func (x *OrganizationMigration) GetTotalRepositoriesCount() int       { return x.TotalRepositoriesCount }

// OrganizationMigrationState (ENUM): The Octoshift Organization migration state.
type OrganizationMigrationState string

// OrganizationMigrationState_NOT_STARTED: The Octoshift migration has not started.
const OrganizationMigrationState_NOT_STARTED OrganizationMigrationState = "NOT_STARTED"

// OrganizationMigrationState_QUEUED: The Octoshift migration has been queued.
const OrganizationMigrationState_QUEUED OrganizationMigrationState = "QUEUED"

// OrganizationMigrationState_IN_PROGRESS: The Octoshift migration is in progress.
const OrganizationMigrationState_IN_PROGRESS OrganizationMigrationState = "IN_PROGRESS"

// OrganizationMigrationState_PRE_REPO_MIGRATION: The Octoshift migration is performing pre repository migrations.
const OrganizationMigrationState_PRE_REPO_MIGRATION OrganizationMigrationState = "PRE_REPO_MIGRATION"

// OrganizationMigrationState_REPO_MIGRATION: The Octoshift org migration is performing repository migrations.
const OrganizationMigrationState_REPO_MIGRATION OrganizationMigrationState = "REPO_MIGRATION"

// OrganizationMigrationState_POST_REPO_MIGRATION: The Octoshift migration is performing post repository migrations.
const OrganizationMigrationState_POST_REPO_MIGRATION OrganizationMigrationState = "POST_REPO_MIGRATION"

// OrganizationMigrationState_SUCCEEDED: The Octoshift migration has succeeded.
const OrganizationMigrationState_SUCCEEDED OrganizationMigrationState = "SUCCEEDED"

// OrganizationMigrationState_FAILED: The Octoshift migration has failed.
const OrganizationMigrationState_FAILED OrganizationMigrationState = "FAILED"

// OrganizationMigrationState_PENDING_VALIDATION: The Octoshift migration needs to have its credentials validated.
const OrganizationMigrationState_PENDING_VALIDATION OrganizationMigrationState = "PENDING_VALIDATION"

// OrganizationMigrationState_FAILED_VALIDATION: The Octoshift migration has invalid credentials.
const OrganizationMigrationState_FAILED_VALIDATION OrganizationMigrationState = "FAILED_VALIDATION"

// OrganizationOrUser (UNION): Used for argument of CreateProjectV2 mutation.
// OrganizationOrUser_Interface: Used for argument of CreateProjectV2 mutation.
//
// Possible types:
//
//   - *Organization
//   - *User
type OrganizationOrUser_Interface interface {
	isOrganizationOrUser()
}

func (*Organization) isOrganizationOrUser() {}
func (*User) isOrganizationOrUser()         {}

type OrganizationOrUser struct {
	Interface OrganizationOrUser_Interface
}

func (x *OrganizationOrUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *OrganizationOrUser) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for OrganizationOrUser", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// OrganizationOrder (INPUT_OBJECT): Ordering options for organization connections.
type OrganizationOrder struct {
	// Field: The field to order organizations by.
	//
	// GraphQL type: OrganizationOrderField!
	Field OrganizationOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// OrganizationOrderField (ENUM): Properties by which organization connections can be ordered.
type OrganizationOrderField string

// OrganizationOrderField_CREATED_AT: Order organizations by creation time.
const OrganizationOrderField_CREATED_AT OrganizationOrderField = "CREATED_AT"

// OrganizationOrderField_LOGIN: Order organizations by login.
const OrganizationOrderField_LOGIN OrganizationOrderField = "LOGIN"

// OrganizationTeamsHovercardContext (OBJECT): An organization teams hovercard context.
type OrganizationTeamsHovercardContext struct {
	// Message: A string describing this context.
	Message string `json:"message,omitempty"`

	// Octicon: An octicon to accompany this context.
	Octicon string `json:"octicon,omitempty"`

	// RelevantTeams: Teams in this organization the user is a member of that are relevant.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RelevantTeams *TeamConnection `json:"relevantTeams,omitempty"`

	// TeamsResourcePath: The path for the full team list for this user.
	TeamsResourcePath URI `json:"teamsResourcePath,omitempty"`

	// TeamsUrl: The URL for the full team list for this user.
	TeamsUrl URI `json:"teamsUrl,omitempty"`

	// TotalTeamCount: The total number of teams the user is on in the organization.
	TotalTeamCount int `json:"totalTeamCount,omitempty"`
}

func (x *OrganizationTeamsHovercardContext) GetMessage() string { return x.Message }
func (x *OrganizationTeamsHovercardContext) GetOcticon() string { return x.Octicon }
func (x *OrganizationTeamsHovercardContext) GetRelevantTeams() *TeamConnection {
	return x.RelevantTeams
}
func (x *OrganizationTeamsHovercardContext) GetTeamsResourcePath() URI { return x.TeamsResourcePath }
func (x *OrganizationTeamsHovercardContext) GetTeamsUrl() URI          { return x.TeamsUrl }
func (x *OrganizationTeamsHovercardContext) GetTotalTeamCount() int    { return x.TotalTeamCount }

// OrganizationsHovercardContext (OBJECT): An organization list hovercard context.
type OrganizationsHovercardContext struct {
	// Message: A string describing this context.
	Message string `json:"message,omitempty"`

	// Octicon: An octicon to accompany this context.
	Octicon string `json:"octicon,omitempty"`

	// RelevantOrganizations: Organizations this user is a member of that are relevant.
	//
	// Query arguments:
	//   - orderBy OrganizationOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RelevantOrganizations *OrganizationConnection `json:"relevantOrganizations,omitempty"`

	// TotalOrganizationCount: The total number of organizations this user is in.
	TotalOrganizationCount int `json:"totalOrganizationCount,omitempty"`
}

func (x *OrganizationsHovercardContext) GetMessage() string { return x.Message }
func (x *OrganizationsHovercardContext) GetOcticon() string { return x.Octicon }
func (x *OrganizationsHovercardContext) GetRelevantOrganizations() *OrganizationConnection {
	return x.RelevantOrganizations
}
func (x *OrganizationsHovercardContext) GetTotalOrganizationCount() int {
	return x.TotalOrganizationCount
}

// Package (OBJECT): Information for an uploaded package.
type Package struct {
	// Id: The Node ID of the Package object.
	Id ID `json:"id,omitempty"`

	// LatestVersion: Find the latest version for the package.
	LatestVersion *PackageVersion `json:"latestVersion,omitempty"`

	// Name: Identifies the name of the package.
	Name string `json:"name,omitempty"`

	// PackageType: Identifies the type of the package.
	PackageType PackageType `json:"packageType,omitempty"`

	// Repository: The repository this package belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// Statistics: Statistics about package activity.
	Statistics *PackageStatistics `json:"statistics,omitempty"`

	// Version: Find package version by version string.
	//
	// Query arguments:
	//   - version String!
	Version *PackageVersion `json:"version,omitempty"`

	// Versions: list of versions for this package.
	//
	// Query arguments:
	//   - orderBy PackageVersionOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Versions *PackageVersionConnection `json:"versions,omitempty"`
}

func (x *Package) GetId() ID                              { return x.Id }
func (x *Package) GetLatestVersion() *PackageVersion      { return x.LatestVersion }
func (x *Package) GetName() string                        { return x.Name }
func (x *Package) GetPackageType() PackageType            { return x.PackageType }
func (x *Package) GetRepository() *Repository             { return x.Repository }
func (x *Package) GetStatistics() *PackageStatistics      { return x.Statistics }
func (x *Package) GetVersion() *PackageVersion            { return x.Version }
func (x *Package) GetVersions() *PackageVersionConnection { return x.Versions }

// PackageConnection (OBJECT): The connection type for Package.
type PackageConnection struct {
	// Edges: A list of edges.
	Edges []*PackageEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Package `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PackageConnection) GetEdges() []*PackageEdge { return x.Edges }
func (x *PackageConnection) GetNodes() []*Package     { return x.Nodes }
func (x *PackageConnection) GetPageInfo() *PageInfo   { return x.PageInfo }
func (x *PackageConnection) GetTotalCount() int       { return x.TotalCount }

// PackageEdge (OBJECT): An edge in a connection.
type PackageEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Package `json:"node,omitempty"`
}

func (x *PackageEdge) GetCursor() string { return x.Cursor }
func (x *PackageEdge) GetNode() *Package { return x.Node }

// PackageFile (OBJECT): A file in a package version.
type PackageFile struct {
	// Id: The Node ID of the PackageFile object.
	Id ID `json:"id,omitempty"`

	// Md5: MD5 hash of the file.
	Md5 string `json:"md5,omitempty"`

	// Name: Name of the file.
	Name string `json:"name,omitempty"`

	// PackageVersion: The package version this file belongs to.
	PackageVersion *PackageVersion `json:"packageVersion,omitempty"`

	// Sha1: SHA1 hash of the file.
	Sha1 string `json:"sha1,omitempty"`

	// Sha256: SHA256 hash of the file.
	Sha256 string `json:"sha256,omitempty"`

	// Size: Size of the file in bytes.
	Size int `json:"size,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: URL to download the asset.
	Url URI `json:"url,omitempty"`
}

func (x *PackageFile) GetId() ID                          { return x.Id }
func (x *PackageFile) GetMd5() string                     { return x.Md5 }
func (x *PackageFile) GetName() string                    { return x.Name }
func (x *PackageFile) GetPackageVersion() *PackageVersion { return x.PackageVersion }
func (x *PackageFile) GetSha1() string                    { return x.Sha1 }
func (x *PackageFile) GetSha256() string                  { return x.Sha256 }
func (x *PackageFile) GetSize() int                       { return x.Size }
func (x *PackageFile) GetUpdatedAt() DateTime             { return x.UpdatedAt }
func (x *PackageFile) GetUrl() URI                        { return x.Url }

// PackageFileConnection (OBJECT): The connection type for PackageFile.
type PackageFileConnection struct {
	// Edges: A list of edges.
	Edges []*PackageFileEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PackageFile `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PackageFileConnection) GetEdges() []*PackageFileEdge { return x.Edges }
func (x *PackageFileConnection) GetNodes() []*PackageFile     { return x.Nodes }
func (x *PackageFileConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *PackageFileConnection) GetTotalCount() int           { return x.TotalCount }

// PackageFileEdge (OBJECT): An edge in a connection.
type PackageFileEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PackageFile `json:"node,omitempty"`
}

func (x *PackageFileEdge) GetCursor() string     { return x.Cursor }
func (x *PackageFileEdge) GetNode() *PackageFile { return x.Node }

// PackageFileOrder (INPUT_OBJECT): Ways in which lists of package files can be ordered upon return.
type PackageFileOrder struct {
	// Field: The field in which to order package files by.
	//
	// GraphQL type: PackageFileOrderField
	Field PackageFileOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order package files by the specified field.
	//
	// GraphQL type: OrderDirection
	Direction OrderDirection `json:"direction,omitempty"`
}

// PackageFileOrderField (ENUM): Properties by which package file connections can be ordered.
type PackageFileOrderField string

// PackageFileOrderField_CREATED_AT: Order package files by creation time.
const PackageFileOrderField_CREATED_AT PackageFileOrderField = "CREATED_AT"

// PackageOrder (INPUT_OBJECT): Ways in which lists of packages can be ordered upon return.
type PackageOrder struct {
	// Field: The field in which to order packages by.
	//
	// GraphQL type: PackageOrderField
	Field PackageOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order packages by the specified field.
	//
	// GraphQL type: OrderDirection
	Direction OrderDirection `json:"direction,omitempty"`
}

// PackageOrderField (ENUM): Properties by which package connections can be ordered.
type PackageOrderField string

// PackageOrderField_CREATED_AT: Order packages by creation time.
const PackageOrderField_CREATED_AT PackageOrderField = "CREATED_AT"

// PackageOwner (INTERFACE): Represents an owner of a package.
// PackageOwner_Interface: Represents an owner of a package.
//
// Possible types:
//
//   - *Organization
//   - *Repository
//   - *User
type PackageOwner_Interface interface {
	isPackageOwner()
	GetId() ID
	GetPackages() *PackageConnection
}

func (*Organization) isPackageOwner() {}
func (*Repository) isPackageOwner()   {}
func (*User) isPackageOwner()         {}

type PackageOwner struct {
	Interface PackageOwner_Interface
}

func (x *PackageOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *PackageOwner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for PackageOwner", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "Repository":
		x.Interface = new(Repository)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// PackageStatistics (OBJECT): Represents a object that contains package activity statistics such as downloads.
type PackageStatistics struct {
	// DownloadsTotalCount: Number of times the package was downloaded since it was created.
	DownloadsTotalCount int `json:"downloadsTotalCount,omitempty"`
}

func (x *PackageStatistics) GetDownloadsTotalCount() int { return x.DownloadsTotalCount }

// PackageTag (OBJECT): A version tag contains the mapping between a tag name and a version.
type PackageTag struct {
	// Id: The Node ID of the PackageTag object.
	Id ID `json:"id,omitempty"`

	// Name: Identifies the tag name of the version.
	Name string `json:"name,omitempty"`

	// Version: Version that the tag is associated with.
	Version *PackageVersion `json:"version,omitempty"`
}

func (x *PackageTag) GetId() ID                   { return x.Id }
func (x *PackageTag) GetName() string             { return x.Name }
func (x *PackageTag) GetVersion() *PackageVersion { return x.Version }

// PackageType (ENUM): The possible types of a package.
type PackageType string

// PackageType_NPM: An npm package.
const PackageType_NPM PackageType = "NPM"

// PackageType_RUBYGEMS: A rubygems package.
const PackageType_RUBYGEMS PackageType = "RUBYGEMS"

// PackageType_MAVEN: A maven package.
const PackageType_MAVEN PackageType = "MAVEN"

// PackageType_DOCKER: A docker image.
const PackageType_DOCKER PackageType = "DOCKER"

// PackageType_DEBIAN: A debian package.
const PackageType_DEBIAN PackageType = "DEBIAN"

// PackageType_NUGET: A nuget package.
const PackageType_NUGET PackageType = "NUGET"

// PackageType_PYPI: A python package.
const PackageType_PYPI PackageType = "PYPI"

// PackageVersion (OBJECT): Information about a specific package version.
type PackageVersion struct {
	// Files: List of files associated with this package version.
	//
	// Query arguments:
	//   - orderBy PackageFileOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Files *PackageFileConnection `json:"files,omitempty"`

	// Id: The Node ID of the PackageVersion object.
	Id ID `json:"id,omitempty"`

	// Package: The package associated with this version.
	Package *Package `json:"package,omitempty"`

	// Platform: The platform this version was built for.
	Platform string `json:"platform,omitempty"`

	// PreRelease: Whether or not this version is a pre-release.
	PreRelease bool `json:"preRelease,omitempty"`

	// Readme: The README of this package version.
	Readme string `json:"readme,omitempty"`

	// Release: The release associated with this package version.
	Release *Release `json:"release,omitempty"`

	// Statistics: Statistics about package activity.
	Statistics *PackageVersionStatistics `json:"statistics,omitempty"`

	// Summary: The package version summary.
	Summary string `json:"summary,omitempty"`

	// Version: The version string.
	Version string `json:"version,omitempty"`
}

func (x *PackageVersion) GetFiles() *PackageFileConnection         { return x.Files }
func (x *PackageVersion) GetId() ID                                { return x.Id }
func (x *PackageVersion) GetPackage() *Package                     { return x.Package }
func (x *PackageVersion) GetPlatform() string                      { return x.Platform }
func (x *PackageVersion) GetPreRelease() bool                      { return x.PreRelease }
func (x *PackageVersion) GetReadme() string                        { return x.Readme }
func (x *PackageVersion) GetRelease() *Release                     { return x.Release }
func (x *PackageVersion) GetStatistics() *PackageVersionStatistics { return x.Statistics }
func (x *PackageVersion) GetSummary() string                       { return x.Summary }
func (x *PackageVersion) GetVersion() string                       { return x.Version }

// PackageVersionConnection (OBJECT): The connection type for PackageVersion.
type PackageVersionConnection struct {
	// Edges: A list of edges.
	Edges []*PackageVersionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PackageVersion `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PackageVersionConnection) GetEdges() []*PackageVersionEdge { return x.Edges }
func (x *PackageVersionConnection) GetNodes() []*PackageVersion     { return x.Nodes }
func (x *PackageVersionConnection) GetPageInfo() *PageInfo          { return x.PageInfo }
func (x *PackageVersionConnection) GetTotalCount() int              { return x.TotalCount }

// PackageVersionEdge (OBJECT): An edge in a connection.
type PackageVersionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PackageVersion `json:"node,omitempty"`
}

func (x *PackageVersionEdge) GetCursor() string        { return x.Cursor }
func (x *PackageVersionEdge) GetNode() *PackageVersion { return x.Node }

// PackageVersionOrder (INPUT_OBJECT): Ways in which lists of package versions can be ordered upon return.
type PackageVersionOrder struct {
	// Field: The field in which to order package versions by.
	//
	// GraphQL type: PackageVersionOrderField
	Field PackageVersionOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order package versions by the specified field.
	//
	// GraphQL type: OrderDirection
	Direction OrderDirection `json:"direction,omitempty"`
}

// PackageVersionOrderField (ENUM): Properties by which package version connections can be ordered.
type PackageVersionOrderField string

// PackageVersionOrderField_CREATED_AT: Order package versions by creation time.
const PackageVersionOrderField_CREATED_AT PackageVersionOrderField = "CREATED_AT"

// PackageVersionStatistics (OBJECT): Represents a object that contains package version activity statistics such as downloads.
type PackageVersionStatistics struct {
	// DownloadsTotalCount: Number of times the package was downloaded since it was created.
	DownloadsTotalCount int `json:"downloadsTotalCount,omitempty"`
}

func (x *PackageVersionStatistics) GetDownloadsTotalCount() int { return x.DownloadsTotalCount }

// PageInfo (OBJECT): Information about pagination in a connection.
type PageInfo struct {
	// EndCursor: When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor,omitempty"`

	// HasNextPage: When paginating forwards, are there more items?.
	HasNextPage bool `json:"hasNextPage,omitempty"`

	// HasPreviousPage: When paginating backwards, are there more items?.
	HasPreviousPage bool `json:"hasPreviousPage,omitempty"`

	// StartCursor: When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor,omitempty"`
}

func (x *PageInfo) GetEndCursor() string     { return x.EndCursor }
func (x *PageInfo) GetHasNextPage() bool     { return x.HasNextPage }
func (x *PageInfo) GetHasPreviousPage() bool { return x.HasPreviousPage }
func (x *PageInfo) GetStartCursor() string   { return x.StartCursor }

// ParentIssueAddedEvent (OBJECT): Represents a 'parent_issue_added' event on a given issue.
type ParentIssueAddedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ParentIssueAddedEvent object.
	Id ID `json:"id,omitempty"`

	// Parent: The parent issue added.
	Parent *Issue `json:"parent,omitempty"`
}

func (x *ParentIssueAddedEvent) GetActor() Actor        { return x.Actor }
func (x *ParentIssueAddedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *ParentIssueAddedEvent) GetId() ID              { return x.Id }
func (x *ParentIssueAddedEvent) GetParent() *Issue      { return x.Parent }

// ParentIssueRemovedEvent (OBJECT): Represents a 'parent_issue_removed' event on a given issue.
type ParentIssueRemovedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ParentIssueRemovedEvent object.
	Id ID `json:"id,omitempty"`

	// Parent: The parent issue removed.
	Parent *Issue `json:"parent,omitempty"`
}

func (x *ParentIssueRemovedEvent) GetActor() Actor        { return x.Actor }
func (x *ParentIssueRemovedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *ParentIssueRemovedEvent) GetId() ID              { return x.Id }
func (x *ParentIssueRemovedEvent) GetParent() *Issue      { return x.Parent }

// PatchStatus (ENUM): The possible types of patch statuses.
type PatchStatus string

// PatchStatus_ADDED: The file was added. Git status 'A'.
const PatchStatus_ADDED PatchStatus = "ADDED"

// PatchStatus_DELETED: The file was deleted. Git status 'D'.
const PatchStatus_DELETED PatchStatus = "DELETED"

// PatchStatus_RENAMED: The file was renamed. Git status 'R'.
const PatchStatus_RENAMED PatchStatus = "RENAMED"

// PatchStatus_COPIED: The file was copied. Git status 'C'.
const PatchStatus_COPIED PatchStatus = "COPIED"

// PatchStatus_MODIFIED: The file's contents were changed. Git status 'M'.
const PatchStatus_MODIFIED PatchStatus = "MODIFIED"

// PatchStatus_CHANGED: The file's type was changed. Git status 'T'.
const PatchStatus_CHANGED PatchStatus = "CHANGED"

// PermissionGranter (UNION): Types that can grant permissions on a repository to a user.
// PermissionGranter_Interface: Types that can grant permissions on a repository to a user.
//
// Possible types:
//
//   - *Organization
//   - *Repository
//   - *Team
type PermissionGranter_Interface interface {
	isPermissionGranter()
}

func (*Organization) isPermissionGranter() {}
func (*Repository) isPermissionGranter()   {}
func (*Team) isPermissionGranter()         {}

type PermissionGranter struct {
	Interface PermissionGranter_Interface
}

func (x *PermissionGranter) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *PermissionGranter) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for PermissionGranter", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "Repository":
		x.Interface = new(Repository)
	case "Team":
		x.Interface = new(Team)
	}
	return json.Unmarshal(js, x.Interface)
}

// PermissionSource (OBJECT): A level of permission and source for a user's access to a repository.
type PermissionSource struct {
	// Organization: The organization the repository belongs to.
	Organization *Organization `json:"organization,omitempty"`

	// Permission: The level of access this source has granted to the user.
	Permission DefaultRepositoryPermissionField `json:"permission,omitempty"`

	// RoleName: The name of the role this source has granted to the user.
	RoleName string `json:"roleName,omitempty"`

	// Source: The source of this permission.
	Source PermissionGranter `json:"source,omitempty"`
}

func (x *PermissionSource) GetOrganization() *Organization                  { return x.Organization }
func (x *PermissionSource) GetPermission() DefaultRepositoryPermissionField { return x.Permission }
func (x *PermissionSource) GetRoleName() string                             { return x.RoleName }
func (x *PermissionSource) GetSource() PermissionGranter                    { return x.Source }

// PinEnvironmentInput (INPUT_OBJECT): Autogenerated input type of PinEnvironment.
type PinEnvironmentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnvironmentId: The ID of the environment to modify.
	//
	// GraphQL type: ID!
	EnvironmentId ID `json:"environmentId,omitempty"`

	// Pinned: The desired state of the environment. If true, environment will be pinned. If false, it will be unpinned.
	//
	// GraphQL type: Boolean!
	Pinned bool `json:"pinned,omitempty"`
}

// PinEnvironmentPayload (OBJECT): Autogenerated return type of PinEnvironment.
type PinEnvironmentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Environment: The environment that was pinned.
	Environment *Environment `json:"environment,omitempty"`

	// PinnedEnvironment: The pinned environment if we pinned.
	PinnedEnvironment *PinnedEnvironment `json:"pinnedEnvironment,omitempty"`
}

func (x *PinEnvironmentPayload) GetClientMutationId() string              { return x.ClientMutationId }
func (x *PinEnvironmentPayload) GetEnvironment() *Environment             { return x.Environment }
func (x *PinEnvironmentPayload) GetPinnedEnvironment() *PinnedEnvironment { return x.PinnedEnvironment }

// PinIssueInput (INPUT_OBJECT): Autogenerated input type of PinIssue.
type PinIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The ID of the issue to be pinned.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`
}

// PinIssuePayload (OBJECT): Autogenerated return type of PinIssue.
type PinIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue that was pinned.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *PinIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *PinIssuePayload) GetIssue() *Issue            { return x.Issue }

// PinnableItem (UNION): Types that can be pinned to a profile page.
// PinnableItem_Interface: Types that can be pinned to a profile page.
//
// Possible types:
//
//   - *Gist
//   - *Repository
type PinnableItem_Interface interface {
	isPinnableItem()
}

func (*Gist) isPinnableItem()       {}
func (*Repository) isPinnableItem() {}

type PinnableItem struct {
	Interface PinnableItem_Interface
}

func (x *PinnableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *PinnableItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for PinnableItem", info.Typename)
	case "Gist":
		x.Interface = new(Gist)
	case "Repository":
		x.Interface = new(Repository)
	}
	return json.Unmarshal(js, x.Interface)
}

// PinnableItemConnection (OBJECT): The connection type for PinnableItem.
type PinnableItemConnection struct {
	// Edges: A list of edges.
	Edges []*PinnableItemEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []PinnableItem `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PinnableItemConnection) GetEdges() []*PinnableItemEdge { return x.Edges }
func (x *PinnableItemConnection) GetNodes() []PinnableItem      { return x.Nodes }
func (x *PinnableItemConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *PinnableItemConnection) GetTotalCount() int            { return x.TotalCount }

// PinnableItemEdge (OBJECT): An edge in a connection.
type PinnableItemEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node PinnableItem `json:"node,omitempty"`
}

func (x *PinnableItemEdge) GetCursor() string     { return x.Cursor }
func (x *PinnableItemEdge) GetNode() PinnableItem { return x.Node }

// PinnableItemType (ENUM): Represents items that can be pinned to a profile page or dashboard.
type PinnableItemType string

// PinnableItemType_REPOSITORY: A repository.
const PinnableItemType_REPOSITORY PinnableItemType = "REPOSITORY"

// PinnableItemType_GIST: A gist.
const PinnableItemType_GIST PinnableItemType = "GIST"

// PinnableItemType_ISSUE: An issue.
const PinnableItemType_ISSUE PinnableItemType = "ISSUE"

// PinnableItemType_PROJECT: A project.
const PinnableItemType_PROJECT PinnableItemType = "PROJECT"

// PinnableItemType_PULL_REQUEST: A pull request.
const PinnableItemType_PULL_REQUEST PinnableItemType = "PULL_REQUEST"

// PinnableItemType_USER: A user.
const PinnableItemType_USER PinnableItemType = "USER"

// PinnableItemType_ORGANIZATION: An organization.
const PinnableItemType_ORGANIZATION PinnableItemType = "ORGANIZATION"

// PinnableItemType_TEAM: A team.
const PinnableItemType_TEAM PinnableItemType = "TEAM"

// PinnedDiscussion (OBJECT): A Pinned Discussion is a discussion pinned to a repository's index page.
type PinnedDiscussion struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Discussion: The discussion that was pinned.
	Discussion *Discussion `json:"discussion,omitempty"`

	// GradientStopColors: Color stops of the chosen gradient.
	GradientStopColors []string `json:"gradientStopColors,omitempty"`

	// Id: The Node ID of the PinnedDiscussion object.
	Id ID `json:"id,omitempty"`

	// Pattern: Background texture pattern.
	Pattern PinnedDiscussionPattern `json:"pattern,omitempty"`

	// PinnedBy: The actor that pinned this discussion.
	PinnedBy Actor `json:"pinnedBy,omitempty"`

	// PreconfiguredGradient: Preconfigured background gradient option.
	PreconfiguredGradient PinnedDiscussionGradient `json:"preconfiguredGradient,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *PinnedDiscussion) GetCreatedAt() DateTime              { return x.CreatedAt }
func (x *PinnedDiscussion) GetDatabaseId() int                  { return x.DatabaseId }
func (x *PinnedDiscussion) GetDiscussion() *Discussion          { return x.Discussion }
func (x *PinnedDiscussion) GetGradientStopColors() []string     { return x.GradientStopColors }
func (x *PinnedDiscussion) GetId() ID                           { return x.Id }
func (x *PinnedDiscussion) GetPattern() PinnedDiscussionPattern { return x.Pattern }
func (x *PinnedDiscussion) GetPinnedBy() Actor                  { return x.PinnedBy }
func (x *PinnedDiscussion) GetPreconfiguredGradient() PinnedDiscussionGradient {
	return x.PreconfiguredGradient
}
func (x *PinnedDiscussion) GetRepository() *Repository { return x.Repository }
func (x *PinnedDiscussion) GetUpdatedAt() DateTime     { return x.UpdatedAt }

// PinnedDiscussionConnection (OBJECT): The connection type for PinnedDiscussion.
type PinnedDiscussionConnection struct {
	// Edges: A list of edges.
	Edges []*PinnedDiscussionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PinnedDiscussion `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PinnedDiscussionConnection) GetEdges() []*PinnedDiscussionEdge { return x.Edges }
func (x *PinnedDiscussionConnection) GetNodes() []*PinnedDiscussion     { return x.Nodes }
func (x *PinnedDiscussionConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *PinnedDiscussionConnection) GetTotalCount() int                { return x.TotalCount }

// PinnedDiscussionEdge (OBJECT): An edge in a connection.
type PinnedDiscussionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PinnedDiscussion `json:"node,omitempty"`
}

func (x *PinnedDiscussionEdge) GetCursor() string          { return x.Cursor }
func (x *PinnedDiscussionEdge) GetNode() *PinnedDiscussion { return x.Node }

// PinnedDiscussionGradient (ENUM): Preconfigured gradients that may be used to style discussions pinned within a repository.
type PinnedDiscussionGradient string

// PinnedDiscussionGradient_RED_ORANGE: A gradient of red to orange.
const PinnedDiscussionGradient_RED_ORANGE PinnedDiscussionGradient = "RED_ORANGE"

// PinnedDiscussionGradient_BLUE_MINT: A gradient of blue to mint.
const PinnedDiscussionGradient_BLUE_MINT PinnedDiscussionGradient = "BLUE_MINT"

// PinnedDiscussionGradient_BLUE_PURPLE: A gradient of blue to purple.
const PinnedDiscussionGradient_BLUE_PURPLE PinnedDiscussionGradient = "BLUE_PURPLE"

// PinnedDiscussionGradient_PINK_BLUE: A gradient of pink to blue.
const PinnedDiscussionGradient_PINK_BLUE PinnedDiscussionGradient = "PINK_BLUE"

// PinnedDiscussionGradient_PURPLE_CORAL: A gradient of purple to coral.
const PinnedDiscussionGradient_PURPLE_CORAL PinnedDiscussionGradient = "PURPLE_CORAL"

// PinnedDiscussionPattern (ENUM): Preconfigured background patterns that may be used to style discussions pinned within a repository.
type PinnedDiscussionPattern string

// PinnedDiscussionPattern_DOT_FILL: A solid dot pattern.
const PinnedDiscussionPattern_DOT_FILL PinnedDiscussionPattern = "DOT_FILL"

// PinnedDiscussionPattern_PLUS: A plus sign pattern.
const PinnedDiscussionPattern_PLUS PinnedDiscussionPattern = "PLUS"

// PinnedDiscussionPattern_ZAP: A lightning bolt pattern.
const PinnedDiscussionPattern_ZAP PinnedDiscussionPattern = "ZAP"

// PinnedDiscussionPattern_CHEVRON_UP: An upward-facing chevron pattern.
const PinnedDiscussionPattern_CHEVRON_UP PinnedDiscussionPattern = "CHEVRON_UP"

// PinnedDiscussionPattern_DOT: A hollow dot pattern.
const PinnedDiscussionPattern_DOT PinnedDiscussionPattern = "DOT"

// PinnedDiscussionPattern_HEART_FILL: A heart pattern.
const PinnedDiscussionPattern_HEART_FILL PinnedDiscussionPattern = "HEART_FILL"

// PinnedEnvironment (OBJECT): Represents a pinned environment on a given repository.
type PinnedEnvironment struct {
	// CreatedAt: Identifies the date and time when the pinned environment was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Environment: Identifies the environment associated.
	Environment *Environment `json:"environment,omitempty"`

	// Id: The Node ID of the PinnedEnvironment object.
	Id ID `json:"id,omitempty"`

	// Position: Identifies the position of the pinned environment.
	Position int `json:"position,omitempty"`

	// Repository: The repository that this environment was pinned to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *PinnedEnvironment) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *PinnedEnvironment) GetDatabaseId() int           { return x.DatabaseId }
func (x *PinnedEnvironment) GetEnvironment() *Environment { return x.Environment }
func (x *PinnedEnvironment) GetId() ID                    { return x.Id }
func (x *PinnedEnvironment) GetPosition() int             { return x.Position }
func (x *PinnedEnvironment) GetRepository() *Repository   { return x.Repository }

// PinnedEnvironmentConnection (OBJECT): The connection type for PinnedEnvironment.
type PinnedEnvironmentConnection struct {
	// Edges: A list of edges.
	Edges []*PinnedEnvironmentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PinnedEnvironment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PinnedEnvironmentConnection) GetEdges() []*PinnedEnvironmentEdge { return x.Edges }
func (x *PinnedEnvironmentConnection) GetNodes() []*PinnedEnvironment     { return x.Nodes }
func (x *PinnedEnvironmentConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *PinnedEnvironmentConnection) GetTotalCount() int                 { return x.TotalCount }

// PinnedEnvironmentEdge (OBJECT): An edge in a connection.
type PinnedEnvironmentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PinnedEnvironment `json:"node,omitempty"`
}

func (x *PinnedEnvironmentEdge) GetCursor() string           { return x.Cursor }
func (x *PinnedEnvironmentEdge) GetNode() *PinnedEnvironment { return x.Node }

// PinnedEnvironmentOrder (INPUT_OBJECT): Ordering options for pinned environments.
type PinnedEnvironmentOrder struct {
	// Field: The field to order pinned environments by.
	//
	// GraphQL type: PinnedEnvironmentOrderField!
	Field PinnedEnvironmentOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order pinned environments by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// PinnedEnvironmentOrderField (ENUM): Properties by which pinned environments connections can be ordered.
type PinnedEnvironmentOrderField string

// PinnedEnvironmentOrderField_POSITION: Order pinned environments by position.
const PinnedEnvironmentOrderField_POSITION PinnedEnvironmentOrderField = "POSITION"

// PinnedEvent (OBJECT): Represents a 'pinned' event on a given issue or pull request.
type PinnedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the PinnedEvent object.
	Id ID `json:"id,omitempty"`

	// Issue: Identifies the issue associated with the event.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *PinnedEvent) GetActor() Actor        { return x.Actor }
func (x *PinnedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *PinnedEvent) GetId() ID              { return x.Id }
func (x *PinnedEvent) GetIssue() *Issue       { return x.Issue }

// PinnedIssue (OBJECT): A Pinned Issue is a issue pinned to a repository's index page.
type PinnedIssue struct {
	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the PinnedIssue object.
	Id ID `json:"id,omitempty"`

	// Issue: The issue that was pinned.
	Issue *Issue `json:"issue,omitempty"`

	// PinnedBy: The actor that pinned this issue.
	PinnedBy Actor `json:"pinnedBy,omitempty"`

	// Repository: The repository that this issue was pinned to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *PinnedIssue) GetDatabaseId() int         { return x.DatabaseId }
func (x *PinnedIssue) GetFullDatabaseId() BigInt  { return x.FullDatabaseId }
func (x *PinnedIssue) GetId() ID                  { return x.Id }
func (x *PinnedIssue) GetIssue() *Issue           { return x.Issue }
func (x *PinnedIssue) GetPinnedBy() Actor         { return x.PinnedBy }
func (x *PinnedIssue) GetRepository() *Repository { return x.Repository }

// PinnedIssueConnection (OBJECT): The connection type for PinnedIssue.
type PinnedIssueConnection struct {
	// Edges: A list of edges.
	Edges []*PinnedIssueEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PinnedIssue `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PinnedIssueConnection) GetEdges() []*PinnedIssueEdge { return x.Edges }
func (x *PinnedIssueConnection) GetNodes() []*PinnedIssue     { return x.Nodes }
func (x *PinnedIssueConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *PinnedIssueConnection) GetTotalCount() int           { return x.TotalCount }

// PinnedIssueEdge (OBJECT): An edge in a connection.
type PinnedIssueEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PinnedIssue `json:"node,omitempty"`
}

func (x *PinnedIssueEdge) GetCursor() string     { return x.Cursor }
func (x *PinnedIssueEdge) GetNode() *PinnedIssue { return x.Node }

// PreciseDateTime (SCALAR): An ISO-8601 encoded UTC date string with millisecond precision.
type PreciseDateTime string

// PrivateRepositoryForkingDisableAuditEntry (OBJECT): Audit log entry for a private_repository_forking.disable event.
type PrivateRepositoryForkingDisableAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the PrivateRepositoryForkingDisableAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *PrivateRepositoryForkingDisableAuditEntry) GetAction() string         { return x.Action }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetEnterpriseSlug() string {
	return x.EnterpriseSlug
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetEnterpriseUrl() URI { return x.EnterpriseUrl }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetId() ID             { return x.Id }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetUser() *User        { return x.User }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *PrivateRepositoryForkingDisableAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *PrivateRepositoryForkingDisableAuditEntry) GetUserUrl() URI { return x.UserUrl }

// PrivateRepositoryForkingEnableAuditEntry (OBJECT): Audit log entry for a private_repository_forking.enable event.
type PrivateRepositoryForkingEnableAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the PrivateRepositoryForkingEnableAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *PrivateRepositoryForkingEnableAuditEntry) GetAction() string         { return x.Action }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetActorUrl() URI              { return x.ActorUrl }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetCreatedAt() PreciseDateTime { return x.CreatedAt }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetEnterpriseSlug() string {
	return x.EnterpriseSlug
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetEnterpriseUrl() URI { return x.EnterpriseUrl }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetId() ID             { return x.Id }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetOrganizationUrl() URI    { return x.OrganizationUrl }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetUser() *User        { return x.User }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *PrivateRepositoryForkingEnableAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *PrivateRepositoryForkingEnableAuditEntry) GetUserUrl() URI { return x.UserUrl }

// ProfileItemShowcase (OBJECT): A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
type ProfileItemShowcase struct {
	// HasPinnedItems: Whether or not the owner has pinned any repositories or gists.
	HasPinnedItems bool `json:"hasPinnedItems,omitempty"`

	// Items: The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Items *PinnableItemConnection `json:"items,omitempty"`
}

func (x *ProfileItemShowcase) GetHasPinnedItems() bool           { return x.HasPinnedItems }
func (x *ProfileItemShowcase) GetItems() *PinnableItemConnection { return x.Items }

// ProfileOwner (INTERFACE): Represents any entity on GitHub that has a profile page.
// ProfileOwner_Interface: Represents any entity on GitHub that has a profile page.
//
// Possible types:
//
//   - *Organization
//   - *User
type ProfileOwner_Interface interface {
	isProfileOwner()
	GetAnyPinnableItems() bool
	GetEmail() string
	GetId() ID
	GetItemShowcase() *ProfileItemShowcase
	GetLocation() string
	GetLogin() string
	GetName() string
	GetPinnableItems() *PinnableItemConnection
	GetPinnedItems() *PinnableItemConnection
	GetPinnedItemsRemaining() int
	GetViewerCanChangePinnedItems() bool
	GetWebsiteUrl() URI
}

func (*Organization) isProfileOwner() {}
func (*User) isProfileOwner()         {}

type ProfileOwner struct {
	Interface ProfileOwner_Interface
}

func (x *ProfileOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProfileOwner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProfileOwner", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// Project (OBJECT): Projects manage issues, pull requests and notes within a project owner.
type Project struct {
	// Body: The project's description body.
	//
	// Deprecated: The project's description body.
	Body string `json:"body,omitempty"`

	// BodyHTML: The projects description body rendered to HTML.
	//
	// Deprecated: The projects description body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// Closed: Indicates if the object is closed (definition of closed may depend on type).
	Closed bool `json:"closed,omitempty"`

	// ClosedAt: Identifies the date and time when the object was closed.
	ClosedAt DateTime `json:"closedAt,omitempty"`

	// Columns: List of columns in the project.
	//
	// Deprecated: List of columns in the project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Columns *ProjectColumnConnection `json:"columns,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	//
	// Deprecated: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who originally created the project.
	//
	// Deprecated: The actor who originally created the project.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the Project object.
	//
	// Deprecated: The Node ID of the Project object.
	Id ID `json:"id,omitempty"`

	// Name: The project's name.
	//
	// Deprecated: The project's name.
	Name string `json:"name,omitempty"`

	// Number: The project's number.
	//
	// Deprecated: The project's number.
	Number int `json:"number,omitempty"`

	// Owner: The project's owner. Currently limited to repositories, organizations, and users.
	//
	// Deprecated: The project's owner. Currently limited to repositories, organizations, and users.
	Owner ProjectOwner `json:"owner,omitempty"`

	// PendingCards: List of pending cards in this project.
	//
	// Deprecated: List of pending cards in this project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - archivedStates [ProjectCardArchivedState]
	PendingCards *ProjectCardConnection `json:"pendingCards,omitempty"`

	// Progress: Project progress details.
	//
	// Deprecated: Project progress details.
	Progress *ProjectProgress `json:"progress,omitempty"`

	// ResourcePath: The HTTP path for this project.
	//
	// Deprecated: The HTTP path for this project.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// State: Whether the project is open or closed.
	//
	// Deprecated: Whether the project is open or closed.
	State ProjectState `json:"state,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	//
	// Deprecated: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this project.
	//
	// Deprecated: The HTTP URL for this project.
	Url URI `json:"url,omitempty"`

	// ViewerCanClose: Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose,omitempty"`

	// ViewerCanReopen: Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`
}

func (x *Project) GetBody() string                         { return x.Body }
func (x *Project) GetBodyHTML() template.HTML              { return x.BodyHTML }
func (x *Project) GetClosed() bool                         { return x.Closed }
func (x *Project) GetClosedAt() DateTime                   { return x.ClosedAt }
func (x *Project) GetColumns() *ProjectColumnConnection    { return x.Columns }
func (x *Project) GetCreatedAt() DateTime                  { return x.CreatedAt }
func (x *Project) GetCreator() Actor                       { return x.Creator }
func (x *Project) GetDatabaseId() int                      { return x.DatabaseId }
func (x *Project) GetId() ID                               { return x.Id }
func (x *Project) GetName() string                         { return x.Name }
func (x *Project) GetNumber() int                          { return x.Number }
func (x *Project) GetOwner() ProjectOwner                  { return x.Owner }
func (x *Project) GetPendingCards() *ProjectCardConnection { return x.PendingCards }
func (x *Project) GetProgress() *ProjectProgress           { return x.Progress }
func (x *Project) GetResourcePath() URI                    { return x.ResourcePath }
func (x *Project) GetState() ProjectState                  { return x.State }
func (x *Project) GetUpdatedAt() DateTime                  { return x.UpdatedAt }
func (x *Project) GetUrl() URI                             { return x.Url }
func (x *Project) GetViewerCanClose() bool                 { return x.ViewerCanClose }
func (x *Project) GetViewerCanReopen() bool                { return x.ViewerCanReopen }
func (x *Project) GetViewerCanUpdate() bool                { return x.ViewerCanUpdate }

// ProjectCard (OBJECT): A card in a project.
type ProjectCard struct {
	// Column: The project column this card is associated under. A card may only belong to one
	// project column at a time. The column field will be null if the card is created
	// in a pending state and has yet to be associated with a column. Once cards are
	// associated with a column, they will not become pending in the future.
	// .
	//
	// Deprecated: The project column this card is associated under. A card may only belong to one
	// project column at a time. The column field will be null if the card is created
	// in a pending state and has yet to be associated with a column. Once cards are
	// associated with a column, they will not become pending in the future.
	// .
	Column *ProjectColumn `json:"column,omitempty"`

	// Content: The card content item.
	//
	// Deprecated: The card content item.
	Content ProjectCardItem `json:"content,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	//
	// Deprecated: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created this card.
	//
	// Deprecated: The actor who created this card.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ProjectCard object.
	//
	// Deprecated: The Node ID of the ProjectCard object.
	Id ID `json:"id,omitempty"`

	// IsArchived: Whether the card is archived.
	//
	// Deprecated: Whether the card is archived.
	IsArchived bool `json:"isArchived,omitempty"`

	// Note: The card note.
	//
	// Deprecated: The card note.
	Note string `json:"note,omitempty"`

	// Project: The project that contains this card.
	//
	// Deprecated: The project that contains this card.
	Project *Project `json:"project,omitempty"`

	// ResourcePath: The HTTP path for this card.
	//
	// Deprecated: The HTTP path for this card.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// State: The state of ProjectCard.
	//
	// Deprecated: The state of ProjectCard.
	State ProjectCardState `json:"state,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	//
	// Deprecated: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this card.
	//
	// Deprecated: The HTTP URL for this card.
	Url URI `json:"url,omitempty"`
}

func (x *ProjectCard) GetColumn() *ProjectColumn   { return x.Column }
func (x *ProjectCard) GetContent() ProjectCardItem { return x.Content }
func (x *ProjectCard) GetCreatedAt() DateTime      { return x.CreatedAt }
func (x *ProjectCard) GetCreator() Actor           { return x.Creator }
func (x *ProjectCard) GetDatabaseId() int          { return x.DatabaseId }
func (x *ProjectCard) GetId() ID                   { return x.Id }
func (x *ProjectCard) GetIsArchived() bool         { return x.IsArchived }
func (x *ProjectCard) GetNote() string             { return x.Note }
func (x *ProjectCard) GetProject() *Project        { return x.Project }
func (x *ProjectCard) GetResourcePath() URI        { return x.ResourcePath }
func (x *ProjectCard) GetState() ProjectCardState  { return x.State }
func (x *ProjectCard) GetUpdatedAt() DateTime      { return x.UpdatedAt }
func (x *ProjectCard) GetUrl() URI                 { return x.Url }

// ProjectCardArchivedState (ENUM): The possible archived states of a project card.
type ProjectCardArchivedState string

// ProjectCardArchivedState_ARCHIVED: A project card that is archived.
const ProjectCardArchivedState_ARCHIVED ProjectCardArchivedState = "ARCHIVED"

// ProjectCardArchivedState_NOT_ARCHIVED: A project card that is not archived.
const ProjectCardArchivedState_NOT_ARCHIVED ProjectCardArchivedState = "NOT_ARCHIVED"

// ProjectCardConnection (OBJECT): The connection type for ProjectCard.
type ProjectCardConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectCardEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectCard `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectCardConnection) GetEdges() []*ProjectCardEdge { return x.Edges }
func (x *ProjectCardConnection) GetNodes() []*ProjectCard     { return x.Nodes }
func (x *ProjectCardConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *ProjectCardConnection) GetTotalCount() int           { return x.TotalCount }

// ProjectCardEdge (OBJECT): An edge in a connection.
type ProjectCardEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectCard `json:"node,omitempty"`
}

func (x *ProjectCardEdge) GetCursor() string     { return x.Cursor }
func (x *ProjectCardEdge) GetNode() *ProjectCard { return x.Node }

// ProjectCardImport (INPUT_OBJECT): An issue or PR and its owning repository to be used in a project card.
type ProjectCardImport struct {
	// Repository: Repository name with owner (owner/repository).
	//
	// GraphQL type: String!
	Repository string `json:"repository,omitempty"`

	// Number: The issue or pull request number.
	//
	// GraphQL type: Int!
	Number int `json:"number,omitempty"`
}

// ProjectCardItem (UNION): Types that can be inside Project Cards.
// ProjectCardItem_Interface: Types that can be inside Project Cards.
//
// Possible types:
//
//   - *Issue
//   - *PullRequest
type ProjectCardItem_Interface interface {
	isProjectCardItem()
}

func (*Issue) isProjectCardItem()       {}
func (*PullRequest) isProjectCardItem() {}

type ProjectCardItem struct {
	Interface ProjectCardItem_Interface
}

func (x *ProjectCardItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectCardItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectCardItem", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectCardState (ENUM): Various content states of a ProjectCard.
type ProjectCardState string

// ProjectCardState_CONTENT_ONLY: The card has content only.
const ProjectCardState_CONTENT_ONLY ProjectCardState = "CONTENT_ONLY"

// ProjectCardState_NOTE_ONLY: The card has a note only.
const ProjectCardState_NOTE_ONLY ProjectCardState = "NOTE_ONLY"

// ProjectCardState_REDACTED: The card is redacted.
const ProjectCardState_REDACTED ProjectCardState = "REDACTED"

// ProjectColumn (OBJECT): A column inside a project.
type ProjectColumn struct {
	// Cards: List of cards in the column.
	//
	// Deprecated: List of cards in the column.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - archivedStates [ProjectCardArchivedState]
	Cards *ProjectCardConnection `json:"cards,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	//
	// Deprecated: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ProjectColumn object.
	//
	// Deprecated: The Node ID of the ProjectColumn object.
	Id ID `json:"id,omitempty"`

	// Name: The project column's name.
	//
	// Deprecated: The project column's name.
	Name string `json:"name,omitempty"`

	// Project: The project that contains this column.
	//
	// Deprecated: The project that contains this column.
	Project *Project `json:"project,omitempty"`

	// Purpose: The semantic purpose of the column.
	//
	// Deprecated: The semantic purpose of the column.
	Purpose ProjectColumnPurpose `json:"purpose,omitempty"`

	// ResourcePath: The HTTP path for this project column.
	//
	// Deprecated: The HTTP path for this project column.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	//
	// Deprecated: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this project column.
	//
	// Deprecated: The HTTP URL for this project column.
	Url URI `json:"url,omitempty"`
}

func (x *ProjectColumn) GetCards() *ProjectCardConnection { return x.Cards }
func (x *ProjectColumn) GetCreatedAt() DateTime           { return x.CreatedAt }
func (x *ProjectColumn) GetDatabaseId() int               { return x.DatabaseId }
func (x *ProjectColumn) GetId() ID                        { return x.Id }
func (x *ProjectColumn) GetName() string                  { return x.Name }
func (x *ProjectColumn) GetProject() *Project             { return x.Project }
func (x *ProjectColumn) GetPurpose() ProjectColumnPurpose { return x.Purpose }
func (x *ProjectColumn) GetResourcePath() URI             { return x.ResourcePath }
func (x *ProjectColumn) GetUpdatedAt() DateTime           { return x.UpdatedAt }
func (x *ProjectColumn) GetUrl() URI                      { return x.Url }

// ProjectColumnConnection (OBJECT): The connection type for ProjectColumn.
type ProjectColumnConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectColumnEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectColumn `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectColumnConnection) GetEdges() []*ProjectColumnEdge { return x.Edges }
func (x *ProjectColumnConnection) GetNodes() []*ProjectColumn     { return x.Nodes }
func (x *ProjectColumnConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *ProjectColumnConnection) GetTotalCount() int             { return x.TotalCount }

// ProjectColumnEdge (OBJECT): An edge in a connection.
type ProjectColumnEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectColumn `json:"node,omitempty"`
}

func (x *ProjectColumnEdge) GetCursor() string       { return x.Cursor }
func (x *ProjectColumnEdge) GetNode() *ProjectColumn { return x.Node }

// ProjectColumnImport (INPUT_OBJECT): A project column and a list of its issues and PRs.
type ProjectColumnImport struct {
	// ColumnName: The name of the column.
	//
	// GraphQL type: String!
	ColumnName string `json:"columnName,omitempty"`

	// Position: The position of the column, starting from 0.
	//
	// GraphQL type: Int!
	Position int `json:"position,omitempty"`

	// Issues: A list of issues and pull requests in the column.
	//
	// GraphQL type: [ProjectCardImport!]
	Issues []*ProjectCardImport `json:"issues,omitempty"`
}

// ProjectColumnPurpose (ENUM): The semantic purpose of the column - todo, in progress, or done.
type ProjectColumnPurpose string

// ProjectColumnPurpose_TODO: The column contains cards still to be worked on.
const ProjectColumnPurpose_TODO ProjectColumnPurpose = "TODO"

// ProjectColumnPurpose_IN_PROGRESS: The column contains cards which are currently being worked on.
const ProjectColumnPurpose_IN_PROGRESS ProjectColumnPurpose = "IN_PROGRESS"

// ProjectColumnPurpose_DONE: The column contains cards which are complete.
const ProjectColumnPurpose_DONE ProjectColumnPurpose = "DONE"

// ProjectConnection (OBJECT): A list of projects associated with the owner.
type ProjectConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Project `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectConnection) GetEdges() []*ProjectEdge { return x.Edges }
func (x *ProjectConnection) GetNodes() []*Project     { return x.Nodes }
func (x *ProjectConnection) GetPageInfo() *PageInfo   { return x.PageInfo }
func (x *ProjectConnection) GetTotalCount() int       { return x.TotalCount }

// ProjectEdge (OBJECT): An edge in a connection.
type ProjectEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Project `json:"node,omitempty"`
}

func (x *ProjectEdge) GetCursor() string { return x.Cursor }
func (x *ProjectEdge) GetNode() *Project { return x.Node }

// ProjectOrder (INPUT_OBJECT): Ways in which lists of projects can be ordered upon return.
type ProjectOrder struct {
	// Field: The field in which to order projects by.
	//
	// GraphQL type: ProjectOrderField!
	Field ProjectOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order projects by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectOrderField (ENUM): Properties by which project connections can be ordered.
type ProjectOrderField string

// ProjectOrderField_CREATED_AT: Order projects by creation time.
const ProjectOrderField_CREATED_AT ProjectOrderField = "CREATED_AT"

// ProjectOrderField_UPDATED_AT: Order projects by update time.
const ProjectOrderField_UPDATED_AT ProjectOrderField = "UPDATED_AT"

// ProjectOrderField_NAME: Order projects by name.
const ProjectOrderField_NAME ProjectOrderField = "NAME"

// ProjectOwner (INTERFACE): Represents an owner of a Project.
// ProjectOwner_Interface: Represents an owner of a Project.
//
// Possible types:
//
//   - *Organization
//   - *Repository
//   - *User
type ProjectOwner_Interface interface {
	isProjectOwner()
	GetId() ID
	GetProject() *Project
	GetProjects() *ProjectConnection
	GetProjectsResourcePath() URI
	GetProjectsUrl() URI
	GetViewerCanCreateProjects() bool
}

func (*Organization) isProjectOwner() {}
func (*Repository) isProjectOwner()   {}
func (*User) isProjectOwner()         {}

type ProjectOwner struct {
	Interface ProjectOwner_Interface
}

func (x *ProjectOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectOwner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectOwner", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "Repository":
		x.Interface = new(Repository)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectProgress (OBJECT): Project progress stats.
type ProjectProgress struct {
	// DoneCount: The number of done cards.
	//
	// Deprecated: The number of done cards.
	DoneCount int `json:"doneCount,omitempty"`

	// DonePercentage: The percentage of done cards.
	//
	// Deprecated: The percentage of done cards.
	DonePercentage float64 `json:"donePercentage,omitempty"`

	// Enabled: Whether progress tracking is enabled and cards with purpose exist for this project.
	//
	// Deprecated: Whether progress tracking is enabled and cards with purpose exist for this project.
	Enabled bool `json:"enabled,omitempty"`

	// InProgressCount: The number of in-progress cards.
	//
	// Deprecated: The number of in-progress cards.
	InProgressCount int `json:"inProgressCount,omitempty"`

	// InProgressPercentage: The percentage of in-progress cards.
	//
	// Deprecated: The percentage of in-progress cards.
	InProgressPercentage float64 `json:"inProgressPercentage,omitempty"`

	// TodoCount: The number of to do cards.
	//
	// Deprecated: The number of to do cards.
	TodoCount int `json:"todoCount,omitempty"`

	// TodoPercentage: The percentage of to do cards.
	//
	// Deprecated: The percentage of to do cards.
	TodoPercentage float64 `json:"todoPercentage,omitempty"`
}

func (x *ProjectProgress) GetDoneCount() int                { return x.DoneCount }
func (x *ProjectProgress) GetDonePercentage() float64       { return x.DonePercentage }
func (x *ProjectProgress) GetEnabled() bool                 { return x.Enabled }
func (x *ProjectProgress) GetInProgressCount() int          { return x.InProgressCount }
func (x *ProjectProgress) GetInProgressPercentage() float64 { return x.InProgressPercentage }
func (x *ProjectProgress) GetTodoCount() int                { return x.TodoCount }
func (x *ProjectProgress) GetTodoPercentage() float64       { return x.TodoPercentage }

// ProjectState (ENUM): State of the project; either 'open' or 'closed'.
type ProjectState string

// ProjectState_OPEN: The project is open.
const ProjectState_OPEN ProjectState = "OPEN"

// ProjectState_CLOSED: The project is closed.
const ProjectState_CLOSED ProjectState = "CLOSED"

// ProjectTemplate (ENUM): GitHub-provided templates for Projects.
type ProjectTemplate string

// ProjectTemplate_BASIC_KANBAN: Create a board with columns for To do, In progress and Done.
const ProjectTemplate_BASIC_KANBAN ProjectTemplate = "BASIC_KANBAN"

// ProjectTemplate_AUTOMATED_KANBAN_V2: Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
const ProjectTemplate_AUTOMATED_KANBAN_V2 ProjectTemplate = "AUTOMATED_KANBAN_V2"

// ProjectTemplate_AUTOMATED_REVIEWS_KANBAN: Create a board with triggers to automatically move cards across columns with review automation.
const ProjectTemplate_AUTOMATED_REVIEWS_KANBAN ProjectTemplate = "AUTOMATED_REVIEWS_KANBAN"

// ProjectTemplate_BUG_TRIAGE: Create a board to triage and prioritize bugs with To do, priority, and Done columns.
const ProjectTemplate_BUG_TRIAGE ProjectTemplate = "BUG_TRIAGE"

// ProjectV2 (OBJECT): New projects that manage issues, pull requests and drafts using tables and boards.
type ProjectV2 struct {
	// Closed: Returns true if the project is closed.
	Closed bool `json:"closed,omitempty"`

	// ClosedAt: Identifies the date and time when the object was closed.
	ClosedAt DateTime `json:"closedAt,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who originally created the project.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Field: A field of the project.
	//
	// Query arguments:
	//   - name String!
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Fields: List of fields and their constraints in the project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	Fields *ProjectV2FieldConfigurationConnection `json:"fields,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the ProjectV2 object.
	Id ID `json:"id,omitempty"`

	// Items: List of items in the project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2ItemOrder
	Items *ProjectV2ItemConnection `json:"items,omitempty"`

	// Number: The project's number.
	Number int `json:"number,omitempty"`

	// Owner: The project's owner. Currently limited to organizations and users.
	Owner ProjectV2Owner `json:"owner,omitempty"`

	// Public: Returns true if the project is public.
	Public bool `json:"public,omitempty"`

	// Readme: The project's readme.
	Readme string `json:"readme,omitempty"`

	// Repositories: The repositories the project is linked to.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy RepositoryOrder
	Repositories *RepositoryConnection `json:"repositories,omitempty"`

	// ResourcePath: The HTTP path for this project.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// ShortDescription: The project's short description.
	ShortDescription string `json:"shortDescription,omitempty"`

	// StatusUpdates: List of the status updates in the project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2StatusOrder
	StatusUpdates *ProjectV2StatusUpdateConnection `json:"statusUpdates,omitempty"`

	// Teams: The teams the project is linked to.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy TeamOrder
	Teams *TeamConnection `json:"teams,omitempty"`

	// Template: Returns true if this project is a template.
	Template bool `json:"template,omitempty"`

	// Title: The project's name.
	Title string `json:"title,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this project.
	Url URI `json:"url,omitempty"`

	// View: A view of the project.
	//
	// Query arguments:
	//   - number Int!
	View *ProjectV2View `json:"view,omitempty"`

	// ViewerCanClose: Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose,omitempty"`

	// ViewerCanReopen: Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// Views: List of views in the project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2ViewOrder
	Views *ProjectV2ViewConnection `json:"views,omitempty"`

	// Workflow: A workflow of the project.
	//
	// Query arguments:
	//   - number Int!
	Workflow *ProjectV2Workflow `json:"workflow,omitempty"`

	// Workflows: List of the workflows in the project.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2WorkflowOrder
	Workflows *ProjectV2WorkflowConnection `json:"workflows,omitempty"`
}

func (x *ProjectV2) GetClosed() bool                                    { return x.Closed }
func (x *ProjectV2) GetClosedAt() DateTime                              { return x.ClosedAt }
func (x *ProjectV2) GetCreatedAt() DateTime                             { return x.CreatedAt }
func (x *ProjectV2) GetCreator() Actor                                  { return x.Creator }
func (x *ProjectV2) GetDatabaseId() int                                 { return x.DatabaseId }
func (x *ProjectV2) GetField() ProjectV2FieldConfiguration              { return x.Field }
func (x *ProjectV2) GetFields() *ProjectV2FieldConfigurationConnection  { return x.Fields }
func (x *ProjectV2) GetFullDatabaseId() BigInt                          { return x.FullDatabaseId }
func (x *ProjectV2) GetId() ID                                          { return x.Id }
func (x *ProjectV2) GetItems() *ProjectV2ItemConnection                 { return x.Items }
func (x *ProjectV2) GetNumber() int                                     { return x.Number }
func (x *ProjectV2) GetOwner() ProjectV2Owner                           { return x.Owner }
func (x *ProjectV2) GetPublic() bool                                    { return x.Public }
func (x *ProjectV2) GetReadme() string                                  { return x.Readme }
func (x *ProjectV2) GetRepositories() *RepositoryConnection             { return x.Repositories }
func (x *ProjectV2) GetResourcePath() URI                               { return x.ResourcePath }
func (x *ProjectV2) GetShortDescription() string                        { return x.ShortDescription }
func (x *ProjectV2) GetStatusUpdates() *ProjectV2StatusUpdateConnection { return x.StatusUpdates }
func (x *ProjectV2) GetTeams() *TeamConnection                          { return x.Teams }
func (x *ProjectV2) GetTemplate() bool                                  { return x.Template }
func (x *ProjectV2) GetTitle() string                                   { return x.Title }
func (x *ProjectV2) GetUpdatedAt() DateTime                             { return x.UpdatedAt }
func (x *ProjectV2) GetUrl() URI                                        { return x.Url }
func (x *ProjectV2) GetView() *ProjectV2View                            { return x.View }
func (x *ProjectV2) GetViewerCanClose() bool                            { return x.ViewerCanClose }
func (x *ProjectV2) GetViewerCanReopen() bool                           { return x.ViewerCanReopen }
func (x *ProjectV2) GetViewerCanUpdate() bool                           { return x.ViewerCanUpdate }
func (x *ProjectV2) GetViews() *ProjectV2ViewConnection                 { return x.Views }
func (x *ProjectV2) GetWorkflow() *ProjectV2Workflow                    { return x.Workflow }
func (x *ProjectV2) GetWorkflows() *ProjectV2WorkflowConnection         { return x.Workflows }

// ProjectV2Actor (UNION): Possible collaborators for a project.
// ProjectV2Actor_Interface: Possible collaborators for a project.
//
// Possible types:
//
//   - *Team
//   - *User
type ProjectV2Actor_Interface interface {
	isProjectV2Actor()
}

func (*Team) isProjectV2Actor() {}
func (*User) isProjectV2Actor() {}

type ProjectV2Actor struct {
	Interface ProjectV2Actor_Interface
}

func (x *ProjectV2Actor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2Actor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2Actor", info.Typename)
	case "Team":
		x.Interface = new(Team)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2ActorConnection (OBJECT): The connection type for ProjectV2Actor.
type ProjectV2ActorConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2ActorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []ProjectV2Actor `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2ActorConnection) GetEdges() []*ProjectV2ActorEdge { return x.Edges }
func (x *ProjectV2ActorConnection) GetNodes() []ProjectV2Actor      { return x.Nodes }
func (x *ProjectV2ActorConnection) GetPageInfo() *PageInfo          { return x.PageInfo }
func (x *ProjectV2ActorConnection) GetTotalCount() int              { return x.TotalCount }

// ProjectV2ActorEdge (OBJECT): An edge in a connection.
type ProjectV2ActorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node ProjectV2Actor `json:"node,omitempty"`
}

func (x *ProjectV2ActorEdge) GetCursor() string       { return x.Cursor }
func (x *ProjectV2ActorEdge) GetNode() ProjectV2Actor { return x.Node }

// ProjectV2Collaborator (INPUT_OBJECT): A collaborator to update on a project. Only one of the userId or teamId should be provided.
type ProjectV2Collaborator struct {
	// UserId: The ID of the user as a collaborator.
	//
	// GraphQL type: ID
	UserId ID `json:"userId,omitempty"`

	// TeamId: The ID of the team as a collaborator.
	//
	// GraphQL type: ID
	TeamId ID `json:"teamId,omitempty"`

	// Role: The role to grant the collaborator.
	//
	// GraphQL type: ProjectV2Roles!
	Role ProjectV2Roles `json:"role,omitempty"`
}

// ProjectV2Connection (OBJECT): The connection type for ProjectV2.
type ProjectV2Connection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2Edge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2 `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2Connection) GetEdges() []*ProjectV2Edge { return x.Edges }
func (x *ProjectV2Connection) GetNodes() []*ProjectV2     { return x.Nodes }
func (x *ProjectV2Connection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *ProjectV2Connection) GetTotalCount() int         { return x.TotalCount }

// ProjectV2CustomFieldType (ENUM): The type of a project field.
type ProjectV2CustomFieldType string

// ProjectV2CustomFieldType_TEXT: Text.
const ProjectV2CustomFieldType_TEXT ProjectV2CustomFieldType = "TEXT"

// ProjectV2CustomFieldType_SINGLE_SELECT: Single Select.
const ProjectV2CustomFieldType_SINGLE_SELECT ProjectV2CustomFieldType = "SINGLE_SELECT"

// ProjectV2CustomFieldType_NUMBER: Number.
const ProjectV2CustomFieldType_NUMBER ProjectV2CustomFieldType = "NUMBER"

// ProjectV2CustomFieldType_DATE: Date.
const ProjectV2CustomFieldType_DATE ProjectV2CustomFieldType = "DATE"

// ProjectV2Edge (OBJECT): An edge in a connection.
type ProjectV2Edge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2 `json:"node,omitempty"`
}

func (x *ProjectV2Edge) GetCursor() string   { return x.Cursor }
func (x *ProjectV2Edge) GetNode() *ProjectV2 { return x.Node }

// ProjectV2Field (OBJECT): A field inside a project.
type ProjectV2Field struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DataType: The field's type.
	DataType ProjectV2FieldType `json:"dataType,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ProjectV2Field object.
	Id ID `json:"id,omitempty"`

	// Name: The project field's name.
	Name string `json:"name,omitempty"`

	// Project: The project that contains this field.
	Project *ProjectV2 `json:"project,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2Field) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *ProjectV2Field) GetDataType() ProjectV2FieldType { return x.DataType }
func (x *ProjectV2Field) GetDatabaseId() int              { return x.DatabaseId }
func (x *ProjectV2Field) GetId() ID                       { return x.Id }
func (x *ProjectV2Field) GetName() string                 { return x.Name }
func (x *ProjectV2Field) GetProject() *ProjectV2          { return x.Project }
func (x *ProjectV2Field) GetUpdatedAt() DateTime          { return x.UpdatedAt }

// ProjectV2FieldCommon (INTERFACE): Common fields across different project field types.
// ProjectV2FieldCommon_Interface: Common fields across different project field types.
//
// Possible types:
//
//   - *ProjectV2Field
//   - *ProjectV2IterationField
//   - *ProjectV2SingleSelectField
type ProjectV2FieldCommon_Interface interface {
	isProjectV2FieldCommon()
	GetCreatedAt() DateTime
	GetDataType() ProjectV2FieldType
	GetDatabaseId() int
	GetId() ID
	GetName() string
	GetProject() *ProjectV2
	GetUpdatedAt() DateTime
}

func (*ProjectV2Field) isProjectV2FieldCommon()             {}
func (*ProjectV2IterationField) isProjectV2FieldCommon()    {}
func (*ProjectV2SingleSelectField) isProjectV2FieldCommon() {}

type ProjectV2FieldCommon struct {
	Interface ProjectV2FieldCommon_Interface
}

func (x *ProjectV2FieldCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2FieldCommon) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2FieldCommon", info.Typename)
	case "ProjectV2Field":
		x.Interface = new(ProjectV2Field)
	case "ProjectV2IterationField":
		x.Interface = new(ProjectV2IterationField)
	case "ProjectV2SingleSelectField":
		x.Interface = new(ProjectV2SingleSelectField)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2FieldConfiguration (UNION): Configurations for project fields.
// ProjectV2FieldConfiguration_Interface: Configurations for project fields.
//
// Possible types:
//
//   - *ProjectV2Field
//   - *ProjectV2IterationField
//   - *ProjectV2SingleSelectField
type ProjectV2FieldConfiguration_Interface interface {
	isProjectV2FieldConfiguration()
}

func (*ProjectV2Field) isProjectV2FieldConfiguration()             {}
func (*ProjectV2IterationField) isProjectV2FieldConfiguration()    {}
func (*ProjectV2SingleSelectField) isProjectV2FieldConfiguration() {}

type ProjectV2FieldConfiguration struct {
	Interface ProjectV2FieldConfiguration_Interface
}

func (x *ProjectV2FieldConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2FieldConfiguration) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2FieldConfiguration", info.Typename)
	case "ProjectV2Field":
		x.Interface = new(ProjectV2Field)
	case "ProjectV2IterationField":
		x.Interface = new(ProjectV2IterationField)
	case "ProjectV2SingleSelectField":
		x.Interface = new(ProjectV2SingleSelectField)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2FieldConfigurationConnection (OBJECT): The connection type for ProjectV2FieldConfiguration.
type ProjectV2FieldConfigurationConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2FieldConfigurationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []ProjectV2FieldConfiguration `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2FieldConfigurationConnection) GetEdges() []*ProjectV2FieldConfigurationEdge {
	return x.Edges
}
func (x *ProjectV2FieldConfigurationConnection) GetNodes() []ProjectV2FieldConfiguration {
	return x.Nodes
}
func (x *ProjectV2FieldConfigurationConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *ProjectV2FieldConfigurationConnection) GetTotalCount() int     { return x.TotalCount }

// ProjectV2FieldConfigurationEdge (OBJECT): An edge in a connection.
type ProjectV2FieldConfigurationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node ProjectV2FieldConfiguration `json:"node,omitempty"`
}

func (x *ProjectV2FieldConfigurationEdge) GetCursor() string                    { return x.Cursor }
func (x *ProjectV2FieldConfigurationEdge) GetNode() ProjectV2FieldConfiguration { return x.Node }

// ProjectV2FieldConnection (OBJECT): The connection type for ProjectV2Field.
type ProjectV2FieldConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2FieldEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2Field `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2FieldConnection) GetEdges() []*ProjectV2FieldEdge { return x.Edges }
func (x *ProjectV2FieldConnection) GetNodes() []*ProjectV2Field     { return x.Nodes }
func (x *ProjectV2FieldConnection) GetPageInfo() *PageInfo          { return x.PageInfo }
func (x *ProjectV2FieldConnection) GetTotalCount() int              { return x.TotalCount }

// ProjectV2FieldEdge (OBJECT): An edge in a connection.
type ProjectV2FieldEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2Field `json:"node,omitempty"`
}

func (x *ProjectV2FieldEdge) GetCursor() string        { return x.Cursor }
func (x *ProjectV2FieldEdge) GetNode() *ProjectV2Field { return x.Node }

// ProjectV2FieldOrder (INPUT_OBJECT): Ordering options for project v2 field connections.
type ProjectV2FieldOrder struct {
	// Field: The field to order the project v2 fields by.
	//
	// GraphQL type: ProjectV2FieldOrderField!
	Field ProjectV2FieldOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2FieldOrderField (ENUM): Properties by which project v2 field connections can be ordered.
type ProjectV2FieldOrderField string

// ProjectV2FieldOrderField_POSITION: Order project v2 fields by position.
const ProjectV2FieldOrderField_POSITION ProjectV2FieldOrderField = "POSITION"

// ProjectV2FieldOrderField_CREATED_AT: Order project v2 fields by creation time.
const ProjectV2FieldOrderField_CREATED_AT ProjectV2FieldOrderField = "CREATED_AT"

// ProjectV2FieldOrderField_NAME: Order project v2 fields by name.
const ProjectV2FieldOrderField_NAME ProjectV2FieldOrderField = "NAME"

// ProjectV2FieldType (ENUM): The type of a project field.
type ProjectV2FieldType string

// ProjectV2FieldType_ASSIGNEES: Assignees.
const ProjectV2FieldType_ASSIGNEES ProjectV2FieldType = "ASSIGNEES"

// ProjectV2FieldType_LINKED_PULL_REQUESTS: Linked Pull Requests.
const ProjectV2FieldType_LINKED_PULL_REQUESTS ProjectV2FieldType = "LINKED_PULL_REQUESTS"

// ProjectV2FieldType_REVIEWERS: Reviewers.
const ProjectV2FieldType_REVIEWERS ProjectV2FieldType = "REVIEWERS"

// ProjectV2FieldType_LABELS: Labels.
const ProjectV2FieldType_LABELS ProjectV2FieldType = "LABELS"

// ProjectV2FieldType_MILESTONE: Milestone.
const ProjectV2FieldType_MILESTONE ProjectV2FieldType = "MILESTONE"

// ProjectV2FieldType_REPOSITORY: Repository.
const ProjectV2FieldType_REPOSITORY ProjectV2FieldType = "REPOSITORY"

// ProjectV2FieldType_TITLE: Title.
const ProjectV2FieldType_TITLE ProjectV2FieldType = "TITLE"

// ProjectV2FieldType_TEXT: Text.
const ProjectV2FieldType_TEXT ProjectV2FieldType = "TEXT"

// ProjectV2FieldType_SINGLE_SELECT: Single Select.
const ProjectV2FieldType_SINGLE_SELECT ProjectV2FieldType = "SINGLE_SELECT"

// ProjectV2FieldType_NUMBER: Number.
const ProjectV2FieldType_NUMBER ProjectV2FieldType = "NUMBER"

// ProjectV2FieldType_DATE: Date.
const ProjectV2FieldType_DATE ProjectV2FieldType = "DATE"

// ProjectV2FieldType_ITERATION: Iteration.
const ProjectV2FieldType_ITERATION ProjectV2FieldType = "ITERATION"

// ProjectV2FieldType_TRACKS: Tracks.
const ProjectV2FieldType_TRACKS ProjectV2FieldType = "TRACKS"

// ProjectV2FieldType_TRACKED_BY: Tracked by.
const ProjectV2FieldType_TRACKED_BY ProjectV2FieldType = "TRACKED_BY"

// ProjectV2FieldType_PARENT_ISSUE: Parent issue.
const ProjectV2FieldType_PARENT_ISSUE ProjectV2FieldType = "PARENT_ISSUE"

// ProjectV2FieldType_SUB_ISSUES_PROGRESS: Sub-issues progress.
const ProjectV2FieldType_SUB_ISSUES_PROGRESS ProjectV2FieldType = "SUB_ISSUES_PROGRESS"

// ProjectV2FieldValue (INPUT_OBJECT): The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
type ProjectV2FieldValue struct {
	// Text: The text to set on the field.
	//
	// GraphQL type: String
	Text string `json:"text,omitempty"`

	// Number: The number to set on the field.
	//
	// GraphQL type: Float
	Number float64 `json:"number,omitempty"`

	// Date: The ISO 8601 date to set on the field.
	//
	// GraphQL type: Date
	Date Date `json:"date,omitempty"`

	// SingleSelectOptionId: The id of the single select option to set on the field.
	//
	// GraphQL type: String
	SingleSelectOptionId string `json:"singleSelectOptionId,omitempty"`

	// IterationId: The id of the iteration to set on the field.
	//
	// GraphQL type: String
	IterationId string `json:"iterationId,omitempty"`
}

// ProjectV2Filters (INPUT_OBJECT): Ways in which to filter lists of projects.
type ProjectV2Filters struct {
	// State: List project v2 filtered by the state given.
	//
	// GraphQL type: ProjectV2State
	State ProjectV2State `json:"state,omitempty"`
}

// ProjectV2Item (OBJECT): An item within a Project.
type ProjectV2Item struct {
	// Content: The content of the referenced draft issue, issue, or pull request.
	Content ProjectV2ItemContent `json:"content,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the item.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// FieldValueByName: The field value of the first project field which matches the 'name' argument that is set on the item.
	//
	// Query arguments:
	//   - name String!
	FieldValueByName ProjectV2ItemFieldValue `json:"fieldValueByName,omitempty"`

	// FieldValues: The field values that are set on the item.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2ItemFieldValueOrder
	FieldValues *ProjectV2ItemFieldValueConnection `json:"fieldValues,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the ProjectV2Item object.
	Id ID `json:"id,omitempty"`

	// IsArchived: Whether the item is archived.
	IsArchived bool `json:"isArchived,omitempty"`

	// Project: The project that contains this item.
	Project *ProjectV2 `json:"project,omitempty"`

	// Type: The type of the item.
	Type ProjectV2ItemType `json:"type,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2Item) GetContent() ProjectV2ItemContent                   { return x.Content }
func (x *ProjectV2Item) GetCreatedAt() DateTime                             { return x.CreatedAt }
func (x *ProjectV2Item) GetCreator() Actor                                  { return x.Creator }
func (x *ProjectV2Item) GetDatabaseId() int                                 { return x.DatabaseId }
func (x *ProjectV2Item) GetFieldValueByName() ProjectV2ItemFieldValue       { return x.FieldValueByName }
func (x *ProjectV2Item) GetFieldValues() *ProjectV2ItemFieldValueConnection { return x.FieldValues }
func (x *ProjectV2Item) GetFullDatabaseId() BigInt                          { return x.FullDatabaseId }
func (x *ProjectV2Item) GetId() ID                                          { return x.Id }
func (x *ProjectV2Item) GetIsArchived() bool                                { return x.IsArchived }
func (x *ProjectV2Item) GetProject() *ProjectV2                             { return x.Project }
func (x *ProjectV2Item) GetType() ProjectV2ItemType                         { return x.Type }
func (x *ProjectV2Item) GetUpdatedAt() DateTime                             { return x.UpdatedAt }

// ProjectV2ItemConnection (OBJECT): The connection type for ProjectV2Item.
type ProjectV2ItemConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2ItemEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2Item `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2ItemConnection) GetEdges() []*ProjectV2ItemEdge { return x.Edges }
func (x *ProjectV2ItemConnection) GetNodes() []*ProjectV2Item     { return x.Nodes }
func (x *ProjectV2ItemConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *ProjectV2ItemConnection) GetTotalCount() int             { return x.TotalCount }

// ProjectV2ItemContent (UNION): Types that can be inside Project Items.
// ProjectV2ItemContent_Interface: Types that can be inside Project Items.
//
// Possible types:
//
//   - *DraftIssue
//   - *Issue
//   - *PullRequest
type ProjectV2ItemContent_Interface interface {
	isProjectV2ItemContent()
}

func (*DraftIssue) isProjectV2ItemContent()  {}
func (*Issue) isProjectV2ItemContent()       {}
func (*PullRequest) isProjectV2ItemContent() {}

type ProjectV2ItemContent struct {
	Interface ProjectV2ItemContent_Interface
}

func (x *ProjectV2ItemContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2ItemContent) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2ItemContent", info.Typename)
	case "DraftIssue":
		x.Interface = new(DraftIssue)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2ItemEdge (OBJECT): An edge in a connection.
type ProjectV2ItemEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2Item `json:"node,omitempty"`
}

func (x *ProjectV2ItemEdge) GetCursor() string       { return x.Cursor }
func (x *ProjectV2ItemEdge) GetNode() *ProjectV2Item { return x.Node }

// ProjectV2ItemFieldDateValue (OBJECT): The value of a date field in a Project item.
type ProjectV2ItemFieldDateValue struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the item.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Date: Date value for the field.
	Date Date `json:"date,omitempty"`

	// Field: The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Id: The Node ID of the ProjectV2ItemFieldDateValue object.
	Id ID `json:"id,omitempty"`

	// Item: The project item that contains this value.
	Item *ProjectV2Item `json:"item,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2ItemFieldDateValue) GetCreatedAt() DateTime                { return x.CreatedAt }
func (x *ProjectV2ItemFieldDateValue) GetCreator() Actor                     { return x.Creator }
func (x *ProjectV2ItemFieldDateValue) GetDatabaseId() int                    { return x.DatabaseId }
func (x *ProjectV2ItemFieldDateValue) GetDate() Date                         { return x.Date }
func (x *ProjectV2ItemFieldDateValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldDateValue) GetId() ID                             { return x.Id }
func (x *ProjectV2ItemFieldDateValue) GetItem() *ProjectV2Item               { return x.Item }
func (x *ProjectV2ItemFieldDateValue) GetUpdatedAt() DateTime                { return x.UpdatedAt }

// ProjectV2ItemFieldIterationValue (OBJECT): The value of an iteration field in a Project item.
type ProjectV2ItemFieldIterationValue struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the item.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Duration: The duration of the iteration in days.
	Duration int `json:"duration,omitempty"`

	// Field: The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Id: The Node ID of the ProjectV2ItemFieldIterationValue object.
	Id ID `json:"id,omitempty"`

	// Item: The project item that contains this value.
	Item *ProjectV2Item `json:"item,omitempty"`

	// IterationId: The ID of the iteration.
	IterationId string `json:"iterationId,omitempty"`

	// StartDate: The start date of the iteration.
	StartDate Date `json:"startDate,omitempty"`

	// Title: The title of the iteration.
	Title string `json:"title,omitempty"`

	// TitleHTML: The title of the iteration, with HTML.
	TitleHTML string `json:"titleHTML,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2ItemFieldIterationValue) GetCreatedAt() DateTime                { return x.CreatedAt }
func (x *ProjectV2ItemFieldIterationValue) GetCreator() Actor                     { return x.Creator }
func (x *ProjectV2ItemFieldIterationValue) GetDatabaseId() int                    { return x.DatabaseId }
func (x *ProjectV2ItemFieldIterationValue) GetDuration() int                      { return x.Duration }
func (x *ProjectV2ItemFieldIterationValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldIterationValue) GetId() ID                             { return x.Id }
func (x *ProjectV2ItemFieldIterationValue) GetItem() *ProjectV2Item               { return x.Item }
func (x *ProjectV2ItemFieldIterationValue) GetIterationId() string                { return x.IterationId }
func (x *ProjectV2ItemFieldIterationValue) GetStartDate() Date                    { return x.StartDate }
func (x *ProjectV2ItemFieldIterationValue) GetTitle() string                      { return x.Title }
func (x *ProjectV2ItemFieldIterationValue) GetTitleHTML() string                  { return x.TitleHTML }
func (x *ProjectV2ItemFieldIterationValue) GetUpdatedAt() DateTime                { return x.UpdatedAt }

// ProjectV2ItemFieldLabelValue (OBJECT): The value of the labels field in a Project item.
type ProjectV2ItemFieldLabelValue struct {
	// Field: The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Labels: Labels value of a field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Labels *LabelConnection `json:"labels,omitempty"`
}

func (x *ProjectV2ItemFieldLabelValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldLabelValue) GetLabels() *LabelConnection           { return x.Labels }

// ProjectV2ItemFieldMilestoneValue (OBJECT): The value of a milestone field in a Project item.
type ProjectV2ItemFieldMilestoneValue struct {
	// Field: The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Milestone: Milestone value of a field.
	Milestone *Milestone `json:"milestone,omitempty"`
}

func (x *ProjectV2ItemFieldMilestoneValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldMilestoneValue) GetMilestone() *Milestone              { return x.Milestone }

// ProjectV2ItemFieldNumberValue (OBJECT): The value of a number field in a Project item.
type ProjectV2ItemFieldNumberValue struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the item.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Field: The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Id: The Node ID of the ProjectV2ItemFieldNumberValue object.
	Id ID `json:"id,omitempty"`

	// Item: The project item that contains this value.
	Item *ProjectV2Item `json:"item,omitempty"`

	// Number: Number as a float(8).
	Number float64 `json:"number,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2ItemFieldNumberValue) GetCreatedAt() DateTime                { return x.CreatedAt }
func (x *ProjectV2ItemFieldNumberValue) GetCreator() Actor                     { return x.Creator }
func (x *ProjectV2ItemFieldNumberValue) GetDatabaseId() int                    { return x.DatabaseId }
func (x *ProjectV2ItemFieldNumberValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldNumberValue) GetId() ID                             { return x.Id }
func (x *ProjectV2ItemFieldNumberValue) GetItem() *ProjectV2Item               { return x.Item }
func (x *ProjectV2ItemFieldNumberValue) GetNumber() float64                    { return x.Number }
func (x *ProjectV2ItemFieldNumberValue) GetUpdatedAt() DateTime                { return x.UpdatedAt }

// ProjectV2ItemFieldPullRequestValue (OBJECT): The value of a pull request field in a Project item.
type ProjectV2ItemFieldPullRequestValue struct {
	// Field: The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// PullRequests: The pull requests for this field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy PullRequestOrder
	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`
}

func (x *ProjectV2ItemFieldPullRequestValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldPullRequestValue) GetPullRequests() *PullRequestConnection {
	return x.PullRequests
}

// ProjectV2ItemFieldRepositoryValue (OBJECT): The value of a repository field in a Project item.
type ProjectV2ItemFieldRepositoryValue struct {
	// Field: The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Repository: The repository for this field.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *ProjectV2ItemFieldRepositoryValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldRepositoryValue) GetRepository() *Repository            { return x.Repository }

// ProjectV2ItemFieldReviewerValue (OBJECT): The value of a reviewers field in a Project item.
type ProjectV2ItemFieldReviewerValue struct {
	// Field: The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Reviewers: The reviewers for this field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Reviewers *RequestedReviewerConnection `json:"reviewers,omitempty"`
}

func (x *ProjectV2ItemFieldReviewerValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldReviewerValue) GetReviewers() *RequestedReviewerConnection {
	return x.Reviewers
}

// ProjectV2ItemFieldSingleSelectValue (OBJECT): The value of a single select field in a Project item.
type ProjectV2ItemFieldSingleSelectValue struct {
	// Color: The color applied to the selected single-select option.
	Color ProjectV2SingleSelectFieldOptionColor `json:"color,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the item.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: A plain-text description of the selected single-select option, such as what the option means.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The description of the selected single-select option, including HTML tags.
	DescriptionHTML string `json:"descriptionHTML,omitempty"`

	// Field: The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Id: The Node ID of the ProjectV2ItemFieldSingleSelectValue object.
	Id ID `json:"id,omitempty"`

	// Item: The project item that contains this value.
	Item *ProjectV2Item `json:"item,omitempty"`

	// Name: The name of the selected single select option.
	Name string `json:"name,omitempty"`

	// NameHTML: The html name of the selected single select option.
	NameHTML string `json:"nameHTML,omitempty"`

	// OptionId: The id of the selected single select option.
	OptionId string `json:"optionId,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2ItemFieldSingleSelectValue) GetColor() ProjectV2SingleSelectFieldOptionColor {
	return x.Color
}
func (x *ProjectV2ItemFieldSingleSelectValue) GetCreatedAt() DateTime                { return x.CreatedAt }
func (x *ProjectV2ItemFieldSingleSelectValue) GetCreator() Actor                     { return x.Creator }
func (x *ProjectV2ItemFieldSingleSelectValue) GetDatabaseId() int                    { return x.DatabaseId }
func (x *ProjectV2ItemFieldSingleSelectValue) GetDescription() string                { return x.Description }
func (x *ProjectV2ItemFieldSingleSelectValue) GetDescriptionHTML() string            { return x.DescriptionHTML }
func (x *ProjectV2ItemFieldSingleSelectValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldSingleSelectValue) GetId() ID                             { return x.Id }
func (x *ProjectV2ItemFieldSingleSelectValue) GetItem() *ProjectV2Item               { return x.Item }
func (x *ProjectV2ItemFieldSingleSelectValue) GetName() string                       { return x.Name }
func (x *ProjectV2ItemFieldSingleSelectValue) GetNameHTML() string                   { return x.NameHTML }
func (x *ProjectV2ItemFieldSingleSelectValue) GetOptionId() string                   { return x.OptionId }
func (x *ProjectV2ItemFieldSingleSelectValue) GetUpdatedAt() DateTime                { return x.UpdatedAt }

// ProjectV2ItemFieldTextValue (OBJECT): The value of a text field in a Project item.
type ProjectV2ItemFieldTextValue struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the item.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Field: The project field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Id: The Node ID of the ProjectV2ItemFieldTextValue object.
	Id ID `json:"id,omitempty"`

	// Item: The project item that contains this value.
	Item *ProjectV2Item `json:"item,omitempty"`

	// Text: Text value of a field.
	Text string `json:"text,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2ItemFieldTextValue) GetCreatedAt() DateTime                { return x.CreatedAt }
func (x *ProjectV2ItemFieldTextValue) GetCreator() Actor                     { return x.Creator }
func (x *ProjectV2ItemFieldTextValue) GetDatabaseId() int                    { return x.DatabaseId }
func (x *ProjectV2ItemFieldTextValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldTextValue) GetId() ID                             { return x.Id }
func (x *ProjectV2ItemFieldTextValue) GetItem() *ProjectV2Item               { return x.Item }
func (x *ProjectV2ItemFieldTextValue) GetText() string                       { return x.Text }
func (x *ProjectV2ItemFieldTextValue) GetUpdatedAt() DateTime                { return x.UpdatedAt }

// ProjectV2ItemFieldUserValue (OBJECT): The value of a user field in a Project item.
type ProjectV2ItemFieldUserValue struct {
	// Field: The field that contains this value.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`

	// Users: The users for this field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Users *UserConnection `json:"users,omitempty"`
}

func (x *ProjectV2ItemFieldUserValue) GetField() ProjectV2FieldConfiguration { return x.Field }
func (x *ProjectV2ItemFieldUserValue) GetUsers() *UserConnection             { return x.Users }

// ProjectV2ItemFieldValue (UNION): Project field values.
// ProjectV2ItemFieldValue_Interface: Project field values.
//
// Possible types:
//
//   - *ProjectV2ItemFieldDateValue
//   - *ProjectV2ItemFieldIterationValue
//   - *ProjectV2ItemFieldLabelValue
//   - *ProjectV2ItemFieldMilestoneValue
//   - *ProjectV2ItemFieldNumberValue
//   - *ProjectV2ItemFieldPullRequestValue
//   - *ProjectV2ItemFieldRepositoryValue
//   - *ProjectV2ItemFieldReviewerValue
//   - *ProjectV2ItemFieldSingleSelectValue
//   - *ProjectV2ItemFieldTextValue
//   - *ProjectV2ItemFieldUserValue
type ProjectV2ItemFieldValue_Interface interface {
	isProjectV2ItemFieldValue()
}

func (*ProjectV2ItemFieldDateValue) isProjectV2ItemFieldValue()         {}
func (*ProjectV2ItemFieldIterationValue) isProjectV2ItemFieldValue()    {}
func (*ProjectV2ItemFieldLabelValue) isProjectV2ItemFieldValue()        {}
func (*ProjectV2ItemFieldMilestoneValue) isProjectV2ItemFieldValue()    {}
func (*ProjectV2ItemFieldNumberValue) isProjectV2ItemFieldValue()       {}
func (*ProjectV2ItemFieldPullRequestValue) isProjectV2ItemFieldValue()  {}
func (*ProjectV2ItemFieldRepositoryValue) isProjectV2ItemFieldValue()   {}
func (*ProjectV2ItemFieldReviewerValue) isProjectV2ItemFieldValue()     {}
func (*ProjectV2ItemFieldSingleSelectValue) isProjectV2ItemFieldValue() {}
func (*ProjectV2ItemFieldTextValue) isProjectV2ItemFieldValue()         {}
func (*ProjectV2ItemFieldUserValue) isProjectV2ItemFieldValue()         {}

type ProjectV2ItemFieldValue struct {
	Interface ProjectV2ItemFieldValue_Interface
}

func (x *ProjectV2ItemFieldValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2ItemFieldValue) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2ItemFieldValue", info.Typename)
	case "ProjectV2ItemFieldDateValue":
		x.Interface = new(ProjectV2ItemFieldDateValue)
	case "ProjectV2ItemFieldIterationValue":
		x.Interface = new(ProjectV2ItemFieldIterationValue)
	case "ProjectV2ItemFieldLabelValue":
		x.Interface = new(ProjectV2ItemFieldLabelValue)
	case "ProjectV2ItemFieldMilestoneValue":
		x.Interface = new(ProjectV2ItemFieldMilestoneValue)
	case "ProjectV2ItemFieldNumberValue":
		x.Interface = new(ProjectV2ItemFieldNumberValue)
	case "ProjectV2ItemFieldPullRequestValue":
		x.Interface = new(ProjectV2ItemFieldPullRequestValue)
	case "ProjectV2ItemFieldRepositoryValue":
		x.Interface = new(ProjectV2ItemFieldRepositoryValue)
	case "ProjectV2ItemFieldReviewerValue":
		x.Interface = new(ProjectV2ItemFieldReviewerValue)
	case "ProjectV2ItemFieldSingleSelectValue":
		x.Interface = new(ProjectV2ItemFieldSingleSelectValue)
	case "ProjectV2ItemFieldTextValue":
		x.Interface = new(ProjectV2ItemFieldTextValue)
	case "ProjectV2ItemFieldUserValue":
		x.Interface = new(ProjectV2ItemFieldUserValue)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2ItemFieldValueCommon (INTERFACE): Common fields across different project field value types.
// ProjectV2ItemFieldValueCommon_Interface: Common fields across different project field value types.
//
// Possible types:
//
//   - *ProjectV2ItemFieldDateValue
//   - *ProjectV2ItemFieldIterationValue
//   - *ProjectV2ItemFieldNumberValue
//   - *ProjectV2ItemFieldSingleSelectValue
//   - *ProjectV2ItemFieldTextValue
type ProjectV2ItemFieldValueCommon_Interface interface {
	isProjectV2ItemFieldValueCommon()
	GetCreatedAt() DateTime
	GetCreator() Actor
	GetDatabaseId() int
	GetField() ProjectV2FieldConfiguration
	GetId() ID
	GetItem() *ProjectV2Item
	GetUpdatedAt() DateTime
}

func (*ProjectV2ItemFieldDateValue) isProjectV2ItemFieldValueCommon()         {}
func (*ProjectV2ItemFieldIterationValue) isProjectV2ItemFieldValueCommon()    {}
func (*ProjectV2ItemFieldNumberValue) isProjectV2ItemFieldValueCommon()       {}
func (*ProjectV2ItemFieldSingleSelectValue) isProjectV2ItemFieldValueCommon() {}
func (*ProjectV2ItemFieldTextValue) isProjectV2ItemFieldValueCommon()         {}

type ProjectV2ItemFieldValueCommon struct {
	Interface ProjectV2ItemFieldValueCommon_Interface
}

func (x *ProjectV2ItemFieldValueCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2ItemFieldValueCommon) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2ItemFieldValueCommon", info.Typename)
	case "ProjectV2ItemFieldDateValue":
		x.Interface = new(ProjectV2ItemFieldDateValue)
	case "ProjectV2ItemFieldIterationValue":
		x.Interface = new(ProjectV2ItemFieldIterationValue)
	case "ProjectV2ItemFieldNumberValue":
		x.Interface = new(ProjectV2ItemFieldNumberValue)
	case "ProjectV2ItemFieldSingleSelectValue":
		x.Interface = new(ProjectV2ItemFieldSingleSelectValue)
	case "ProjectV2ItemFieldTextValue":
		x.Interface = new(ProjectV2ItemFieldTextValue)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2ItemFieldValueConnection (OBJECT): The connection type for ProjectV2ItemFieldValue.
type ProjectV2ItemFieldValueConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2ItemFieldValueEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []ProjectV2ItemFieldValue `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2ItemFieldValueConnection) GetEdges() []*ProjectV2ItemFieldValueEdge { return x.Edges }
func (x *ProjectV2ItemFieldValueConnection) GetNodes() []ProjectV2ItemFieldValue      { return x.Nodes }
func (x *ProjectV2ItemFieldValueConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *ProjectV2ItemFieldValueConnection) GetTotalCount() int                       { return x.TotalCount }

// ProjectV2ItemFieldValueEdge (OBJECT): An edge in a connection.
type ProjectV2ItemFieldValueEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node ProjectV2ItemFieldValue `json:"node,omitempty"`
}

func (x *ProjectV2ItemFieldValueEdge) GetCursor() string                { return x.Cursor }
func (x *ProjectV2ItemFieldValueEdge) GetNode() ProjectV2ItemFieldValue { return x.Node }

// ProjectV2ItemFieldValueOrder (INPUT_OBJECT): Ordering options for project v2 item field value connections.
type ProjectV2ItemFieldValueOrder struct {
	// Field: The field to order the project v2 item field values by.
	//
	// GraphQL type: ProjectV2ItemFieldValueOrderField!
	Field ProjectV2ItemFieldValueOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2ItemFieldValueOrderField (ENUM): Properties by which project v2 item field value connections can be ordered.
type ProjectV2ItemFieldValueOrderField string

// ProjectV2ItemFieldValueOrderField_POSITION: Order project v2 item field values by the their position in the project.
const ProjectV2ItemFieldValueOrderField_POSITION ProjectV2ItemFieldValueOrderField = "POSITION"

// ProjectV2ItemOrder (INPUT_OBJECT): Ordering options for project v2 item connections.
type ProjectV2ItemOrder struct {
	// Field: The field to order the project v2 items by.
	//
	// GraphQL type: ProjectV2ItemOrderField!
	Field ProjectV2ItemOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2ItemOrderField (ENUM): Properties by which project v2 item connections can be ordered.
type ProjectV2ItemOrderField string

// ProjectV2ItemOrderField_POSITION: Order project v2 items by the their position in the project.
const ProjectV2ItemOrderField_POSITION ProjectV2ItemOrderField = "POSITION"

// ProjectV2ItemType (ENUM): The type of a project item.
type ProjectV2ItemType string

// ProjectV2ItemType_ISSUE: Issue.
const ProjectV2ItemType_ISSUE ProjectV2ItemType = "ISSUE"

// ProjectV2ItemType_PULL_REQUEST: Pull Request.
const ProjectV2ItemType_PULL_REQUEST ProjectV2ItemType = "PULL_REQUEST"

// ProjectV2ItemType_DRAFT_ISSUE: Draft Issue.
const ProjectV2ItemType_DRAFT_ISSUE ProjectV2ItemType = "DRAFT_ISSUE"

// ProjectV2ItemType_REDACTED: Redacted Item.
const ProjectV2ItemType_REDACTED ProjectV2ItemType = "REDACTED"

// ProjectV2IterationField (OBJECT): An iteration field inside a project.
type ProjectV2IterationField struct {
	// Configuration: Iteration configuration settings.
	Configuration *ProjectV2IterationFieldConfiguration `json:"configuration,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DataType: The field's type.
	DataType ProjectV2FieldType `json:"dataType,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ProjectV2IterationField object.
	Id ID `json:"id,omitempty"`

	// Name: The project field's name.
	Name string `json:"name,omitempty"`

	// Project: The project that contains this field.
	Project *ProjectV2 `json:"project,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2IterationField) GetConfiguration() *ProjectV2IterationFieldConfiguration {
	return x.Configuration
}
func (x *ProjectV2IterationField) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *ProjectV2IterationField) GetDataType() ProjectV2FieldType { return x.DataType }
func (x *ProjectV2IterationField) GetDatabaseId() int              { return x.DatabaseId }
func (x *ProjectV2IterationField) GetId() ID                       { return x.Id }
func (x *ProjectV2IterationField) GetName() string                 { return x.Name }
func (x *ProjectV2IterationField) GetProject() *ProjectV2          { return x.Project }
func (x *ProjectV2IterationField) GetUpdatedAt() DateTime          { return x.UpdatedAt }

// ProjectV2IterationFieldConfiguration (OBJECT): Iteration field configuration for a project.
type ProjectV2IterationFieldConfiguration struct {
	// CompletedIterations: The iteration's completed iterations.
	CompletedIterations []*ProjectV2IterationFieldIteration `json:"completedIterations,omitempty"`

	// Duration: The iteration's duration in days.
	Duration int `json:"duration,omitempty"`

	// Iterations: The iteration's iterations.
	Iterations []*ProjectV2IterationFieldIteration `json:"iterations,omitempty"`

	// StartDay: The iteration's start day of the week.
	StartDay int `json:"startDay,omitempty"`
}

func (x *ProjectV2IterationFieldConfiguration) GetCompletedIterations() []*ProjectV2IterationFieldIteration {
	return x.CompletedIterations
}
func (x *ProjectV2IterationFieldConfiguration) GetDuration() int { return x.Duration }
func (x *ProjectV2IterationFieldConfiguration) GetIterations() []*ProjectV2IterationFieldIteration {
	return x.Iterations
}
func (x *ProjectV2IterationFieldConfiguration) GetStartDay() int { return x.StartDay }

// ProjectV2IterationFieldIteration (OBJECT): Iteration field iteration settings for a project.
type ProjectV2IterationFieldIteration struct {
	// Duration: The iteration's duration in days.
	Duration int `json:"duration,omitempty"`

	// Id: The iteration's ID.
	Id string `json:"id,omitempty"`

	// StartDate: The iteration's start date.
	StartDate Date `json:"startDate,omitempty"`

	// Title: The iteration's title.
	Title string `json:"title,omitempty"`

	// TitleHTML: The iteration's html title.
	TitleHTML string `json:"titleHTML,omitempty"`
}

func (x *ProjectV2IterationFieldIteration) GetDuration() int     { return x.Duration }
func (x *ProjectV2IterationFieldIteration) GetId() string        { return x.Id }
func (x *ProjectV2IterationFieldIteration) GetStartDate() Date   { return x.StartDate }
func (x *ProjectV2IterationFieldIteration) GetTitle() string     { return x.Title }
func (x *ProjectV2IterationFieldIteration) GetTitleHTML() string { return x.TitleHTML }

// ProjectV2Order (INPUT_OBJECT): Ways in which lists of projects can be ordered upon return.
type ProjectV2Order struct {
	// Field: The field in which to order projects by.
	//
	// GraphQL type: ProjectV2OrderField!
	Field ProjectV2OrderField `json:"field,omitempty"`

	// Direction: The direction in which to order projects by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2OrderField (ENUM): Properties by which projects can be ordered.
type ProjectV2OrderField string

// ProjectV2OrderField_TITLE: The project's title.
const ProjectV2OrderField_TITLE ProjectV2OrderField = "TITLE"

// ProjectV2OrderField_NUMBER: The project's number.
const ProjectV2OrderField_NUMBER ProjectV2OrderField = "NUMBER"

// ProjectV2OrderField_UPDATED_AT: The project's date and time of update.
const ProjectV2OrderField_UPDATED_AT ProjectV2OrderField = "UPDATED_AT"

// ProjectV2OrderField_CREATED_AT: The project's date and time of creation.
const ProjectV2OrderField_CREATED_AT ProjectV2OrderField = "CREATED_AT"

// ProjectV2Owner (INTERFACE): Represents an owner of a project.
// ProjectV2Owner_Interface: Represents an owner of a project.
//
// Possible types:
//
//   - *Issue
//   - *Organization
//   - *PullRequest
//   - *User
type ProjectV2Owner_Interface interface {
	isProjectV2Owner()
	GetId() ID
	GetProjectV2() *ProjectV2
	GetProjectsV2() *ProjectV2Connection
}

func (*Issue) isProjectV2Owner()        {}
func (*Organization) isProjectV2Owner() {}
func (*PullRequest) isProjectV2Owner()  {}
func (*User) isProjectV2Owner()         {}

type ProjectV2Owner struct {
	Interface ProjectV2Owner_Interface
}

func (x *ProjectV2Owner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2Owner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2Owner", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "Organization":
		x.Interface = new(Organization)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2PermissionLevel (ENUM): The possible roles of a collaborator on a project.
type ProjectV2PermissionLevel string

// ProjectV2PermissionLevel_READ: The collaborator can view the project.
const ProjectV2PermissionLevel_READ ProjectV2PermissionLevel = "READ"

// ProjectV2PermissionLevel_WRITE: The collaborator can view and edit the project.
const ProjectV2PermissionLevel_WRITE ProjectV2PermissionLevel = "WRITE"

// ProjectV2PermissionLevel_ADMIN: The collaborator can view, edit, and maange the settings of the project.
const ProjectV2PermissionLevel_ADMIN ProjectV2PermissionLevel = "ADMIN"

// ProjectV2Recent (INTERFACE): Recent projects for the owner.
// ProjectV2Recent_Interface: Recent projects for the owner.
//
// Possible types:
//
//   - *Organization
//   - *Repository
//   - *User
type ProjectV2Recent_Interface interface {
	isProjectV2Recent()
	GetRecentProjects() *ProjectV2Connection
}

func (*Organization) isProjectV2Recent() {}
func (*Repository) isProjectV2Recent()   {}
func (*User) isProjectV2Recent()         {}

type ProjectV2Recent struct {
	Interface ProjectV2Recent_Interface
}

func (x *ProjectV2Recent) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ProjectV2Recent) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ProjectV2Recent", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "Repository":
		x.Interface = new(Repository)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ProjectV2Roles (ENUM): The possible roles of a collaborator on a project.
type ProjectV2Roles string

// ProjectV2Roles_NONE: The collaborator has no direct access to the project.
const ProjectV2Roles_NONE ProjectV2Roles = "NONE"

// ProjectV2Roles_READER: The collaborator can view the project.
const ProjectV2Roles_READER ProjectV2Roles = "READER"

// ProjectV2Roles_WRITER: The collaborator can view and edit the project.
const ProjectV2Roles_WRITER ProjectV2Roles = "WRITER"

// ProjectV2Roles_ADMIN: The collaborator can view, edit, and maange the settings of the project.
const ProjectV2Roles_ADMIN ProjectV2Roles = "ADMIN"

// ProjectV2SingleSelectField (OBJECT): A single select field inside a project.
type ProjectV2SingleSelectField struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DataType: The field's type.
	DataType ProjectV2FieldType `json:"dataType,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ProjectV2SingleSelectField object.
	Id ID `json:"id,omitempty"`

	// Name: The project field's name.
	Name string `json:"name,omitempty"`

	// Options: Options for the single select field.
	//
	// Query arguments:
	//   - names [String!]
	Options []*ProjectV2SingleSelectFieldOption `json:"options,omitempty"`

	// Project: The project that contains this field.
	Project *ProjectV2 `json:"project,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2SingleSelectField) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *ProjectV2SingleSelectField) GetDataType() ProjectV2FieldType { return x.DataType }
func (x *ProjectV2SingleSelectField) GetDatabaseId() int              { return x.DatabaseId }
func (x *ProjectV2SingleSelectField) GetId() ID                       { return x.Id }
func (x *ProjectV2SingleSelectField) GetName() string                 { return x.Name }
func (x *ProjectV2SingleSelectField) GetOptions() []*ProjectV2SingleSelectFieldOption {
	return x.Options
}
func (x *ProjectV2SingleSelectField) GetProject() *ProjectV2 { return x.Project }
func (x *ProjectV2SingleSelectField) GetUpdatedAt() DateTime { return x.UpdatedAt }

// ProjectV2SingleSelectFieldOption (OBJECT): Single select field option for a configuration for a project.
type ProjectV2SingleSelectFieldOption struct {
	// Color: The option's display color.
	Color ProjectV2SingleSelectFieldOptionColor `json:"color,omitempty"`

	// Description: The option's plain-text description.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The option's description, possibly containing HTML.
	DescriptionHTML string `json:"descriptionHTML,omitempty"`

	// Id: The option's ID.
	Id string `json:"id,omitempty"`

	// Name: The option's name.
	Name string `json:"name,omitempty"`

	// NameHTML: The option's html name.
	NameHTML string `json:"nameHTML,omitempty"`
}

func (x *ProjectV2SingleSelectFieldOption) GetColor() ProjectV2SingleSelectFieldOptionColor {
	return x.Color
}
func (x *ProjectV2SingleSelectFieldOption) GetDescription() string     { return x.Description }
func (x *ProjectV2SingleSelectFieldOption) GetDescriptionHTML() string { return x.DescriptionHTML }
func (x *ProjectV2SingleSelectFieldOption) GetId() string              { return x.Id }
func (x *ProjectV2SingleSelectFieldOption) GetName() string            { return x.Name }
func (x *ProjectV2SingleSelectFieldOption) GetNameHTML() string        { return x.NameHTML }

// ProjectV2SingleSelectFieldOptionColor (ENUM): The display color of a single-select field option.
type ProjectV2SingleSelectFieldOptionColor string

// ProjectV2SingleSelectFieldOptionColor_GRAY: GRAY.
const ProjectV2SingleSelectFieldOptionColor_GRAY ProjectV2SingleSelectFieldOptionColor = "GRAY"

// ProjectV2SingleSelectFieldOptionColor_BLUE: BLUE.
const ProjectV2SingleSelectFieldOptionColor_BLUE ProjectV2SingleSelectFieldOptionColor = "BLUE"

// ProjectV2SingleSelectFieldOptionColor_GREEN: GREEN.
const ProjectV2SingleSelectFieldOptionColor_GREEN ProjectV2SingleSelectFieldOptionColor = "GREEN"

// ProjectV2SingleSelectFieldOptionColor_YELLOW: YELLOW.
const ProjectV2SingleSelectFieldOptionColor_YELLOW ProjectV2SingleSelectFieldOptionColor = "YELLOW"

// ProjectV2SingleSelectFieldOptionColor_ORANGE: ORANGE.
const ProjectV2SingleSelectFieldOptionColor_ORANGE ProjectV2SingleSelectFieldOptionColor = "ORANGE"

// ProjectV2SingleSelectFieldOptionColor_RED: RED.
const ProjectV2SingleSelectFieldOptionColor_RED ProjectV2SingleSelectFieldOptionColor = "RED"

// ProjectV2SingleSelectFieldOptionColor_PINK: PINK.
const ProjectV2SingleSelectFieldOptionColor_PINK ProjectV2SingleSelectFieldOptionColor = "PINK"

// ProjectV2SingleSelectFieldOptionColor_PURPLE: PURPLE.
const ProjectV2SingleSelectFieldOptionColor_PURPLE ProjectV2SingleSelectFieldOptionColor = "PURPLE"

// ProjectV2SingleSelectFieldOptionInput (INPUT_OBJECT): Represents a single select field option.
type ProjectV2SingleSelectFieldOptionInput struct {
	// Name: The name of the option.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// Color: The display color of the option.
	//
	// GraphQL type: ProjectV2SingleSelectFieldOptionColor!
	Color ProjectV2SingleSelectFieldOptionColor `json:"color,omitempty"`

	// Description: The description text of the option.
	//
	// GraphQL type: String!
	Description string `json:"description,omitempty"`
}

// ProjectV2SortBy (OBJECT): Represents a sort by field and direction.
type ProjectV2SortBy struct {
	// Direction: The direction of the sorting. Possible values are ASC and DESC.
	Direction OrderDirection `json:"direction,omitempty"`

	// Field: The field by which items are sorted.
	Field *ProjectV2Field `json:"field,omitempty"`
}

func (x *ProjectV2SortBy) GetDirection() OrderDirection { return x.Direction }
func (x *ProjectV2SortBy) GetField() *ProjectV2Field    { return x.Field }

// ProjectV2SortByConnection (OBJECT): The connection type for ProjectV2SortBy.
type ProjectV2SortByConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2SortByEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2SortBy `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2SortByConnection) GetEdges() []*ProjectV2SortByEdge { return x.Edges }
func (x *ProjectV2SortByConnection) GetNodes() []*ProjectV2SortBy     { return x.Nodes }
func (x *ProjectV2SortByConnection) GetPageInfo() *PageInfo           { return x.PageInfo }
func (x *ProjectV2SortByConnection) GetTotalCount() int               { return x.TotalCount }

// ProjectV2SortByEdge (OBJECT): An edge in a connection.
type ProjectV2SortByEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2SortBy `json:"node,omitempty"`
}

func (x *ProjectV2SortByEdge) GetCursor() string         { return x.Cursor }
func (x *ProjectV2SortByEdge) GetNode() *ProjectV2SortBy { return x.Node }

// ProjectV2SortByField (OBJECT): Represents a sort by field and direction.
type ProjectV2SortByField struct {
	// Direction: The direction of the sorting. Possible values are ASC and DESC.
	Direction OrderDirection `json:"direction,omitempty"`

	// Field: The field by which items are sorted.
	Field ProjectV2FieldConfiguration `json:"field,omitempty"`
}

func (x *ProjectV2SortByField) GetDirection() OrderDirection          { return x.Direction }
func (x *ProjectV2SortByField) GetField() ProjectV2FieldConfiguration { return x.Field }

// ProjectV2SortByFieldConnection (OBJECT): The connection type for ProjectV2SortByField.
type ProjectV2SortByFieldConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2SortByFieldEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2SortByField `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2SortByFieldConnection) GetEdges() []*ProjectV2SortByFieldEdge { return x.Edges }
func (x *ProjectV2SortByFieldConnection) GetNodes() []*ProjectV2SortByField     { return x.Nodes }
func (x *ProjectV2SortByFieldConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *ProjectV2SortByFieldConnection) GetTotalCount() int                    { return x.TotalCount }

// ProjectV2SortByFieldEdge (OBJECT): An edge in a connection.
type ProjectV2SortByFieldEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2SortByField `json:"node,omitempty"`
}

func (x *ProjectV2SortByFieldEdge) GetCursor() string              { return x.Cursor }
func (x *ProjectV2SortByFieldEdge) GetNode() *ProjectV2SortByField { return x.Node }

// ProjectV2State (ENUM): The possible states of a project v2.
type ProjectV2State string

// ProjectV2State_OPEN: A project v2 that is still open.
const ProjectV2State_OPEN ProjectV2State = "OPEN"

// ProjectV2State_CLOSED: A project v2 that has been closed.
const ProjectV2State_CLOSED ProjectV2State = "CLOSED"

// ProjectV2StatusOrder (INPUT_OBJECT): Ways in which project v2 status updates can be ordered.
type ProjectV2StatusOrder struct {
	// Field: The field by which to order nodes.
	//
	// GraphQL type: ProjectV2StatusUpdateOrderField!
	Field ProjectV2StatusUpdateOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order nodes.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2StatusUpdate (OBJECT): A status update within a project.
type ProjectV2StatusUpdate struct {
	// Body: The body of the status update.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body of the status update rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created the status update.
	Creator Actor `json:"creator,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the ProjectV2StatusUpdate object.
	Id ID `json:"id,omitempty"`

	// Project: The project that contains this status update.
	Project *ProjectV2 `json:"project,omitempty"`

	// StartDate: The start date of the status update.
	StartDate Date `json:"startDate,omitempty"`

	// Status: The status of the status update.
	Status ProjectV2StatusUpdateStatus `json:"status,omitempty"`

	// TargetDate: The target date of the status update.
	TargetDate Date `json:"targetDate,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2StatusUpdate) GetBody() string                        { return x.Body }
func (x *ProjectV2StatusUpdate) GetBodyHTML() template.HTML             { return x.BodyHTML }
func (x *ProjectV2StatusUpdate) GetCreatedAt() DateTime                 { return x.CreatedAt }
func (x *ProjectV2StatusUpdate) GetCreator() Actor                      { return x.Creator }
func (x *ProjectV2StatusUpdate) GetDatabaseId() int                     { return x.DatabaseId }
func (x *ProjectV2StatusUpdate) GetFullDatabaseId() BigInt              { return x.FullDatabaseId }
func (x *ProjectV2StatusUpdate) GetId() ID                              { return x.Id }
func (x *ProjectV2StatusUpdate) GetProject() *ProjectV2                 { return x.Project }
func (x *ProjectV2StatusUpdate) GetStartDate() Date                     { return x.StartDate }
func (x *ProjectV2StatusUpdate) GetStatus() ProjectV2StatusUpdateStatus { return x.Status }
func (x *ProjectV2StatusUpdate) GetTargetDate() Date                    { return x.TargetDate }
func (x *ProjectV2StatusUpdate) GetUpdatedAt() DateTime                 { return x.UpdatedAt }

// ProjectV2StatusUpdateConnection (OBJECT): The connection type for ProjectV2StatusUpdate.
type ProjectV2StatusUpdateConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2StatusUpdateEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2StatusUpdate `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2StatusUpdateConnection) GetEdges() []*ProjectV2StatusUpdateEdge { return x.Edges }
func (x *ProjectV2StatusUpdateConnection) GetNodes() []*ProjectV2StatusUpdate     { return x.Nodes }
func (x *ProjectV2StatusUpdateConnection) GetPageInfo() *PageInfo                 { return x.PageInfo }
func (x *ProjectV2StatusUpdateConnection) GetTotalCount() int                     { return x.TotalCount }

// ProjectV2StatusUpdateEdge (OBJECT): An edge in a connection.
type ProjectV2StatusUpdateEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2StatusUpdate `json:"node,omitempty"`
}

func (x *ProjectV2StatusUpdateEdge) GetCursor() string               { return x.Cursor }
func (x *ProjectV2StatusUpdateEdge) GetNode() *ProjectV2StatusUpdate { return x.Node }

// ProjectV2StatusUpdateOrderField (ENUM): Properties by which project v2 status updates can be ordered.
type ProjectV2StatusUpdateOrderField string

// ProjectV2StatusUpdateOrderField_CREATED_AT: Allows chronological ordering of project v2 status updates.
const ProjectV2StatusUpdateOrderField_CREATED_AT ProjectV2StatusUpdateOrderField = "CREATED_AT"

// ProjectV2StatusUpdateStatus (ENUM): The possible statuses of a project v2.
type ProjectV2StatusUpdateStatus string

// ProjectV2StatusUpdateStatus_INACTIVE: A project v2 that is inactive.
const ProjectV2StatusUpdateStatus_INACTIVE ProjectV2StatusUpdateStatus = "INACTIVE"

// ProjectV2StatusUpdateStatus_ON_TRACK: A project v2 that is on track with no risks.
const ProjectV2StatusUpdateStatus_ON_TRACK ProjectV2StatusUpdateStatus = "ON_TRACK"

// ProjectV2StatusUpdateStatus_AT_RISK: A project v2 that is at risk and encountering some challenges.
const ProjectV2StatusUpdateStatus_AT_RISK ProjectV2StatusUpdateStatus = "AT_RISK"

// ProjectV2StatusUpdateStatus_OFF_TRACK: A project v2 that is off track and needs attention.
const ProjectV2StatusUpdateStatus_OFF_TRACK ProjectV2StatusUpdateStatus = "OFF_TRACK"

// ProjectV2StatusUpdateStatus_COMPLETE: A project v2 that is complete.
const ProjectV2StatusUpdateStatus_COMPLETE ProjectV2StatusUpdateStatus = "COMPLETE"

// ProjectV2View (OBJECT): A view within a ProjectV2.
type ProjectV2View struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Fields: The view's visible fields.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	Fields *ProjectV2FieldConfigurationConnection `json:"fields,omitempty"`

	// Filter: The project view's filter.
	Filter string `json:"filter,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// GroupBy: The view's group-by field.
	//
	// Deprecated: The view's group-by field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	GroupBy *ProjectV2FieldConnection `json:"groupBy,omitempty"`

	// GroupByFields: The view's group-by field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	GroupByFields *ProjectV2FieldConfigurationConnection `json:"groupByFields,omitempty"`

	// Id: The Node ID of the ProjectV2View object.
	Id ID `json:"id,omitempty"`

	// Layout: The project view's layout.
	Layout ProjectV2ViewLayout `json:"layout,omitempty"`

	// Name: The project view's name.
	Name string `json:"name,omitempty"`

	// Number: The project view's number.
	Number int `json:"number,omitempty"`

	// Project: The project that contains this view.
	Project *ProjectV2 `json:"project,omitempty"`

	// SortBy: The view's sort-by config.
	//
	// Deprecated: The view's sort-by config.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SortBy *ProjectV2SortByConnection `json:"sortBy,omitempty"`

	// SortByFields: The view's sort-by config.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SortByFields *ProjectV2SortByFieldConnection `json:"sortByFields,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// VerticalGroupBy: The view's vertical-group-by field.
	//
	// Deprecated: The view's vertical-group-by field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	VerticalGroupBy *ProjectV2FieldConnection `json:"verticalGroupBy,omitempty"`

	// VerticalGroupByFields: The view's vertical-group-by field.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	VerticalGroupByFields *ProjectV2FieldConfigurationConnection `json:"verticalGroupByFields,omitempty"`

	// VisibleFields: The view's visible fields.
	//
	// Deprecated: The view's visible fields.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2FieldOrder
	VisibleFields *ProjectV2FieldConnection `json:"visibleFields,omitempty"`
}

func (x *ProjectV2View) GetCreatedAt() DateTime                            { return x.CreatedAt }
func (x *ProjectV2View) GetDatabaseId() int                                { return x.DatabaseId }
func (x *ProjectV2View) GetFields() *ProjectV2FieldConfigurationConnection { return x.Fields }
func (x *ProjectV2View) GetFilter() string                                 { return x.Filter }
func (x *ProjectV2View) GetFullDatabaseId() BigInt                         { return x.FullDatabaseId }
func (x *ProjectV2View) GetGroupBy() *ProjectV2FieldConnection             { return x.GroupBy }
func (x *ProjectV2View) GetGroupByFields() *ProjectV2FieldConfigurationConnection {
	return x.GroupByFields
}
func (x *ProjectV2View) GetId() ID                                        { return x.Id }
func (x *ProjectV2View) GetLayout() ProjectV2ViewLayout                   { return x.Layout }
func (x *ProjectV2View) GetName() string                                  { return x.Name }
func (x *ProjectV2View) GetNumber() int                                   { return x.Number }
func (x *ProjectV2View) GetProject() *ProjectV2                           { return x.Project }
func (x *ProjectV2View) GetSortBy() *ProjectV2SortByConnection            { return x.SortBy }
func (x *ProjectV2View) GetSortByFields() *ProjectV2SortByFieldConnection { return x.SortByFields }
func (x *ProjectV2View) GetUpdatedAt() DateTime                           { return x.UpdatedAt }
func (x *ProjectV2View) GetVerticalGroupBy() *ProjectV2FieldConnection    { return x.VerticalGroupBy }
func (x *ProjectV2View) GetVerticalGroupByFields() *ProjectV2FieldConfigurationConnection {
	return x.VerticalGroupByFields
}
func (x *ProjectV2View) GetVisibleFields() *ProjectV2FieldConnection { return x.VisibleFields }

// ProjectV2ViewConnection (OBJECT): The connection type for ProjectV2View.
type ProjectV2ViewConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2ViewEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2View `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2ViewConnection) GetEdges() []*ProjectV2ViewEdge { return x.Edges }
func (x *ProjectV2ViewConnection) GetNodes() []*ProjectV2View     { return x.Nodes }
func (x *ProjectV2ViewConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *ProjectV2ViewConnection) GetTotalCount() int             { return x.TotalCount }

// ProjectV2ViewEdge (OBJECT): An edge in a connection.
type ProjectV2ViewEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2View `json:"node,omitempty"`
}

func (x *ProjectV2ViewEdge) GetCursor() string       { return x.Cursor }
func (x *ProjectV2ViewEdge) GetNode() *ProjectV2View { return x.Node }

// ProjectV2ViewLayout (ENUM): The layout of a project v2 view.
type ProjectV2ViewLayout string

// ProjectV2ViewLayout_BOARD_LAYOUT: Board layout.
const ProjectV2ViewLayout_BOARD_LAYOUT ProjectV2ViewLayout = "BOARD_LAYOUT"

// ProjectV2ViewLayout_TABLE_LAYOUT: Table layout.
const ProjectV2ViewLayout_TABLE_LAYOUT ProjectV2ViewLayout = "TABLE_LAYOUT"

// ProjectV2ViewLayout_ROADMAP_LAYOUT: Roadmap layout.
const ProjectV2ViewLayout_ROADMAP_LAYOUT ProjectV2ViewLayout = "ROADMAP_LAYOUT"

// ProjectV2ViewOrder (INPUT_OBJECT): Ordering options for project v2 view connections.
type ProjectV2ViewOrder struct {
	// Field: The field to order the project v2 views by.
	//
	// GraphQL type: ProjectV2ViewOrderField!
	Field ProjectV2ViewOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2ViewOrderField (ENUM): Properties by which project v2 view connections can be ordered.
type ProjectV2ViewOrderField string

// ProjectV2ViewOrderField_POSITION: Order project v2 views by position.
const ProjectV2ViewOrderField_POSITION ProjectV2ViewOrderField = "POSITION"

// ProjectV2ViewOrderField_CREATED_AT: Order project v2 views by creation time.
const ProjectV2ViewOrderField_CREATED_AT ProjectV2ViewOrderField = "CREATED_AT"

// ProjectV2ViewOrderField_NAME: Order project v2 views by name.
const ProjectV2ViewOrderField_NAME ProjectV2ViewOrderField = "NAME"

// ProjectV2Workflow (OBJECT): A workflow inside a project.
type ProjectV2Workflow struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Enabled: Whether the workflow is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the ProjectV2Workflow object.
	Id ID `json:"id,omitempty"`

	// Name: The name of the workflow.
	Name string `json:"name,omitempty"`

	// Number: The number of the workflow.
	Number int `json:"number,omitempty"`

	// Project: The project that contains this workflow.
	Project *ProjectV2 `json:"project,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *ProjectV2Workflow) GetCreatedAt() DateTime    { return x.CreatedAt }
func (x *ProjectV2Workflow) GetDatabaseId() int        { return x.DatabaseId }
func (x *ProjectV2Workflow) GetEnabled() bool          { return x.Enabled }
func (x *ProjectV2Workflow) GetFullDatabaseId() BigInt { return x.FullDatabaseId }
func (x *ProjectV2Workflow) GetId() ID                 { return x.Id }
func (x *ProjectV2Workflow) GetName() string           { return x.Name }
func (x *ProjectV2Workflow) GetNumber() int            { return x.Number }
func (x *ProjectV2Workflow) GetProject() *ProjectV2    { return x.Project }
func (x *ProjectV2Workflow) GetUpdatedAt() DateTime    { return x.UpdatedAt }

// ProjectV2WorkflowConnection (OBJECT): The connection type for ProjectV2Workflow.
type ProjectV2WorkflowConnection struct {
	// Edges: A list of edges.
	Edges []*ProjectV2WorkflowEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ProjectV2Workflow `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ProjectV2WorkflowConnection) GetEdges() []*ProjectV2WorkflowEdge { return x.Edges }
func (x *ProjectV2WorkflowConnection) GetNodes() []*ProjectV2Workflow     { return x.Nodes }
func (x *ProjectV2WorkflowConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *ProjectV2WorkflowConnection) GetTotalCount() int                 { return x.TotalCount }

// ProjectV2WorkflowEdge (OBJECT): An edge in a connection.
type ProjectV2WorkflowEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ProjectV2Workflow `json:"node,omitempty"`
}

func (x *ProjectV2WorkflowEdge) GetCursor() string           { return x.Cursor }
func (x *ProjectV2WorkflowEdge) GetNode() *ProjectV2Workflow { return x.Node }

// ProjectV2WorkflowOrder (INPUT_OBJECT): Ordering options for project v2 workflows connections.
type ProjectV2WorkflowOrder struct {
	// Field: The field to order the project v2 workflows by.
	//
	// GraphQL type: ProjectV2WorkflowsOrderField!
	Field ProjectV2WorkflowsOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ProjectV2WorkflowsOrderField (ENUM): Properties by which project workflows can be ordered.
type ProjectV2WorkflowsOrderField string

// ProjectV2WorkflowsOrderField_NAME: The name of the workflow.
const ProjectV2WorkflowsOrderField_NAME ProjectV2WorkflowsOrderField = "NAME"

// ProjectV2WorkflowsOrderField_NUMBER: The number of the workflow.
const ProjectV2WorkflowsOrderField_NUMBER ProjectV2WorkflowsOrderField = "NUMBER"

// ProjectV2WorkflowsOrderField_UPDATED_AT: The date and time of the workflow update.
const ProjectV2WorkflowsOrderField_UPDATED_AT ProjectV2WorkflowsOrderField = "UPDATED_AT"

// ProjectV2WorkflowsOrderField_CREATED_AT: The date and time of the workflow creation.
const ProjectV2WorkflowsOrderField_CREATED_AT ProjectV2WorkflowsOrderField = "CREATED_AT"

// PropertyTargetDefinition (OBJECT): A property that must match.
type PropertyTargetDefinition struct {
	// Name: The name of the property.
	Name string `json:"name,omitempty"`

	// PropertyValues: The values to match for.
	PropertyValues []string `json:"propertyValues,omitempty"`

	// Source: The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified.
	Source string `json:"source,omitempty"`
}

func (x *PropertyTargetDefinition) GetName() string             { return x.Name }
func (x *PropertyTargetDefinition) GetPropertyValues() []string { return x.PropertyValues }
func (x *PropertyTargetDefinition) GetSource() string           { return x.Source }

// PropertyTargetDefinitionInput (INPUT_OBJECT): A property that must match.
type PropertyTargetDefinitionInput struct {
	// Name: The name of the property.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`

	// PropertyValues: The values to match for.
	//
	// GraphQL type: [String!]!
	PropertyValues []string `json:"propertyValues,omitempty"`

	// Source: The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified.
	//
	// GraphQL type: String
	Source string `json:"source,omitempty"`
}

// PublicKey (OBJECT): A user's public key.
type PublicKey struct {
	// AccessedAt: The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
	AccessedAt DateTime `json:"accessedAt,omitempty"`

	// CreatedAt: Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Fingerprint: The fingerprint for this PublicKey.
	Fingerprint string `json:"fingerprint,omitempty"`

	// Id: The Node ID of the PublicKey object.
	Id ID `json:"id,omitempty"`

	// IsReadOnly: Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
	IsReadOnly bool `json:"isReadOnly,omitempty"`

	// Key: The public key string.
	Key string `json:"key,omitempty"`

	// UpdatedAt: Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *PublicKey) GetAccessedAt() DateTime { return x.AccessedAt }
func (x *PublicKey) GetCreatedAt() DateTime  { return x.CreatedAt }
func (x *PublicKey) GetFingerprint() string  { return x.Fingerprint }
func (x *PublicKey) GetId() ID               { return x.Id }
func (x *PublicKey) GetIsReadOnly() bool     { return x.IsReadOnly }
func (x *PublicKey) GetKey() string          { return x.Key }
func (x *PublicKey) GetUpdatedAt() DateTime  { return x.UpdatedAt }

// PublicKeyConnection (OBJECT): The connection type for PublicKey.
type PublicKeyConnection struct {
	// Edges: A list of edges.
	Edges []*PublicKeyEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PublicKey `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PublicKeyConnection) GetEdges() []*PublicKeyEdge { return x.Edges }
func (x *PublicKeyConnection) GetNodes() []*PublicKey     { return x.Nodes }
func (x *PublicKeyConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *PublicKeyConnection) GetTotalCount() int         { return x.TotalCount }

// PublicKeyEdge (OBJECT): An edge in a connection.
type PublicKeyEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PublicKey `json:"node,omitempty"`
}

func (x *PublicKeyEdge) GetCursor() string   { return x.Cursor }
func (x *PublicKeyEdge) GetNode() *PublicKey { return x.Node }

// PublishSponsorsTierInput (INPUT_OBJECT): Autogenerated input type of PublishSponsorsTier.
type PublishSponsorsTierInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TierId: The ID of the draft tier to publish.
	//
	// GraphQL type: ID!
	TierId ID `json:"tierId,omitempty"`
}

// PublishSponsorsTierPayload (OBJECT): Autogenerated return type of PublishSponsorsTier.
type PublishSponsorsTierPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorsTier: The tier that was published.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

func (x *PublishSponsorsTierPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *PublishSponsorsTierPayload) GetSponsorsTier() *SponsorsTier { return x.SponsorsTier }

// PullRequest (OBJECT): A repository pull request.
type PullRequest struct {
	// ActiveLockReason: Reason that the conversation was locked.
	ActiveLockReason LockReason `json:"activeLockReason,omitempty"`

	// Additions: The number of additions in this pull request.
	Additions int `json:"additions,omitempty"`

	// Assignees: A list of Users assigned to this object.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Assignees *UserConnection `json:"assignees,omitempty"`

	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// AutoMergeRequest: Returns the auto-merge request object if one exists for this pull request.
	AutoMergeRequest *AutoMergeRequest `json:"autoMergeRequest,omitempty"`

	// BaseRef: Identifies the base Ref associated with the pull request.
	BaseRef *Ref `json:"baseRef,omitempty"`

	// BaseRefName: Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
	BaseRefName string `json:"baseRefName,omitempty"`

	// BaseRefOid: Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
	BaseRefOid GitObjectID `json:"baseRefOid,omitempty"`

	// BaseRepository: The repository associated with this pull request's base Ref.
	BaseRepository *Repository `json:"baseRepository,omitempty"`

	// Body: The body as Markdown.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// CanBeRebased: Whether or not the pull request is rebaseable.
	CanBeRebased bool `json:"canBeRebased,omitempty"`

	// ChangedFiles: The number of changed files in this pull request.
	ChangedFiles int `json:"changedFiles,omitempty"`

	// ChecksResourcePath: The HTTP path for the checks of this pull request.
	ChecksResourcePath URI `json:"checksResourcePath,omitempty"`

	// ChecksUrl: The HTTP URL for the checks of this pull request.
	ChecksUrl URI `json:"checksUrl,omitempty"`

	// Closed: `true` if the pull request is closed.
	Closed bool `json:"closed,omitempty"`

	// ClosedAt: Identifies the date and time when the object was closed.
	ClosedAt DateTime `json:"closedAt,omitempty"`

	// ClosingIssuesReferences: List of issues that may be closed by this pull request.
	//
	// Query arguments:
	//   - userLinkedOnly Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy IssueOrder
	ClosingIssuesReferences *IssueConnection `json:"closingIssuesReferences,omitempty"`

	// Comments: A list of comments associated with the pull request.
	//
	// Query arguments:
	//   - orderBy IssueCommentOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *IssueCommentConnection `json:"comments,omitempty"`

	// Commits: A list of commits present in this pull request's head branch not present in the base branch.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Commits *PullRequestCommitConnection `json:"commits,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Deletions: The number of deletions in this pull request.
	Deletions int `json:"deletions,omitempty"`

	// Editor: The actor who edited this pull request's body.
	Editor Actor `json:"editor,omitempty"`

	// Files: Lists the files changed within this pull request.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Files *PullRequestChangedFileConnection `json:"files,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// HeadRef: Identifies the head Ref associated with the pull request.
	HeadRef *Ref `json:"headRef,omitempty"`

	// HeadRefName: Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
	HeadRefName string `json:"headRefName,omitempty"`

	// HeadRefOid: Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
	HeadRefOid GitObjectID `json:"headRefOid,omitempty"`

	// HeadRepository: The repository associated with this pull request's head Ref.
	HeadRepository *Repository `json:"headRepository,omitempty"`

	// HeadRepositoryOwner: The owner of the repository associated with this pull request's head Ref.
	HeadRepositoryOwner RepositoryOwner `json:"headRepositoryOwner,omitempty"`

	// Hovercard: The hovercard information for this issue.
	//
	// Query arguments:
	//   - includeNotificationContexts Boolean
	Hovercard *Hovercard `json:"hovercard,omitempty"`

	// Id: The Node ID of the PullRequest object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsCrossRepository: The head and base repositories are different.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`

	// IsDraft: Identifies if the pull request is a draft.
	IsDraft bool `json:"isDraft,omitempty"`

	// IsInMergeQueue: Indicates whether the pull request is in a merge queue.
	IsInMergeQueue bool `json:"isInMergeQueue,omitempty"`

	// IsMergeQueueEnabled: Indicates whether the pull request's base ref has a merge queue enabled.
	IsMergeQueueEnabled bool `json:"isMergeQueueEnabled,omitempty"`

	// IsReadByViewer: Is this pull request read by the viewer.
	IsReadByViewer bool `json:"isReadByViewer,omitempty"`

	// Labels: A list of labels associated with the object.
	//
	// Query arguments:
	//   - orderBy LabelOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Labels *LabelConnection `json:"labels,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// LatestOpinionatedReviews: A list of latest reviews per user associated with the pull request.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - writersOnly Boolean
	LatestOpinionatedReviews *PullRequestReviewConnection `json:"latestOpinionatedReviews,omitempty"`

	// LatestReviews: A list of latest reviews per user associated with the pull request that are not also pending review.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	LatestReviews *PullRequestReviewConnection `json:"latestReviews,omitempty"`

	// Locked: `true` if the pull request is locked.
	Locked bool `json:"locked,omitempty"`

	// MaintainerCanModify: Indicates whether maintainers can modify the pull request.
	MaintainerCanModify bool `json:"maintainerCanModify,omitempty"`

	// MergeCommit: The commit that was created when this pull request was merged.
	MergeCommit *Commit `json:"mergeCommit,omitempty"`

	// MergeQueue: The merge queue for the pull request's base branch.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`

	// MergeQueueEntry: The merge queue entry of the pull request in the base branch's merge queue.
	MergeQueueEntry *MergeQueueEntry `json:"mergeQueueEntry,omitempty"`

	// MergeStateStatus: Detailed information about the current pull request merge state status.
	MergeStateStatus MergeStateStatus `json:"mergeStateStatus,omitempty"`

	// Mergeable: Whether or not the pull request can be merged based on the existence of merge conflicts.
	Mergeable MergeableState `json:"mergeable,omitempty"`

	// Merged: Whether or not the pull request was merged.
	Merged bool `json:"merged,omitempty"`

	// MergedAt: The date and time that the pull request was merged.
	MergedAt DateTime `json:"mergedAt,omitempty"`

	// MergedBy: The actor who merged the pull request.
	MergedBy Actor `json:"mergedBy,omitempty"`

	// Milestone: Identifies the milestone associated with the pull request.
	Milestone *Milestone `json:"milestone,omitempty"`

	// Number: Identifies the pull request number.
	Number int `json:"number,omitempty"`

	// Participants: A list of Users that are participating in the Pull Request conversation.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Participants *UserConnection `json:"participants,omitempty"`

	// Permalink: The permalink to the pull request.
	Permalink URI `json:"permalink,omitempty"`

	// PotentialMergeCommit: The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
	PotentialMergeCommit *Commit `json:"potentialMergeCommit,omitempty"`

	// ProjectCards: List of project cards associated with this pull request.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - archivedStates [ProjectCardArchivedState]
	ProjectCards *ProjectCardConnection `json:"projectCards,omitempty"`

	// ProjectItems: List of project items associated with this pull request.
	//
	// Query arguments:
	//   - includeArchived Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectItems *ProjectV2ItemConnection `json:"projectItems,omitempty"`

	// ProjectV2: Find a project by number.
	//
	// Query arguments:
	//   - number Int!
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`

	// ProjectsV2: A list of projects under the owner.
	//
	// Query arguments:
	//   - query String
	//   - orderBy ProjectV2Order
	//   - minPermissionLevel ProjectV2PermissionLevel
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this pull request.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// RevertResourcePath: The HTTP path for reverting this pull request.
	RevertResourcePath URI `json:"revertResourcePath,omitempty"`

	// RevertUrl: The HTTP URL for reverting this pull request.
	RevertUrl URI `json:"revertUrl,omitempty"`

	// ReviewDecision: The current status of this pull request with respect to code review.
	ReviewDecision PullRequestReviewDecision `json:"reviewDecision,omitempty"`

	// ReviewRequests: A list of review requests associated with the pull request.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ReviewRequests *ReviewRequestConnection `json:"reviewRequests,omitempty"`

	// ReviewThreads: The list of all review threads for this pull request.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ReviewThreads *PullRequestReviewThreadConnection `json:"reviewThreads,omitempty"`

	// Reviews: A list of reviews associated with the pull request.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - states [PullRequestReviewState!]
	//   - author String
	Reviews *PullRequestReviewConnection `json:"reviews,omitempty"`

	// State: Identifies the state of the pull request.
	State PullRequestState `json:"state,omitempty"`

	// StatusCheckRollup: Check and Status rollup information for the PR's head ref.
	StatusCheckRollup *StatusCheckRollup `json:"statusCheckRollup,omitempty"`

	// SuggestedReviewers: A list of reviewer suggestions based on commit history and past review comments.
	SuggestedReviewers []*SuggestedReviewer `json:"suggestedReviewers,omitempty"`

	// Timeline: A list of events, comments, commits, etc. associated with the pull request.
	//
	// Deprecated: A list of events, comments, commits, etc. associated with the pull request.
	//
	// Query arguments:
	//   - since DateTime
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Timeline *PullRequestTimelineConnection `json:"timeline,omitempty"`

	// TimelineItems: A list of events, comments, commits, etc. associated with the pull request.
	//
	// Query arguments:
	//   - since DateTime
	//   - skip Int
	//   - itemTypes [PullRequestTimelineItemsItemType!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	TimelineItems *PullRequestTimelineItemsConnection `json:"timelineItems,omitempty"`

	// Title: Identifies the pull request title.
	Title string `json:"title,omitempty"`

	// TitleHTML: Identifies the pull request title rendered to HTML.
	TitleHTML template.HTML `json:"titleHTML,omitempty"`

	// TotalCommentsCount: Returns a count of how many comments this pull request has received.
	TotalCommentsCount int `json:"totalCommentsCount,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this pull request.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanApplySuggestion: Whether or not the viewer can apply suggestion.
	ViewerCanApplySuggestion bool `json:"viewerCanApplySuggestion,omitempty"`

	// ViewerCanClose: Indicates if the object can be closed by the viewer.
	ViewerCanClose bool `json:"viewerCanClose,omitempty"`

	// ViewerCanDeleteHeadRef: Check if the viewer can restore the deleted head ref.
	ViewerCanDeleteHeadRef bool `json:"viewerCanDeleteHeadRef,omitempty"`

	// ViewerCanDisableAutoMerge: Whether or not the viewer can disable auto-merge.
	ViewerCanDisableAutoMerge bool `json:"viewerCanDisableAutoMerge,omitempty"`

	// ViewerCanEditFiles: Can the viewer edit files within this pull request.
	ViewerCanEditFiles bool `json:"viewerCanEditFiles,omitempty"`

	// ViewerCanEnableAutoMerge: Whether or not the viewer can enable auto-merge.
	ViewerCanEnableAutoMerge bool `json:"viewerCanEnableAutoMerge,omitempty"`

	// ViewerCanLabel: Indicates if the viewer can edit labels for this object.
	ViewerCanLabel bool `json:"viewerCanLabel,omitempty"`

	// ViewerCanMergeAsAdmin: Indicates whether the viewer can bypass branch protections and merge the pull request immediately.
	ViewerCanMergeAsAdmin bool `json:"viewerCanMergeAsAdmin,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanReopen: Indicates if the object can be reopened by the viewer.
	ViewerCanReopen bool `json:"viewerCanReopen,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCanUpdateBranch: Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
	// If the head ref is up to date or unable to be updated by this user, this will return false.
	// .
	ViewerCanUpdateBranch bool `json:"viewerCanUpdateBranch,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`

	// ViewerLatestReview: The latest review given from the viewer.
	ViewerLatestReview *PullRequestReview `json:"viewerLatestReview,omitempty"`

	// ViewerLatestReviewRequest: The person who has requested the viewer for review on this pull request.
	ViewerLatestReviewRequest *ReviewRequest `json:"viewerLatestReviewRequest,omitempty"`

	// ViewerMergeBodyText: The merge body text for the viewer and method.
	//
	// Query arguments:
	//   - mergeType PullRequestMergeMethod
	ViewerMergeBodyText string `json:"viewerMergeBodyText,omitempty"`

	// ViewerMergeHeadlineText: The merge headline text for the viewer and method.
	//
	// Query arguments:
	//   - mergeType PullRequestMergeMethod
	ViewerMergeHeadlineText string `json:"viewerMergeHeadlineText,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (x *PullRequest) GetActiveLockReason() LockReason                { return x.ActiveLockReason }
func (x *PullRequest) GetAdditions() int                              { return x.Additions }
func (x *PullRequest) GetAssignees() *UserConnection                  { return x.Assignees }
func (x *PullRequest) GetAuthor() Actor                               { return x.Author }
func (x *PullRequest) GetAuthorAssociation() CommentAuthorAssociation { return x.AuthorAssociation }
func (x *PullRequest) GetAutoMergeRequest() *AutoMergeRequest         { return x.AutoMergeRequest }
func (x *PullRequest) GetBaseRef() *Ref                               { return x.BaseRef }
func (x *PullRequest) GetBaseRefName() string                         { return x.BaseRefName }
func (x *PullRequest) GetBaseRefOid() GitObjectID                     { return x.BaseRefOid }
func (x *PullRequest) GetBaseRepository() *Repository                 { return x.BaseRepository }
func (x *PullRequest) GetBody() string                                { return x.Body }
func (x *PullRequest) GetBodyHTML() template.HTML                     { return x.BodyHTML }
func (x *PullRequest) GetBodyText() string                            { return x.BodyText }
func (x *PullRequest) GetCanBeRebased() bool                          { return x.CanBeRebased }
func (x *PullRequest) GetChangedFiles() int                           { return x.ChangedFiles }
func (x *PullRequest) GetChecksResourcePath() URI                     { return x.ChecksResourcePath }
func (x *PullRequest) GetChecksUrl() URI                              { return x.ChecksUrl }
func (x *PullRequest) GetClosed() bool                                { return x.Closed }
func (x *PullRequest) GetClosedAt() DateTime                          { return x.ClosedAt }
func (x *PullRequest) GetClosingIssuesReferences() *IssueConnection   { return x.ClosingIssuesReferences }
func (x *PullRequest) GetComments() *IssueCommentConnection           { return x.Comments }
func (x *PullRequest) GetCommits() *PullRequestCommitConnection       { return x.Commits }
func (x *PullRequest) GetCreatedAt() DateTime                         { return x.CreatedAt }
func (x *PullRequest) GetCreatedViaEmail() bool                       { return x.CreatedViaEmail }
func (x *PullRequest) GetDatabaseId() int                             { return x.DatabaseId }
func (x *PullRequest) GetDeletions() int                              { return x.Deletions }
func (x *PullRequest) GetEditor() Actor                               { return x.Editor }
func (x *PullRequest) GetFiles() *PullRequestChangedFileConnection    { return x.Files }
func (x *PullRequest) GetFullDatabaseId() BigInt                      { return x.FullDatabaseId }
func (x *PullRequest) GetHeadRef() *Ref                               { return x.HeadRef }
func (x *PullRequest) GetHeadRefName() string                         { return x.HeadRefName }
func (x *PullRequest) GetHeadRefOid() GitObjectID                     { return x.HeadRefOid }
func (x *PullRequest) GetHeadRepository() *Repository                 { return x.HeadRepository }
func (x *PullRequest) GetHeadRepositoryOwner() RepositoryOwner        { return x.HeadRepositoryOwner }
func (x *PullRequest) GetHovercard() *Hovercard                       { return x.Hovercard }
func (x *PullRequest) GetId() ID                                      { return x.Id }
func (x *PullRequest) GetIncludesCreatedEdit() bool                   { return x.IncludesCreatedEdit }
func (x *PullRequest) GetIsCrossRepository() bool                     { return x.IsCrossRepository }
func (x *PullRequest) GetIsDraft() bool                               { return x.IsDraft }
func (x *PullRequest) GetIsInMergeQueue() bool                        { return x.IsInMergeQueue }
func (x *PullRequest) GetIsMergeQueueEnabled() bool                   { return x.IsMergeQueueEnabled }
func (x *PullRequest) GetIsReadByViewer() bool                        { return x.IsReadByViewer }
func (x *PullRequest) GetLabels() *LabelConnection                    { return x.Labels }
func (x *PullRequest) GetLastEditedAt() DateTime                      { return x.LastEditedAt }
func (x *PullRequest) GetLatestOpinionatedReviews() *PullRequestReviewConnection {
	return x.LatestOpinionatedReviews
}
func (x *PullRequest) GetLatestReviews() *PullRequestReviewConnection        { return x.LatestReviews }
func (x *PullRequest) GetLocked() bool                                       { return x.Locked }
func (x *PullRequest) GetMaintainerCanModify() bool                          { return x.MaintainerCanModify }
func (x *PullRequest) GetMergeCommit() *Commit                               { return x.MergeCommit }
func (x *PullRequest) GetMergeQueue() *MergeQueue                            { return x.MergeQueue }
func (x *PullRequest) GetMergeQueueEntry() *MergeQueueEntry                  { return x.MergeQueueEntry }
func (x *PullRequest) GetMergeStateStatus() MergeStateStatus                 { return x.MergeStateStatus }
func (x *PullRequest) GetMergeable() MergeableState                          { return x.Mergeable }
func (x *PullRequest) GetMerged() bool                                       { return x.Merged }
func (x *PullRequest) GetMergedAt() DateTime                                 { return x.MergedAt }
func (x *PullRequest) GetMergedBy() Actor                                    { return x.MergedBy }
func (x *PullRequest) GetMilestone() *Milestone                              { return x.Milestone }
func (x *PullRequest) GetNumber() int                                        { return x.Number }
func (x *PullRequest) GetParticipants() *UserConnection                      { return x.Participants }
func (x *PullRequest) GetPermalink() URI                                     { return x.Permalink }
func (x *PullRequest) GetPotentialMergeCommit() *Commit                      { return x.PotentialMergeCommit }
func (x *PullRequest) GetProjectCards() *ProjectCardConnection               { return x.ProjectCards }
func (x *PullRequest) GetProjectItems() *ProjectV2ItemConnection             { return x.ProjectItems }
func (x *PullRequest) GetProjectV2() *ProjectV2                              { return x.ProjectV2 }
func (x *PullRequest) GetProjectsV2() *ProjectV2Connection                   { return x.ProjectsV2 }
func (x *PullRequest) GetPublishedAt() DateTime                              { return x.PublishedAt }
func (x *PullRequest) GetReactionGroups() []*ReactionGroup                   { return x.ReactionGroups }
func (x *PullRequest) GetReactions() *ReactionConnection                     { return x.Reactions }
func (x *PullRequest) GetRepository() *Repository                            { return x.Repository }
func (x *PullRequest) GetResourcePath() URI                                  { return x.ResourcePath }
func (x *PullRequest) GetRevertResourcePath() URI                            { return x.RevertResourcePath }
func (x *PullRequest) GetRevertUrl() URI                                     { return x.RevertUrl }
func (x *PullRequest) GetReviewDecision() PullRequestReviewDecision          { return x.ReviewDecision }
func (x *PullRequest) GetReviewRequests() *ReviewRequestConnection           { return x.ReviewRequests }
func (x *PullRequest) GetReviewThreads() *PullRequestReviewThreadConnection  { return x.ReviewThreads }
func (x *PullRequest) GetReviews() *PullRequestReviewConnection              { return x.Reviews }
func (x *PullRequest) GetState() PullRequestState                            { return x.State }
func (x *PullRequest) GetStatusCheckRollup() *StatusCheckRollup              { return x.StatusCheckRollup }
func (x *PullRequest) GetSuggestedReviewers() []*SuggestedReviewer           { return x.SuggestedReviewers }
func (x *PullRequest) GetTimeline() *PullRequestTimelineConnection           { return x.Timeline }
func (x *PullRequest) GetTimelineItems() *PullRequestTimelineItemsConnection { return x.TimelineItems }
func (x *PullRequest) GetTitle() string                                      { return x.Title }
func (x *PullRequest) GetTitleHTML() template.HTML                           { return x.TitleHTML }
func (x *PullRequest) GetTotalCommentsCount() int                            { return x.TotalCommentsCount }
func (x *PullRequest) GetUpdatedAt() DateTime                                { return x.UpdatedAt }
func (x *PullRequest) GetUrl() URI                                           { return x.Url }
func (x *PullRequest) GetUserContentEdits() *UserContentEditConnection       { return x.UserContentEdits }
func (x *PullRequest) GetViewerCanApplySuggestion() bool                     { return x.ViewerCanApplySuggestion }
func (x *PullRequest) GetViewerCanClose() bool                               { return x.ViewerCanClose }
func (x *PullRequest) GetViewerCanDeleteHeadRef() bool                       { return x.ViewerCanDeleteHeadRef }
func (x *PullRequest) GetViewerCanDisableAutoMerge() bool                    { return x.ViewerCanDisableAutoMerge }
func (x *PullRequest) GetViewerCanEditFiles() bool                           { return x.ViewerCanEditFiles }
func (x *PullRequest) GetViewerCanEnableAutoMerge() bool                     { return x.ViewerCanEnableAutoMerge }
func (x *PullRequest) GetViewerCanLabel() bool                               { return x.ViewerCanLabel }
func (x *PullRequest) GetViewerCanMergeAsAdmin() bool                        { return x.ViewerCanMergeAsAdmin }
func (x *PullRequest) GetViewerCanReact() bool                               { return x.ViewerCanReact }
func (x *PullRequest) GetViewerCanReopen() bool                              { return x.ViewerCanReopen }
func (x *PullRequest) GetViewerCanSubscribe() bool                           { return x.ViewerCanSubscribe }
func (x *PullRequest) GetViewerCanUpdate() bool                              { return x.ViewerCanUpdate }
func (x *PullRequest) GetViewerCanUpdateBranch() bool                        { return x.ViewerCanUpdateBranch }
func (x *PullRequest) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *PullRequest) GetViewerDidAuthor() bool                  { return x.ViewerDidAuthor }
func (x *PullRequest) GetViewerLatestReview() *PullRequestReview { return x.ViewerLatestReview }
func (x *PullRequest) GetViewerLatestReviewRequest() *ReviewRequest {
	return x.ViewerLatestReviewRequest
}
func (x *PullRequest) GetViewerMergeBodyText() string           { return x.ViewerMergeBodyText }
func (x *PullRequest) GetViewerMergeHeadlineText() string       { return x.ViewerMergeHeadlineText }
func (x *PullRequest) GetViewerSubscription() SubscriptionState { return x.ViewerSubscription }

// PullRequestBranchUpdateMethod (ENUM): The possible methods for updating a pull request's head branch with the base branch.
type PullRequestBranchUpdateMethod string

// PullRequestBranchUpdateMethod_MERGE: Update branch via merge.
const PullRequestBranchUpdateMethod_MERGE PullRequestBranchUpdateMethod = "MERGE"

// PullRequestBranchUpdateMethod_REBASE: Update branch via rebase.
const PullRequestBranchUpdateMethod_REBASE PullRequestBranchUpdateMethod = "REBASE"

// PullRequestChangedFile (OBJECT): A file changed in a pull request.
type PullRequestChangedFile struct {
	// Additions: The number of additions to the file.
	Additions int `json:"additions,omitempty"`

	// ChangeType: How the file was changed in this PullRequest.
	ChangeType PatchStatus `json:"changeType,omitempty"`

	// Deletions: The number of deletions to the file.
	Deletions int `json:"deletions,omitempty"`

	// Path: The path of the file.
	Path string `json:"path,omitempty"`

	// ViewerViewedState: The state of the file for the viewer.
	ViewerViewedState FileViewedState `json:"viewerViewedState,omitempty"`
}

func (x *PullRequestChangedFile) GetAdditions() int                     { return x.Additions }
func (x *PullRequestChangedFile) GetChangeType() PatchStatus            { return x.ChangeType }
func (x *PullRequestChangedFile) GetDeletions() int                     { return x.Deletions }
func (x *PullRequestChangedFile) GetPath() string                       { return x.Path }
func (x *PullRequestChangedFile) GetViewerViewedState() FileViewedState { return x.ViewerViewedState }

// PullRequestChangedFileConnection (OBJECT): The connection type for PullRequestChangedFile.
type PullRequestChangedFileConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestChangedFileEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PullRequestChangedFile `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestChangedFileConnection) GetEdges() []*PullRequestChangedFileEdge { return x.Edges }
func (x *PullRequestChangedFileConnection) GetNodes() []*PullRequestChangedFile     { return x.Nodes }
func (x *PullRequestChangedFileConnection) GetPageInfo() *PageInfo                  { return x.PageInfo }
func (x *PullRequestChangedFileConnection) GetTotalCount() int                      { return x.TotalCount }

// PullRequestChangedFileEdge (OBJECT): An edge in a connection.
type PullRequestChangedFileEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PullRequestChangedFile `json:"node,omitempty"`
}

func (x *PullRequestChangedFileEdge) GetCursor() string                { return x.Cursor }
func (x *PullRequestChangedFileEdge) GetNode() *PullRequestChangedFile { return x.Node }

// PullRequestCommit (OBJECT): Represents a Git commit part of a pull request.
type PullRequestCommit struct {
	// Commit: The Git commit object.
	Commit *Commit `json:"commit,omitempty"`

	// Id: The Node ID of the PullRequestCommit object.
	Id ID `json:"id,omitempty"`

	// PullRequest: The pull request this commit belongs to.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ResourcePath: The HTTP path for this pull request commit.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this pull request commit.
	Url URI `json:"url,omitempty"`
}

func (x *PullRequestCommit) GetCommit() *Commit           { return x.Commit }
func (x *PullRequestCommit) GetId() ID                    { return x.Id }
func (x *PullRequestCommit) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *PullRequestCommit) GetResourcePath() URI         { return x.ResourcePath }
func (x *PullRequestCommit) GetUrl() URI                  { return x.Url }

// PullRequestCommitCommentThread (OBJECT): Represents a commit comment thread part of a pull request.
type PullRequestCommitCommentThread struct {
	// Comments: The comments that exist in this thread.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *CommitCommentConnection `json:"comments,omitempty"`

	// Commit: The commit the comments were made on.
	Commit *Commit `json:"commit,omitempty"`

	// Id: The Node ID of the PullRequestCommitCommentThread object.
	Id ID `json:"id,omitempty"`

	// Path: The file the comments were made on.
	Path string `json:"path,omitempty"`

	// Position: The position in the diff for the commit that the comment was made on.
	Position int `json:"position,omitempty"`

	// PullRequest: The pull request this commit comment thread belongs to.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *PullRequestCommitCommentThread) GetComments() *CommitCommentConnection { return x.Comments }
func (x *PullRequestCommitCommentThread) GetCommit() *Commit                    { return x.Commit }
func (x *PullRequestCommitCommentThread) GetId() ID                             { return x.Id }
func (x *PullRequestCommitCommentThread) GetPath() string                       { return x.Path }
func (x *PullRequestCommitCommentThread) GetPosition() int                      { return x.Position }
func (x *PullRequestCommitCommentThread) GetPullRequest() *PullRequest          { return x.PullRequest }
func (x *PullRequestCommitCommentThread) GetRepository() *Repository            { return x.Repository }

// PullRequestCommitConnection (OBJECT): The connection type for PullRequestCommit.
type PullRequestCommitConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestCommitEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PullRequestCommit `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestCommitConnection) GetEdges() []*PullRequestCommitEdge { return x.Edges }
func (x *PullRequestCommitConnection) GetNodes() []*PullRequestCommit     { return x.Nodes }
func (x *PullRequestCommitConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *PullRequestCommitConnection) GetTotalCount() int                 { return x.TotalCount }

// PullRequestCommitEdge (OBJECT): An edge in a connection.
type PullRequestCommitEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PullRequestCommit `json:"node,omitempty"`
}

func (x *PullRequestCommitEdge) GetCursor() string           { return x.Cursor }
func (x *PullRequestCommitEdge) GetNode() *PullRequestCommit { return x.Node }

// PullRequestConnection (OBJECT): The connection type for PullRequest.
type PullRequestConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PullRequest `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestConnection) GetEdges() []*PullRequestEdge { return x.Edges }
func (x *PullRequestConnection) GetNodes() []*PullRequest     { return x.Nodes }
func (x *PullRequestConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *PullRequestConnection) GetTotalCount() int           { return x.TotalCount }

// PullRequestContributionsByRepository (OBJECT): This aggregates pull requests opened by a user within one repository.
type PullRequestContributionsByRepository struct {
	// Contributions: The pull request contributions.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ContributionOrder
	Contributions *CreatedPullRequestContributionConnection `json:"contributions,omitempty"`

	// Repository: The repository in which the pull requests were opened.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *PullRequestContributionsByRepository) GetContributions() *CreatedPullRequestContributionConnection {
	return x.Contributions
}
func (x *PullRequestContributionsByRepository) GetRepository() *Repository { return x.Repository }

// PullRequestEdge (OBJECT): An edge in a connection.
type PullRequestEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PullRequest `json:"node,omitempty"`
}

func (x *PullRequestEdge) GetCursor() string     { return x.Cursor }
func (x *PullRequestEdge) GetNode() *PullRequest { return x.Node }

// PullRequestMergeMethod (ENUM): Represents available types of methods to use when merging a pull request.
type PullRequestMergeMethod string

// PullRequestMergeMethod_MERGE: Add all commits from the head branch to the base branch with a merge commit.
const PullRequestMergeMethod_MERGE PullRequestMergeMethod = "MERGE"

// PullRequestMergeMethod_SQUASH: Combine all commits from the head branch into a single commit in the base branch.
const PullRequestMergeMethod_SQUASH PullRequestMergeMethod = "SQUASH"

// PullRequestMergeMethod_REBASE: Add all commits from the head branch onto the base branch individually.
const PullRequestMergeMethod_REBASE PullRequestMergeMethod = "REBASE"

// PullRequestOrder (INPUT_OBJECT): Ways in which lists of issues can be ordered upon return.
type PullRequestOrder struct {
	// Field: The field in which to order pull requests by.
	//
	// GraphQL type: PullRequestOrderField!
	Field PullRequestOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order pull requests by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// PullRequestOrderField (ENUM): Properties by which pull_requests connections can be ordered.
type PullRequestOrderField string

// PullRequestOrderField_CREATED_AT: Order pull_requests by creation time.
const PullRequestOrderField_CREATED_AT PullRequestOrderField = "CREATED_AT"

// PullRequestOrderField_UPDATED_AT: Order pull_requests by update time.
const PullRequestOrderField_UPDATED_AT PullRequestOrderField = "UPDATED_AT"

// PullRequestParameters (OBJECT): Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
type PullRequestParameters struct {
	// AllowedMergeMethods: When merging pull requests, you can allow any combination of merge commits, squashing, or rebasing. At least one option must be enabled.
	AllowedMergeMethods []string `json:"allowedMergeMethods,omitempty"`

	// DismissStaleReviewsOnPush: New, reviewable commits pushed will dismiss previous pull request review approvals.
	DismissStaleReviewsOnPush bool `json:"dismissStaleReviewsOnPush,omitempty"`

	// RequireCodeOwnerReview: Require an approving review in pull requests that modify files that have a designated code owner.
	RequireCodeOwnerReview bool `json:"requireCodeOwnerReview,omitempty"`

	// RequireLastPushApproval: Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval bool `json:"requireLastPushApproval,omitempty"`

	// RequiredApprovingReviewCount: The number of approving reviews that are required before a pull request can be merged.
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount,omitempty"`

	// RequiredReviewThreadResolution: All conversations on code must be resolved before a pull request can be merged.
	RequiredReviewThreadResolution bool `json:"requiredReviewThreadResolution,omitempty"`
}

func (x *PullRequestParameters) GetAllowedMergeMethods() []string { return x.AllowedMergeMethods }
func (x *PullRequestParameters) GetDismissStaleReviewsOnPush() bool {
	return x.DismissStaleReviewsOnPush
}
func (x *PullRequestParameters) GetRequireCodeOwnerReview() bool  { return x.RequireCodeOwnerReview }
func (x *PullRequestParameters) GetRequireLastPushApproval() bool { return x.RequireLastPushApproval }
func (x *PullRequestParameters) GetRequiredApprovingReviewCount() int {
	return x.RequiredApprovingReviewCount
}
func (x *PullRequestParameters) GetRequiredReviewThreadResolution() bool {
	return x.RequiredReviewThreadResolution
}

// PullRequestParametersInput (INPUT_OBJECT): Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
type PullRequestParametersInput struct {
	// AllowedMergeMethods: When merging pull requests, you can allow any combination of merge commits, squashing, or rebasing. At least one option must be enabled.
	//
	// GraphQL type: [String!]
	AllowedMergeMethods []string `json:"allowedMergeMethods,omitempty"`

	// DismissStaleReviewsOnPush: New, reviewable commits pushed will dismiss previous pull request review approvals.
	//
	// GraphQL type: Boolean!
	DismissStaleReviewsOnPush bool `json:"dismissStaleReviewsOnPush,omitempty"`

	// RequireCodeOwnerReview: Require an approving review in pull requests that modify files that have a designated code owner.
	//
	// GraphQL type: Boolean!
	RequireCodeOwnerReview bool `json:"requireCodeOwnerReview,omitempty"`

	// RequireLastPushApproval: Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
	//
	// GraphQL type: Boolean!
	RequireLastPushApproval bool `json:"requireLastPushApproval,omitempty"`

	// RequiredApprovingReviewCount: The number of approving reviews that are required before a pull request can be merged.
	//
	// GraphQL type: Int!
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount,omitempty"`

	// RequiredReviewThreadResolution: All conversations on code must be resolved before a pull request can be merged.
	//
	// GraphQL type: Boolean!
	RequiredReviewThreadResolution bool `json:"requiredReviewThreadResolution,omitempty"`
}

// PullRequestReview (OBJECT): A review object for a given pull request.
type PullRequestReview struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// AuthorCanPushToRepository: Indicates whether the author of this review has push access to the repository.
	AuthorCanPushToRepository bool `json:"authorCanPushToRepository,omitempty"`

	// Body: Identifies the pull request review body.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body of this review rendered as plain text.
	BodyText string `json:"bodyText,omitempty"`

	// Comments: A list of review comments for the current pull request review.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Comments *PullRequestReviewCommentConnection `json:"comments,omitempty"`

	// Commit: Identifies the commit associated with this pull request review.
	Commit *Commit `json:"commit,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the PullRequestReview object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsMinimized: Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// MinimizedReason: Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason string `json:"minimizedReason,omitempty"`

	// OnBehalfOf: A list of teams that this review was made on behalf of.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	OnBehalfOf *TeamConnection `json:"onBehalfOf,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// PullRequest: Identifies the pull request associated with this pull request review.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path permalink for this PullRequestReview.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// State: Identifies the current state of the pull request review.
	State PullRequestReviewState `json:"state,omitempty"`

	// SubmittedAt: Identifies when the Pull Request Review was submitted.
	SubmittedAt DateTime `json:"submittedAt,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL permalink for this PullRequestReview.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanMinimize: Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`
}

func (x *PullRequestReview) GetAuthor() Actor { return x.Author }
func (x *PullRequestReview) GetAuthorAssociation() CommentAuthorAssociation {
	return x.AuthorAssociation
}
func (x *PullRequestReview) GetAuthorCanPushToRepository() bool               { return x.AuthorCanPushToRepository }
func (x *PullRequestReview) GetBody() string                                  { return x.Body }
func (x *PullRequestReview) GetBodyHTML() template.HTML                       { return x.BodyHTML }
func (x *PullRequestReview) GetBodyText() string                              { return x.BodyText }
func (x *PullRequestReview) GetComments() *PullRequestReviewCommentConnection { return x.Comments }
func (x *PullRequestReview) GetCommit() *Commit                               { return x.Commit }
func (x *PullRequestReview) GetCreatedAt() DateTime                           { return x.CreatedAt }
func (x *PullRequestReview) GetCreatedViaEmail() bool                         { return x.CreatedViaEmail }
func (x *PullRequestReview) GetDatabaseId() int                               { return x.DatabaseId }
func (x *PullRequestReview) GetEditor() Actor                                 { return x.Editor }
func (x *PullRequestReview) GetFullDatabaseId() BigInt                        { return x.FullDatabaseId }
func (x *PullRequestReview) GetId() ID                                        { return x.Id }
func (x *PullRequestReview) GetIncludesCreatedEdit() bool                     { return x.IncludesCreatedEdit }
func (x *PullRequestReview) GetIsMinimized() bool                             { return x.IsMinimized }
func (x *PullRequestReview) GetLastEditedAt() DateTime                        { return x.LastEditedAt }
func (x *PullRequestReview) GetMinimizedReason() string                       { return x.MinimizedReason }
func (x *PullRequestReview) GetOnBehalfOf() *TeamConnection                   { return x.OnBehalfOf }
func (x *PullRequestReview) GetPublishedAt() DateTime                         { return x.PublishedAt }
func (x *PullRequestReview) GetPullRequest() *PullRequest                     { return x.PullRequest }
func (x *PullRequestReview) GetReactionGroups() []*ReactionGroup              { return x.ReactionGroups }
func (x *PullRequestReview) GetReactions() *ReactionConnection                { return x.Reactions }
func (x *PullRequestReview) GetRepository() *Repository                       { return x.Repository }
func (x *PullRequestReview) GetResourcePath() URI                             { return x.ResourcePath }
func (x *PullRequestReview) GetState() PullRequestReviewState                 { return x.State }
func (x *PullRequestReview) GetSubmittedAt() DateTime                         { return x.SubmittedAt }
func (x *PullRequestReview) GetUpdatedAt() DateTime                           { return x.UpdatedAt }
func (x *PullRequestReview) GetUrl() URI                                      { return x.Url }
func (x *PullRequestReview) GetUserContentEdits() *UserContentEditConnection {
	return x.UserContentEdits
}
func (x *PullRequestReview) GetViewerCanDelete() bool   { return x.ViewerCanDelete }
func (x *PullRequestReview) GetViewerCanMinimize() bool { return x.ViewerCanMinimize }
func (x *PullRequestReview) GetViewerCanReact() bool    { return x.ViewerCanReact }
func (x *PullRequestReview) GetViewerCanUpdate() bool   { return x.ViewerCanUpdate }
func (x *PullRequestReview) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *PullRequestReview) GetViewerDidAuthor() bool { return x.ViewerDidAuthor }

// PullRequestReviewComment (OBJECT): A review comment associated with a given repository pull request.
type PullRequestReviewComment struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the subject of the comment.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: The comment body of this review comment.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The comment body of this review comment rendered as plain text.
	BodyText string `json:"bodyText,omitempty"`

	// Commit: Identifies the commit associated with the comment.
	Commit *Commit `json:"commit,omitempty"`

	// CreatedAt: Identifies when the comment was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DiffHunk: The diff hunk to which the comment applies.
	DiffHunk string `json:"diffHunk,omitempty"`

	// DraftedAt: Identifies when the comment was created in a draft state.
	DraftedAt DateTime `json:"draftedAt,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// FullDatabaseId: Identifies the primary key from the database as a BigInt.
	FullDatabaseId BigInt `json:"fullDatabaseId,omitempty"`

	// Id: The Node ID of the PullRequestReviewComment object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsMinimized: Returns whether or not a comment has been minimized.
	IsMinimized bool `json:"isMinimized,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// Line: The end line number on the file to which the comment applies.
	Line int `json:"line,omitempty"`

	// MinimizedReason: Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
	MinimizedReason string `json:"minimizedReason,omitempty"`

	// OriginalCommit: Identifies the original commit associated with the comment.
	OriginalCommit *Commit `json:"originalCommit,omitempty"`

	// OriginalLine: The end line number on the file to which the comment applied when it was first created.
	OriginalLine int `json:"originalLine,omitempty"`

	// OriginalPosition: The original line index in the diff to which the comment applies.
	//
	// Deprecated: The original line index in the diff to which the comment applies.
	OriginalPosition int `json:"originalPosition,omitempty"`

	// OriginalStartLine: The start line number on the file to which the comment applied when it was first created.
	OriginalStartLine int `json:"originalStartLine,omitempty"`

	// Outdated: Identifies when the comment body is outdated.
	Outdated bool `json:"outdated,omitempty"`

	// Path: The path to which the comment applies.
	Path string `json:"path,omitempty"`

	// Position: The line index in the diff to which the comment applies.
	//
	// Deprecated: The line index in the diff to which the comment applies.
	Position int `json:"position,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// PullRequest: The pull request associated with this review comment.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// PullRequestReview: The pull request review associated with this review comment.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// ReplyTo: The comment this is a reply to.
	ReplyTo *PullRequestReviewComment `json:"replyTo,omitempty"`

	// Repository: The repository associated with this node.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path permalink for this review comment.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// StartLine: The start line number on the file to which the comment applies.
	StartLine int `json:"startLine,omitempty"`

	// State: Identifies the state of the comment.
	State PullRequestReviewCommentState `json:"state,omitempty"`

	// SubjectType: The level at which the comments in the corresponding thread are targeted, can be a diff line or a file.
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType,omitempty"`

	// UpdatedAt: Identifies when the comment was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL permalink for this review comment.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanMinimize: Check if the current viewer can minimize this object.
	ViewerCanMinimize bool `json:"viewerCanMinimize,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`
}

func (x *PullRequestReviewComment) GetAuthor() Actor { return x.Author }
func (x *PullRequestReviewComment) GetAuthorAssociation() CommentAuthorAssociation {
	return x.AuthorAssociation
}
func (x *PullRequestReviewComment) GetBody() string              { return x.Body }
func (x *PullRequestReviewComment) GetBodyHTML() template.HTML   { return x.BodyHTML }
func (x *PullRequestReviewComment) GetBodyText() string          { return x.BodyText }
func (x *PullRequestReviewComment) GetCommit() *Commit           { return x.Commit }
func (x *PullRequestReviewComment) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *PullRequestReviewComment) GetCreatedViaEmail() bool     { return x.CreatedViaEmail }
func (x *PullRequestReviewComment) GetDatabaseId() int           { return x.DatabaseId }
func (x *PullRequestReviewComment) GetDiffHunk() string          { return x.DiffHunk }
func (x *PullRequestReviewComment) GetDraftedAt() DateTime       { return x.DraftedAt }
func (x *PullRequestReviewComment) GetEditor() Actor             { return x.Editor }
func (x *PullRequestReviewComment) GetFullDatabaseId() BigInt    { return x.FullDatabaseId }
func (x *PullRequestReviewComment) GetId() ID                    { return x.Id }
func (x *PullRequestReviewComment) GetIncludesCreatedEdit() bool { return x.IncludesCreatedEdit }
func (x *PullRequestReviewComment) GetIsMinimized() bool         { return x.IsMinimized }
func (x *PullRequestReviewComment) GetLastEditedAt() DateTime    { return x.LastEditedAt }
func (x *PullRequestReviewComment) GetLine() int                 { return x.Line }
func (x *PullRequestReviewComment) GetMinimizedReason() string   { return x.MinimizedReason }
func (x *PullRequestReviewComment) GetOriginalCommit() *Commit   { return x.OriginalCommit }
func (x *PullRequestReviewComment) GetOriginalLine() int         { return x.OriginalLine }
func (x *PullRequestReviewComment) GetOriginalPosition() int     { return x.OriginalPosition }
func (x *PullRequestReviewComment) GetOriginalStartLine() int    { return x.OriginalStartLine }
func (x *PullRequestReviewComment) GetOutdated() bool            { return x.Outdated }
func (x *PullRequestReviewComment) GetPath() string              { return x.Path }
func (x *PullRequestReviewComment) GetPosition() int             { return x.Position }
func (x *PullRequestReviewComment) GetPublishedAt() DateTime     { return x.PublishedAt }
func (x *PullRequestReviewComment) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *PullRequestReviewComment) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}
func (x *PullRequestReviewComment) GetReactionGroups() []*ReactionGroup     { return x.ReactionGroups }
func (x *PullRequestReviewComment) GetReactions() *ReactionConnection       { return x.Reactions }
func (x *PullRequestReviewComment) GetReplyTo() *PullRequestReviewComment   { return x.ReplyTo }
func (x *PullRequestReviewComment) GetRepository() *Repository              { return x.Repository }
func (x *PullRequestReviewComment) GetResourcePath() URI                    { return x.ResourcePath }
func (x *PullRequestReviewComment) GetStartLine() int                       { return x.StartLine }
func (x *PullRequestReviewComment) GetState() PullRequestReviewCommentState { return x.State }
func (x *PullRequestReviewComment) GetSubjectType() PullRequestReviewThreadSubjectType {
	return x.SubjectType
}
func (x *PullRequestReviewComment) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *PullRequestReviewComment) GetUrl() URI            { return x.Url }
func (x *PullRequestReviewComment) GetUserContentEdits() *UserContentEditConnection {
	return x.UserContentEdits
}
func (x *PullRequestReviewComment) GetViewerCanDelete() bool   { return x.ViewerCanDelete }
func (x *PullRequestReviewComment) GetViewerCanMinimize() bool { return x.ViewerCanMinimize }
func (x *PullRequestReviewComment) GetViewerCanReact() bool    { return x.ViewerCanReact }
func (x *PullRequestReviewComment) GetViewerCanUpdate() bool   { return x.ViewerCanUpdate }
func (x *PullRequestReviewComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *PullRequestReviewComment) GetViewerDidAuthor() bool { return x.ViewerDidAuthor }

// PullRequestReviewCommentConnection (OBJECT): The connection type for PullRequestReviewComment.
type PullRequestReviewCommentConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestReviewCommentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PullRequestReviewComment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestReviewCommentConnection) GetEdges() []*PullRequestReviewCommentEdge {
	return x.Edges
}
func (x *PullRequestReviewCommentConnection) GetNodes() []*PullRequestReviewComment { return x.Nodes }
func (x *PullRequestReviewCommentConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *PullRequestReviewCommentConnection) GetTotalCount() int                    { return x.TotalCount }

// PullRequestReviewCommentEdge (OBJECT): An edge in a connection.
type PullRequestReviewCommentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PullRequestReviewComment `json:"node,omitempty"`
}

func (x *PullRequestReviewCommentEdge) GetCursor() string                  { return x.Cursor }
func (x *PullRequestReviewCommentEdge) GetNode() *PullRequestReviewComment { return x.Node }

// PullRequestReviewCommentState (ENUM): The possible states of a pull request review comment.
type PullRequestReviewCommentState string

// PullRequestReviewCommentState_PENDING: A comment that is part of a pending review.
const PullRequestReviewCommentState_PENDING PullRequestReviewCommentState = "PENDING"

// PullRequestReviewCommentState_SUBMITTED: A comment that is part of a submitted review.
const PullRequestReviewCommentState_SUBMITTED PullRequestReviewCommentState = "SUBMITTED"

// PullRequestReviewConnection (OBJECT): The connection type for PullRequestReview.
type PullRequestReviewConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestReviewEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PullRequestReview `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestReviewConnection) GetEdges() []*PullRequestReviewEdge { return x.Edges }
func (x *PullRequestReviewConnection) GetNodes() []*PullRequestReview     { return x.Nodes }
func (x *PullRequestReviewConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *PullRequestReviewConnection) GetTotalCount() int                 { return x.TotalCount }

// PullRequestReviewContributionsByRepository (OBJECT): This aggregates pull request reviews made by a user within one repository.
type PullRequestReviewContributionsByRepository struct {
	// Contributions: The pull request review contributions.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ContributionOrder
	Contributions *CreatedPullRequestReviewContributionConnection `json:"contributions,omitempty"`

	// Repository: The repository in which the pull request reviews were made.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *PullRequestReviewContributionsByRepository) GetContributions() *CreatedPullRequestReviewContributionConnection {
	return x.Contributions
}
func (x *PullRequestReviewContributionsByRepository) GetRepository() *Repository { return x.Repository }

// PullRequestReviewDecision (ENUM): The review status of a pull request.
type PullRequestReviewDecision string

// PullRequestReviewDecision_CHANGES_REQUESTED: Changes have been requested on the pull request.
const PullRequestReviewDecision_CHANGES_REQUESTED PullRequestReviewDecision = "CHANGES_REQUESTED"

// PullRequestReviewDecision_APPROVED: The pull request has received an approving review.
const PullRequestReviewDecision_APPROVED PullRequestReviewDecision = "APPROVED"

// PullRequestReviewDecision_REVIEW_REQUIRED: A review is required before the pull request can be merged.
const PullRequestReviewDecision_REVIEW_REQUIRED PullRequestReviewDecision = "REVIEW_REQUIRED"

// PullRequestReviewEdge (OBJECT): An edge in a connection.
type PullRequestReviewEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PullRequestReview `json:"node,omitempty"`
}

func (x *PullRequestReviewEdge) GetCursor() string           { return x.Cursor }
func (x *PullRequestReviewEdge) GetNode() *PullRequestReview { return x.Node }

// PullRequestReviewEvent (ENUM): The possible events to perform on a pull request review.
type PullRequestReviewEvent string

// PullRequestReviewEvent_COMMENT: Submit general feedback without explicit approval.
const PullRequestReviewEvent_COMMENT PullRequestReviewEvent = "COMMENT"

// PullRequestReviewEvent_APPROVE: Submit feedback and approve merging these changes.
const PullRequestReviewEvent_APPROVE PullRequestReviewEvent = "APPROVE"

// PullRequestReviewEvent_REQUEST_CHANGES: Submit feedback that must be addressed before merging.
const PullRequestReviewEvent_REQUEST_CHANGES PullRequestReviewEvent = "REQUEST_CHANGES"

// PullRequestReviewEvent_DISMISS: Dismiss review so it now longer effects merging.
const PullRequestReviewEvent_DISMISS PullRequestReviewEvent = "DISMISS"

// PullRequestReviewState (ENUM): The possible states of a pull request review.
type PullRequestReviewState string

// PullRequestReviewState_PENDING: A review that has not yet been submitted.
const PullRequestReviewState_PENDING PullRequestReviewState = "PENDING"

// PullRequestReviewState_COMMENTED: An informational review.
const PullRequestReviewState_COMMENTED PullRequestReviewState = "COMMENTED"

// PullRequestReviewState_APPROVED: A review allowing the pull request to merge.
const PullRequestReviewState_APPROVED PullRequestReviewState = "APPROVED"

// PullRequestReviewState_CHANGES_REQUESTED: A review blocking the pull request from merging.
const PullRequestReviewState_CHANGES_REQUESTED PullRequestReviewState = "CHANGES_REQUESTED"

// PullRequestReviewState_DISMISSED: A review that has been dismissed.
const PullRequestReviewState_DISMISSED PullRequestReviewState = "DISMISSED"

// PullRequestReviewThread (OBJECT): A threaded list of comments for a given pull request.
type PullRequestReviewThread struct {
	// Comments: A list of pull request comments associated with the thread.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - skip Int
	Comments *PullRequestReviewCommentConnection `json:"comments,omitempty"`

	// DiffSide: The side of the diff on which this thread was placed.
	DiffSide DiffSide `json:"diffSide,omitempty"`

	// Id: The Node ID of the PullRequestReviewThread object.
	Id ID `json:"id,omitempty"`

	// IsCollapsed: Whether or not the thread has been collapsed (resolved).
	IsCollapsed bool `json:"isCollapsed,omitempty"`

	// IsOutdated: Indicates whether this thread was outdated by newer changes.
	IsOutdated bool `json:"isOutdated,omitempty"`

	// IsResolved: Whether this thread has been resolved.
	IsResolved bool `json:"isResolved,omitempty"`

	// Line: The line in the file to which this thread refers.
	Line int `json:"line,omitempty"`

	// OriginalLine: The original line in the file to which this thread refers.
	OriginalLine int `json:"originalLine,omitempty"`

	// OriginalStartLine: The original start line in the file to which this thread refers (multi-line only).
	OriginalStartLine int `json:"originalStartLine,omitempty"`

	// Path: Identifies the file path of this thread.
	Path string `json:"path,omitempty"`

	// PullRequest: Identifies the pull request associated with this thread.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Repository: Identifies the repository associated with this thread.
	Repository *Repository `json:"repository,omitempty"`

	// ResolvedBy: The user who resolved this thread.
	ResolvedBy *User `json:"resolvedBy,omitempty"`

	// StartDiffSide: The side of the diff that the first line of the thread starts on (multi-line only).
	StartDiffSide DiffSide `json:"startDiffSide,omitempty"`

	// StartLine: The start line in the file to which this thread refers (multi-line only).
	StartLine int `json:"startLine,omitempty"`

	// SubjectType: The level at which the comments in the corresponding thread are targeted, can be a diff line or a file.
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType,omitempty"`

	// ViewerCanReply: Indicates whether the current viewer can reply to this thread.
	ViewerCanReply bool `json:"viewerCanReply,omitempty"`

	// ViewerCanResolve: Whether or not the viewer can resolve this thread.
	ViewerCanResolve bool `json:"viewerCanResolve,omitempty"`

	// ViewerCanUnresolve: Whether or not the viewer can unresolve this thread.
	ViewerCanUnresolve bool `json:"viewerCanUnresolve,omitempty"`
}

func (x *PullRequestReviewThread) GetComments() *PullRequestReviewCommentConnection {
	return x.Comments
}
func (x *PullRequestReviewThread) GetDiffSide() DiffSide        { return x.DiffSide }
func (x *PullRequestReviewThread) GetId() ID                    { return x.Id }
func (x *PullRequestReviewThread) GetIsCollapsed() bool         { return x.IsCollapsed }
func (x *PullRequestReviewThread) GetIsOutdated() bool          { return x.IsOutdated }
func (x *PullRequestReviewThread) GetIsResolved() bool          { return x.IsResolved }
func (x *PullRequestReviewThread) GetLine() int                 { return x.Line }
func (x *PullRequestReviewThread) GetOriginalLine() int         { return x.OriginalLine }
func (x *PullRequestReviewThread) GetOriginalStartLine() int    { return x.OriginalStartLine }
func (x *PullRequestReviewThread) GetPath() string              { return x.Path }
func (x *PullRequestReviewThread) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *PullRequestReviewThread) GetRepository() *Repository   { return x.Repository }
func (x *PullRequestReviewThread) GetResolvedBy() *User         { return x.ResolvedBy }
func (x *PullRequestReviewThread) GetStartDiffSide() DiffSide   { return x.StartDiffSide }
func (x *PullRequestReviewThread) GetStartLine() int            { return x.StartLine }
func (x *PullRequestReviewThread) GetSubjectType() PullRequestReviewThreadSubjectType {
	return x.SubjectType
}
func (x *PullRequestReviewThread) GetViewerCanReply() bool     { return x.ViewerCanReply }
func (x *PullRequestReviewThread) GetViewerCanResolve() bool   { return x.ViewerCanResolve }
func (x *PullRequestReviewThread) GetViewerCanUnresolve() bool { return x.ViewerCanUnresolve }

// PullRequestReviewThreadConnection (OBJECT): Review comment threads for a pull request review.
type PullRequestReviewThreadConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestReviewThreadEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PullRequestReviewThread `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestReviewThreadConnection) GetEdges() []*PullRequestReviewThreadEdge { return x.Edges }
func (x *PullRequestReviewThreadConnection) GetNodes() []*PullRequestReviewThread     { return x.Nodes }
func (x *PullRequestReviewThreadConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *PullRequestReviewThreadConnection) GetTotalCount() int                       { return x.TotalCount }

// PullRequestReviewThreadEdge (OBJECT): An edge in a connection.
type PullRequestReviewThreadEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PullRequestReviewThread `json:"node,omitempty"`
}

func (x *PullRequestReviewThreadEdge) GetCursor() string                 { return x.Cursor }
func (x *PullRequestReviewThreadEdge) GetNode() *PullRequestReviewThread { return x.Node }

// PullRequestReviewThreadSubjectType (ENUM): The possible subject types of a pull request review comment.
type PullRequestReviewThreadSubjectType string

// PullRequestReviewThreadSubjectType_LINE: A comment that has been made against the line of a pull request.
const PullRequestReviewThreadSubjectType_LINE PullRequestReviewThreadSubjectType = "LINE"

// PullRequestReviewThreadSubjectType_FILE: A comment that has been made against the file of a pull request.
const PullRequestReviewThreadSubjectType_FILE PullRequestReviewThreadSubjectType = "FILE"

// PullRequestRevisionMarker (OBJECT): Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
type PullRequestRevisionMarker struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// LastSeenCommit: The last commit the viewer has seen.
	LastSeenCommit *Commit `json:"lastSeenCommit,omitempty"`

	// PullRequest: The pull request to which the marker belongs.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *PullRequestRevisionMarker) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *PullRequestRevisionMarker) GetLastSeenCommit() *Commit   { return x.LastSeenCommit }
func (x *PullRequestRevisionMarker) GetPullRequest() *PullRequest { return x.PullRequest }

// PullRequestState (ENUM): The possible states of a pull request.
type PullRequestState string

// PullRequestState_OPEN: A pull request that is still open.
const PullRequestState_OPEN PullRequestState = "OPEN"

// PullRequestState_CLOSED: A pull request that has been closed without being merged.
const PullRequestState_CLOSED PullRequestState = "CLOSED"

// PullRequestState_MERGED: A pull request that has been closed by being merged.
const PullRequestState_MERGED PullRequestState = "MERGED"

// PullRequestTemplate (OBJECT): A repository pull request template.
type PullRequestTemplate struct {
	// Body: The body of the template.
	Body string `json:"body,omitempty"`

	// Filename: The filename of the template.
	Filename string `json:"filename,omitempty"`

	// Repository: The repository the template belongs to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *PullRequestTemplate) GetBody() string            { return x.Body }
func (x *PullRequestTemplate) GetFilename() string        { return x.Filename }
func (x *PullRequestTemplate) GetRepository() *Repository { return x.Repository }

// PullRequestThread (OBJECT): A threaded list of comments for a given pull request.
type PullRequestThread struct {
	// Comments: A list of pull request comments associated with the thread.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - skip Int
	Comments *PullRequestReviewCommentConnection `json:"comments,omitempty"`

	// DiffSide: The side of the diff on which this thread was placed.
	DiffSide DiffSide `json:"diffSide,omitempty"`

	// Id: The Node ID of the PullRequestThread object.
	Id ID `json:"id,omitempty"`

	// IsCollapsed: Whether or not the thread has been collapsed (resolved).
	IsCollapsed bool `json:"isCollapsed,omitempty"`

	// IsOutdated: Indicates whether this thread was outdated by newer changes.
	IsOutdated bool `json:"isOutdated,omitempty"`

	// IsResolved: Whether this thread has been resolved.
	IsResolved bool `json:"isResolved,omitempty"`

	// Line: The line in the file to which this thread refers.
	Line int `json:"line,omitempty"`

	// Path: Identifies the file path of this thread.
	Path string `json:"path,omitempty"`

	// PullRequest: Identifies the pull request associated with this thread.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Repository: Identifies the repository associated with this thread.
	Repository *Repository `json:"repository,omitempty"`

	// ResolvedBy: The user who resolved this thread.
	ResolvedBy *User `json:"resolvedBy,omitempty"`

	// StartDiffSide: The side of the diff that the first line of the thread starts on (multi-line only).
	StartDiffSide DiffSide `json:"startDiffSide,omitempty"`

	// StartLine: The line of the first file diff in the thread.
	StartLine int `json:"startLine,omitempty"`

	// SubjectType: The level at which the comments in the corresponding thread are targeted, can be a diff line or a file.
	SubjectType PullRequestReviewThreadSubjectType `json:"subjectType,omitempty"`

	// ViewerCanReply: Indicates whether the current viewer can reply to this thread.
	ViewerCanReply bool `json:"viewerCanReply,omitempty"`

	// ViewerCanResolve: Whether or not the viewer can resolve this thread.
	ViewerCanResolve bool `json:"viewerCanResolve,omitempty"`

	// ViewerCanUnresolve: Whether or not the viewer can unresolve this thread.
	ViewerCanUnresolve bool `json:"viewerCanUnresolve,omitempty"`
}

func (x *PullRequestThread) GetComments() *PullRequestReviewCommentConnection   { return x.Comments }
func (x *PullRequestThread) GetDiffSide() DiffSide                              { return x.DiffSide }
func (x *PullRequestThread) GetId() ID                                          { return x.Id }
func (x *PullRequestThread) GetIsCollapsed() bool                               { return x.IsCollapsed }
func (x *PullRequestThread) GetIsOutdated() bool                                { return x.IsOutdated }
func (x *PullRequestThread) GetIsResolved() bool                                { return x.IsResolved }
func (x *PullRequestThread) GetLine() int                                       { return x.Line }
func (x *PullRequestThread) GetPath() string                                    { return x.Path }
func (x *PullRequestThread) GetPullRequest() *PullRequest                       { return x.PullRequest }
func (x *PullRequestThread) GetRepository() *Repository                         { return x.Repository }
func (x *PullRequestThread) GetResolvedBy() *User                               { return x.ResolvedBy }
func (x *PullRequestThread) GetStartDiffSide() DiffSide                         { return x.StartDiffSide }
func (x *PullRequestThread) GetStartLine() int                                  { return x.StartLine }
func (x *PullRequestThread) GetSubjectType() PullRequestReviewThreadSubjectType { return x.SubjectType }
func (x *PullRequestThread) GetViewerCanReply() bool                            { return x.ViewerCanReply }
func (x *PullRequestThread) GetViewerCanResolve() bool                          { return x.ViewerCanResolve }
func (x *PullRequestThread) GetViewerCanUnresolve() bool                        { return x.ViewerCanUnresolve }

// PullRequestTimelineConnection (OBJECT): The connection type for PullRequestTimelineItem.
type PullRequestTimelineConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestTimelineItemEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []PullRequestTimelineItem `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PullRequestTimelineConnection) GetEdges() []*PullRequestTimelineItemEdge { return x.Edges }
func (x *PullRequestTimelineConnection) GetNodes() []PullRequestTimelineItem      { return x.Nodes }
func (x *PullRequestTimelineConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *PullRequestTimelineConnection) GetTotalCount() int                       { return x.TotalCount }

// PullRequestTimelineItem (UNION): An item in a pull request timeline.
// PullRequestTimelineItem_Interface: An item in a pull request timeline.
//
// Possible types:
//
//   - *AssignedEvent
//   - *BaseRefDeletedEvent
//   - *BaseRefForcePushedEvent
//   - *ClosedEvent
//   - *Commit
//   - *CommitCommentThread
//   - *CrossReferencedEvent
//   - *DemilestonedEvent
//   - *DeployedEvent
//   - *DeploymentEnvironmentChangedEvent
//   - *HeadRefDeletedEvent
//   - *HeadRefForcePushedEvent
//   - *HeadRefRestoredEvent
//   - *IssueComment
//   - *LabeledEvent
//   - *LockedEvent
//   - *MergedEvent
//   - *MilestonedEvent
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *PullRequestReviewThread
//   - *ReferencedEvent
//   - *RenamedTitleEvent
//   - *ReopenedEvent
//   - *ReviewDismissedEvent
//   - *ReviewRequestRemovedEvent
//   - *ReviewRequestedEvent
//   - *SubscribedEvent
//   - *UnassignedEvent
//   - *UnlabeledEvent
//   - *UnlockedEvent
//   - *UnsubscribedEvent
//   - *UserBlockedEvent
type PullRequestTimelineItem_Interface interface {
	isPullRequestTimelineItem()
}

func (*AssignedEvent) isPullRequestTimelineItem()                     {}
func (*BaseRefDeletedEvent) isPullRequestTimelineItem()               {}
func (*BaseRefForcePushedEvent) isPullRequestTimelineItem()           {}
func (*ClosedEvent) isPullRequestTimelineItem()                       {}
func (*Commit) isPullRequestTimelineItem()                            {}
func (*CommitCommentThread) isPullRequestTimelineItem()               {}
func (*CrossReferencedEvent) isPullRequestTimelineItem()              {}
func (*DemilestonedEvent) isPullRequestTimelineItem()                 {}
func (*DeployedEvent) isPullRequestTimelineItem()                     {}
func (*DeploymentEnvironmentChangedEvent) isPullRequestTimelineItem() {}
func (*HeadRefDeletedEvent) isPullRequestTimelineItem()               {}
func (*HeadRefForcePushedEvent) isPullRequestTimelineItem()           {}
func (*HeadRefRestoredEvent) isPullRequestTimelineItem()              {}
func (*IssueComment) isPullRequestTimelineItem()                      {}
func (*LabeledEvent) isPullRequestTimelineItem()                      {}
func (*LockedEvent) isPullRequestTimelineItem()                       {}
func (*MergedEvent) isPullRequestTimelineItem()                       {}
func (*MilestonedEvent) isPullRequestTimelineItem()                   {}
func (*PullRequestReview) isPullRequestTimelineItem()                 {}
func (*PullRequestReviewComment) isPullRequestTimelineItem()          {}
func (*PullRequestReviewThread) isPullRequestTimelineItem()           {}
func (*ReferencedEvent) isPullRequestTimelineItem()                   {}
func (*RenamedTitleEvent) isPullRequestTimelineItem()                 {}
func (*ReopenedEvent) isPullRequestTimelineItem()                     {}
func (*ReviewDismissedEvent) isPullRequestTimelineItem()              {}
func (*ReviewRequestRemovedEvent) isPullRequestTimelineItem()         {}
func (*ReviewRequestedEvent) isPullRequestTimelineItem()              {}
func (*SubscribedEvent) isPullRequestTimelineItem()                   {}
func (*UnassignedEvent) isPullRequestTimelineItem()                   {}
func (*UnlabeledEvent) isPullRequestTimelineItem()                    {}
func (*UnlockedEvent) isPullRequestTimelineItem()                     {}
func (*UnsubscribedEvent) isPullRequestTimelineItem()                 {}
func (*UserBlockedEvent) isPullRequestTimelineItem()                  {}

type PullRequestTimelineItem struct {
	Interface PullRequestTimelineItem_Interface
}

func (x *PullRequestTimelineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *PullRequestTimelineItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for PullRequestTimelineItem", info.Typename)
	case "AssignedEvent":
		x.Interface = new(AssignedEvent)
	case "BaseRefDeletedEvent":
		x.Interface = new(BaseRefDeletedEvent)
	case "BaseRefForcePushedEvent":
		x.Interface = new(BaseRefForcePushedEvent)
	case "ClosedEvent":
		x.Interface = new(ClosedEvent)
	case "Commit":
		x.Interface = new(Commit)
	case "CommitCommentThread":
		x.Interface = new(CommitCommentThread)
	case "CrossReferencedEvent":
		x.Interface = new(CrossReferencedEvent)
	case "DemilestonedEvent":
		x.Interface = new(DemilestonedEvent)
	case "DeployedEvent":
		x.Interface = new(DeployedEvent)
	case "DeploymentEnvironmentChangedEvent":
		x.Interface = new(DeploymentEnvironmentChangedEvent)
	case "HeadRefDeletedEvent":
		x.Interface = new(HeadRefDeletedEvent)
	case "HeadRefForcePushedEvent":
		x.Interface = new(HeadRefForcePushedEvent)
	case "HeadRefRestoredEvent":
		x.Interface = new(HeadRefRestoredEvent)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "LabeledEvent":
		x.Interface = new(LabeledEvent)
	case "LockedEvent":
		x.Interface = new(LockedEvent)
	case "MergedEvent":
		x.Interface = new(MergedEvent)
	case "MilestonedEvent":
		x.Interface = new(MilestonedEvent)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "PullRequestReviewThread":
		x.Interface = new(PullRequestReviewThread)
	case "ReferencedEvent":
		x.Interface = new(ReferencedEvent)
	case "RenamedTitleEvent":
		x.Interface = new(RenamedTitleEvent)
	case "ReopenedEvent":
		x.Interface = new(ReopenedEvent)
	case "ReviewDismissedEvent":
		x.Interface = new(ReviewDismissedEvent)
	case "ReviewRequestRemovedEvent":
		x.Interface = new(ReviewRequestRemovedEvent)
	case "ReviewRequestedEvent":
		x.Interface = new(ReviewRequestedEvent)
	case "SubscribedEvent":
		x.Interface = new(SubscribedEvent)
	case "UnassignedEvent":
		x.Interface = new(UnassignedEvent)
	case "UnlabeledEvent":
		x.Interface = new(UnlabeledEvent)
	case "UnlockedEvent":
		x.Interface = new(UnlockedEvent)
	case "UnsubscribedEvent":
		x.Interface = new(UnsubscribedEvent)
	case "UserBlockedEvent":
		x.Interface = new(UserBlockedEvent)
	}
	return json.Unmarshal(js, x.Interface)
}

// PullRequestTimelineItemEdge (OBJECT): An edge in a connection.
type PullRequestTimelineItemEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node PullRequestTimelineItem `json:"node,omitempty"`
}

func (x *PullRequestTimelineItemEdge) GetCursor() string                { return x.Cursor }
func (x *PullRequestTimelineItemEdge) GetNode() PullRequestTimelineItem { return x.Node }

// PullRequestTimelineItems (UNION): An item in a pull request timeline.
// PullRequestTimelineItems_Interface: An item in a pull request timeline.
//
// Possible types:
//
//   - *AddedToMergeQueueEvent
//   - *AddedToProjectEvent
//   - *AssignedEvent
//   - *AutoMergeDisabledEvent
//   - *AutoMergeEnabledEvent
//   - *AutoRebaseEnabledEvent
//   - *AutoSquashEnabledEvent
//   - *AutomaticBaseChangeFailedEvent
//   - *AutomaticBaseChangeSucceededEvent
//   - *BaseRefChangedEvent
//   - *BaseRefDeletedEvent
//   - *BaseRefForcePushedEvent
//   - *ClosedEvent
//   - *CommentDeletedEvent
//   - *ConnectedEvent
//   - *ConvertToDraftEvent
//   - *ConvertedNoteToIssueEvent
//   - *ConvertedToDiscussionEvent
//   - *CrossReferencedEvent
//   - *DemilestonedEvent
//   - *DeployedEvent
//   - *DeploymentEnvironmentChangedEvent
//   - *DisconnectedEvent
//   - *HeadRefDeletedEvent
//   - *HeadRefForcePushedEvent
//   - *HeadRefRestoredEvent
//   - *IssueComment
//   - *LabeledEvent
//   - *LockedEvent
//   - *MarkedAsDuplicateEvent
//   - *MentionedEvent
//   - *MergedEvent
//   - *MilestonedEvent
//   - *MovedColumnsInProjectEvent
//   - *ParentIssueAddedEvent
//   - *ParentIssueRemovedEvent
//   - *PinnedEvent
//   - *PullRequestCommit
//   - *PullRequestCommitCommentThread
//   - *PullRequestReview
//   - *PullRequestReviewThread
//   - *PullRequestRevisionMarker
//   - *ReadyForReviewEvent
//   - *ReferencedEvent
//   - *RemovedFromMergeQueueEvent
//   - *RemovedFromProjectEvent
//   - *RenamedTitleEvent
//   - *ReopenedEvent
//   - *ReviewDismissedEvent
//   - *ReviewRequestRemovedEvent
//   - *ReviewRequestedEvent
//   - *SubIssueAddedEvent
//   - *SubIssueRemovedEvent
//   - *SubscribedEvent
//   - *TransferredEvent
//   - *UnassignedEvent
//   - *UnlabeledEvent
//   - *UnlockedEvent
//   - *UnmarkedAsDuplicateEvent
//   - *UnpinnedEvent
//   - *UnsubscribedEvent
//   - *UserBlockedEvent
type PullRequestTimelineItems_Interface interface {
	isPullRequestTimelineItems()
}

func (*AddedToMergeQueueEvent) isPullRequestTimelineItems()            {}
func (*AddedToProjectEvent) isPullRequestTimelineItems()               {}
func (*AssignedEvent) isPullRequestTimelineItems()                     {}
func (*AutoMergeDisabledEvent) isPullRequestTimelineItems()            {}
func (*AutoMergeEnabledEvent) isPullRequestTimelineItems()             {}
func (*AutoRebaseEnabledEvent) isPullRequestTimelineItems()            {}
func (*AutoSquashEnabledEvent) isPullRequestTimelineItems()            {}
func (*AutomaticBaseChangeFailedEvent) isPullRequestTimelineItems()    {}
func (*AutomaticBaseChangeSucceededEvent) isPullRequestTimelineItems() {}
func (*BaseRefChangedEvent) isPullRequestTimelineItems()               {}
func (*BaseRefDeletedEvent) isPullRequestTimelineItems()               {}
func (*BaseRefForcePushedEvent) isPullRequestTimelineItems()           {}
func (*ClosedEvent) isPullRequestTimelineItems()                       {}
func (*CommentDeletedEvent) isPullRequestTimelineItems()               {}
func (*ConnectedEvent) isPullRequestTimelineItems()                    {}
func (*ConvertToDraftEvent) isPullRequestTimelineItems()               {}
func (*ConvertedNoteToIssueEvent) isPullRequestTimelineItems()         {}
func (*ConvertedToDiscussionEvent) isPullRequestTimelineItems()        {}
func (*CrossReferencedEvent) isPullRequestTimelineItems()              {}
func (*DemilestonedEvent) isPullRequestTimelineItems()                 {}
func (*DeployedEvent) isPullRequestTimelineItems()                     {}
func (*DeploymentEnvironmentChangedEvent) isPullRequestTimelineItems() {}
func (*DisconnectedEvent) isPullRequestTimelineItems()                 {}
func (*HeadRefDeletedEvent) isPullRequestTimelineItems()               {}
func (*HeadRefForcePushedEvent) isPullRequestTimelineItems()           {}
func (*HeadRefRestoredEvent) isPullRequestTimelineItems()              {}
func (*IssueComment) isPullRequestTimelineItems()                      {}
func (*LabeledEvent) isPullRequestTimelineItems()                      {}
func (*LockedEvent) isPullRequestTimelineItems()                       {}
func (*MarkedAsDuplicateEvent) isPullRequestTimelineItems()            {}
func (*MentionedEvent) isPullRequestTimelineItems()                    {}
func (*MergedEvent) isPullRequestTimelineItems()                       {}
func (*MilestonedEvent) isPullRequestTimelineItems()                   {}
func (*MovedColumnsInProjectEvent) isPullRequestTimelineItems()        {}
func (*ParentIssueAddedEvent) isPullRequestTimelineItems()             {}
func (*ParentIssueRemovedEvent) isPullRequestTimelineItems()           {}
func (*PinnedEvent) isPullRequestTimelineItems()                       {}
func (*PullRequestCommit) isPullRequestTimelineItems()                 {}
func (*PullRequestCommitCommentThread) isPullRequestTimelineItems()    {}
func (*PullRequestReview) isPullRequestTimelineItems()                 {}
func (*PullRequestReviewThread) isPullRequestTimelineItems()           {}
func (*PullRequestRevisionMarker) isPullRequestTimelineItems()         {}
func (*ReadyForReviewEvent) isPullRequestTimelineItems()               {}
func (*ReferencedEvent) isPullRequestTimelineItems()                   {}
func (*RemovedFromMergeQueueEvent) isPullRequestTimelineItems()        {}
func (*RemovedFromProjectEvent) isPullRequestTimelineItems()           {}
func (*RenamedTitleEvent) isPullRequestTimelineItems()                 {}
func (*ReopenedEvent) isPullRequestTimelineItems()                     {}
func (*ReviewDismissedEvent) isPullRequestTimelineItems()              {}
func (*ReviewRequestRemovedEvent) isPullRequestTimelineItems()         {}
func (*ReviewRequestedEvent) isPullRequestTimelineItems()              {}
func (*SubIssueAddedEvent) isPullRequestTimelineItems()                {}
func (*SubIssueRemovedEvent) isPullRequestTimelineItems()              {}
func (*SubscribedEvent) isPullRequestTimelineItems()                   {}
func (*TransferredEvent) isPullRequestTimelineItems()                  {}
func (*UnassignedEvent) isPullRequestTimelineItems()                   {}
func (*UnlabeledEvent) isPullRequestTimelineItems()                    {}
func (*UnlockedEvent) isPullRequestTimelineItems()                     {}
func (*UnmarkedAsDuplicateEvent) isPullRequestTimelineItems()          {}
func (*UnpinnedEvent) isPullRequestTimelineItems()                     {}
func (*UnsubscribedEvent) isPullRequestTimelineItems()                 {}
func (*UserBlockedEvent) isPullRequestTimelineItems()                  {}

type PullRequestTimelineItems struct {
	Interface PullRequestTimelineItems_Interface
}

func (x *PullRequestTimelineItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *PullRequestTimelineItems) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for PullRequestTimelineItems", info.Typename)
	case "AddedToMergeQueueEvent":
		x.Interface = new(AddedToMergeQueueEvent)
	case "AddedToProjectEvent":
		x.Interface = new(AddedToProjectEvent)
	case "AssignedEvent":
		x.Interface = new(AssignedEvent)
	case "AutoMergeDisabledEvent":
		x.Interface = new(AutoMergeDisabledEvent)
	case "AutoMergeEnabledEvent":
		x.Interface = new(AutoMergeEnabledEvent)
	case "AutoRebaseEnabledEvent":
		x.Interface = new(AutoRebaseEnabledEvent)
	case "AutoSquashEnabledEvent":
		x.Interface = new(AutoSquashEnabledEvent)
	case "AutomaticBaseChangeFailedEvent":
		x.Interface = new(AutomaticBaseChangeFailedEvent)
	case "AutomaticBaseChangeSucceededEvent":
		x.Interface = new(AutomaticBaseChangeSucceededEvent)
	case "BaseRefChangedEvent":
		x.Interface = new(BaseRefChangedEvent)
	case "BaseRefDeletedEvent":
		x.Interface = new(BaseRefDeletedEvent)
	case "BaseRefForcePushedEvent":
		x.Interface = new(BaseRefForcePushedEvent)
	case "ClosedEvent":
		x.Interface = new(ClosedEvent)
	case "CommentDeletedEvent":
		x.Interface = new(CommentDeletedEvent)
	case "ConnectedEvent":
		x.Interface = new(ConnectedEvent)
	case "ConvertToDraftEvent":
		x.Interface = new(ConvertToDraftEvent)
	case "ConvertedNoteToIssueEvent":
		x.Interface = new(ConvertedNoteToIssueEvent)
	case "ConvertedToDiscussionEvent":
		x.Interface = new(ConvertedToDiscussionEvent)
	case "CrossReferencedEvent":
		x.Interface = new(CrossReferencedEvent)
	case "DemilestonedEvent":
		x.Interface = new(DemilestonedEvent)
	case "DeployedEvent":
		x.Interface = new(DeployedEvent)
	case "DeploymentEnvironmentChangedEvent":
		x.Interface = new(DeploymentEnvironmentChangedEvent)
	case "DisconnectedEvent":
		x.Interface = new(DisconnectedEvent)
	case "HeadRefDeletedEvent":
		x.Interface = new(HeadRefDeletedEvent)
	case "HeadRefForcePushedEvent":
		x.Interface = new(HeadRefForcePushedEvent)
	case "HeadRefRestoredEvent":
		x.Interface = new(HeadRefRestoredEvent)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "LabeledEvent":
		x.Interface = new(LabeledEvent)
	case "LockedEvent":
		x.Interface = new(LockedEvent)
	case "MarkedAsDuplicateEvent":
		x.Interface = new(MarkedAsDuplicateEvent)
	case "MentionedEvent":
		x.Interface = new(MentionedEvent)
	case "MergedEvent":
		x.Interface = new(MergedEvent)
	case "MilestonedEvent":
		x.Interface = new(MilestonedEvent)
	case "MovedColumnsInProjectEvent":
		x.Interface = new(MovedColumnsInProjectEvent)
	case "ParentIssueAddedEvent":
		x.Interface = new(ParentIssueAddedEvent)
	case "ParentIssueRemovedEvent":
		x.Interface = new(ParentIssueRemovedEvent)
	case "PinnedEvent":
		x.Interface = new(PinnedEvent)
	case "PullRequestCommit":
		x.Interface = new(PullRequestCommit)
	case "PullRequestCommitCommentThread":
		x.Interface = new(PullRequestCommitCommentThread)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewThread":
		x.Interface = new(PullRequestReviewThread)
	case "PullRequestRevisionMarker":
		x.Interface = new(PullRequestRevisionMarker)
	case "ReadyForReviewEvent":
		x.Interface = new(ReadyForReviewEvent)
	case "ReferencedEvent":
		x.Interface = new(ReferencedEvent)
	case "RemovedFromMergeQueueEvent":
		x.Interface = new(RemovedFromMergeQueueEvent)
	case "RemovedFromProjectEvent":
		x.Interface = new(RemovedFromProjectEvent)
	case "RenamedTitleEvent":
		x.Interface = new(RenamedTitleEvent)
	case "ReopenedEvent":
		x.Interface = new(ReopenedEvent)
	case "ReviewDismissedEvent":
		x.Interface = new(ReviewDismissedEvent)
	case "ReviewRequestRemovedEvent":
		x.Interface = new(ReviewRequestRemovedEvent)
	case "ReviewRequestedEvent":
		x.Interface = new(ReviewRequestedEvent)
	case "SubIssueAddedEvent":
		x.Interface = new(SubIssueAddedEvent)
	case "SubIssueRemovedEvent":
		x.Interface = new(SubIssueRemovedEvent)
	case "SubscribedEvent":
		x.Interface = new(SubscribedEvent)
	case "TransferredEvent":
		x.Interface = new(TransferredEvent)
	case "UnassignedEvent":
		x.Interface = new(UnassignedEvent)
	case "UnlabeledEvent":
		x.Interface = new(UnlabeledEvent)
	case "UnlockedEvent":
		x.Interface = new(UnlockedEvent)
	case "UnmarkedAsDuplicateEvent":
		x.Interface = new(UnmarkedAsDuplicateEvent)
	case "UnpinnedEvent":
		x.Interface = new(UnpinnedEvent)
	case "UnsubscribedEvent":
		x.Interface = new(UnsubscribedEvent)
	case "UserBlockedEvent":
		x.Interface = new(UserBlockedEvent)
	}
	return json.Unmarshal(js, x.Interface)
}

// PullRequestTimelineItemsConnection (OBJECT): The connection type for PullRequestTimelineItems.
type PullRequestTimelineItemsConnection struct {
	// Edges: A list of edges.
	Edges []*PullRequestTimelineItemsEdge `json:"edges,omitempty"`

	// FilteredCount: Identifies the count of items after applying `before` and `after` filters.
	FilteredCount int `json:"filteredCount,omitempty"`

	// Nodes: A list of nodes.
	Nodes []PullRequestTimelineItems `json:"nodes,omitempty"`

	// PageCount: Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
	PageCount int `json:"pageCount,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// UpdatedAt: Identifies the date and time when the timeline was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *PullRequestTimelineItemsConnection) GetEdges() []*PullRequestTimelineItemsEdge {
	return x.Edges
}
func (x *PullRequestTimelineItemsConnection) GetFilteredCount() int                { return x.FilteredCount }
func (x *PullRequestTimelineItemsConnection) GetNodes() []PullRequestTimelineItems { return x.Nodes }
func (x *PullRequestTimelineItemsConnection) GetPageCount() int                    { return x.PageCount }
func (x *PullRequestTimelineItemsConnection) GetPageInfo() *PageInfo               { return x.PageInfo }
func (x *PullRequestTimelineItemsConnection) GetTotalCount() int                   { return x.TotalCount }
func (x *PullRequestTimelineItemsConnection) GetUpdatedAt() DateTime               { return x.UpdatedAt }

// PullRequestTimelineItemsEdge (OBJECT): An edge in a connection.
type PullRequestTimelineItemsEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node PullRequestTimelineItems `json:"node,omitempty"`
}

func (x *PullRequestTimelineItemsEdge) GetCursor() string                 { return x.Cursor }
func (x *PullRequestTimelineItemsEdge) GetNode() PullRequestTimelineItems { return x.Node }

// PullRequestTimelineItemsItemType (ENUM): The possible item types found in a timeline.
type PullRequestTimelineItemsItemType string

// PullRequestTimelineItemsItemType_PULL_REQUEST_COMMIT: Represents a Git commit part of a pull request.
const PullRequestTimelineItemsItemType_PULL_REQUEST_COMMIT PullRequestTimelineItemsItemType = "PULL_REQUEST_COMMIT"

// PullRequestTimelineItemsItemType_PULL_REQUEST_COMMIT_COMMENT_THREAD: Represents a commit comment thread part of a pull request.
const PullRequestTimelineItemsItemType_PULL_REQUEST_COMMIT_COMMENT_THREAD PullRequestTimelineItemsItemType = "PULL_REQUEST_COMMIT_COMMENT_THREAD"

// PullRequestTimelineItemsItemType_PULL_REQUEST_REVIEW: A review object for a given pull request.
const PullRequestTimelineItemsItemType_PULL_REQUEST_REVIEW PullRequestTimelineItemsItemType = "PULL_REQUEST_REVIEW"

// PullRequestTimelineItemsItemType_PULL_REQUEST_REVIEW_THREAD: A threaded list of comments for a given pull request.
const PullRequestTimelineItemsItemType_PULL_REQUEST_REVIEW_THREAD PullRequestTimelineItemsItemType = "PULL_REQUEST_REVIEW_THREAD"

// PullRequestTimelineItemsItemType_PULL_REQUEST_REVISION_MARKER: Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
const PullRequestTimelineItemsItemType_PULL_REQUEST_REVISION_MARKER PullRequestTimelineItemsItemType = "PULL_REQUEST_REVISION_MARKER"

// PullRequestTimelineItemsItemType_AUTOMATIC_BASE_CHANGE_FAILED_EVENT: Represents a 'automatic_base_change_failed' event on a given pull request.
const PullRequestTimelineItemsItemType_AUTOMATIC_BASE_CHANGE_FAILED_EVENT PullRequestTimelineItemsItemType = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT"

// PullRequestTimelineItemsItemType_AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT: Represents a 'automatic_base_change_succeeded' event on a given pull request.
const PullRequestTimelineItemsItemType_AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT PullRequestTimelineItemsItemType = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT"

// PullRequestTimelineItemsItemType_AUTO_MERGE_DISABLED_EVENT: Represents a 'auto_merge_disabled' event on a given pull request.
const PullRequestTimelineItemsItemType_AUTO_MERGE_DISABLED_EVENT PullRequestTimelineItemsItemType = "AUTO_MERGE_DISABLED_EVENT"

// PullRequestTimelineItemsItemType_AUTO_MERGE_ENABLED_EVENT: Represents a 'auto_merge_enabled' event on a given pull request.
const PullRequestTimelineItemsItemType_AUTO_MERGE_ENABLED_EVENT PullRequestTimelineItemsItemType = "AUTO_MERGE_ENABLED_EVENT"

// PullRequestTimelineItemsItemType_AUTO_REBASE_ENABLED_EVENT: Represents a 'auto_rebase_enabled' event on a given pull request.
const PullRequestTimelineItemsItemType_AUTO_REBASE_ENABLED_EVENT PullRequestTimelineItemsItemType = "AUTO_REBASE_ENABLED_EVENT"

// PullRequestTimelineItemsItemType_AUTO_SQUASH_ENABLED_EVENT: Represents a 'auto_squash_enabled' event on a given pull request.
const PullRequestTimelineItemsItemType_AUTO_SQUASH_ENABLED_EVENT PullRequestTimelineItemsItemType = "AUTO_SQUASH_ENABLED_EVENT"

// PullRequestTimelineItemsItemType_BASE_REF_CHANGED_EVENT: Represents a 'base_ref_changed' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_BASE_REF_CHANGED_EVENT PullRequestTimelineItemsItemType = "BASE_REF_CHANGED_EVENT"

// PullRequestTimelineItemsItemType_BASE_REF_FORCE_PUSHED_EVENT: Represents a 'base_ref_force_pushed' event on a given pull request.
const PullRequestTimelineItemsItemType_BASE_REF_FORCE_PUSHED_EVENT PullRequestTimelineItemsItemType = "BASE_REF_FORCE_PUSHED_EVENT"

// PullRequestTimelineItemsItemType_BASE_REF_DELETED_EVENT: Represents a 'base_ref_deleted' event on a given pull request.
const PullRequestTimelineItemsItemType_BASE_REF_DELETED_EVENT PullRequestTimelineItemsItemType = "BASE_REF_DELETED_EVENT"

// PullRequestTimelineItemsItemType_DEPLOYED_EVENT: Represents a 'deployed' event on a given pull request.
const PullRequestTimelineItemsItemType_DEPLOYED_EVENT PullRequestTimelineItemsItemType = "DEPLOYED_EVENT"

// PullRequestTimelineItemsItemType_DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT: Represents a 'deployment_environment_changed' event on a given pull request.
const PullRequestTimelineItemsItemType_DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT PullRequestTimelineItemsItemType = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT"

// PullRequestTimelineItemsItemType_HEAD_REF_DELETED_EVENT: Represents a 'head_ref_deleted' event on a given pull request.
const PullRequestTimelineItemsItemType_HEAD_REF_DELETED_EVENT PullRequestTimelineItemsItemType = "HEAD_REF_DELETED_EVENT"

// PullRequestTimelineItemsItemType_HEAD_REF_FORCE_PUSHED_EVENT: Represents a 'head_ref_force_pushed' event on a given pull request.
const PullRequestTimelineItemsItemType_HEAD_REF_FORCE_PUSHED_EVENT PullRequestTimelineItemsItemType = "HEAD_REF_FORCE_PUSHED_EVENT"

// PullRequestTimelineItemsItemType_HEAD_REF_RESTORED_EVENT: Represents a 'head_ref_restored' event on a given pull request.
const PullRequestTimelineItemsItemType_HEAD_REF_RESTORED_EVENT PullRequestTimelineItemsItemType = "HEAD_REF_RESTORED_EVENT"

// PullRequestTimelineItemsItemType_MERGED_EVENT: Represents a 'merged' event on a given pull request.
const PullRequestTimelineItemsItemType_MERGED_EVENT PullRequestTimelineItemsItemType = "MERGED_EVENT"

// PullRequestTimelineItemsItemType_REVIEW_DISMISSED_EVENT: Represents a 'review_dismissed' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_REVIEW_DISMISSED_EVENT PullRequestTimelineItemsItemType = "REVIEW_DISMISSED_EVENT"

// PullRequestTimelineItemsItemType_REVIEW_REQUESTED_EVENT: Represents an 'review_requested' event on a given pull request.
const PullRequestTimelineItemsItemType_REVIEW_REQUESTED_EVENT PullRequestTimelineItemsItemType = "REVIEW_REQUESTED_EVENT"

// PullRequestTimelineItemsItemType_REVIEW_REQUEST_REMOVED_EVENT: Represents an 'review_request_removed' event on a given pull request.
const PullRequestTimelineItemsItemType_REVIEW_REQUEST_REMOVED_EVENT PullRequestTimelineItemsItemType = "REVIEW_REQUEST_REMOVED_EVENT"

// PullRequestTimelineItemsItemType_READY_FOR_REVIEW_EVENT: Represents a 'ready_for_review' event on a given pull request.
const PullRequestTimelineItemsItemType_READY_FOR_REVIEW_EVENT PullRequestTimelineItemsItemType = "READY_FOR_REVIEW_EVENT"

// PullRequestTimelineItemsItemType_CONVERT_TO_DRAFT_EVENT: Represents a 'convert_to_draft' event on a given pull request.
const PullRequestTimelineItemsItemType_CONVERT_TO_DRAFT_EVENT PullRequestTimelineItemsItemType = "CONVERT_TO_DRAFT_EVENT"

// PullRequestTimelineItemsItemType_ADDED_TO_MERGE_QUEUE_EVENT: Represents an 'added_to_merge_queue' event on a given pull request.
const PullRequestTimelineItemsItemType_ADDED_TO_MERGE_QUEUE_EVENT PullRequestTimelineItemsItemType = "ADDED_TO_MERGE_QUEUE_EVENT"

// PullRequestTimelineItemsItemType_REMOVED_FROM_MERGE_QUEUE_EVENT: Represents a 'removed_from_merge_queue' event on a given pull request.
const PullRequestTimelineItemsItemType_REMOVED_FROM_MERGE_QUEUE_EVENT PullRequestTimelineItemsItemType = "REMOVED_FROM_MERGE_QUEUE_EVENT"

// PullRequestTimelineItemsItemType_ISSUE_COMMENT: Represents a comment on an Issue.
const PullRequestTimelineItemsItemType_ISSUE_COMMENT PullRequestTimelineItemsItemType = "ISSUE_COMMENT"

// PullRequestTimelineItemsItemType_CROSS_REFERENCED_EVENT: Represents a mention made by one issue or pull request to another.
const PullRequestTimelineItemsItemType_CROSS_REFERENCED_EVENT PullRequestTimelineItemsItemType = "CROSS_REFERENCED_EVENT"

// PullRequestTimelineItemsItemType_ADDED_TO_PROJECT_EVENT: Represents a 'added_to_project' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_ADDED_TO_PROJECT_EVENT PullRequestTimelineItemsItemType = "ADDED_TO_PROJECT_EVENT"

// PullRequestTimelineItemsItemType_ASSIGNED_EVENT: Represents an 'assigned' event on any assignable object.
const PullRequestTimelineItemsItemType_ASSIGNED_EVENT PullRequestTimelineItemsItemType = "ASSIGNED_EVENT"

// PullRequestTimelineItemsItemType_CLOSED_EVENT: Represents a 'closed' event on any `Closable`.
const PullRequestTimelineItemsItemType_CLOSED_EVENT PullRequestTimelineItemsItemType = "CLOSED_EVENT"

// PullRequestTimelineItemsItemType_COMMENT_DELETED_EVENT: Represents a 'comment_deleted' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_COMMENT_DELETED_EVENT PullRequestTimelineItemsItemType = "COMMENT_DELETED_EVENT"

// PullRequestTimelineItemsItemType_CONNECTED_EVENT: Represents a 'connected' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_CONNECTED_EVENT PullRequestTimelineItemsItemType = "CONNECTED_EVENT"

// PullRequestTimelineItemsItemType_CONVERTED_NOTE_TO_ISSUE_EVENT: Represents a 'converted_note_to_issue' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_CONVERTED_NOTE_TO_ISSUE_EVENT PullRequestTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"

// PullRequestTimelineItemsItemType_CONVERTED_TO_DISCUSSION_EVENT: Represents a 'converted_to_discussion' event on a given issue.
const PullRequestTimelineItemsItemType_CONVERTED_TO_DISCUSSION_EVENT PullRequestTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"

// PullRequestTimelineItemsItemType_DEMILESTONED_EVENT: Represents a 'demilestoned' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_DEMILESTONED_EVENT PullRequestTimelineItemsItemType = "DEMILESTONED_EVENT"

// PullRequestTimelineItemsItemType_DISCONNECTED_EVENT: Represents a 'disconnected' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_DISCONNECTED_EVENT PullRequestTimelineItemsItemType = "DISCONNECTED_EVENT"

// PullRequestTimelineItemsItemType_LABELED_EVENT: Represents a 'labeled' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_LABELED_EVENT PullRequestTimelineItemsItemType = "LABELED_EVENT"

// PullRequestTimelineItemsItemType_LOCKED_EVENT: Represents a 'locked' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_LOCKED_EVENT PullRequestTimelineItemsItemType = "LOCKED_EVENT"

// PullRequestTimelineItemsItemType_MARKED_AS_DUPLICATE_EVENT: Represents a 'marked_as_duplicate' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_MARKED_AS_DUPLICATE_EVENT PullRequestTimelineItemsItemType = "MARKED_AS_DUPLICATE_EVENT"

// PullRequestTimelineItemsItemType_MENTIONED_EVENT: Represents a 'mentioned' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_MENTIONED_EVENT PullRequestTimelineItemsItemType = "MENTIONED_EVENT"

// PullRequestTimelineItemsItemType_MILESTONED_EVENT: Represents a 'milestoned' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_MILESTONED_EVENT PullRequestTimelineItemsItemType = "MILESTONED_EVENT"

// PullRequestTimelineItemsItemType_MOVED_COLUMNS_IN_PROJECT_EVENT: Represents a 'moved_columns_in_project' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_MOVED_COLUMNS_IN_PROJECT_EVENT PullRequestTimelineItemsItemType = "MOVED_COLUMNS_IN_PROJECT_EVENT"

// PullRequestTimelineItemsItemType_PINNED_EVENT: Represents a 'pinned' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_PINNED_EVENT PullRequestTimelineItemsItemType = "PINNED_EVENT"

// PullRequestTimelineItemsItemType_REFERENCED_EVENT: Represents a 'referenced' event on a given `ReferencedSubject`.
const PullRequestTimelineItemsItemType_REFERENCED_EVENT PullRequestTimelineItemsItemType = "REFERENCED_EVENT"

// PullRequestTimelineItemsItemType_REMOVED_FROM_PROJECT_EVENT: Represents a 'removed_from_project' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_REMOVED_FROM_PROJECT_EVENT PullRequestTimelineItemsItemType = "REMOVED_FROM_PROJECT_EVENT"

// PullRequestTimelineItemsItemType_RENAMED_TITLE_EVENT: Represents a 'renamed' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_RENAMED_TITLE_EVENT PullRequestTimelineItemsItemType = "RENAMED_TITLE_EVENT"

// PullRequestTimelineItemsItemType_REOPENED_EVENT: Represents a 'reopened' event on any `Closable`.
const PullRequestTimelineItemsItemType_REOPENED_EVENT PullRequestTimelineItemsItemType = "REOPENED_EVENT"

// PullRequestTimelineItemsItemType_SUBSCRIBED_EVENT: Represents a 'subscribed' event on a given `Subscribable`.
const PullRequestTimelineItemsItemType_SUBSCRIBED_EVENT PullRequestTimelineItemsItemType = "SUBSCRIBED_EVENT"

// PullRequestTimelineItemsItemType_TRANSFERRED_EVENT: Represents a 'transferred' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_TRANSFERRED_EVENT PullRequestTimelineItemsItemType = "TRANSFERRED_EVENT"

// PullRequestTimelineItemsItemType_UNASSIGNED_EVENT: Represents an 'unassigned' event on any assignable object.
const PullRequestTimelineItemsItemType_UNASSIGNED_EVENT PullRequestTimelineItemsItemType = "UNASSIGNED_EVENT"

// PullRequestTimelineItemsItemType_UNLABELED_EVENT: Represents an 'unlabeled' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_UNLABELED_EVENT PullRequestTimelineItemsItemType = "UNLABELED_EVENT"

// PullRequestTimelineItemsItemType_UNLOCKED_EVENT: Represents an 'unlocked' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_UNLOCKED_EVENT PullRequestTimelineItemsItemType = "UNLOCKED_EVENT"

// PullRequestTimelineItemsItemType_USER_BLOCKED_EVENT: Represents a 'user_blocked' event on a given user.
const PullRequestTimelineItemsItemType_USER_BLOCKED_EVENT PullRequestTimelineItemsItemType = "USER_BLOCKED_EVENT"

// PullRequestTimelineItemsItemType_UNMARKED_AS_DUPLICATE_EVENT: Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_UNMARKED_AS_DUPLICATE_EVENT PullRequestTimelineItemsItemType = "UNMARKED_AS_DUPLICATE_EVENT"

// PullRequestTimelineItemsItemType_UNPINNED_EVENT: Represents an 'unpinned' event on a given issue or pull request.
const PullRequestTimelineItemsItemType_UNPINNED_EVENT PullRequestTimelineItemsItemType = "UNPINNED_EVENT"

// PullRequestTimelineItemsItemType_UNSUBSCRIBED_EVENT: Represents an 'unsubscribed' event on a given `Subscribable`.
const PullRequestTimelineItemsItemType_UNSUBSCRIBED_EVENT PullRequestTimelineItemsItemType = "UNSUBSCRIBED_EVENT"

// PullRequestTimelineItemsItemType_SUB_ISSUE_ADDED_EVENT: Represents a 'sub_issue_added' event on a given issue.
const PullRequestTimelineItemsItemType_SUB_ISSUE_ADDED_EVENT PullRequestTimelineItemsItemType = "SUB_ISSUE_ADDED_EVENT"

// PullRequestTimelineItemsItemType_SUB_ISSUE_REMOVED_EVENT: Represents a 'sub_issue_removed' event on a given issue.
const PullRequestTimelineItemsItemType_SUB_ISSUE_REMOVED_EVENT PullRequestTimelineItemsItemType = "SUB_ISSUE_REMOVED_EVENT"

// PullRequestTimelineItemsItemType_PARENT_ISSUE_ADDED_EVENT: Represents a 'parent_issue_added' event on a given issue.
const PullRequestTimelineItemsItemType_PARENT_ISSUE_ADDED_EVENT PullRequestTimelineItemsItemType = "PARENT_ISSUE_ADDED_EVENT"

// PullRequestTimelineItemsItemType_PARENT_ISSUE_REMOVED_EVENT: Represents a 'parent_issue_removed' event on a given issue.
const PullRequestTimelineItemsItemType_PARENT_ISSUE_REMOVED_EVENT PullRequestTimelineItemsItemType = "PARENT_ISSUE_REMOVED_EVENT"

// PullRequestUpdateState (ENUM): The possible target states when updating a pull request.
type PullRequestUpdateState string

// PullRequestUpdateState_OPEN: A pull request that is still open.
const PullRequestUpdateState_OPEN PullRequestUpdateState = "OPEN"

// PullRequestUpdateState_CLOSED: A pull request that has been closed without being merged.
const PullRequestUpdateState_CLOSED PullRequestUpdateState = "CLOSED"

// Push (OBJECT): A Git push.
type Push struct {
	// Id: The Node ID of the Push object.
	Id ID `json:"id,omitempty"`

	// NextSha: The SHA after the push.
	NextSha GitObjectID `json:"nextSha,omitempty"`

	// Permalink: The permalink for this push.
	Permalink URI `json:"permalink,omitempty"`

	// PreviousSha: The SHA before the push.
	PreviousSha GitObjectID `json:"previousSha,omitempty"`

	// Pusher: The actor who pushed.
	Pusher Actor `json:"pusher,omitempty"`

	// Repository: The repository that was pushed to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *Push) GetId() ID                   { return x.Id }
func (x *Push) GetNextSha() GitObjectID     { return x.NextSha }
func (x *Push) GetPermalink() URI           { return x.Permalink }
func (x *Push) GetPreviousSha() GitObjectID { return x.PreviousSha }
func (x *Push) GetPusher() Actor            { return x.Pusher }
func (x *Push) GetRepository() *Repository  { return x.Repository }

// PushAllowance (OBJECT): A team, user, or app who has the ability to push to a protected branch.
type PushAllowance struct {
	// Actor: The actor that can push.
	Actor PushAllowanceActor `json:"actor,omitempty"`

	// BranchProtectionRule: Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// Id: The Node ID of the PushAllowance object.
	Id ID `json:"id,omitempty"`
}

func (x *PushAllowance) GetActor() PushAllowanceActor { return x.Actor }
func (x *PushAllowance) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *PushAllowance) GetId() ID { return x.Id }

// PushAllowanceActor (UNION): Types that can be an actor.
// PushAllowanceActor_Interface: Types that can be an actor.
//
// Possible types:
//
//   - *App
//   - *Team
//   - *User
type PushAllowanceActor_Interface interface {
	isPushAllowanceActor()
}

func (*App) isPushAllowanceActor()  {}
func (*Team) isPushAllowanceActor() {}
func (*User) isPushAllowanceActor() {}

type PushAllowanceActor struct {
	Interface PushAllowanceActor_Interface
}

func (x *PushAllowanceActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *PushAllowanceActor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for PushAllowanceActor", info.Typename)
	case "App":
		x.Interface = new(App)
	case "Team":
		x.Interface = new(Team)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// PushAllowanceConnection (OBJECT): The connection type for PushAllowance.
type PushAllowanceConnection struct {
	// Edges: A list of edges.
	Edges []*PushAllowanceEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*PushAllowance `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *PushAllowanceConnection) GetEdges() []*PushAllowanceEdge { return x.Edges }
func (x *PushAllowanceConnection) GetNodes() []*PushAllowance     { return x.Nodes }
func (x *PushAllowanceConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *PushAllowanceConnection) GetTotalCount() int             { return x.TotalCount }

// PushAllowanceEdge (OBJECT): An edge in a connection.
type PushAllowanceEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *PushAllowance `json:"node,omitempty"`
}

func (x *PushAllowanceEdge) GetCursor() string       { return x.Cursor }
func (x *PushAllowanceEdge) GetNode() *PushAllowance { return x.Node }

// Query (OBJECT): The query root of GitHub's GraphQL interface.
type Query struct {
	// CodeOfConduct: Look up a code of conduct by its key.
	//
	// Query arguments:
	//   - key String!
	CodeOfConduct *CodeOfConduct `json:"codeOfConduct,omitempty"`

	// CodesOfConduct: Look up a code of conduct by its key.
	CodesOfConduct []*CodeOfConduct `json:"codesOfConduct,omitempty"`

	// Enterprise: Look up an enterprise by URL slug.
	//
	// Query arguments:
	//   - slug String!
	//   - invitationToken String
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// EnterpriseAdministratorInvitation: Look up a pending enterprise administrator invitation by invitee, enterprise and role.
	//
	// Query arguments:
	//   - userLogin String!
	//   - enterpriseSlug String!
	//   - role EnterpriseAdministratorRole!
	EnterpriseAdministratorInvitation *EnterpriseAdministratorInvitation `json:"enterpriseAdministratorInvitation,omitempty"`

	// EnterpriseAdministratorInvitationByToken: Look up a pending enterprise administrator invitation by invitation token.
	//
	// Query arguments:
	//   - invitationToken String!
	EnterpriseAdministratorInvitationByToken *EnterpriseAdministratorInvitation `json:"enterpriseAdministratorInvitationByToken,omitempty"`

	// EnterpriseMemberInvitation: Look up a pending enterprise unaffiliated member invitation by invitee and enterprise.
	//
	// Query arguments:
	//   - userLogin String!
	//   - enterpriseSlug String!
	EnterpriseMemberInvitation *EnterpriseMemberInvitation `json:"enterpriseMemberInvitation,omitempty"`

	// EnterpriseMemberInvitationByToken: Look up a pending enterprise unaffiliated member invitation by invitation token.
	//
	// Query arguments:
	//   - invitationToken String!
	EnterpriseMemberInvitationByToken *EnterpriseMemberInvitation `json:"enterpriseMemberInvitationByToken,omitempty"`

	// Id: ID of the object.
	Id ID `json:"id,omitempty"`

	// License: Look up an open source license by its key.
	//
	// Query arguments:
	//   - key String!
	License *License `json:"license,omitempty"`

	// Licenses: Return a list of known open source licenses.
	Licenses []*License `json:"licenses,omitempty"`

	// MarketplaceCategories: Get alphabetically sorted list of Marketplace categories.
	//
	// Query arguments:
	//   - includeCategories [String!]
	//   - excludeEmpty Boolean
	//   - excludeSubcategories Boolean
	MarketplaceCategories []*MarketplaceCategory `json:"marketplaceCategories,omitempty"`

	// MarketplaceCategory: Look up a Marketplace category by its slug.
	//
	// Query arguments:
	//   - slug String!
	//   - useTopicAliases Boolean
	MarketplaceCategory *MarketplaceCategory `json:"marketplaceCategory,omitempty"`

	// MarketplaceListing: Look up a single Marketplace listing.
	//
	// Query arguments:
	//   - slug String!
	MarketplaceListing *MarketplaceListing `json:"marketplaceListing,omitempty"`

	// MarketplaceListings: Look up Marketplace listings.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - categorySlug String
	//   - useTopicAliases Boolean
	//   - viewerCanAdmin Boolean
	//   - adminId ID
	//   - organizationId ID
	//   - allStates Boolean
	//   - slugs [String]
	//   - primaryCategoryOnly Boolean
	//   - withFreeTrialsOnly Boolean
	MarketplaceListings *MarketplaceListingConnection `json:"marketplaceListings,omitempty"`

	// Meta: Return information about the GitHub instance.
	Meta *GitHubMetadata `json:"meta,omitempty"`

	// Node: Fetches an object given its ID.
	//
	// Query arguments:
	//   - id ID!
	Node Node `json:"node,omitempty"`

	// Nodes: Lookup nodes by a list of IDs.
	//
	// Query arguments:
	//   - ids [ID!]!
	Nodes []Node `json:"nodes,omitempty"`

	// Organization: Lookup a organization by login.
	//
	// Query arguments:
	//   - login String!
	Organization *Organization `json:"organization,omitempty"`

	// RateLimit: The client's rate limit information.
	//
	// Query arguments:
	//   - dryRun Boolean
	RateLimit *RateLimit `json:"rateLimit,omitempty"`

	// Relay: Workaround for re-exposing the root query object. (Refer to https://github.com/facebook/relay/issues/112 for more information.).
	Relay *Query `json:"relay,omitempty"`

	// Repository: Lookup a given repository by the owner and repository name.
	//
	// Query arguments:
	//   - owner String!
	//   - name String!
	//   - followRenames Boolean
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryOwner: Lookup a repository owner (ie. either a User or an Organization) by login.
	//
	// Query arguments:
	//   - login String!
	RepositoryOwner RepositoryOwner `json:"repositoryOwner,omitempty"`

	// Resource: Lookup resource by a URL.
	//
	// Query arguments:
	//   - url URI!
	Resource UniformResourceLocatable `json:"resource,omitempty"`

	// Search: Perform a search across resources, returning a maximum of 1,000 results.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - query String!
	//   - type SearchType!
	Search *SearchResultItemConnection `json:"search,omitempty"`

	// SecurityAdvisories: GitHub Security Advisories.
	//
	// Query arguments:
	//   - orderBy SecurityAdvisoryOrder
	//   - identifier SecurityAdvisoryIdentifierFilter
	//   - publishedSince DateTime
	//   - updatedSince DateTime
	//   - classifications [SecurityAdvisoryClassification!]
	//   - epssPercentage Float
	//   - epssPercentile Float
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SecurityAdvisories *SecurityAdvisoryConnection `json:"securityAdvisories,omitempty"`

	// SecurityAdvisory: Fetch a Security Advisory by its GHSA ID.
	//
	// Query arguments:
	//   - ghsaId String!
	SecurityAdvisory *SecurityAdvisory `json:"securityAdvisory,omitempty"`

	// SecurityVulnerabilities: Software Vulnerabilities documented by GitHub Security Advisories.
	//
	// Query arguments:
	//   - orderBy SecurityVulnerabilityOrder
	//   - ecosystem SecurityAdvisoryEcosystem
	//   - package String
	//   - severities [SecurityAdvisorySeverity!]
	//   - classifications [SecurityAdvisoryClassification!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SecurityVulnerabilities *SecurityVulnerabilityConnection `json:"securityVulnerabilities,omitempty"`

	// Sponsorables: Users and organizations who can be sponsored via GitHub Sponsors.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorableOrder
	//   - onlyDependencies Boolean
	//   - orgLoginForDependencies String
	//   - dependencyEcosystem SecurityAdvisoryEcosystem
	//   - ecosystem DependencyGraphEcosystem
	Sponsorables *SponsorableItemConnection `json:"sponsorables,omitempty"`

	// Topic: Look up a topic by name.
	//
	// Query arguments:
	//   - name String!
	Topic *Topic `json:"topic,omitempty"`

	// User: Lookup a user by login.
	//
	// Query arguments:
	//   - login String!
	User *User `json:"user,omitempty"`

	// Viewer: The currently authenticated user.
	Viewer *User `json:"viewer,omitempty"`
}

func (x *Query) GetCodeOfConduct() *CodeOfConduct    { return x.CodeOfConduct }
func (x *Query) GetCodesOfConduct() []*CodeOfConduct { return x.CodesOfConduct }
func (x *Query) GetEnterprise() *Enterprise          { return x.Enterprise }
func (x *Query) GetEnterpriseAdministratorInvitation() *EnterpriseAdministratorInvitation {
	return x.EnterpriseAdministratorInvitation
}
func (x *Query) GetEnterpriseAdministratorInvitationByToken() *EnterpriseAdministratorInvitation {
	return x.EnterpriseAdministratorInvitationByToken
}
func (x *Query) GetEnterpriseMemberInvitation() *EnterpriseMemberInvitation {
	return x.EnterpriseMemberInvitation
}
func (x *Query) GetEnterpriseMemberInvitationByToken() *EnterpriseMemberInvitation {
	return x.EnterpriseMemberInvitationByToken
}
func (x *Query) GetId() ID                                             { return x.Id }
func (x *Query) GetLicense() *License                                  { return x.License }
func (x *Query) GetLicenses() []*License                               { return x.Licenses }
func (x *Query) GetMarketplaceCategories() []*MarketplaceCategory      { return x.MarketplaceCategories }
func (x *Query) GetMarketplaceCategory() *MarketplaceCategory          { return x.MarketplaceCategory }
func (x *Query) GetMarketplaceListing() *MarketplaceListing            { return x.MarketplaceListing }
func (x *Query) GetMarketplaceListings() *MarketplaceListingConnection { return x.MarketplaceListings }
func (x *Query) GetMeta() *GitHubMetadata                              { return x.Meta }
func (x *Query) GetNode() Node                                         { return x.Node }
func (x *Query) GetNodes() []Node                                      { return x.Nodes }
func (x *Query) GetOrganization() *Organization                        { return x.Organization }
func (x *Query) GetRateLimit() *RateLimit                              { return x.RateLimit }
func (x *Query) GetRelay() *Query                                      { return x.Relay }
func (x *Query) GetRepository() *Repository                            { return x.Repository }
func (x *Query) GetRepositoryOwner() RepositoryOwner                   { return x.RepositoryOwner }
func (x *Query) GetResource() UniformResourceLocatable                 { return x.Resource }
func (x *Query) GetSearch() *SearchResultItemConnection                { return x.Search }
func (x *Query) GetSecurityAdvisories() *SecurityAdvisoryConnection    { return x.SecurityAdvisories }
func (x *Query) GetSecurityAdvisory() *SecurityAdvisory                { return x.SecurityAdvisory }
func (x *Query) GetSecurityVulnerabilities() *SecurityVulnerabilityConnection {
	return x.SecurityVulnerabilities
}
func (x *Query) GetSponsorables() *SponsorableItemConnection { return x.Sponsorables }
func (x *Query) GetTopic() *Topic                            { return x.Topic }
func (x *Query) GetUser() *User                              { return x.User }
func (x *Query) GetViewer() *User                            { return x.Viewer }

// RateLimit (OBJECT): Represents the client's rate limit.
type RateLimit struct {
	// Cost: The point cost for the current query counting against the rate limit.
	Cost int `json:"cost,omitempty"`

	// Limit: The maximum number of points the client is permitted to consume in a 60 minute window.
	Limit int `json:"limit,omitempty"`

	// NodeCount: The maximum number of nodes this query may return.
	NodeCount int `json:"nodeCount,omitempty"`

	// Remaining: The number of points remaining in the current rate limit window.
	Remaining int `json:"remaining,omitempty"`

	// ResetAt: The time at which the current rate limit window resets in UTC epoch seconds.
	ResetAt DateTime `json:"resetAt,omitempty"`

	// Used: The number of points used in the current rate limit window.
	Used int `json:"used,omitempty"`
}

func (x *RateLimit) GetCost() int         { return x.Cost }
func (x *RateLimit) GetLimit() int        { return x.Limit }
func (x *RateLimit) GetNodeCount() int    { return x.NodeCount }
func (x *RateLimit) GetRemaining() int    { return x.Remaining }
func (x *RateLimit) GetResetAt() DateTime { return x.ResetAt }
func (x *RateLimit) GetUsed() int         { return x.Used }

// Reactable (INTERFACE): Represents a subject that can be reacted on.
// Reactable_Interface: Represents a subject that can be reacted on.
//
// Possible types:
//
//   - *CommitComment
//   - *Discussion
//   - *DiscussionComment
//   - *Issue
//   - *IssueComment
//   - *PullRequest
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *Release
//   - *TeamDiscussion
//   - *TeamDiscussionComment
type Reactable_Interface interface {
	isReactable()
	GetDatabaseId() int
	GetId() ID
	GetReactionGroups() []*ReactionGroup
	GetReactions() *ReactionConnection
	GetViewerCanReact() bool
}

func (*CommitComment) isReactable()            {}
func (*Discussion) isReactable()               {}
func (*DiscussionComment) isReactable()        {}
func (*Issue) isReactable()                    {}
func (*IssueComment) isReactable()             {}
func (*PullRequest) isReactable()              {}
func (*PullRequestReview) isReactable()        {}
func (*PullRequestReviewComment) isReactable() {}
func (*Release) isReactable()                  {}
func (*TeamDiscussion) isReactable()           {}
func (*TeamDiscussionComment) isReactable()    {}

type Reactable struct {
	Interface Reactable_Interface
}

func (x *Reactable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Reactable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Reactable", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "Release":
		x.Interface = new(Release)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// ReactingUserConnection (OBJECT): The connection type for User.
type ReactingUserConnection struct {
	// Edges: A list of edges.
	Edges []*ReactingUserEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ReactingUserConnection) GetEdges() []*ReactingUserEdge { return x.Edges }
func (x *ReactingUserConnection) GetNodes() []*User             { return x.Nodes }
func (x *ReactingUserConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *ReactingUserConnection) GetTotalCount() int            { return x.TotalCount }

// ReactingUserEdge (OBJECT): Represents a user that's made a reaction.
type ReactingUserEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: undocumented.
	Node *User `json:"node,omitempty"`

	// ReactedAt: The moment when the user made the reaction.
	ReactedAt DateTime `json:"reactedAt,omitempty"`
}

func (x *ReactingUserEdge) GetCursor() string      { return x.Cursor }
func (x *ReactingUserEdge) GetNode() *User         { return x.Node }
func (x *ReactingUserEdge) GetReactedAt() DateTime { return x.ReactedAt }

// Reaction (OBJECT): An emoji reaction to a particular piece of content.
type Reaction struct {
	// Content: Identifies the emoji reaction.
	Content ReactionContent `json:"content,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the Reaction object.
	Id ID `json:"id,omitempty"`

	// Reactable: The reactable piece of content.
	Reactable Reactable `json:"reactable,omitempty"`

	// User: Identifies the user who created this reaction.
	User *User `json:"user,omitempty"`
}

func (x *Reaction) GetContent() ReactionContent { return x.Content }
func (x *Reaction) GetCreatedAt() DateTime      { return x.CreatedAt }
func (x *Reaction) GetDatabaseId() int          { return x.DatabaseId }
func (x *Reaction) GetId() ID                   { return x.Id }
func (x *Reaction) GetReactable() Reactable     { return x.Reactable }
func (x *Reaction) GetUser() *User              { return x.User }

// ReactionConnection (OBJECT): A list of reactions that have been left on the subject.
type ReactionConnection struct {
	// Edges: A list of edges.
	Edges []*ReactionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Reaction `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// ViewerHasReacted: Whether or not the authenticated user has left a reaction on the subject.
	ViewerHasReacted bool `json:"viewerHasReacted,omitempty"`
}

func (x *ReactionConnection) GetEdges() []*ReactionEdge { return x.Edges }
func (x *ReactionConnection) GetNodes() []*Reaction     { return x.Nodes }
func (x *ReactionConnection) GetPageInfo() *PageInfo    { return x.PageInfo }
func (x *ReactionConnection) GetTotalCount() int        { return x.TotalCount }
func (x *ReactionConnection) GetViewerHasReacted() bool { return x.ViewerHasReacted }

// ReactionContent (ENUM): Emojis that can be attached to Issues, Pull Requests and Comments.
type ReactionContent string

// ReactionContent_THUMBS_UP: Represents the `:+1:` emoji.
const ReactionContent_THUMBS_UP ReactionContent = "THUMBS_UP"

// ReactionContent_THUMBS_DOWN: Represents the `:-1:` emoji.
const ReactionContent_THUMBS_DOWN ReactionContent = "THUMBS_DOWN"

// ReactionContent_LAUGH: Represents the `:laugh:` emoji.
const ReactionContent_LAUGH ReactionContent = "LAUGH"

// ReactionContent_HOORAY: Represents the `:hooray:` emoji.
const ReactionContent_HOORAY ReactionContent = "HOORAY"

// ReactionContent_CONFUSED: Represents the `:confused:` emoji.
const ReactionContent_CONFUSED ReactionContent = "CONFUSED"

// ReactionContent_HEART: Represents the `:heart:` emoji.
const ReactionContent_HEART ReactionContent = "HEART"

// ReactionContent_ROCKET: Represents the `:rocket:` emoji.
const ReactionContent_ROCKET ReactionContent = "ROCKET"

// ReactionContent_EYES: Represents the `:eyes:` emoji.
const ReactionContent_EYES ReactionContent = "EYES"

// ReactionEdge (OBJECT): An edge in a connection.
type ReactionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Reaction `json:"node,omitempty"`
}

func (x *ReactionEdge) GetCursor() string  { return x.Cursor }
func (x *ReactionEdge) GetNode() *Reaction { return x.Node }

// ReactionGroup (OBJECT): A group of emoji reactions to a particular piece of content.
type ReactionGroup struct {
	// Content: Identifies the emoji reaction.
	Content ReactionContent `json:"content,omitempty"`

	// CreatedAt: Identifies when the reaction was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Reactors: Reactors to the reaction subject with the emotion represented by this reaction group.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Reactors *ReactorConnection `json:"reactors,omitempty"`

	// Subject: The subject that was reacted to.
	Subject Reactable `json:"subject,omitempty"`

	// Users: Users who have reacted to the reaction subject with the emotion represented by this reaction group.
	//
	// Deprecated: Users who have reacted to the reaction subject with the emotion represented by this reaction group.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Users *ReactingUserConnection `json:"users,omitempty"`

	// ViewerHasReacted: Whether or not the authenticated user has left a reaction on the subject.
	ViewerHasReacted bool `json:"viewerHasReacted,omitempty"`
}

func (x *ReactionGroup) GetContent() ReactionContent       { return x.Content }
func (x *ReactionGroup) GetCreatedAt() DateTime            { return x.CreatedAt }
func (x *ReactionGroup) GetReactors() *ReactorConnection   { return x.Reactors }
func (x *ReactionGroup) GetSubject() Reactable             { return x.Subject }
func (x *ReactionGroup) GetUsers() *ReactingUserConnection { return x.Users }
func (x *ReactionGroup) GetViewerHasReacted() bool         { return x.ViewerHasReacted }

// ReactionOrder (INPUT_OBJECT): Ways in which lists of reactions can be ordered upon return.
type ReactionOrder struct {
	// Field: The field in which to order reactions by.
	//
	// GraphQL type: ReactionOrderField!
	Field ReactionOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order reactions by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ReactionOrderField (ENUM): A list of fields that reactions can be ordered by.
type ReactionOrderField string

// ReactionOrderField_CREATED_AT: Allows ordering a list of reactions by when they were created.
const ReactionOrderField_CREATED_AT ReactionOrderField = "CREATED_AT"

// Reactor (UNION): Types that can be assigned to reactions.
// Reactor_Interface: Types that can be assigned to reactions.
//
// Possible types:
//
//   - *Bot
//   - *Mannequin
//   - *Organization
//   - *User
type Reactor_Interface interface {
	isReactor()
}

func (*Bot) isReactor()          {}
func (*Mannequin) isReactor()    {}
func (*Organization) isReactor() {}
func (*User) isReactor()         {}

type Reactor struct {
	Interface Reactor_Interface
}

func (x *Reactor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Reactor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Reactor", info.Typename)
	case "Bot":
		x.Interface = new(Bot)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ReactorConnection (OBJECT): The connection type for Reactor.
type ReactorConnection struct {
	// Edges: A list of edges.
	Edges []*ReactorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []Reactor `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ReactorConnection) GetEdges() []*ReactorEdge { return x.Edges }
func (x *ReactorConnection) GetNodes() []Reactor      { return x.Nodes }
func (x *ReactorConnection) GetPageInfo() *PageInfo   { return x.PageInfo }
func (x *ReactorConnection) GetTotalCount() int       { return x.TotalCount }

// ReactorEdge (OBJECT): Represents an author of a reaction.
type ReactorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The author of the reaction.
	Node Reactor `json:"node,omitempty"`

	// ReactedAt: The moment when the user made the reaction.
	ReactedAt DateTime `json:"reactedAt,omitempty"`
}

func (x *ReactorEdge) GetCursor() string      { return x.Cursor }
func (x *ReactorEdge) GetNode() Reactor       { return x.Node }
func (x *ReactorEdge) GetReactedAt() DateTime { return x.ReactedAt }

// ReadyForReviewEvent (OBJECT): Represents a 'ready_for_review' event on a given pull request.
type ReadyForReviewEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ReadyForReviewEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// ResourcePath: The HTTP path for this ready for review event.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this ready for review event.
	Url URI `json:"url,omitempty"`
}

func (x *ReadyForReviewEvent) GetActor() Actor              { return x.Actor }
func (x *ReadyForReviewEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *ReadyForReviewEvent) GetId() ID                    { return x.Id }
func (x *ReadyForReviewEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *ReadyForReviewEvent) GetResourcePath() URI         { return x.ResourcePath }
func (x *ReadyForReviewEvent) GetUrl() URI                  { return x.Url }

// Ref (OBJECT): Represents a Git reference.
type Ref struct {
	// AssociatedPullRequests: A list of pull requests with this ref as the head ref.
	//
	// Query arguments:
	//   - states [PullRequestState!]
	//   - labels [String!]
	//   - headRefName String
	//   - baseRefName String
	//   - orderBy IssueOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests,omitempty"`

	// BranchProtectionRule: Branch protection rules for this ref.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// Compare: Compares the current ref as a base ref to another head ref, if the comparison can be made.
	//
	// Query arguments:
	//   - headRef String!
	Compare *Comparison `json:"compare,omitempty"`

	// Id: The Node ID of the Ref object.
	Id ID `json:"id,omitempty"`

	// Name: The ref name.
	Name string `json:"name,omitempty"`

	// Prefix: The ref's prefix, such as `refs/heads/` or `refs/tags/`.
	Prefix string `json:"prefix,omitempty"`

	// RefUpdateRule: Branch protection rules that are viewable by non-admins.
	RefUpdateRule *RefUpdateRule `json:"refUpdateRule,omitempty"`

	// Repository: The repository the ref belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// Rules: A list of rules from active Repository and Organization rulesets that apply to this ref.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy RepositoryRuleOrder
	Rules *RepositoryRuleConnection `json:"rules,omitempty"`

	// Target: The object the ref points to. Returns null when object does not exist.
	Target GitObject `json:"target,omitempty"`
}

func (x *Ref) GetAssociatedPullRequests() *PullRequestConnection { return x.AssociatedPullRequests }
func (x *Ref) GetBranchProtectionRule() *BranchProtectionRule    { return x.BranchProtectionRule }
func (x *Ref) GetCompare() *Comparison                           { return x.Compare }
func (x *Ref) GetId() ID                                         { return x.Id }
func (x *Ref) GetName() string                                   { return x.Name }
func (x *Ref) GetPrefix() string                                 { return x.Prefix }
func (x *Ref) GetRefUpdateRule() *RefUpdateRule                  { return x.RefUpdateRule }
func (x *Ref) GetRepository() *Repository                        { return x.Repository }
func (x *Ref) GetRules() *RepositoryRuleConnection               { return x.Rules }
func (x *Ref) GetTarget() GitObject                              { return x.Target }

// RefConnection (OBJECT): The connection type for Ref.
type RefConnection struct {
	// Edges: A list of edges.
	Edges []*RefEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Ref `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RefConnection) GetEdges() []*RefEdge   { return x.Edges }
func (x *RefConnection) GetNodes() []*Ref       { return x.Nodes }
func (x *RefConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *RefConnection) GetTotalCount() int     { return x.TotalCount }

// RefEdge (OBJECT): An edge in a connection.
type RefEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Ref `json:"node,omitempty"`
}

func (x *RefEdge) GetCursor() string { return x.Cursor }
func (x *RefEdge) GetNode() *Ref     { return x.Node }

// RefNameConditionTarget (OBJECT): Parameters to be used for the ref_name condition.
type RefNameConditionTarget struct {
	// Exclude: Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string `json:"exclude,omitempty"`

	// Include: Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	Include []string `json:"include,omitempty"`
}

func (x *RefNameConditionTarget) GetExclude() []string { return x.Exclude }
func (x *RefNameConditionTarget) GetInclude() []string { return x.Include }

// RefNameConditionTargetInput (INPUT_OBJECT): Parameters to be used for the ref_name condition.
type RefNameConditionTargetInput struct {
	// Exclude: Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	//
	// GraphQL type: [String!]!
	Exclude []string `json:"exclude,omitempty"`

	// Include: Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	//
	// GraphQL type: [String!]!
	Include []string `json:"include,omitempty"`
}

// RefOrder (INPUT_OBJECT): Ways in which lists of git refs can be ordered upon return.
type RefOrder struct {
	// Field: The field in which to order refs by.
	//
	// GraphQL type: RefOrderField!
	Field RefOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order refs by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// RefOrderField (ENUM): Properties by which ref connections can be ordered.
type RefOrderField string

// RefOrderField_TAG_COMMIT_DATE: Order refs by underlying commit date if the ref prefix is refs/tags/.
const RefOrderField_TAG_COMMIT_DATE RefOrderField = "TAG_COMMIT_DATE"

// RefOrderField_ALPHABETICAL: Order refs by their alphanumeric name.
const RefOrderField_ALPHABETICAL RefOrderField = "ALPHABETICAL"

// RefUpdate (INPUT_OBJECT): A ref update.
type RefUpdate struct {
	// Name: The fully qualified name of the ref to be update. For example `refs/heads/branch-name`.
	//
	// GraphQL type: GitRefname!
	Name GitRefname `json:"name,omitempty"`

	// AfterOid: The value this ref should be updated to.
	//
	// GraphQL type: GitObjectID!
	AfterOid GitObjectID `json:"afterOid,omitempty"`

	// BeforeOid: The value this ref needs to point to before the update.
	//
	// GraphQL type: GitObjectID
	BeforeOid GitObjectID `json:"beforeOid,omitempty"`

	// Force: Force a non fast-forward update.
	//
	// GraphQL type: Boolean
	Force bool `json:"force,omitempty"`
}

// RefUpdateRule (OBJECT): Branch protection rules that are enforced on the viewer.
type RefUpdateRule struct {
	// AllowsDeletions: Can this branch be deleted.
	AllowsDeletions bool `json:"allowsDeletions,omitempty"`

	// AllowsForcePushes: Are force pushes allowed on this branch.
	AllowsForcePushes bool `json:"allowsForcePushes,omitempty"`

	// BlocksCreations: Can matching branches be created.
	BlocksCreations bool `json:"blocksCreations,omitempty"`

	// Pattern: Identifies the protection rule pattern.
	Pattern string `json:"pattern,omitempty"`

	// RequiredApprovingReviewCount: Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount,omitempty"`

	// RequiredStatusCheckContexts: List of required status check contexts that must pass for commits to be accepted to matching branches.
	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`

	// RequiresCodeOwnerReviews: Are reviews from code owners required to update matching branches.
	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews,omitempty"`

	// RequiresConversationResolution: Are conversations required to be resolved before merging.
	RequiresConversationResolution bool `json:"requiresConversationResolution,omitempty"`

	// RequiresLinearHistory: Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory bool `json:"requiresLinearHistory,omitempty"`

	// RequiresSignatures: Are commits required to be signed.
	RequiresSignatures bool `json:"requiresSignatures,omitempty"`

	// ViewerAllowedToDismissReviews: Is the viewer allowed to dismiss reviews.
	ViewerAllowedToDismissReviews bool `json:"viewerAllowedToDismissReviews,omitempty"`

	// ViewerCanPush: Can the viewer push to the branch.
	ViewerCanPush bool `json:"viewerCanPush,omitempty"`
}

func (x *RefUpdateRule) GetAllowsDeletions() bool             { return x.AllowsDeletions }
func (x *RefUpdateRule) GetAllowsForcePushes() bool           { return x.AllowsForcePushes }
func (x *RefUpdateRule) GetBlocksCreations() bool             { return x.BlocksCreations }
func (x *RefUpdateRule) GetPattern() string                   { return x.Pattern }
func (x *RefUpdateRule) GetRequiredApprovingReviewCount() int { return x.RequiredApprovingReviewCount }
func (x *RefUpdateRule) GetRequiredStatusCheckContexts() []string {
	return x.RequiredStatusCheckContexts
}
func (x *RefUpdateRule) GetRequiresCodeOwnerReviews() bool { return x.RequiresCodeOwnerReviews }
func (x *RefUpdateRule) GetRequiresConversationResolution() bool {
	return x.RequiresConversationResolution
}
func (x *RefUpdateRule) GetRequiresLinearHistory() bool { return x.RequiresLinearHistory }
func (x *RefUpdateRule) GetRequiresSignatures() bool    { return x.RequiresSignatures }
func (x *RefUpdateRule) GetViewerAllowedToDismissReviews() bool {
	return x.ViewerAllowedToDismissReviews
}
func (x *RefUpdateRule) GetViewerCanPush() bool { return x.ViewerCanPush }

// ReferencedEvent (OBJECT): Represents a 'referenced' event on a given `ReferencedSubject`.
type ReferencedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Commit: Identifies the commit associated with the 'referenced' event.
	Commit *Commit `json:"commit,omitempty"`

	// CommitRepository: Identifies the repository associated with the 'referenced' event.
	CommitRepository *Repository `json:"commitRepository,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ReferencedEvent object.
	Id ID `json:"id,omitempty"`

	// IsCrossRepository: Reference originated in a different repository.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`

	// IsDirectReference: Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
	IsDirectReference bool `json:"isDirectReference,omitempty"`

	// Subject: Object referenced by event.
	Subject ReferencedSubject `json:"subject,omitempty"`
}

func (x *ReferencedEvent) GetActor() Actor                  { return x.Actor }
func (x *ReferencedEvent) GetCommit() *Commit               { return x.Commit }
func (x *ReferencedEvent) GetCommitRepository() *Repository { return x.CommitRepository }
func (x *ReferencedEvent) GetCreatedAt() DateTime           { return x.CreatedAt }
func (x *ReferencedEvent) GetId() ID                        { return x.Id }
func (x *ReferencedEvent) GetIsCrossRepository() bool       { return x.IsCrossRepository }
func (x *ReferencedEvent) GetIsDirectReference() bool       { return x.IsDirectReference }
func (x *ReferencedEvent) GetSubject() ReferencedSubject    { return x.Subject }

// ReferencedSubject (UNION): Any referencable object.
// ReferencedSubject_Interface: Any referencable object.
//
// Possible types:
//
//   - *Issue
//   - *PullRequest
type ReferencedSubject_Interface interface {
	isReferencedSubject()
}

func (*Issue) isReferencedSubject()       {}
func (*PullRequest) isReferencedSubject() {}

type ReferencedSubject struct {
	Interface ReferencedSubject_Interface
}

func (x *ReferencedSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ReferencedSubject) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ReferencedSubject", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// RegenerateEnterpriseIdentityProviderRecoveryCodesInput (INPUT_OBJECT): Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes.
type RegenerateEnterpriseIdentityProviderRecoveryCodesInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set an identity provider.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`
}

// RegenerateEnterpriseIdentityProviderRecoveryCodesPayload (OBJECT): Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes.
type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IdentityProvider: The identity provider for the enterprise.
	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
}

func (x *RegenerateEnterpriseIdentityProviderRecoveryCodesPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *RegenerateEnterpriseIdentityProviderRecoveryCodesPayload) GetIdentityProvider() *EnterpriseIdentityProvider {
	return x.IdentityProvider
}

// RegenerateVerifiableDomainTokenInput (INPUT_OBJECT): Autogenerated input type of RegenerateVerifiableDomainToken.
type RegenerateVerifiableDomainTokenInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the verifiable domain to regenerate the verification token of.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// RegenerateVerifiableDomainTokenPayload (OBJECT): Autogenerated return type of RegenerateVerifiableDomainToken.
type RegenerateVerifiableDomainTokenPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// VerificationToken: The verification token that was generated.
	VerificationToken string `json:"verificationToken,omitempty"`
}

func (x *RegenerateVerifiableDomainTokenPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *RegenerateVerifiableDomainTokenPayload) GetVerificationToken() string {
	return x.VerificationToken
}

// RejectDeploymentsInput (INPUT_OBJECT): Autogenerated input type of RejectDeployments.
type RejectDeploymentsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// WorkflowRunId: The node ID of the workflow run containing the pending deployments.
	//
	// GraphQL type: ID!
	WorkflowRunId ID `json:"workflowRunId,omitempty"`

	// EnvironmentIds: The ids of environments to reject deployments.
	//
	// GraphQL type: [ID!]!
	EnvironmentIds []ID `json:"environmentIds,omitempty"`

	// Comment: Optional comment for rejecting deployments.
	//
	// GraphQL type: String
	Comment string `json:"comment,omitempty"`
}

// RejectDeploymentsPayload (OBJECT): Autogenerated return type of RejectDeployments.
type RejectDeploymentsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Deployments: The affected deployments.
	Deployments []*Deployment `json:"deployments,omitempty"`
}

func (x *RejectDeploymentsPayload) GetClientMutationId() string   { return x.ClientMutationId }
func (x *RejectDeploymentsPayload) GetDeployments() []*Deployment { return x.Deployments }

// Release (OBJECT): A release contains the content for a release.
type Release struct {
	// Author: The author of the release.
	Author *User `json:"author,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: The description of the release.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The description of this release rendered to HTML.
	DescriptionHTML template.HTML `json:"descriptionHTML,omitempty"`

	// Id: The Node ID of the Release object.
	Id ID `json:"id,omitempty"`

	// IsDraft: Whether or not the release is a draft.
	IsDraft bool `json:"isDraft,omitempty"`

	// IsLatest: Whether or not the release is the latest releast.
	IsLatest bool `json:"isLatest,omitempty"`

	// IsPrerelease: Whether or not the release is a prerelease.
	IsPrerelease bool `json:"isPrerelease,omitempty"`

	// Mentions: A list of users mentioned in the release description.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Mentions *UserConnection `json:"mentions,omitempty"`

	// Name: The title of the release.
	Name string `json:"name,omitempty"`

	// PublishedAt: Identifies the date and time when the release was created.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// ReleaseAssets: List of releases assets which are dependent on this release.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - name String
	ReleaseAssets *ReleaseAssetConnection `json:"releaseAssets,omitempty"`

	// Repository: The repository that the release belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// ResourcePath: The HTTP path for this issue.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// ShortDescriptionHTML: A description of the release, rendered to HTML without any links in it.
	//
	// Query arguments:
	//   - limit Int
	ShortDescriptionHTML template.HTML `json:"shortDescriptionHTML,omitempty"`

	// Tag: The Git tag the release points to.
	Tag *Ref `json:"tag,omitempty"`

	// TagCommit: The tag commit for this release.
	TagCommit *Commit `json:"tagCommit,omitempty"`

	// TagName: The name of the release's Git tag.
	TagName string `json:"tagName,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this issue.
	Url URI `json:"url,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`
}

func (x *Release) GetAuthor() *User                          { return x.Author }
func (x *Release) GetCreatedAt() DateTime                    { return x.CreatedAt }
func (x *Release) GetDatabaseId() int                        { return x.DatabaseId }
func (x *Release) GetDescription() string                    { return x.Description }
func (x *Release) GetDescriptionHTML() template.HTML         { return x.DescriptionHTML }
func (x *Release) GetId() ID                                 { return x.Id }
func (x *Release) GetIsDraft() bool                          { return x.IsDraft }
func (x *Release) GetIsLatest() bool                         { return x.IsLatest }
func (x *Release) GetIsPrerelease() bool                     { return x.IsPrerelease }
func (x *Release) GetMentions() *UserConnection              { return x.Mentions }
func (x *Release) GetName() string                           { return x.Name }
func (x *Release) GetPublishedAt() DateTime                  { return x.PublishedAt }
func (x *Release) GetReactionGroups() []*ReactionGroup       { return x.ReactionGroups }
func (x *Release) GetReactions() *ReactionConnection         { return x.Reactions }
func (x *Release) GetReleaseAssets() *ReleaseAssetConnection { return x.ReleaseAssets }
func (x *Release) GetRepository() *Repository                { return x.Repository }
func (x *Release) GetResourcePath() URI                      { return x.ResourcePath }
func (x *Release) GetShortDescriptionHTML() template.HTML    { return x.ShortDescriptionHTML }
func (x *Release) GetTag() *Ref                              { return x.Tag }
func (x *Release) GetTagCommit() *Commit                     { return x.TagCommit }
func (x *Release) GetTagName() string                        { return x.TagName }
func (x *Release) GetUpdatedAt() DateTime                    { return x.UpdatedAt }
func (x *Release) GetUrl() URI                               { return x.Url }
func (x *Release) GetViewerCanReact() bool                   { return x.ViewerCanReact }

// ReleaseAsset (OBJECT): A release asset contains the content for a release asset.
type ReleaseAsset struct {
	// ContentType: The asset's content-type.
	ContentType string `json:"contentType,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DownloadCount: The number of times this asset was downloaded.
	DownloadCount int `json:"downloadCount,omitempty"`

	// DownloadUrl: Identifies the URL where you can download the release asset via the browser.
	DownloadUrl URI `json:"downloadUrl,omitempty"`

	// Id: The Node ID of the ReleaseAsset object.
	Id ID `json:"id,omitempty"`

	// Name: Identifies the title of the release asset.
	Name string `json:"name,omitempty"`

	// Release: Release that the asset is associated with.
	Release *Release `json:"release,omitempty"`

	// Size: The size (in bytes) of the asset.
	Size int `json:"size,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// UploadedBy: The user that performed the upload.
	UploadedBy *User `json:"uploadedBy,omitempty"`

	// Url: Identifies the URL of the release asset.
	Url URI `json:"url,omitempty"`
}

func (x *ReleaseAsset) GetContentType() string { return x.ContentType }
func (x *ReleaseAsset) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *ReleaseAsset) GetDownloadCount() int  { return x.DownloadCount }
func (x *ReleaseAsset) GetDownloadUrl() URI    { return x.DownloadUrl }
func (x *ReleaseAsset) GetId() ID              { return x.Id }
func (x *ReleaseAsset) GetName() string        { return x.Name }
func (x *ReleaseAsset) GetRelease() *Release   { return x.Release }
func (x *ReleaseAsset) GetSize() int           { return x.Size }
func (x *ReleaseAsset) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *ReleaseAsset) GetUploadedBy() *User   { return x.UploadedBy }
func (x *ReleaseAsset) GetUrl() URI            { return x.Url }

// ReleaseAssetConnection (OBJECT): The connection type for ReleaseAsset.
type ReleaseAssetConnection struct {
	// Edges: A list of edges.
	Edges []*ReleaseAssetEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ReleaseAsset `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ReleaseAssetConnection) GetEdges() []*ReleaseAssetEdge { return x.Edges }
func (x *ReleaseAssetConnection) GetNodes() []*ReleaseAsset     { return x.Nodes }
func (x *ReleaseAssetConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *ReleaseAssetConnection) GetTotalCount() int            { return x.TotalCount }

// ReleaseAssetEdge (OBJECT): An edge in a connection.
type ReleaseAssetEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ReleaseAsset `json:"node,omitempty"`
}

func (x *ReleaseAssetEdge) GetCursor() string      { return x.Cursor }
func (x *ReleaseAssetEdge) GetNode() *ReleaseAsset { return x.Node }

// ReleaseConnection (OBJECT): The connection type for Release.
type ReleaseConnection struct {
	// Edges: A list of edges.
	Edges []*ReleaseEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Release `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ReleaseConnection) GetEdges() []*ReleaseEdge { return x.Edges }
func (x *ReleaseConnection) GetNodes() []*Release     { return x.Nodes }
func (x *ReleaseConnection) GetPageInfo() *PageInfo   { return x.PageInfo }
func (x *ReleaseConnection) GetTotalCount() int       { return x.TotalCount }

// ReleaseEdge (OBJECT): An edge in a connection.
type ReleaseEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Release `json:"node,omitempty"`
}

func (x *ReleaseEdge) GetCursor() string { return x.Cursor }
func (x *ReleaseEdge) GetNode() *Release { return x.Node }

// ReleaseOrder (INPUT_OBJECT): Ways in which lists of releases can be ordered upon return.
type ReleaseOrder struct {
	// Field: The field in which to order releases by.
	//
	// GraphQL type: ReleaseOrderField!
	Field ReleaseOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order releases by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// ReleaseOrderField (ENUM): Properties by which release connections can be ordered.
type ReleaseOrderField string

// ReleaseOrderField_CREATED_AT: Order releases by creation time.
const ReleaseOrderField_CREATED_AT ReleaseOrderField = "CREATED_AT"

// ReleaseOrderField_NAME: Order releases alphabetically by name.
const ReleaseOrderField_NAME ReleaseOrderField = "NAME"

// RemoveAssigneesFromAssignableInput (INPUT_OBJECT): Autogenerated input type of RemoveAssigneesFromAssignable.
type RemoveAssigneesFromAssignableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// AssignableId: The id of the assignable object to remove assignees from.
	//
	// GraphQL type: ID!
	AssignableId ID `json:"assignableId,omitempty"`

	// AssigneeIds: The id of users to remove as assignees.
	//
	// GraphQL type: [ID!]!
	AssigneeIds []ID `json:"assigneeIds,omitempty"`
}

// RemoveAssigneesFromAssignablePayload (OBJECT): Autogenerated return type of RemoveAssigneesFromAssignable.
type RemoveAssigneesFromAssignablePayload struct {
	// Assignable: The item that was unassigned.
	Assignable Assignable `json:"assignable,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *RemoveAssigneesFromAssignablePayload) GetAssignable() Assignable { return x.Assignable }
func (x *RemoveAssigneesFromAssignablePayload) GetClientMutationId() string {
	return x.ClientMutationId
}

// RemoveEnterpriseAdminInput (INPUT_OBJECT): Autogenerated input type of RemoveEnterpriseAdmin.
type RemoveEnterpriseAdminInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The Enterprise ID from which to remove the administrator.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of the user to remove as an administrator.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`
}

// RemoveEnterpriseAdminPayload (OBJECT): Autogenerated return type of RemoveEnterpriseAdmin.
type RemoveEnterpriseAdminPayload struct {
	// Admin: The user who was removed as an administrator.
	Admin *User `json:"admin,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of removing an administrator.
	Message string `json:"message,omitempty"`

	// Viewer: The viewer performing the mutation.
	Viewer *User `json:"viewer,omitempty"`
}

func (x *RemoveEnterpriseAdminPayload) GetAdmin() *User             { return x.Admin }
func (x *RemoveEnterpriseAdminPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveEnterpriseAdminPayload) GetEnterprise() *Enterprise  { return x.Enterprise }
func (x *RemoveEnterpriseAdminPayload) GetMessage() string          { return x.Message }
func (x *RemoveEnterpriseAdminPayload) GetViewer() *User            { return x.Viewer }

// RemoveEnterpriseIdentityProviderInput (INPUT_OBJECT): Autogenerated input type of RemoveEnterpriseIdentityProvider.
type RemoveEnterpriseIdentityProviderInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise from which to remove the identity provider.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`
}

// RemoveEnterpriseIdentityProviderPayload (OBJECT): Autogenerated return type of RemoveEnterpriseIdentityProvider.
type RemoveEnterpriseIdentityProviderPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IdentityProvider: The identity provider that was removed from the enterprise.
	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
}

func (x *RemoveEnterpriseIdentityProviderPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *RemoveEnterpriseIdentityProviderPayload) GetIdentityProvider() *EnterpriseIdentityProvider {
	return x.IdentityProvider
}

// RemoveEnterpriseMemberInput (INPUT_OBJECT): Autogenerated input type of RemoveEnterpriseMember.
type RemoveEnterpriseMemberInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise from which the user should be removed.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// UserId: The ID of the user to remove from the enterprise.
	//
	// GraphQL type: ID!
	UserId ID `json:"userId,omitempty"`
}

// RemoveEnterpriseMemberPayload (OBJECT): Autogenerated return type of RemoveEnterpriseMember.
type RemoveEnterpriseMemberPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// User: The user that was removed from the enterprise.
	User *User `json:"user,omitempty"`

	// Viewer: The viewer performing the mutation.
	Viewer *User `json:"viewer,omitempty"`
}

func (x *RemoveEnterpriseMemberPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveEnterpriseMemberPayload) GetEnterprise() *Enterprise  { return x.Enterprise }
func (x *RemoveEnterpriseMemberPayload) GetUser() *User              { return x.User }
func (x *RemoveEnterpriseMemberPayload) GetViewer() *User            { return x.Viewer }

// RemoveEnterpriseOrganizationInput (INPUT_OBJECT): Autogenerated input type of RemoveEnterpriseOrganization.
type RemoveEnterpriseOrganizationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise from which the organization should be removed.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// OrganizationId: The ID of the organization to remove from the enterprise.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`
}

// RemoveEnterpriseOrganizationPayload (OBJECT): Autogenerated return type of RemoveEnterpriseOrganization.
type RemoveEnterpriseOrganizationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Organization: The organization that was removed from the enterprise.
	Organization *Organization `json:"organization,omitempty"`

	// Viewer: The viewer performing the mutation.
	Viewer *User `json:"viewer,omitempty"`
}

func (x *RemoveEnterpriseOrganizationPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *RemoveEnterpriseOrganizationPayload) GetEnterprise() *Enterprise     { return x.Enterprise }
func (x *RemoveEnterpriseOrganizationPayload) GetOrganization() *Organization { return x.Organization }
func (x *RemoveEnterpriseOrganizationPayload) GetViewer() *User               { return x.Viewer }

// RemoveEnterpriseSupportEntitlementInput (INPUT_OBJECT): Autogenerated input type of RemoveEnterpriseSupportEntitlement.
type RemoveEnterpriseSupportEntitlementInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the Enterprise which the admin belongs to.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of a member who will lose the support entitlement.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`
}

// RemoveEnterpriseSupportEntitlementPayload (OBJECT): Autogenerated return type of RemoveEnterpriseSupportEntitlement.
type RemoveEnterpriseSupportEntitlementPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of removing the support entitlement.
	Message string `json:"message,omitempty"`
}

func (x *RemoveEnterpriseSupportEntitlementPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *RemoveEnterpriseSupportEntitlementPayload) GetMessage() string { return x.Message }

// RemoveLabelsFromLabelableInput (INPUT_OBJECT): Autogenerated input type of RemoveLabelsFromLabelable.
type RemoveLabelsFromLabelableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LabelableId: The id of the Labelable to remove labels from.
	//
	// GraphQL type: ID!
	LabelableId ID `json:"labelableId,omitempty"`

	// LabelIds: The ids of labels to remove.
	//
	// GraphQL type: [ID!]!
	LabelIds []ID `json:"labelIds,omitempty"`
}

// RemoveLabelsFromLabelablePayload (OBJECT): Autogenerated return type of RemoveLabelsFromLabelable.
type RemoveLabelsFromLabelablePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Labelable: The Labelable the labels were removed from.
	Labelable Labelable `json:"labelable,omitempty"`
}

func (x *RemoveLabelsFromLabelablePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveLabelsFromLabelablePayload) GetLabelable() Labelable     { return x.Labelable }

// RemoveOutsideCollaboratorInput (INPUT_OBJECT): Autogenerated input type of RemoveOutsideCollaborator.
type RemoveOutsideCollaboratorInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// UserId: The ID of the outside collaborator to remove.
	//
	// GraphQL type: ID!
	UserId ID `json:"userId,omitempty"`

	// OrganizationId: The ID of the organization to remove the outside collaborator from.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`
}

// RemoveOutsideCollaboratorPayload (OBJECT): Autogenerated return type of RemoveOutsideCollaborator.
type RemoveOutsideCollaboratorPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RemovedUser: The user that was removed as an outside collaborator.
	RemovedUser *User `json:"removedUser,omitempty"`
}

func (x *RemoveOutsideCollaboratorPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveOutsideCollaboratorPayload) GetRemovedUser() *User       { return x.RemovedUser }

// RemoveReactionInput (INPUT_OBJECT): Autogenerated input type of RemoveReaction.
type RemoveReactionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the subject to modify.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`

	// Content: The name of the emoji reaction to remove.
	//
	// GraphQL type: ReactionContent!
	Content ReactionContent `json:"content,omitempty"`
}

// RemoveReactionPayload (OBJECT): Autogenerated return type of RemoveReaction.
type RemoveReactionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Reaction: The reaction object.
	Reaction *Reaction `json:"reaction,omitempty"`

	// ReactionGroups: The reaction groups for the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Subject: The reactable subject.
	Subject Reactable `json:"subject,omitempty"`
}

func (x *RemoveReactionPayload) GetClientMutationId() string         { return x.ClientMutationId }
func (x *RemoveReactionPayload) GetReaction() *Reaction              { return x.Reaction }
func (x *RemoveReactionPayload) GetReactionGroups() []*ReactionGroup { return x.ReactionGroups }
func (x *RemoveReactionPayload) GetSubject() Reactable               { return x.Subject }

// RemoveStarInput (INPUT_OBJECT): Autogenerated input type of RemoveStar.
type RemoveStarInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// StarrableId: The Starrable ID to unstar.
	//
	// GraphQL type: ID!
	StarrableId ID `json:"starrableId,omitempty"`
}

// RemoveStarPayload (OBJECT): Autogenerated return type of RemoveStar.
type RemoveStarPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Starrable: The starrable.
	Starrable Starrable `json:"starrable,omitempty"`
}

func (x *RemoveStarPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveStarPayload) GetStarrable() Starrable     { return x.Starrable }

// RemoveSubIssueInput (INPUT_OBJECT): Autogenerated input type of RemoveSubIssue.
type RemoveSubIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The id of the issue.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`

	// SubIssueId: The id of the sub-issue.
	//
	// GraphQL type: ID!
	SubIssueId ID `json:"subIssueId,omitempty"`
}

// RemoveSubIssuePayload (OBJECT): Autogenerated return type of RemoveSubIssue.
type RemoveSubIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The parent of the sub-issue.
	Issue *Issue `json:"issue,omitempty"`

	// SubIssue: The sub-issue of the parent.
	SubIssue *Issue `json:"subIssue,omitempty"`
}

func (x *RemoveSubIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveSubIssuePayload) GetIssue() *Issue            { return x.Issue }
func (x *RemoveSubIssuePayload) GetSubIssue() *Issue         { return x.SubIssue }

// RemoveUpvoteInput (INPUT_OBJECT): Autogenerated input type of RemoveUpvote.
type RemoveUpvoteInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the discussion or comment to remove upvote.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`
}

// RemoveUpvotePayload (OBJECT): Autogenerated return type of RemoveUpvote.
type RemoveUpvotePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Subject: The votable subject.
	Subject Votable `json:"subject,omitempty"`
}

func (x *RemoveUpvotePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RemoveUpvotePayload) GetSubject() Votable         { return x.Subject }

// RemovedFromMergeQueueEvent (OBJECT): Represents a 'removed_from_merge_queue' event on a given pull request.
type RemovedFromMergeQueueEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// BeforeCommit: Identifies the before commit SHA for the 'removed_from_merge_queue' event.
	BeforeCommit *Commit `json:"beforeCommit,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Enqueuer: The user who removed this Pull Request from the merge queue.
	Enqueuer *User `json:"enqueuer,omitempty"`

	// Id: The Node ID of the RemovedFromMergeQueueEvent object.
	Id ID `json:"id,omitempty"`

	// MergeQueue: The merge queue where this pull request was removed from.
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// Reason: The reason this pull request was removed from the queue.
	Reason string `json:"reason,omitempty"`
}

func (x *RemovedFromMergeQueueEvent) GetActor() Actor              { return x.Actor }
func (x *RemovedFromMergeQueueEvent) GetBeforeCommit() *Commit     { return x.BeforeCommit }
func (x *RemovedFromMergeQueueEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *RemovedFromMergeQueueEvent) GetEnqueuer() *User           { return x.Enqueuer }
func (x *RemovedFromMergeQueueEvent) GetId() ID                    { return x.Id }
func (x *RemovedFromMergeQueueEvent) GetMergeQueue() *MergeQueue   { return x.MergeQueue }
func (x *RemovedFromMergeQueueEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *RemovedFromMergeQueueEvent) GetReason() string            { return x.Reason }

// RemovedFromProjectEvent (OBJECT): Represents a 'removed_from_project' event on a given issue or pull request.
type RemovedFromProjectEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	//
	// Deprecated: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the RemovedFromProjectEvent object.
	Id ID `json:"id,omitempty"`

	// Project: Project referenced by event.
	Project *Project `json:"project,omitempty"`

	// ProjectColumnName: Column name referenced by this project event.
	//
	// Deprecated: Column name referenced by this project event.
	ProjectColumnName string `json:"projectColumnName,omitempty"`
}

func (x *RemovedFromProjectEvent) GetActor() Actor              { return x.Actor }
func (x *RemovedFromProjectEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *RemovedFromProjectEvent) GetDatabaseId() int           { return x.DatabaseId }
func (x *RemovedFromProjectEvent) GetId() ID                    { return x.Id }
func (x *RemovedFromProjectEvent) GetProject() *Project         { return x.Project }
func (x *RemovedFromProjectEvent) GetProjectColumnName() string { return x.ProjectColumnName }

// RenamedTitleEvent (OBJECT): Represents a 'renamed' event on a given issue or pull request.
type RenamedTitleEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CurrentTitle: Identifies the current title of the issue or pull request.
	CurrentTitle string `json:"currentTitle,omitempty"`

	// Id: The Node ID of the RenamedTitleEvent object.
	Id ID `json:"id,omitempty"`

	// PreviousTitle: Identifies the previous title of the issue or pull request.
	PreviousTitle string `json:"previousTitle,omitempty"`

	// Subject: Subject that was renamed.
	Subject RenamedTitleSubject `json:"subject,omitempty"`
}

func (x *RenamedTitleEvent) GetActor() Actor                 { return x.Actor }
func (x *RenamedTitleEvent) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *RenamedTitleEvent) GetCurrentTitle() string         { return x.CurrentTitle }
func (x *RenamedTitleEvent) GetId() ID                       { return x.Id }
func (x *RenamedTitleEvent) GetPreviousTitle() string        { return x.PreviousTitle }
func (x *RenamedTitleEvent) GetSubject() RenamedTitleSubject { return x.Subject }

// RenamedTitleSubject (UNION): An object which has a renamable title.
// RenamedTitleSubject_Interface: An object which has a renamable title.
//
// Possible types:
//
//   - *Issue
//   - *PullRequest
type RenamedTitleSubject_Interface interface {
	isRenamedTitleSubject()
}

func (*Issue) isRenamedTitleSubject()       {}
func (*PullRequest) isRenamedTitleSubject() {}

type RenamedTitleSubject struct {
	Interface RenamedTitleSubject_Interface
}

func (x *RenamedTitleSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RenamedTitleSubject) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RenamedTitleSubject", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	}
	return json.Unmarshal(js, x.Interface)
}

// ReopenDiscussionInput (INPUT_OBJECT): Autogenerated input type of ReopenDiscussion.
type ReopenDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DiscussionId: ID of the discussion to be reopened.
	//
	// GraphQL type: ID!
	DiscussionId ID `json:"discussionId,omitempty"`
}

// ReopenDiscussionPayload (OBJECT): Autogenerated return type of ReopenDiscussion.
type ReopenDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The discussion that was reopened.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *ReopenDiscussionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ReopenDiscussionPayload) GetDiscussion() *Discussion  { return x.Discussion }

// ReopenIssueInput (INPUT_OBJECT): Autogenerated input type of ReopenIssue.
type ReopenIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: ID of the issue to be opened.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`
}

// ReopenIssuePayload (OBJECT): Autogenerated return type of ReopenIssue.
type ReopenIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue that was opened.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *ReopenIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ReopenIssuePayload) GetIssue() *Issue            { return x.Issue }

// ReopenPullRequestInput (INPUT_OBJECT): Autogenerated input type of ReopenPullRequest.
type ReopenPullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: ID of the pull request to be reopened.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`
}

// ReopenPullRequestPayload (OBJECT): Autogenerated return type of ReopenPullRequest.
type ReopenPullRequestPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that was reopened.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *ReopenPullRequestPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *ReopenPullRequestPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// ReopenedEvent (OBJECT): Represents a 'reopened' event on any `Closable`.
type ReopenedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Closable: Object that was reopened.
	Closable Closable `json:"closable,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ReopenedEvent object.
	Id ID `json:"id,omitempty"`

	// StateReason: The reason the issue state was changed to open.
	StateReason IssueStateReason `json:"stateReason,omitempty"`
}

func (x *ReopenedEvent) GetActor() Actor                  { return x.Actor }
func (x *ReopenedEvent) GetClosable() Closable            { return x.Closable }
func (x *ReopenedEvent) GetCreatedAt() DateTime           { return x.CreatedAt }
func (x *ReopenedEvent) GetId() ID                        { return x.Id }
func (x *ReopenedEvent) GetStateReason() IssueStateReason { return x.StateReason }

// ReorderEnvironmentInput (INPUT_OBJECT): Autogenerated input type of ReorderEnvironment.
type ReorderEnvironmentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnvironmentId: The ID of the environment to modify.
	//
	// GraphQL type: ID!
	EnvironmentId ID `json:"environmentId,omitempty"`

	// Position: The desired position of the environment.
	//
	// GraphQL type: Int!
	Position int `json:"position,omitempty"`
}

// ReorderEnvironmentPayload (OBJECT): Autogenerated return type of ReorderEnvironment.
type ReorderEnvironmentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Environment: The environment that was reordered.
	Environment *Environment `json:"environment,omitempty"`
}

func (x *ReorderEnvironmentPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *ReorderEnvironmentPayload) GetEnvironment() *Environment { return x.Environment }

// RepoAccessAuditEntry (OBJECT): Audit log entry for a repo.access event.
type RepoAccessAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoAccessAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The visibility of the repository.
	Visibility RepoAccessAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *RepoAccessAuditEntry) GetAction() string                             { return x.Action }
func (x *RepoAccessAuditEntry) GetActor() AuditEntryActor                     { return x.Actor }
func (x *RepoAccessAuditEntry) GetActorIp() string                            { return x.ActorIp }
func (x *RepoAccessAuditEntry) GetActorLocation() *ActorLocation              { return x.ActorLocation }
func (x *RepoAccessAuditEntry) GetActorLogin() string                         { return x.ActorLogin }
func (x *RepoAccessAuditEntry) GetActorResourcePath() URI                     { return x.ActorResourcePath }
func (x *RepoAccessAuditEntry) GetActorUrl() URI                              { return x.ActorUrl }
func (x *RepoAccessAuditEntry) GetCreatedAt() PreciseDateTime                 { return x.CreatedAt }
func (x *RepoAccessAuditEntry) GetId() ID                                     { return x.Id }
func (x *RepoAccessAuditEntry) GetOperationType() OperationType               { return x.OperationType }
func (x *RepoAccessAuditEntry) GetOrganization() *Organization                { return x.Organization }
func (x *RepoAccessAuditEntry) GetOrganizationName() string                   { return x.OrganizationName }
func (x *RepoAccessAuditEntry) GetOrganizationResourcePath() URI              { return x.OrganizationResourcePath }
func (x *RepoAccessAuditEntry) GetOrganizationUrl() URI                       { return x.OrganizationUrl }
func (x *RepoAccessAuditEntry) GetRepository() *Repository                    { return x.Repository }
func (x *RepoAccessAuditEntry) GetRepositoryName() string                     { return x.RepositoryName }
func (x *RepoAccessAuditEntry) GetRepositoryResourcePath() URI                { return x.RepositoryResourcePath }
func (x *RepoAccessAuditEntry) GetRepositoryUrl() URI                         { return x.RepositoryUrl }
func (x *RepoAccessAuditEntry) GetUser() *User                                { return x.User }
func (x *RepoAccessAuditEntry) GetUserLogin() string                          { return x.UserLogin }
func (x *RepoAccessAuditEntry) GetUserResourcePath() URI                      { return x.UserResourcePath }
func (x *RepoAccessAuditEntry) GetUserUrl() URI                               { return x.UserUrl }
func (x *RepoAccessAuditEntry) GetVisibility() RepoAccessAuditEntryVisibility { return x.Visibility }

// RepoAccessAuditEntryVisibility (ENUM): The privacy of a repository.
type RepoAccessAuditEntryVisibility string

// RepoAccessAuditEntryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepoAccessAuditEntryVisibility_INTERNAL RepoAccessAuditEntryVisibility = "INTERNAL"

// RepoAccessAuditEntryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepoAccessAuditEntryVisibility_PRIVATE RepoAccessAuditEntryVisibility = "PRIVATE"

// RepoAccessAuditEntryVisibility_PUBLIC: The repository is visible to everyone.
const RepoAccessAuditEntryVisibility_PUBLIC RepoAccessAuditEntryVisibility = "PUBLIC"

// RepoAddMemberAuditEntry (OBJECT): Audit log entry for a repo.add_member event.
type RepoAddMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoAddMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The visibility of the repository.
	Visibility RepoAddMemberAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *RepoAddMemberAuditEntry) GetAction() string                { return x.Action }
func (x *RepoAddMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *RepoAddMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *RepoAddMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *RepoAddMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *RepoAddMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *RepoAddMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *RepoAddMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *RepoAddMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *RepoAddMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *RepoAddMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *RepoAddMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *RepoAddMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoAddMemberAuditEntry) GetOrganizationUrl() URI        { return x.OrganizationUrl }
func (x *RepoAddMemberAuditEntry) GetRepository() *Repository     { return x.Repository }
func (x *RepoAddMemberAuditEntry) GetRepositoryName() string      { return x.RepositoryName }
func (x *RepoAddMemberAuditEntry) GetRepositoryResourcePath() URI { return x.RepositoryResourcePath }
func (x *RepoAddMemberAuditEntry) GetRepositoryUrl() URI          { return x.RepositoryUrl }
func (x *RepoAddMemberAuditEntry) GetUser() *User                 { return x.User }
func (x *RepoAddMemberAuditEntry) GetUserLogin() string           { return x.UserLogin }
func (x *RepoAddMemberAuditEntry) GetUserResourcePath() URI       { return x.UserResourcePath }
func (x *RepoAddMemberAuditEntry) GetUserUrl() URI                { return x.UserUrl }
func (x *RepoAddMemberAuditEntry) GetVisibility() RepoAddMemberAuditEntryVisibility {
	return x.Visibility
}

// RepoAddMemberAuditEntryVisibility (ENUM): The privacy of a repository.
type RepoAddMemberAuditEntryVisibility string

// RepoAddMemberAuditEntryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepoAddMemberAuditEntryVisibility_INTERNAL RepoAddMemberAuditEntryVisibility = "INTERNAL"

// RepoAddMemberAuditEntryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepoAddMemberAuditEntryVisibility_PRIVATE RepoAddMemberAuditEntryVisibility = "PRIVATE"

// RepoAddMemberAuditEntryVisibility_PUBLIC: The repository is visible to everyone.
const RepoAddMemberAuditEntryVisibility_PUBLIC RepoAddMemberAuditEntryVisibility = "PUBLIC"

// RepoAddTopicAuditEntry (OBJECT): Audit log entry for a repo.add_topic event.
type RepoAddTopicAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoAddTopicAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// Topic: The name of the topic added to the repository.
	Topic *Topic `json:"topic,omitempty"`

	// TopicName: The name of the topic added to the repository.
	TopicName string `json:"topicName,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoAddTopicAuditEntry) GetAction() string                { return x.Action }
func (x *RepoAddTopicAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *RepoAddTopicAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *RepoAddTopicAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *RepoAddTopicAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *RepoAddTopicAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *RepoAddTopicAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *RepoAddTopicAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *RepoAddTopicAuditEntry) GetId() ID                        { return x.Id }
func (x *RepoAddTopicAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *RepoAddTopicAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *RepoAddTopicAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *RepoAddTopicAuditEntry) GetOrganizationResourcePath() URI { return x.OrganizationResourcePath }
func (x *RepoAddTopicAuditEntry) GetOrganizationUrl() URI          { return x.OrganizationUrl }
func (x *RepoAddTopicAuditEntry) GetRepository() *Repository       { return x.Repository }
func (x *RepoAddTopicAuditEntry) GetRepositoryName() string        { return x.RepositoryName }
func (x *RepoAddTopicAuditEntry) GetRepositoryResourcePath() URI   { return x.RepositoryResourcePath }
func (x *RepoAddTopicAuditEntry) GetRepositoryUrl() URI            { return x.RepositoryUrl }
func (x *RepoAddTopicAuditEntry) GetTopic() *Topic                 { return x.Topic }
func (x *RepoAddTopicAuditEntry) GetTopicName() string             { return x.TopicName }
func (x *RepoAddTopicAuditEntry) GetUser() *User                   { return x.User }
func (x *RepoAddTopicAuditEntry) GetUserLogin() string             { return x.UserLogin }
func (x *RepoAddTopicAuditEntry) GetUserResourcePath() URI         { return x.UserResourcePath }
func (x *RepoAddTopicAuditEntry) GetUserUrl() URI                  { return x.UserUrl }

// RepoArchivedAuditEntry (OBJECT): Audit log entry for a repo.archived event.
type RepoArchivedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoArchivedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The visibility of the repository.
	Visibility RepoArchivedAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *RepoArchivedAuditEntry) GetAction() string                { return x.Action }
func (x *RepoArchivedAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *RepoArchivedAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *RepoArchivedAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *RepoArchivedAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *RepoArchivedAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *RepoArchivedAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *RepoArchivedAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *RepoArchivedAuditEntry) GetId() ID                        { return x.Id }
func (x *RepoArchivedAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *RepoArchivedAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *RepoArchivedAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *RepoArchivedAuditEntry) GetOrganizationResourcePath() URI { return x.OrganizationResourcePath }
func (x *RepoArchivedAuditEntry) GetOrganizationUrl() URI          { return x.OrganizationUrl }
func (x *RepoArchivedAuditEntry) GetRepository() *Repository       { return x.Repository }
func (x *RepoArchivedAuditEntry) GetRepositoryName() string        { return x.RepositoryName }
func (x *RepoArchivedAuditEntry) GetRepositoryResourcePath() URI   { return x.RepositoryResourcePath }
func (x *RepoArchivedAuditEntry) GetRepositoryUrl() URI            { return x.RepositoryUrl }
func (x *RepoArchivedAuditEntry) GetUser() *User                   { return x.User }
func (x *RepoArchivedAuditEntry) GetUserLogin() string             { return x.UserLogin }
func (x *RepoArchivedAuditEntry) GetUserResourcePath() URI         { return x.UserResourcePath }
func (x *RepoArchivedAuditEntry) GetUserUrl() URI                  { return x.UserUrl }
func (x *RepoArchivedAuditEntry) GetVisibility() RepoArchivedAuditEntryVisibility {
	return x.Visibility
}

// RepoArchivedAuditEntryVisibility (ENUM): The privacy of a repository.
type RepoArchivedAuditEntryVisibility string

// RepoArchivedAuditEntryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepoArchivedAuditEntryVisibility_INTERNAL RepoArchivedAuditEntryVisibility = "INTERNAL"

// RepoArchivedAuditEntryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepoArchivedAuditEntryVisibility_PRIVATE RepoArchivedAuditEntryVisibility = "PRIVATE"

// RepoArchivedAuditEntryVisibility_PUBLIC: The repository is visible to everyone.
const RepoArchivedAuditEntryVisibility_PUBLIC RepoArchivedAuditEntryVisibility = "PUBLIC"

// RepoChangeMergeSettingAuditEntry (OBJECT): Audit log entry for a repo.change_merge_setting event.
type RepoChangeMergeSettingAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoChangeMergeSettingAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IsEnabled: Whether the change was to enable (true) or disable (false) the merge type.
	IsEnabled bool `json:"isEnabled,omitempty"`

	// MergeType: The merge method affected by the change.
	MergeType RepoChangeMergeSettingAuditEntryMergeType `json:"mergeType,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoChangeMergeSettingAuditEntry) GetAction() string                { return x.Action }
func (x *RepoChangeMergeSettingAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *RepoChangeMergeSettingAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *RepoChangeMergeSettingAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *RepoChangeMergeSettingAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *RepoChangeMergeSettingAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *RepoChangeMergeSettingAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *RepoChangeMergeSettingAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *RepoChangeMergeSettingAuditEntry) GetId() ID                        { return x.Id }
func (x *RepoChangeMergeSettingAuditEntry) GetIsEnabled() bool               { return x.IsEnabled }
func (x *RepoChangeMergeSettingAuditEntry) GetMergeType() RepoChangeMergeSettingAuditEntryMergeType {
	return x.MergeType
}
func (x *RepoChangeMergeSettingAuditEntry) GetOperationType() OperationType { return x.OperationType }
func (x *RepoChangeMergeSettingAuditEntry) GetOrganization() *Organization  { return x.Organization }
func (x *RepoChangeMergeSettingAuditEntry) GetOrganizationName() string     { return x.OrganizationName }
func (x *RepoChangeMergeSettingAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoChangeMergeSettingAuditEntry) GetOrganizationUrl() URI    { return x.OrganizationUrl }
func (x *RepoChangeMergeSettingAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *RepoChangeMergeSettingAuditEntry) GetRepositoryName() string  { return x.RepositoryName }
func (x *RepoChangeMergeSettingAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoChangeMergeSettingAuditEntry) GetRepositoryUrl() URI    { return x.RepositoryUrl }
func (x *RepoChangeMergeSettingAuditEntry) GetUser() *User           { return x.User }
func (x *RepoChangeMergeSettingAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *RepoChangeMergeSettingAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *RepoChangeMergeSettingAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// RepoChangeMergeSettingAuditEntryMergeType (ENUM): The merge options available for pull requests to this repository.
type RepoChangeMergeSettingAuditEntryMergeType string

// RepoChangeMergeSettingAuditEntryMergeType_MERGE: The pull request is added to the base branch in a merge commit.
const RepoChangeMergeSettingAuditEntryMergeType_MERGE RepoChangeMergeSettingAuditEntryMergeType = "MERGE"

// RepoChangeMergeSettingAuditEntryMergeType_REBASE: Commits from the pull request are added onto the base branch individually without a merge commit.
const RepoChangeMergeSettingAuditEntryMergeType_REBASE RepoChangeMergeSettingAuditEntryMergeType = "REBASE"

// RepoChangeMergeSettingAuditEntryMergeType_SQUASH: The pull request's commits are squashed into a single commit before they are merged to the base branch.
const RepoChangeMergeSettingAuditEntryMergeType_SQUASH RepoChangeMergeSettingAuditEntryMergeType = "SQUASH"

// RepoConfigDisableAnonymousGitAccessAuditEntry (OBJECT): Audit log entry for a repo.config.disable_anonymous_git_access event.
type RepoConfigDisableAnonymousGitAccessAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetRepositoryUrl() URI {
	return x.RepositoryUrl
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetUser() *User       { return x.User }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigDisableAnonymousGitAccessAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigDisableCollaboratorsOnlyAuditEntry (OBJECT): Audit log entry for a repo.config.disable_collaborators_only event.
type RepoConfigDisableCollaboratorsOnlyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigDisableCollaboratorsOnlyAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigDisableContributorsOnlyAuditEntry (OBJECT): Audit log entry for a repo.config.disable_contributors_only event.
type RepoConfigDisableContributorsOnlyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigDisableContributorsOnlyAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigDisableSockpuppetDisallowedAuditEntry (OBJECT): Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
type RepoConfigDisableSockpuppetDisallowedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetRepositoryUrl() URI {
	return x.RepositoryUrl
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUser() *User       { return x.User }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigDisableSockpuppetDisallowedAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigEnableAnonymousGitAccessAuditEntry (OBJECT): Audit log entry for a repo.config.enable_anonymous_git_access event.
type RepoConfigEnableAnonymousGitAccessAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigEnableAnonymousGitAccessAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigEnableCollaboratorsOnlyAuditEntry (OBJECT): Audit log entry for a repo.config.enable_collaborators_only event.
type RepoConfigEnableCollaboratorsOnlyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigEnableCollaboratorsOnlyAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigEnableContributorsOnlyAuditEntry (OBJECT): Audit log entry for a repo.config.enable_contributors_only event.
type RepoConfigEnableContributorsOnlyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigEnableContributorsOnlyAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigEnableSockpuppetDisallowedAuditEntry (OBJECT): Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
type RepoConfigEnableSockpuppetDisallowedAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetRepositoryUrl() URI {
	return x.RepositoryUrl
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUser() *User       { return x.User }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigEnableSockpuppetDisallowedAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigLockAnonymousGitAccessAuditEntry (OBJECT): Audit log entry for a repo.config.lock_anonymous_git_access event.
type RepoConfigLockAnonymousGitAccessAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigLockAnonymousGitAccessAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoConfigUnlockAnonymousGitAccessAuditEntry (OBJECT): Audit log entry for a repo.config.unlock_anonymous_git_access event.
type RepoConfigUnlockAnonymousGitAccessAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetAction() string         { return x.Action }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetId() ID { return x.Id }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepository() *Repository {
	return x.Repository
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepositoryName() string {
	return x.RepositoryName
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetRepositoryUrl() URI { return x.RepositoryUrl }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUser() *User        { return x.User }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUserLogin() string  { return x.UserLogin }
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepoConfigUnlockAnonymousGitAccessAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepoCreateAuditEntry (OBJECT): Audit log entry for a repo.create event.
type RepoCreateAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// ForkParentName: The name of the parent repository for this forked repository.
	ForkParentName string `json:"forkParentName,omitempty"`

	// ForkSourceName: The name of the root repository for this network.
	ForkSourceName string `json:"forkSourceName,omitempty"`

	// Id: The Node ID of the RepoCreateAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The visibility of the repository.
	Visibility RepoCreateAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *RepoCreateAuditEntry) GetAction() string                             { return x.Action }
func (x *RepoCreateAuditEntry) GetActor() AuditEntryActor                     { return x.Actor }
func (x *RepoCreateAuditEntry) GetActorIp() string                            { return x.ActorIp }
func (x *RepoCreateAuditEntry) GetActorLocation() *ActorLocation              { return x.ActorLocation }
func (x *RepoCreateAuditEntry) GetActorLogin() string                         { return x.ActorLogin }
func (x *RepoCreateAuditEntry) GetActorResourcePath() URI                     { return x.ActorResourcePath }
func (x *RepoCreateAuditEntry) GetActorUrl() URI                              { return x.ActorUrl }
func (x *RepoCreateAuditEntry) GetCreatedAt() PreciseDateTime                 { return x.CreatedAt }
func (x *RepoCreateAuditEntry) GetForkParentName() string                     { return x.ForkParentName }
func (x *RepoCreateAuditEntry) GetForkSourceName() string                     { return x.ForkSourceName }
func (x *RepoCreateAuditEntry) GetId() ID                                     { return x.Id }
func (x *RepoCreateAuditEntry) GetOperationType() OperationType               { return x.OperationType }
func (x *RepoCreateAuditEntry) GetOrganization() *Organization                { return x.Organization }
func (x *RepoCreateAuditEntry) GetOrganizationName() string                   { return x.OrganizationName }
func (x *RepoCreateAuditEntry) GetOrganizationResourcePath() URI              { return x.OrganizationResourcePath }
func (x *RepoCreateAuditEntry) GetOrganizationUrl() URI                       { return x.OrganizationUrl }
func (x *RepoCreateAuditEntry) GetRepository() *Repository                    { return x.Repository }
func (x *RepoCreateAuditEntry) GetRepositoryName() string                     { return x.RepositoryName }
func (x *RepoCreateAuditEntry) GetRepositoryResourcePath() URI                { return x.RepositoryResourcePath }
func (x *RepoCreateAuditEntry) GetRepositoryUrl() URI                         { return x.RepositoryUrl }
func (x *RepoCreateAuditEntry) GetUser() *User                                { return x.User }
func (x *RepoCreateAuditEntry) GetUserLogin() string                          { return x.UserLogin }
func (x *RepoCreateAuditEntry) GetUserResourcePath() URI                      { return x.UserResourcePath }
func (x *RepoCreateAuditEntry) GetUserUrl() URI                               { return x.UserUrl }
func (x *RepoCreateAuditEntry) GetVisibility() RepoCreateAuditEntryVisibility { return x.Visibility }

// RepoCreateAuditEntryVisibility (ENUM): The privacy of a repository.
type RepoCreateAuditEntryVisibility string

// RepoCreateAuditEntryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepoCreateAuditEntryVisibility_INTERNAL RepoCreateAuditEntryVisibility = "INTERNAL"

// RepoCreateAuditEntryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepoCreateAuditEntryVisibility_PRIVATE RepoCreateAuditEntryVisibility = "PRIVATE"

// RepoCreateAuditEntryVisibility_PUBLIC: The repository is visible to everyone.
const RepoCreateAuditEntryVisibility_PUBLIC RepoCreateAuditEntryVisibility = "PUBLIC"

// RepoDestroyAuditEntry (OBJECT): Audit log entry for a repo.destroy event.
type RepoDestroyAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoDestroyAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The visibility of the repository.
	Visibility RepoDestroyAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *RepoDestroyAuditEntry) GetAction() string                              { return x.Action }
func (x *RepoDestroyAuditEntry) GetActor() AuditEntryActor                      { return x.Actor }
func (x *RepoDestroyAuditEntry) GetActorIp() string                             { return x.ActorIp }
func (x *RepoDestroyAuditEntry) GetActorLocation() *ActorLocation               { return x.ActorLocation }
func (x *RepoDestroyAuditEntry) GetActorLogin() string                          { return x.ActorLogin }
func (x *RepoDestroyAuditEntry) GetActorResourcePath() URI                      { return x.ActorResourcePath }
func (x *RepoDestroyAuditEntry) GetActorUrl() URI                               { return x.ActorUrl }
func (x *RepoDestroyAuditEntry) GetCreatedAt() PreciseDateTime                  { return x.CreatedAt }
func (x *RepoDestroyAuditEntry) GetId() ID                                      { return x.Id }
func (x *RepoDestroyAuditEntry) GetOperationType() OperationType                { return x.OperationType }
func (x *RepoDestroyAuditEntry) GetOrganization() *Organization                 { return x.Organization }
func (x *RepoDestroyAuditEntry) GetOrganizationName() string                    { return x.OrganizationName }
func (x *RepoDestroyAuditEntry) GetOrganizationResourcePath() URI               { return x.OrganizationResourcePath }
func (x *RepoDestroyAuditEntry) GetOrganizationUrl() URI                        { return x.OrganizationUrl }
func (x *RepoDestroyAuditEntry) GetRepository() *Repository                     { return x.Repository }
func (x *RepoDestroyAuditEntry) GetRepositoryName() string                      { return x.RepositoryName }
func (x *RepoDestroyAuditEntry) GetRepositoryResourcePath() URI                 { return x.RepositoryResourcePath }
func (x *RepoDestroyAuditEntry) GetRepositoryUrl() URI                          { return x.RepositoryUrl }
func (x *RepoDestroyAuditEntry) GetUser() *User                                 { return x.User }
func (x *RepoDestroyAuditEntry) GetUserLogin() string                           { return x.UserLogin }
func (x *RepoDestroyAuditEntry) GetUserResourcePath() URI                       { return x.UserResourcePath }
func (x *RepoDestroyAuditEntry) GetUserUrl() URI                                { return x.UserUrl }
func (x *RepoDestroyAuditEntry) GetVisibility() RepoDestroyAuditEntryVisibility { return x.Visibility }

// RepoDestroyAuditEntryVisibility (ENUM): The privacy of a repository.
type RepoDestroyAuditEntryVisibility string

// RepoDestroyAuditEntryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepoDestroyAuditEntryVisibility_INTERNAL RepoDestroyAuditEntryVisibility = "INTERNAL"

// RepoDestroyAuditEntryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepoDestroyAuditEntryVisibility_PRIVATE RepoDestroyAuditEntryVisibility = "PRIVATE"

// RepoDestroyAuditEntryVisibility_PUBLIC: The repository is visible to everyone.
const RepoDestroyAuditEntryVisibility_PUBLIC RepoDestroyAuditEntryVisibility = "PUBLIC"

// RepoRemoveMemberAuditEntry (OBJECT): Audit log entry for a repo.remove_member event.
type RepoRemoveMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoRemoveMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`

	// Visibility: The visibility of the repository.
	Visibility RepoRemoveMemberAuditEntryVisibility `json:"visibility,omitempty"`
}

func (x *RepoRemoveMemberAuditEntry) GetAction() string                { return x.Action }
func (x *RepoRemoveMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *RepoRemoveMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *RepoRemoveMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *RepoRemoveMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *RepoRemoveMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *RepoRemoveMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *RepoRemoveMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *RepoRemoveMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *RepoRemoveMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *RepoRemoveMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *RepoRemoveMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *RepoRemoveMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoRemoveMemberAuditEntry) GetOrganizationUrl() URI        { return x.OrganizationUrl }
func (x *RepoRemoveMemberAuditEntry) GetRepository() *Repository     { return x.Repository }
func (x *RepoRemoveMemberAuditEntry) GetRepositoryName() string      { return x.RepositoryName }
func (x *RepoRemoveMemberAuditEntry) GetRepositoryResourcePath() URI { return x.RepositoryResourcePath }
func (x *RepoRemoveMemberAuditEntry) GetRepositoryUrl() URI          { return x.RepositoryUrl }
func (x *RepoRemoveMemberAuditEntry) GetUser() *User                 { return x.User }
func (x *RepoRemoveMemberAuditEntry) GetUserLogin() string           { return x.UserLogin }
func (x *RepoRemoveMemberAuditEntry) GetUserResourcePath() URI       { return x.UserResourcePath }
func (x *RepoRemoveMemberAuditEntry) GetUserUrl() URI                { return x.UserUrl }
func (x *RepoRemoveMemberAuditEntry) GetVisibility() RepoRemoveMemberAuditEntryVisibility {
	return x.Visibility
}

// RepoRemoveMemberAuditEntryVisibility (ENUM): The privacy of a repository.
type RepoRemoveMemberAuditEntryVisibility string

// RepoRemoveMemberAuditEntryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepoRemoveMemberAuditEntryVisibility_INTERNAL RepoRemoveMemberAuditEntryVisibility = "INTERNAL"

// RepoRemoveMemberAuditEntryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepoRemoveMemberAuditEntryVisibility_PRIVATE RepoRemoveMemberAuditEntryVisibility = "PRIVATE"

// RepoRemoveMemberAuditEntryVisibility_PUBLIC: The repository is visible to everyone.
const RepoRemoveMemberAuditEntryVisibility_PUBLIC RepoRemoveMemberAuditEntryVisibility = "PUBLIC"

// RepoRemoveTopicAuditEntry (OBJECT): Audit log entry for a repo.remove_topic event.
type RepoRemoveTopicAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the RepoRemoveTopicAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// Topic: The name of the topic added to the repository.
	Topic *Topic `json:"topic,omitempty"`

	// TopicName: The name of the topic added to the repository.
	TopicName string `json:"topicName,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepoRemoveTopicAuditEntry) GetAction() string                { return x.Action }
func (x *RepoRemoveTopicAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *RepoRemoveTopicAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *RepoRemoveTopicAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *RepoRemoveTopicAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *RepoRemoveTopicAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *RepoRemoveTopicAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *RepoRemoveTopicAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *RepoRemoveTopicAuditEntry) GetId() ID                        { return x.Id }
func (x *RepoRemoveTopicAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *RepoRemoveTopicAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *RepoRemoveTopicAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *RepoRemoveTopicAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepoRemoveTopicAuditEntry) GetOrganizationUrl() URI        { return x.OrganizationUrl }
func (x *RepoRemoveTopicAuditEntry) GetRepository() *Repository     { return x.Repository }
func (x *RepoRemoveTopicAuditEntry) GetRepositoryName() string      { return x.RepositoryName }
func (x *RepoRemoveTopicAuditEntry) GetRepositoryResourcePath() URI { return x.RepositoryResourcePath }
func (x *RepoRemoveTopicAuditEntry) GetRepositoryUrl() URI          { return x.RepositoryUrl }
func (x *RepoRemoveTopicAuditEntry) GetTopic() *Topic               { return x.Topic }
func (x *RepoRemoveTopicAuditEntry) GetTopicName() string           { return x.TopicName }
func (x *RepoRemoveTopicAuditEntry) GetUser() *User                 { return x.User }
func (x *RepoRemoveTopicAuditEntry) GetUserLogin() string           { return x.UserLogin }
func (x *RepoRemoveTopicAuditEntry) GetUserResourcePath() URI       { return x.UserResourcePath }
func (x *RepoRemoveTopicAuditEntry) GetUserUrl() URI                { return x.UserUrl }

// ReportedContentClassifiers (ENUM): The reasons a piece of content can be reported or minimized.
type ReportedContentClassifiers string

// ReportedContentClassifiers_SPAM: A spammy piece of content.
const ReportedContentClassifiers_SPAM ReportedContentClassifiers = "SPAM"

// ReportedContentClassifiers_ABUSE: An abusive or harassing piece of content.
const ReportedContentClassifiers_ABUSE ReportedContentClassifiers = "ABUSE"

// ReportedContentClassifiers_OFF_TOPIC: An irrelevant piece of content.
const ReportedContentClassifiers_OFF_TOPIC ReportedContentClassifiers = "OFF_TOPIC"

// ReportedContentClassifiers_OUTDATED: An outdated piece of content.
const ReportedContentClassifiers_OUTDATED ReportedContentClassifiers = "OUTDATED"

// ReportedContentClassifiers_DUPLICATE: A duplicated piece of content.
const ReportedContentClassifiers_DUPLICATE ReportedContentClassifiers = "DUPLICATE"

// ReportedContentClassifiers_RESOLVED: The content has been resolved.
const ReportedContentClassifiers_RESOLVED ReportedContentClassifiers = "RESOLVED"

// Repository (OBJECT): A repository contains the content for a project.
type Repository struct {
	// AllowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
	AllowUpdateBranch bool `json:"allowUpdateBranch,omitempty"`

	// ArchivedAt: Identifies the date and time when the repository was archived.
	ArchivedAt DateTime `json:"archivedAt,omitempty"`

	// AssignableUsers: A list of users that can be assigned to issues in this repository.
	//
	// Query arguments:
	//   - query String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	AssignableUsers *UserConnection `json:"assignableUsers,omitempty"`

	// AutoMergeAllowed: Whether or not Auto-merge can be enabled on pull requests in this repository.
	AutoMergeAllowed bool `json:"autoMergeAllowed,omitempty"`

	// BranchProtectionRules: A list of branch protection rules for this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	BranchProtectionRules *BranchProtectionRuleConnection `json:"branchProtectionRules,omitempty"`

	// CodeOfConduct: Returns the code of conduct for this repository.
	CodeOfConduct *CodeOfConduct `json:"codeOfConduct,omitempty"`

	// Codeowners: Information extracted from the repository's `CODEOWNERS` file.
	//
	// Query arguments:
	//   - refName String
	Codeowners *RepositoryCodeowners `json:"codeowners,omitempty"`

	// Collaborators: A list of collaborators associated with the repository.
	//
	// Query arguments:
	//   - affiliation CollaboratorAffiliation
	//   - login String
	//   - query String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Collaborators *RepositoryCollaboratorConnection `json:"collaborators,omitempty"`

	// CommitComments: A list of commit comments associated with the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	CommitComments *CommitCommentConnection `json:"commitComments,omitempty"`

	// ContactLinks: Returns a list of contact links associated to the repository.
	ContactLinks []*RepositoryContactLink `json:"contactLinks,omitempty"`

	// ContributingGuidelines: Returns the contributing guidelines for this repository.
	ContributingGuidelines *ContributingGuidelines `json:"contributingGuidelines,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DefaultBranchRef: The Ref associated with the repository's default branch.
	DefaultBranchRef *Ref `json:"defaultBranchRef,omitempty"`

	// DeleteBranchOnMerge: Whether or not branches are automatically deleted when merged in this repository.
	DeleteBranchOnMerge bool `json:"deleteBranchOnMerge,omitempty"`

	// DependencyGraphManifests: A list of dependency manifests contained in the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - withDependencies Boolean
	//   - dependenciesFirst Int
	//   - dependenciesAfter String
	DependencyGraphManifests *DependencyGraphManifestConnection `json:"dependencyGraphManifests,omitempty"`

	// DeployKeys: A list of deploy keys that are on this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	DeployKeys *DeployKeyConnection `json:"deployKeys,omitempty"`

	// Deployments: Deployments associated with the repository.
	//
	// Query arguments:
	//   - environments [String!]
	//   - orderBy DeploymentOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Deployments *DeploymentConnection `json:"deployments,omitempty"`

	// Description: The description of the repository.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The description of the repository rendered to HTML.
	DescriptionHTML template.HTML `json:"descriptionHTML,omitempty"`

	// Discussion: Returns a single discussion from the current repository by number.
	//
	// Query arguments:
	//   - number Int!
	Discussion *Discussion `json:"discussion,omitempty"`

	// DiscussionCategories: A list of discussion categories that are available in the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - filterByAssignable Boolean
	DiscussionCategories *DiscussionCategoryConnection `json:"discussionCategories,omitempty"`

	// DiscussionCategory: A discussion category by slug.
	//
	// Query arguments:
	//   - slug String!
	DiscussionCategory *DiscussionCategory `json:"discussionCategory,omitempty"`

	// Discussions: A list of discussions that have been opened in the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - categoryId ID
	//   - states [DiscussionState!]
	//   - orderBy DiscussionOrder
	//   - answered Boolean
	Discussions *DiscussionConnection `json:"discussions,omitempty"`

	// DiskUsage: The number of kilobytes this repository occupies on disk.
	DiskUsage int `json:"diskUsage,omitempty"`

	// Environment: Returns a single active environment from the current repository by name.
	//
	// Query arguments:
	//   - name String!
	Environment *Environment `json:"environment,omitempty"`

	// Environments: A list of environments that are in this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy Environments
	//   - pinnedEnvironmentFilter EnvironmentPinnedFilterField
	//   - names [String!]
	Environments *EnvironmentConnection `json:"environments,omitempty"`

	// ForkCount: Returns how many forks there are of this repository in the whole network.
	ForkCount int `json:"forkCount,omitempty"`

	// ForkingAllowed: Whether this repository allows forks.
	ForkingAllowed bool `json:"forkingAllowed,omitempty"`

	// Forks: A list of direct forked repositories.
	//
	// Query arguments:
	//   - privacy RepositoryPrivacy
	//   - visibility RepositoryVisibility
	//   - orderBy RepositoryOrder
	//   - affiliations [RepositoryAffiliation]
	//   - ownerAffiliations [RepositoryAffiliation]
	//   - isLocked Boolean
	//   - hasIssuesEnabled Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Forks *RepositoryConnection `json:"forks,omitempty"`

	// FundingLinks: The funding links for this repository.
	FundingLinks []*FundingLink `json:"fundingLinks,omitempty"`

	// HasDiscussionsEnabled: Indicates if the repository has the Discussions feature enabled.
	HasDiscussionsEnabled bool `json:"hasDiscussionsEnabled,omitempty"`

	// HasIssuesEnabled: Indicates if the repository has issues feature enabled.
	HasIssuesEnabled bool `json:"hasIssuesEnabled,omitempty"`

	// HasProjectsEnabled: Indicates if the repository has the Projects feature enabled.
	HasProjectsEnabled bool `json:"hasProjectsEnabled,omitempty"`

	// HasSponsorshipsEnabled: Indicates if the repository displays a Sponsor button for financial contributions.
	HasSponsorshipsEnabled bool `json:"hasSponsorshipsEnabled,omitempty"`

	// HasVulnerabilityAlertsEnabled: Whether vulnerability alerts are enabled for the repository.
	HasVulnerabilityAlertsEnabled bool `json:"hasVulnerabilityAlertsEnabled,omitempty"`

	// HasWikiEnabled: Indicates if the repository has wiki feature enabled.
	HasWikiEnabled bool `json:"hasWikiEnabled,omitempty"`

	// HomepageUrl: The repository's URL.
	HomepageUrl URI `json:"homepageUrl,omitempty"`

	// Id: The Node ID of the Repository object.
	Id ID `json:"id,omitempty"`

	// InteractionAbility: The interaction ability settings for this repository.
	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`

	// IsArchived: Indicates if the repository is unmaintained.
	IsArchived bool `json:"isArchived,omitempty"`

	// IsBlankIssuesEnabled: Returns true if blank issue creation is allowed.
	IsBlankIssuesEnabled bool `json:"isBlankIssuesEnabled,omitempty"`

	// IsDisabled: Returns whether or not this repository disabled.
	IsDisabled bool `json:"isDisabled,omitempty"`

	// IsEmpty: Returns whether or not this repository is empty.
	IsEmpty bool `json:"isEmpty,omitempty"`

	// IsFork: Identifies if the repository is a fork.
	IsFork bool `json:"isFork,omitempty"`

	// IsInOrganization: Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
	IsInOrganization bool `json:"isInOrganization,omitempty"`

	// IsLocked: Indicates if the repository has been locked or not.
	IsLocked bool `json:"isLocked,omitempty"`

	// IsMirror: Identifies if the repository is a mirror.
	IsMirror bool `json:"isMirror,omitempty"`

	// IsPrivate: Identifies if the repository is private or internal.
	IsPrivate bool `json:"isPrivate,omitempty"`

	// IsSecurityPolicyEnabled: Returns true if this repository has a security policy.
	IsSecurityPolicyEnabled bool `json:"isSecurityPolicyEnabled,omitempty"`

	// IsTemplate: Identifies if the repository is a template that can be used to generate new repositories.
	IsTemplate bool `json:"isTemplate,omitempty"`

	// IsUserConfigurationRepository: Is this repository a user configuration repository?.
	IsUserConfigurationRepository bool `json:"isUserConfigurationRepository,omitempty"`

	// Issue: Returns a single issue from the current repository by number.
	//
	// Query arguments:
	//   - number Int!
	Issue *Issue `json:"issue,omitempty"`

	// IssueOrPullRequest: Returns a single issue-like object from the current repository by number.
	//
	// Query arguments:
	//   - number Int!
	IssueOrPullRequest IssueOrPullRequest `json:"issueOrPullRequest,omitempty"`

	// IssueTemplates: Returns a list of issue templates associated to the repository.
	IssueTemplates []*IssueTemplate `json:"issueTemplates,omitempty"`

	// Issues: A list of issues that have been opened in the repository.
	//
	// Query arguments:
	//   - orderBy IssueOrder
	//   - labels [String!]
	//   - states [IssueState!]
	//   - filterBy IssueFilters
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Issues *IssueConnection `json:"issues,omitempty"`

	// Label: Returns a single label by name.
	//
	// Query arguments:
	//   - name String!
	Label *Label `json:"label,omitempty"`

	// Labels: A list of labels associated with the repository.
	//
	// Query arguments:
	//   - orderBy LabelOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - query String
	Labels *LabelConnection `json:"labels,omitempty"`

	// Languages: A list containing a breakdown of the language composition of the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy LanguageOrder
	Languages *LanguageConnection `json:"languages,omitempty"`

	// LatestRelease: Get the latest release for the repository if one exists.
	LatestRelease *Release `json:"latestRelease,omitempty"`

	// LicenseInfo: The license associated with the repository.
	LicenseInfo *License `json:"licenseInfo,omitempty"`

	// LockReason: The reason the repository has been locked.
	LockReason RepositoryLockReason `json:"lockReason,omitempty"`

	// MentionableUsers: A list of Users that can be mentioned in the context of the repository.
	//
	// Query arguments:
	//   - query String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	MentionableUsers *UserConnection `json:"mentionableUsers,omitempty"`

	// MergeCommitAllowed: Whether or not PRs are merged with a merge commit on this repository.
	MergeCommitAllowed bool `json:"mergeCommitAllowed,omitempty"`

	// MergeCommitMessage: How the default commit message will be generated when merging a pull request.
	MergeCommitMessage MergeCommitMessage `json:"mergeCommitMessage,omitempty"`

	// MergeCommitTitle: How the default commit title will be generated when merging a pull request.
	MergeCommitTitle MergeCommitTitle `json:"mergeCommitTitle,omitempty"`

	// MergeQueue: The merge queue for a specified branch, otherwise the default branch if not provided.
	//
	// Query arguments:
	//   - branch String
	MergeQueue *MergeQueue `json:"mergeQueue,omitempty"`

	// Milestone: Returns a single milestone from the current repository by number.
	//
	// Query arguments:
	//   - number Int!
	Milestone *Milestone `json:"milestone,omitempty"`

	// Milestones: A list of milestones associated with the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - states [MilestoneState!]
	//   - orderBy MilestoneOrder
	//   - query String
	Milestones *MilestoneConnection `json:"milestones,omitempty"`

	// MirrorUrl: The repository's original mirror URL.
	MirrorUrl URI `json:"mirrorUrl,omitempty"`

	// Name: The name of the repository.
	Name string `json:"name,omitempty"`

	// NameWithOwner: The repository's name with owner.
	NameWithOwner string `json:"nameWithOwner,omitempty"`

	// Object: A Git object in the repository.
	//
	// Query arguments:
	//   - oid GitObjectID
	//   - expression String
	Object GitObject `json:"object,omitempty"`

	// OpenGraphImageUrl: The image used to represent this repository in Open Graph data.
	OpenGraphImageUrl URI `json:"openGraphImageUrl,omitempty"`

	// Owner: The User owner of the repository.
	Owner RepositoryOwner `json:"owner,omitempty"`

	// Packages: A list of packages under the owner.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - names [String]
	//   - repositoryId ID
	//   - packageType PackageType
	//   - orderBy PackageOrder
	Packages *PackageConnection `json:"packages,omitempty"`

	// Parent: The repository parent, if this is a fork.
	Parent *Repository `json:"parent,omitempty"`

	// PinnedDiscussions: A list of discussions that have been pinned in this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PinnedDiscussions *PinnedDiscussionConnection `json:"pinnedDiscussions,omitempty"`

	// PinnedEnvironments: A list of pinned environments for this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy PinnedEnvironmentOrder
	PinnedEnvironments *PinnedEnvironmentConnection `json:"pinnedEnvironments,omitempty"`

	// PinnedIssues: A list of pinned issues for this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PinnedIssues *PinnedIssueConnection `json:"pinnedIssues,omitempty"`

	// PlanFeatures: Returns information about the availability of certain features and limits based on the repository's billing plan.
	PlanFeatures *RepositoryPlanFeatures `json:"planFeatures,omitempty"`

	// PrimaryLanguage: The primary language of the repository's code.
	PrimaryLanguage *Language `json:"primaryLanguage,omitempty"`

	// Project: Find project by number.
	//
	// Deprecated: Find project by number.
	//
	// Query arguments:
	//   - number Int!
	Project *Project `json:"project,omitempty"`

	// ProjectV2: Finds and returns the Project according to the provided Project number.
	//
	// Query arguments:
	//   - number Int!
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`

	// Projects: A list of projects under the owner.
	//
	// Deprecated: A list of projects under the owner.
	//
	// Query arguments:
	//   - orderBy ProjectOrder
	//   - search String
	//   - states [ProjectState!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Projects *ProjectConnection `json:"projects,omitempty"`

	// ProjectsResourcePath: The HTTP path listing the repository's projects.
	ProjectsResourcePath URI `json:"projectsResourcePath,omitempty"`

	// ProjectsUrl: The HTTP URL listing the repository's projects.
	ProjectsUrl URI `json:"projectsUrl,omitempty"`

	// ProjectsV2: List of projects linked to this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - query String
	//   - orderBy ProjectV2Order
	//   - minPermissionLevel ProjectV2PermissionLevel
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// PullRequest: Returns a single pull request from the current repository by number.
	//
	// Query arguments:
	//   - number Int!
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// PullRequestTemplates: Returns a list of pull request templates associated to the repository.
	PullRequestTemplates []*PullRequestTemplate `json:"pullRequestTemplates,omitempty"`

	// PullRequests: A list of pull requests that have been opened in the repository.
	//
	// Query arguments:
	//   - states [PullRequestState!]
	//   - labels [String!]
	//   - headRefName String
	//   - baseRefName String
	//   - orderBy IssueOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`

	// PushedAt: Identifies the date and time when the repository was last pushed to.
	PushedAt DateTime `json:"pushedAt,omitempty"`

	// RebaseMergeAllowed: Whether or not rebase-merging is enabled on this repository.
	RebaseMergeAllowed bool `json:"rebaseMergeAllowed,omitempty"`

	// RecentProjects: Recent projects that this user has modified in the context of the owner.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RecentProjects *ProjectV2Connection `json:"recentProjects,omitempty"`

	// Ref: Fetch a given ref from the repository.
	//
	// Query arguments:
	//   - qualifiedName String!
	Ref *Ref `json:"ref,omitempty"`

	// Refs: Fetch a list of refs from the repository.
	//
	// Query arguments:
	//   - query String
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - refPrefix String!
	//   - direction OrderDirection
	//   - orderBy RefOrder
	Refs *RefConnection `json:"refs,omitempty"`

	// Release: Lookup a single release given various criteria.
	//
	// Query arguments:
	//   - tagName String!
	Release *Release `json:"release,omitempty"`

	// Releases: List of releases which are dependent on this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ReleaseOrder
	Releases *ReleaseConnection `json:"releases,omitempty"`

	// RepositoryTopics: A list of applied repository-topic associations for this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RepositoryTopics *RepositoryTopicConnection `json:"repositoryTopics,omitempty"`

	// ResourcePath: The HTTP path for this repository.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Ruleset: Returns a single ruleset from the current repository by ID.
	//
	// Query arguments:
	//   - includeParents Boolean
	//   - databaseId Int!
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`

	// Rulesets: A list of rulesets for this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - includeParents Boolean
	//   - targets [RepositoryRulesetTarget!]
	Rulesets *RepositoryRulesetConnection `json:"rulesets,omitempty"`

	// SecurityPolicyUrl: The security policy URL.
	SecurityPolicyUrl URI `json:"securityPolicyUrl,omitempty"`

	// ShortDescriptionHTML: A description of the repository, rendered to HTML without any links in it.
	//
	// Query arguments:
	//   - limit Int
	ShortDescriptionHTML template.HTML `json:"shortDescriptionHTML,omitempty"`

	// SquashMergeAllowed: Whether or not squash-merging is enabled on this repository.
	SquashMergeAllowed bool `json:"squashMergeAllowed,omitempty"`

	// SquashMergeCommitMessage: How the default commit message will be generated when squash merging a pull request.
	SquashMergeCommitMessage SquashMergeCommitMessage `json:"squashMergeCommitMessage,omitempty"`

	// SquashMergeCommitTitle: How the default commit title will be generated when squash merging a pull request.
	SquashMergeCommitTitle SquashMergeCommitTitle `json:"squashMergeCommitTitle,omitempty"`

	// SquashPrTitleUsedAsDefault: Whether a squash merge commit can use the pull request title as default.
	//
	// Deprecated: Whether a squash merge commit can use the pull request title as default.
	SquashPrTitleUsedAsDefault bool `json:"squashPrTitleUsedAsDefault,omitempty"`

	// SshUrl: The SSH URL to clone this repository.
	SshUrl GitSSHRemote `json:"sshUrl,omitempty"`

	// StargazerCount: Returns a count of how many stargazers there are on this object
	// .
	StargazerCount int `json:"stargazerCount,omitempty"`

	// Stargazers: A list of users who have starred this starrable.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy StarOrder
	Stargazers *StargazerConnection `json:"stargazers,omitempty"`

	// Submodules: Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Submodules *SubmoduleConnection `json:"submodules,omitempty"`

	// TempCloneToken: Temporary authentication token for cloning this repository.
	TempCloneToken string `json:"tempCloneToken,omitempty"`

	// TemplateRepository: The repository from which this repository was generated, if any.
	TemplateRepository *Repository `json:"templateRepository,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this repository.
	Url URI `json:"url,omitempty"`

	// UsesCustomOpenGraphImage: Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
	UsesCustomOpenGraphImage bool `json:"usesCustomOpenGraphImage,omitempty"`

	// ViewerCanAdminister: Indicates whether the viewer has admin permissions on this repository.
	ViewerCanAdminister bool `json:"viewerCanAdminister,omitempty"`

	// ViewerCanCreateProjects: Can the current viewer create new projects on this owner.
	ViewerCanCreateProjects bool `json:"viewerCanCreateProjects,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerCanUpdateTopics: Indicates whether the viewer can update the topics of this repository.
	ViewerCanUpdateTopics bool `json:"viewerCanUpdateTopics,omitempty"`

	// ViewerDefaultCommitEmail: The last commit email for the viewer.
	ViewerDefaultCommitEmail string `json:"viewerDefaultCommitEmail,omitempty"`

	// ViewerDefaultMergeMethod: The last used merge method by the viewer or the default for the repository.
	ViewerDefaultMergeMethod PullRequestMergeMethod `json:"viewerDefaultMergeMethod,omitempty"`

	// ViewerHasStarred: Returns a boolean indicating whether the viewing user has starred this starrable.
	ViewerHasStarred bool `json:"viewerHasStarred,omitempty"`

	// ViewerPermission: The users permission level on the repository. Will return null if authenticated as an GitHub App.
	ViewerPermission RepositoryPermission `json:"viewerPermission,omitempty"`

	// ViewerPossibleCommitEmails: A list of emails this viewer can commit with.
	ViewerPossibleCommitEmails []string `json:"viewerPossibleCommitEmails,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`

	// Visibility: Indicates the repository's visibility level.
	Visibility RepositoryVisibility `json:"visibility,omitempty"`

	// VulnerabilityAlert: Returns a single vulnerability alert from the current repository by number.
	//
	// Query arguments:
	//   - number Int!
	VulnerabilityAlert *RepositoryVulnerabilityAlert `json:"vulnerabilityAlert,omitempty"`

	// VulnerabilityAlerts: A list of vulnerability alerts that are on this repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - states [RepositoryVulnerabilityAlertState!]
	//   - dependencyScopes [RepositoryVulnerabilityAlertDependencyScope!]
	VulnerabilityAlerts *RepositoryVulnerabilityAlertConnection `json:"vulnerabilityAlerts,omitempty"`

	// Watchers: A list of users watching the repository.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Watchers *UserConnection `json:"watchers,omitempty"`

	// WebCommitSignoffRequired: Whether contributors are required to sign off on web-based commits in this repository.
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired,omitempty"`
}

func (x *Repository) GetAllowUpdateBranch() bool          { return x.AllowUpdateBranch }
func (x *Repository) GetArchivedAt() DateTime             { return x.ArchivedAt }
func (x *Repository) GetAssignableUsers() *UserConnection { return x.AssignableUsers }
func (x *Repository) GetAutoMergeAllowed() bool           { return x.AutoMergeAllowed }
func (x *Repository) GetBranchProtectionRules() *BranchProtectionRuleConnection {
	return x.BranchProtectionRules
}
func (x *Repository) GetCodeOfConduct() *CodeOfConduct                    { return x.CodeOfConduct }
func (x *Repository) GetCodeowners() *RepositoryCodeowners                { return x.Codeowners }
func (x *Repository) GetCollaborators() *RepositoryCollaboratorConnection { return x.Collaborators }
func (x *Repository) GetCommitComments() *CommitCommentConnection         { return x.CommitComments }
func (x *Repository) GetContactLinks() []*RepositoryContactLink           { return x.ContactLinks }
func (x *Repository) GetContributingGuidelines() *ContributingGuidelines {
	return x.ContributingGuidelines
}
func (x *Repository) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *Repository) GetDatabaseId() int           { return x.DatabaseId }
func (x *Repository) GetDefaultBranchRef() *Ref    { return x.DefaultBranchRef }
func (x *Repository) GetDeleteBranchOnMerge() bool { return x.DeleteBranchOnMerge }
func (x *Repository) GetDependencyGraphManifests() *DependencyGraphManifestConnection {
	return x.DependencyGraphManifests
}
func (x *Repository) GetDeployKeys() *DeployKeyConnection   { return x.DeployKeys }
func (x *Repository) GetDeployments() *DeploymentConnection { return x.Deployments }
func (x *Repository) GetDescription() string                { return x.Description }
func (x *Repository) GetDescriptionHTML() template.HTML     { return x.DescriptionHTML }
func (x *Repository) GetDiscussion() *Discussion            { return x.Discussion }
func (x *Repository) GetDiscussionCategories() *DiscussionCategoryConnection {
	return x.DiscussionCategories
}
func (x *Repository) GetDiscussionCategory() *DiscussionCategory { return x.DiscussionCategory }
func (x *Repository) GetDiscussions() *DiscussionConnection      { return x.Discussions }
func (x *Repository) GetDiskUsage() int                          { return x.DiskUsage }
func (x *Repository) GetEnvironment() *Environment               { return x.Environment }
func (x *Repository) GetEnvironments() *EnvironmentConnection    { return x.Environments }
func (x *Repository) GetForkCount() int                          { return x.ForkCount }
func (x *Repository) GetForkingAllowed() bool                    { return x.ForkingAllowed }
func (x *Repository) GetForks() *RepositoryConnection            { return x.Forks }
func (x *Repository) GetFundingLinks() []*FundingLink            { return x.FundingLinks }
func (x *Repository) GetHasDiscussionsEnabled() bool             { return x.HasDiscussionsEnabled }
func (x *Repository) GetHasIssuesEnabled() bool                  { return x.HasIssuesEnabled }
func (x *Repository) GetHasProjectsEnabled() bool                { return x.HasProjectsEnabled }
func (x *Repository) GetHasSponsorshipsEnabled() bool            { return x.HasSponsorshipsEnabled }
func (x *Repository) GetHasVulnerabilityAlertsEnabled() bool     { return x.HasVulnerabilityAlertsEnabled }
func (x *Repository) GetHasWikiEnabled() bool                    { return x.HasWikiEnabled }
func (x *Repository) GetHomepageUrl() URI                        { return x.HomepageUrl }
func (x *Repository) GetId() ID                                  { return x.Id }
func (x *Repository) GetInteractionAbility() *RepositoryInteractionAbility {
	return x.InteractionAbility
}
func (x *Repository) GetIsArchived() bool                               { return x.IsArchived }
func (x *Repository) GetIsBlankIssuesEnabled() bool                     { return x.IsBlankIssuesEnabled }
func (x *Repository) GetIsDisabled() bool                               { return x.IsDisabled }
func (x *Repository) GetIsEmpty() bool                                  { return x.IsEmpty }
func (x *Repository) GetIsFork() bool                                   { return x.IsFork }
func (x *Repository) GetIsInOrganization() bool                         { return x.IsInOrganization }
func (x *Repository) GetIsLocked() bool                                 { return x.IsLocked }
func (x *Repository) GetIsMirror() bool                                 { return x.IsMirror }
func (x *Repository) GetIsPrivate() bool                                { return x.IsPrivate }
func (x *Repository) GetIsSecurityPolicyEnabled() bool                  { return x.IsSecurityPolicyEnabled }
func (x *Repository) GetIsTemplate() bool                               { return x.IsTemplate }
func (x *Repository) GetIsUserConfigurationRepository() bool            { return x.IsUserConfigurationRepository }
func (x *Repository) GetIssue() *Issue                                  { return x.Issue }
func (x *Repository) GetIssueOrPullRequest() IssueOrPullRequest         { return x.IssueOrPullRequest }
func (x *Repository) GetIssueTemplates() []*IssueTemplate               { return x.IssueTemplates }
func (x *Repository) GetIssues() *IssueConnection                       { return x.Issues }
func (x *Repository) GetLabel() *Label                                  { return x.Label }
func (x *Repository) GetLabels() *LabelConnection                       { return x.Labels }
func (x *Repository) GetLanguages() *LanguageConnection                 { return x.Languages }
func (x *Repository) GetLatestRelease() *Release                        { return x.LatestRelease }
func (x *Repository) GetLicenseInfo() *License                          { return x.LicenseInfo }
func (x *Repository) GetLockReason() RepositoryLockReason               { return x.LockReason }
func (x *Repository) GetMentionableUsers() *UserConnection              { return x.MentionableUsers }
func (x *Repository) GetMergeCommitAllowed() bool                       { return x.MergeCommitAllowed }
func (x *Repository) GetMergeCommitMessage() MergeCommitMessage         { return x.MergeCommitMessage }
func (x *Repository) GetMergeCommitTitle() MergeCommitTitle             { return x.MergeCommitTitle }
func (x *Repository) GetMergeQueue() *MergeQueue                        { return x.MergeQueue }
func (x *Repository) GetMilestone() *Milestone                          { return x.Milestone }
func (x *Repository) GetMilestones() *MilestoneConnection               { return x.Milestones }
func (x *Repository) GetMirrorUrl() URI                                 { return x.MirrorUrl }
func (x *Repository) GetName() string                                   { return x.Name }
func (x *Repository) GetNameWithOwner() string                          { return x.NameWithOwner }
func (x *Repository) GetObject() GitObject                              { return x.Object }
func (x *Repository) GetOpenGraphImageUrl() URI                         { return x.OpenGraphImageUrl }
func (x *Repository) GetOwner() RepositoryOwner                         { return x.Owner }
func (x *Repository) GetPackages() *PackageConnection                   { return x.Packages }
func (x *Repository) GetParent() *Repository                            { return x.Parent }
func (x *Repository) GetPinnedDiscussions() *PinnedDiscussionConnection { return x.PinnedDiscussions }
func (x *Repository) GetPinnedEnvironments() *PinnedEnvironmentConnection {
	return x.PinnedEnvironments
}
func (x *Repository) GetPinnedIssues() *PinnedIssueConnection         { return x.PinnedIssues }
func (x *Repository) GetPlanFeatures() *RepositoryPlanFeatures        { return x.PlanFeatures }
func (x *Repository) GetPrimaryLanguage() *Language                   { return x.PrimaryLanguage }
func (x *Repository) GetProject() *Project                            { return x.Project }
func (x *Repository) GetProjectV2() *ProjectV2                        { return x.ProjectV2 }
func (x *Repository) GetProjects() *ProjectConnection                 { return x.Projects }
func (x *Repository) GetProjectsResourcePath() URI                    { return x.ProjectsResourcePath }
func (x *Repository) GetProjectsUrl() URI                             { return x.ProjectsUrl }
func (x *Repository) GetProjectsV2() *ProjectV2Connection             { return x.ProjectsV2 }
func (x *Repository) GetPullRequest() *PullRequest                    { return x.PullRequest }
func (x *Repository) GetPullRequestTemplates() []*PullRequestTemplate { return x.PullRequestTemplates }
func (x *Repository) GetPullRequests() *PullRequestConnection         { return x.PullRequests }
func (x *Repository) GetPushedAt() DateTime                           { return x.PushedAt }
func (x *Repository) GetRebaseMergeAllowed() bool                     { return x.RebaseMergeAllowed }
func (x *Repository) GetRecentProjects() *ProjectV2Connection         { return x.RecentProjects }
func (x *Repository) GetRef() *Ref                                    { return x.Ref }
func (x *Repository) GetRefs() *RefConnection                         { return x.Refs }
func (x *Repository) GetRelease() *Release                            { return x.Release }
func (x *Repository) GetReleases() *ReleaseConnection                 { return x.Releases }
func (x *Repository) GetRepositoryTopics() *RepositoryTopicConnection { return x.RepositoryTopics }
func (x *Repository) GetResourcePath() URI                            { return x.ResourcePath }
func (x *Repository) GetRuleset() *RepositoryRuleset                  { return x.Ruleset }
func (x *Repository) GetRulesets() *RepositoryRulesetConnection       { return x.Rulesets }
func (x *Repository) GetSecurityPolicyUrl() URI                       { return x.SecurityPolicyUrl }
func (x *Repository) GetShortDescriptionHTML() template.HTML          { return x.ShortDescriptionHTML }
func (x *Repository) GetSquashMergeAllowed() bool                     { return x.SquashMergeAllowed }
func (x *Repository) GetSquashMergeCommitMessage() SquashMergeCommitMessage {
	return x.SquashMergeCommitMessage
}
func (x *Repository) GetSquashMergeCommitTitle() SquashMergeCommitTitle {
	return x.SquashMergeCommitTitle
}
func (x *Repository) GetSquashPrTitleUsedAsDefault() bool { return x.SquashPrTitleUsedAsDefault }
func (x *Repository) GetSshUrl() GitSSHRemote             { return x.SshUrl }
func (x *Repository) GetStargazerCount() int              { return x.StargazerCount }
func (x *Repository) GetStargazers() *StargazerConnection { return x.Stargazers }
func (x *Repository) GetSubmodules() *SubmoduleConnection { return x.Submodules }
func (x *Repository) GetTempCloneToken() string           { return x.TempCloneToken }
func (x *Repository) GetTemplateRepository() *Repository  { return x.TemplateRepository }
func (x *Repository) GetUpdatedAt() DateTime              { return x.UpdatedAt }
func (x *Repository) GetUrl() URI                         { return x.Url }
func (x *Repository) GetUsesCustomOpenGraphImage() bool   { return x.UsesCustomOpenGraphImage }
func (x *Repository) GetViewerCanAdminister() bool        { return x.ViewerCanAdminister }
func (x *Repository) GetViewerCanCreateProjects() bool    { return x.ViewerCanCreateProjects }
func (x *Repository) GetViewerCanSubscribe() bool         { return x.ViewerCanSubscribe }
func (x *Repository) GetViewerCanUpdateTopics() bool      { return x.ViewerCanUpdateTopics }
func (x *Repository) GetViewerDefaultCommitEmail() string { return x.ViewerDefaultCommitEmail }
func (x *Repository) GetViewerDefaultMergeMethod() PullRequestMergeMethod {
	return x.ViewerDefaultMergeMethod
}
func (x *Repository) GetViewerHasStarred() bool                 { return x.ViewerHasStarred }
func (x *Repository) GetViewerPermission() RepositoryPermission { return x.ViewerPermission }
func (x *Repository) GetViewerPossibleCommitEmails() []string   { return x.ViewerPossibleCommitEmails }
func (x *Repository) GetViewerSubscription() SubscriptionState  { return x.ViewerSubscription }
func (x *Repository) GetVisibility() RepositoryVisibility       { return x.Visibility }
func (x *Repository) GetVulnerabilityAlert() *RepositoryVulnerabilityAlert {
	return x.VulnerabilityAlert
}
func (x *Repository) GetVulnerabilityAlerts() *RepositoryVulnerabilityAlertConnection {
	return x.VulnerabilityAlerts
}
func (x *Repository) GetWatchers() *UserConnection      { return x.Watchers }
func (x *Repository) GetWebCommitSignoffRequired() bool { return x.WebCommitSignoffRequired }

// RepositoryAffiliation (ENUM): The affiliation of a user to a repository.
type RepositoryAffiliation string

// RepositoryAffiliation_OWNER: Repositories that are owned by the authenticated user.
const RepositoryAffiliation_OWNER RepositoryAffiliation = "OWNER"

// RepositoryAffiliation_COLLABORATOR: Repositories that the user has been added to as a collaborator.
const RepositoryAffiliation_COLLABORATOR RepositoryAffiliation = "COLLABORATOR"

// RepositoryAffiliation_ORGANIZATION_MEMBER: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
const RepositoryAffiliation_ORGANIZATION_MEMBER RepositoryAffiliation = "ORGANIZATION_MEMBER"

// RepositoryAuditEntryData (INTERFACE): Metadata for an audit entry with action repo.*.
// RepositoryAuditEntryData_Interface: Metadata for an audit entry with action repo.*.
//
// Possible types:
//
//   - *OrgRestoreMemberMembershipRepositoryAuditEntryData
//   - *PrivateRepositoryForkingDisableAuditEntry
//   - *PrivateRepositoryForkingEnableAuditEntry
//   - *RepoAccessAuditEntry
//   - *RepoAddMemberAuditEntry
//   - *RepoAddTopicAuditEntry
//   - *RepoArchivedAuditEntry
//   - *RepoChangeMergeSettingAuditEntry
//   - *RepoConfigDisableAnonymousGitAccessAuditEntry
//   - *RepoConfigDisableCollaboratorsOnlyAuditEntry
//   - *RepoConfigDisableContributorsOnlyAuditEntry
//   - *RepoConfigDisableSockpuppetDisallowedAuditEntry
//   - *RepoConfigEnableAnonymousGitAccessAuditEntry
//   - *RepoConfigEnableCollaboratorsOnlyAuditEntry
//   - *RepoConfigEnableContributorsOnlyAuditEntry
//   - *RepoConfigEnableSockpuppetDisallowedAuditEntry
//   - *RepoConfigLockAnonymousGitAccessAuditEntry
//   - *RepoConfigUnlockAnonymousGitAccessAuditEntry
//   - *RepoCreateAuditEntry
//   - *RepoDestroyAuditEntry
//   - *RepoRemoveMemberAuditEntry
//   - *RepoRemoveTopicAuditEntry
//   - *TeamAddRepositoryAuditEntry
//   - *TeamRemoveRepositoryAuditEntry
type RepositoryAuditEntryData_Interface interface {
	isRepositoryAuditEntryData()
	GetRepository() *Repository
	GetRepositoryName() string
	GetRepositoryResourcePath() URI
	GetRepositoryUrl() URI
}

func (*OrgRestoreMemberMembershipRepositoryAuditEntryData) isRepositoryAuditEntryData() {}
func (*PrivateRepositoryForkingDisableAuditEntry) isRepositoryAuditEntryData()          {}
func (*PrivateRepositoryForkingEnableAuditEntry) isRepositoryAuditEntryData()           {}
func (*RepoAccessAuditEntry) isRepositoryAuditEntryData()                               {}
func (*RepoAddMemberAuditEntry) isRepositoryAuditEntryData()                            {}
func (*RepoAddTopicAuditEntry) isRepositoryAuditEntryData()                             {}
func (*RepoArchivedAuditEntry) isRepositoryAuditEntryData()                             {}
func (*RepoChangeMergeSettingAuditEntry) isRepositoryAuditEntryData()                   {}
func (*RepoConfigDisableAnonymousGitAccessAuditEntry) isRepositoryAuditEntryData()      {}
func (*RepoConfigDisableCollaboratorsOnlyAuditEntry) isRepositoryAuditEntryData()       {}
func (*RepoConfigDisableContributorsOnlyAuditEntry) isRepositoryAuditEntryData()        {}
func (*RepoConfigDisableSockpuppetDisallowedAuditEntry) isRepositoryAuditEntryData()    {}
func (*RepoConfigEnableAnonymousGitAccessAuditEntry) isRepositoryAuditEntryData()       {}
func (*RepoConfigEnableCollaboratorsOnlyAuditEntry) isRepositoryAuditEntryData()        {}
func (*RepoConfigEnableContributorsOnlyAuditEntry) isRepositoryAuditEntryData()         {}
func (*RepoConfigEnableSockpuppetDisallowedAuditEntry) isRepositoryAuditEntryData()     {}
func (*RepoConfigLockAnonymousGitAccessAuditEntry) isRepositoryAuditEntryData()         {}
func (*RepoConfigUnlockAnonymousGitAccessAuditEntry) isRepositoryAuditEntryData()       {}
func (*RepoCreateAuditEntry) isRepositoryAuditEntryData()                               {}
func (*RepoDestroyAuditEntry) isRepositoryAuditEntryData()                              {}
func (*RepoRemoveMemberAuditEntry) isRepositoryAuditEntryData()                         {}
func (*RepoRemoveTopicAuditEntry) isRepositoryAuditEntryData()                          {}
func (*TeamAddRepositoryAuditEntry) isRepositoryAuditEntryData()                        {}
func (*TeamRemoveRepositoryAuditEntry) isRepositoryAuditEntryData()                     {}

type RepositoryAuditEntryData struct {
	Interface RepositoryAuditEntryData_Interface
}

func (x *RepositoryAuditEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RepositoryAuditEntryData) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RepositoryAuditEntryData", info.Typename)
	case "OrgRestoreMemberMembershipRepositoryAuditEntryData":
		x.Interface = new(OrgRestoreMemberMembershipRepositoryAuditEntryData)
	case "PrivateRepositoryForkingDisableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingDisableAuditEntry)
	case "PrivateRepositoryForkingEnableAuditEntry":
		x.Interface = new(PrivateRepositoryForkingEnableAuditEntry)
	case "RepoAccessAuditEntry":
		x.Interface = new(RepoAccessAuditEntry)
	case "RepoAddMemberAuditEntry":
		x.Interface = new(RepoAddMemberAuditEntry)
	case "RepoAddTopicAuditEntry":
		x.Interface = new(RepoAddTopicAuditEntry)
	case "RepoArchivedAuditEntry":
		x.Interface = new(RepoArchivedAuditEntry)
	case "RepoChangeMergeSettingAuditEntry":
		x.Interface = new(RepoChangeMergeSettingAuditEntry)
	case "RepoConfigDisableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigDisableAnonymousGitAccessAuditEntry)
	case "RepoConfigDisableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableCollaboratorsOnlyAuditEntry)
	case "RepoConfigDisableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigDisableContributorsOnlyAuditEntry)
	case "RepoConfigDisableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigDisableSockpuppetDisallowedAuditEntry)
	case "RepoConfigEnableAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigEnableAnonymousGitAccessAuditEntry)
	case "RepoConfigEnableCollaboratorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableCollaboratorsOnlyAuditEntry)
	case "RepoConfigEnableContributorsOnlyAuditEntry":
		x.Interface = new(RepoConfigEnableContributorsOnlyAuditEntry)
	case "RepoConfigEnableSockpuppetDisallowedAuditEntry":
		x.Interface = new(RepoConfigEnableSockpuppetDisallowedAuditEntry)
	case "RepoConfigLockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigLockAnonymousGitAccessAuditEntry)
	case "RepoConfigUnlockAnonymousGitAccessAuditEntry":
		x.Interface = new(RepoConfigUnlockAnonymousGitAccessAuditEntry)
	case "RepoCreateAuditEntry":
		x.Interface = new(RepoCreateAuditEntry)
	case "RepoDestroyAuditEntry":
		x.Interface = new(RepoDestroyAuditEntry)
	case "RepoRemoveMemberAuditEntry":
		x.Interface = new(RepoRemoveMemberAuditEntry)
	case "RepoRemoveTopicAuditEntry":
		x.Interface = new(RepoRemoveTopicAuditEntry)
	case "TeamAddRepositoryAuditEntry":
		x.Interface = new(TeamAddRepositoryAuditEntry)
	case "TeamRemoveRepositoryAuditEntry":
		x.Interface = new(TeamRemoveRepositoryAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// RepositoryCodeowners (OBJECT): Information extracted from a repository's `CODEOWNERS` file.
type RepositoryCodeowners struct {
	// Errors: Any problems that were encountered while parsing the `CODEOWNERS` file.
	Errors []*RepositoryCodeownersError `json:"errors,omitempty"`
}

func (x *RepositoryCodeowners) GetErrors() []*RepositoryCodeownersError { return x.Errors }

// RepositoryCodeownersError (OBJECT): An error in a `CODEOWNERS` file.
type RepositoryCodeownersError struct {
	// Column: The column number where the error occurs.
	Column int `json:"column,omitempty"`

	// Kind: A short string describing the type of error.
	Kind string `json:"kind,omitempty"`

	// Line: The line number where the error occurs.
	Line int `json:"line,omitempty"`

	// Message: A complete description of the error, combining information from other fields.
	Message string `json:"message,omitempty"`

	// Path: The path to the file when the error occurs.
	Path string `json:"path,omitempty"`

	// Source: The content of the line where the error occurs.
	Source string `json:"source,omitempty"`

	// Suggestion: A suggestion of how to fix the error.
	Suggestion string `json:"suggestion,omitempty"`
}

func (x *RepositoryCodeownersError) GetColumn() int        { return x.Column }
func (x *RepositoryCodeownersError) GetKind() string       { return x.Kind }
func (x *RepositoryCodeownersError) GetLine() int          { return x.Line }
func (x *RepositoryCodeownersError) GetMessage() string    { return x.Message }
func (x *RepositoryCodeownersError) GetPath() string       { return x.Path }
func (x *RepositoryCodeownersError) GetSource() string     { return x.Source }
func (x *RepositoryCodeownersError) GetSuggestion() string { return x.Suggestion }

// RepositoryCollaboratorConnection (OBJECT): The connection type for User.
type RepositoryCollaboratorConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryCollaboratorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryCollaboratorConnection) GetEdges() []*RepositoryCollaboratorEdge { return x.Edges }
func (x *RepositoryCollaboratorConnection) GetNodes() []*User                       { return x.Nodes }
func (x *RepositoryCollaboratorConnection) GetPageInfo() *PageInfo                  { return x.PageInfo }
func (x *RepositoryCollaboratorConnection) GetTotalCount() int                      { return x.TotalCount }

// RepositoryCollaboratorEdge (OBJECT): Represents a user who is a collaborator of a repository.
type RepositoryCollaboratorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: undocumented.
	Node *User `json:"node,omitempty"`

	// Permission: The permission the user has on the repository.
	Permission RepositoryPermission `json:"permission,omitempty"`

	// PermissionSources: A list of sources for the user's access to the repository.
	PermissionSources []*PermissionSource `json:"permissionSources,omitempty"`
}

func (x *RepositoryCollaboratorEdge) GetCursor() string                   { return x.Cursor }
func (x *RepositoryCollaboratorEdge) GetNode() *User                      { return x.Node }
func (x *RepositoryCollaboratorEdge) GetPermission() RepositoryPermission { return x.Permission }
func (x *RepositoryCollaboratorEdge) GetPermissionSources() []*PermissionSource {
	return x.PermissionSources
}

// RepositoryConnection (OBJECT): A list of repositories owned by the subject.
type RepositoryConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Repository `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// TotalDiskUsage: The total size in kilobytes of all repositories in the connection. Value will never be larger than max 32-bit signed integer.
	TotalDiskUsage int `json:"totalDiskUsage,omitempty"`
}

func (x *RepositoryConnection) GetEdges() []*RepositoryEdge { return x.Edges }
func (x *RepositoryConnection) GetNodes() []*Repository     { return x.Nodes }
func (x *RepositoryConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *RepositoryConnection) GetTotalCount() int          { return x.TotalCount }
func (x *RepositoryConnection) GetTotalDiskUsage() int      { return x.TotalDiskUsage }

// RepositoryContactLink (OBJECT): A repository contact link.
type RepositoryContactLink struct {
	// About: The contact link purpose.
	About string `json:"about,omitempty"`

	// Name: The contact link name.
	Name string `json:"name,omitempty"`

	// Url: The contact link URL.
	Url URI `json:"url,omitempty"`
}

func (x *RepositoryContactLink) GetAbout() string { return x.About }
func (x *RepositoryContactLink) GetName() string  { return x.Name }
func (x *RepositoryContactLink) GetUrl() URI      { return x.Url }

// RepositoryContributionType (ENUM): The reason a repository is listed as 'contributed'.
type RepositoryContributionType string

// RepositoryContributionType_COMMIT: Created a commit.
const RepositoryContributionType_COMMIT RepositoryContributionType = "COMMIT"

// RepositoryContributionType_ISSUE: Created an issue.
const RepositoryContributionType_ISSUE RepositoryContributionType = "ISSUE"

// RepositoryContributionType_PULL_REQUEST: Created a pull request.
const RepositoryContributionType_PULL_REQUEST RepositoryContributionType = "PULL_REQUEST"

// RepositoryContributionType_REPOSITORY: Created the repository.
const RepositoryContributionType_REPOSITORY RepositoryContributionType = "REPOSITORY"

// RepositoryContributionType_PULL_REQUEST_REVIEW: Reviewed a pull request.
const RepositoryContributionType_PULL_REQUEST_REVIEW RepositoryContributionType = "PULL_REQUEST_REVIEW"

// RepositoryDiscussionAuthor (INTERFACE): Represents an author of discussions in repositories.
// RepositoryDiscussionAuthor_Interface: Represents an author of discussions in repositories.
//
// Possible types:
//
//   - *Organization
//   - *User
type RepositoryDiscussionAuthor_Interface interface {
	isRepositoryDiscussionAuthor()
	GetRepositoryDiscussions() *DiscussionConnection
}

func (*Organization) isRepositoryDiscussionAuthor() {}
func (*User) isRepositoryDiscussionAuthor()         {}

type RepositoryDiscussionAuthor struct {
	Interface RepositoryDiscussionAuthor_Interface
}

func (x *RepositoryDiscussionAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RepositoryDiscussionAuthor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RepositoryDiscussionAuthor", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// RepositoryDiscussionCommentAuthor (INTERFACE): Represents an author of discussion comments in repositories.
// RepositoryDiscussionCommentAuthor_Interface: Represents an author of discussion comments in repositories.
//
// Possible types:
//
//   - *Organization
//   - *User
type RepositoryDiscussionCommentAuthor_Interface interface {
	isRepositoryDiscussionCommentAuthor()
	GetRepositoryDiscussionComments() *DiscussionCommentConnection
}

func (*Organization) isRepositoryDiscussionCommentAuthor() {}
func (*User) isRepositoryDiscussionCommentAuthor()         {}

type RepositoryDiscussionCommentAuthor struct {
	Interface RepositoryDiscussionCommentAuthor_Interface
}

func (x *RepositoryDiscussionCommentAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RepositoryDiscussionCommentAuthor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RepositoryDiscussionCommentAuthor", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// RepositoryEdge (OBJECT): An edge in a connection.
type RepositoryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Repository `json:"node,omitempty"`
}

func (x *RepositoryEdge) GetCursor() string    { return x.Cursor }
func (x *RepositoryEdge) GetNode() *Repository { return x.Node }

// RepositoryIdConditionTarget (OBJECT): Parameters to be used for the repository_id condition.
type RepositoryIdConditionTarget struct {
	// RepositoryIds: One of these repo IDs must match the repo.
	RepositoryIds []ID `json:"repositoryIds,omitempty"`
}

func (x *RepositoryIdConditionTarget) GetRepositoryIds() []ID { return x.RepositoryIds }

// RepositoryIdConditionTargetInput (INPUT_OBJECT): Parameters to be used for the repository_id condition.
type RepositoryIdConditionTargetInput struct {
	// RepositoryIds: One of these repo IDs must match the repo.
	//
	// GraphQL type: [ID!]!
	RepositoryIds []ID `json:"repositoryIds,omitempty"`
}

// RepositoryInfo (INTERFACE): A subset of repository info.
// RepositoryInfo_Interface: A subset of repository info.
//
// Possible types:
//
//   - *Repository
type RepositoryInfo_Interface interface {
	isRepositoryInfo()
	GetArchivedAt() DateTime
	GetCreatedAt() DateTime
	GetDescription() string
	GetDescriptionHTML() template.HTML
	GetForkCount() int
	GetHasDiscussionsEnabled() bool
	GetHasIssuesEnabled() bool
	GetHasProjectsEnabled() bool
	GetHasSponsorshipsEnabled() bool
	GetHasWikiEnabled() bool
	GetHomepageUrl() URI
	GetIsArchived() bool
	GetIsFork() bool
	GetIsInOrganization() bool
	GetIsLocked() bool
	GetIsMirror() bool
	GetIsPrivate() bool
	GetIsTemplate() bool
	GetLicenseInfo() *License
	GetLockReason() RepositoryLockReason
	GetMirrorUrl() URI
	GetName() string
	GetNameWithOwner() string
	GetOpenGraphImageUrl() URI
	GetOwner() RepositoryOwner
	GetPushedAt() DateTime
	GetResourcePath() URI
	GetShortDescriptionHTML() template.HTML
	GetUpdatedAt() DateTime
	GetUrl() URI
	GetUsesCustomOpenGraphImage() bool
	GetVisibility() RepositoryVisibility
}

func (*Repository) isRepositoryInfo() {}

type RepositoryInfo struct {
	Interface RepositoryInfo_Interface
}

func (x *RepositoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RepositoryInfo) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RepositoryInfo", info.Typename)
	case "Repository":
		x.Interface = new(Repository)
	}
	return json.Unmarshal(js, x.Interface)
}

// RepositoryInteractionAbility (OBJECT): Repository interaction limit that applies to this object.
type RepositoryInteractionAbility struct {
	// ExpiresAt: The time the currently active limit expires.
	ExpiresAt DateTime `json:"expiresAt,omitempty"`

	// Limit: The current limit that is enabled on this object.
	Limit RepositoryInteractionLimit `json:"limit,omitempty"`

	// Origin: The origin of the currently active interaction limit.
	Origin RepositoryInteractionLimitOrigin `json:"origin,omitempty"`
}

func (x *RepositoryInteractionAbility) GetExpiresAt() DateTime                      { return x.ExpiresAt }
func (x *RepositoryInteractionAbility) GetLimit() RepositoryInteractionLimit        { return x.Limit }
func (x *RepositoryInteractionAbility) GetOrigin() RepositoryInteractionLimitOrigin { return x.Origin }

// RepositoryInteractionLimit (ENUM): A repository interaction limit.
type RepositoryInteractionLimit string

// RepositoryInteractionLimit_EXISTING_USERS: Users that have recently created their account will be unable to interact with the repository.
const RepositoryInteractionLimit_EXISTING_USERS RepositoryInteractionLimit = "EXISTING_USERS"

// RepositoryInteractionLimit_CONTRIBUTORS_ONLY: Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
const RepositoryInteractionLimit_CONTRIBUTORS_ONLY RepositoryInteractionLimit = "CONTRIBUTORS_ONLY"

// RepositoryInteractionLimit_COLLABORATORS_ONLY: Users that are not collaborators will not be able to interact with the repository.
const RepositoryInteractionLimit_COLLABORATORS_ONLY RepositoryInteractionLimit = "COLLABORATORS_ONLY"

// RepositoryInteractionLimit_NO_LIMIT: No interaction limits are enabled.
const RepositoryInteractionLimit_NO_LIMIT RepositoryInteractionLimit = "NO_LIMIT"

// RepositoryInteractionLimitExpiry (ENUM): The length for a repository interaction limit to be enabled for.
type RepositoryInteractionLimitExpiry string

// RepositoryInteractionLimitExpiry_ONE_DAY: The interaction limit will expire after 1 day.
const RepositoryInteractionLimitExpiry_ONE_DAY RepositoryInteractionLimitExpiry = "ONE_DAY"

// RepositoryInteractionLimitExpiry_THREE_DAYS: The interaction limit will expire after 3 days.
const RepositoryInteractionLimitExpiry_THREE_DAYS RepositoryInteractionLimitExpiry = "THREE_DAYS"

// RepositoryInteractionLimitExpiry_ONE_WEEK: The interaction limit will expire after 1 week.
const RepositoryInteractionLimitExpiry_ONE_WEEK RepositoryInteractionLimitExpiry = "ONE_WEEK"

// RepositoryInteractionLimitExpiry_ONE_MONTH: The interaction limit will expire after 1 month.
const RepositoryInteractionLimitExpiry_ONE_MONTH RepositoryInteractionLimitExpiry = "ONE_MONTH"

// RepositoryInteractionLimitExpiry_SIX_MONTHS: The interaction limit will expire after 6 months.
const RepositoryInteractionLimitExpiry_SIX_MONTHS RepositoryInteractionLimitExpiry = "SIX_MONTHS"

// RepositoryInteractionLimitOrigin (ENUM): Indicates where an interaction limit is configured.
type RepositoryInteractionLimitOrigin string

// RepositoryInteractionLimitOrigin_REPOSITORY: A limit that is configured at the repository level.
const RepositoryInteractionLimitOrigin_REPOSITORY RepositoryInteractionLimitOrigin = "REPOSITORY"

// RepositoryInteractionLimitOrigin_ORGANIZATION: A limit that is configured at the organization level.
const RepositoryInteractionLimitOrigin_ORGANIZATION RepositoryInteractionLimitOrigin = "ORGANIZATION"

// RepositoryInteractionLimitOrigin_USER: A limit that is configured at the user-wide level.
const RepositoryInteractionLimitOrigin_USER RepositoryInteractionLimitOrigin = "USER"

// RepositoryInvitation (OBJECT): An invitation for a user to be added to a repository.
type RepositoryInvitation struct {
	// Email: The email address that received the invitation.
	Email string `json:"email,omitempty"`

	// Id: The Node ID of the RepositoryInvitation object.
	Id ID `json:"id,omitempty"`

	// Invitee: The user who received the invitation.
	Invitee *User `json:"invitee,omitempty"`

	// Inviter: The user who created the invitation.
	Inviter *User `json:"inviter,omitempty"`

	// Permalink: The permalink for this repository invitation.
	Permalink URI `json:"permalink,omitempty"`

	// Permission: The permission granted on this repository by this invitation.
	Permission RepositoryPermission `json:"permission,omitempty"`

	// Repository: The Repository the user is invited to.
	Repository RepositoryInfo `json:"repository,omitempty"`
}

func (x *RepositoryInvitation) GetEmail() string                    { return x.Email }
func (x *RepositoryInvitation) GetId() ID                           { return x.Id }
func (x *RepositoryInvitation) GetInvitee() *User                   { return x.Invitee }
func (x *RepositoryInvitation) GetInviter() *User                   { return x.Inviter }
func (x *RepositoryInvitation) GetPermalink() URI                   { return x.Permalink }
func (x *RepositoryInvitation) GetPermission() RepositoryPermission { return x.Permission }
func (x *RepositoryInvitation) GetRepository() RepositoryInfo       { return x.Repository }

// RepositoryInvitationConnection (OBJECT): A list of repository invitations.
type RepositoryInvitationConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryInvitationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryInvitation `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryInvitationConnection) GetEdges() []*RepositoryInvitationEdge { return x.Edges }
func (x *RepositoryInvitationConnection) GetNodes() []*RepositoryInvitation     { return x.Nodes }
func (x *RepositoryInvitationConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *RepositoryInvitationConnection) GetTotalCount() int                    { return x.TotalCount }

// RepositoryInvitationEdge (OBJECT): An edge in a connection.
type RepositoryInvitationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryInvitation `json:"node,omitempty"`
}

func (x *RepositoryInvitationEdge) GetCursor() string              { return x.Cursor }
func (x *RepositoryInvitationEdge) GetNode() *RepositoryInvitation { return x.Node }

// RepositoryInvitationOrder (INPUT_OBJECT): Ordering options for repository invitation connections.
type RepositoryInvitationOrder struct {
	// Field: The field to order repository invitations by.
	//
	// GraphQL type: RepositoryInvitationOrderField!
	Field RepositoryInvitationOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// RepositoryInvitationOrderField (ENUM): Properties by which repository invitation connections can be ordered.
type RepositoryInvitationOrderField string

// RepositoryInvitationOrderField_CREATED_AT: Order repository invitations by creation time.
const RepositoryInvitationOrderField_CREATED_AT RepositoryInvitationOrderField = "CREATED_AT"

// RepositoryLockReason (ENUM): The possible reasons a given repository could be in a locked state.
type RepositoryLockReason string

// RepositoryLockReason_MOVING: The repository is locked due to a move.
const RepositoryLockReason_MOVING RepositoryLockReason = "MOVING"

// RepositoryLockReason_BILLING: The repository is locked due to a billing related reason.
const RepositoryLockReason_BILLING RepositoryLockReason = "BILLING"

// RepositoryLockReason_RENAME: The repository is locked due to a rename.
const RepositoryLockReason_RENAME RepositoryLockReason = "RENAME"

// RepositoryLockReason_MIGRATING: The repository is locked due to a migration.
const RepositoryLockReason_MIGRATING RepositoryLockReason = "MIGRATING"

// RepositoryLockReason_TRADE_RESTRICTION: The repository is locked due to a trade controls related reason.
const RepositoryLockReason_TRADE_RESTRICTION RepositoryLockReason = "TRADE_RESTRICTION"

// RepositoryLockReason_TRANSFERRING_OWNERSHIP: The repository is locked due to an ownership transfer.
const RepositoryLockReason_TRANSFERRING_OWNERSHIP RepositoryLockReason = "TRANSFERRING_OWNERSHIP"

// RepositoryMigration (OBJECT): A GitHub Enterprise Importer (GEI) repository migration.
type RepositoryMigration struct {
	// ContinueOnError: The migration flag to continue on error.
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId string `json:"databaseId,omitempty"`

	// FailureReason: The reason the migration failed.
	FailureReason string `json:"failureReason,omitempty"`

	// Id: The Node ID of the RepositoryMigration object.
	Id ID `json:"id,omitempty"`

	// MigrationLogUrl: The URL for the migration log (expires 1 day after migration completes).
	MigrationLogUrl URI `json:"migrationLogUrl,omitempty"`

	// MigrationSource: The migration source.
	MigrationSource *MigrationSource `json:"migrationSource,omitempty"`

	// RepositoryName: The target repository name.
	RepositoryName string `json:"repositoryName,omitempty"`

	// SourceUrl: The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
	SourceUrl URI `json:"sourceUrl,omitempty"`

	// State: The migration state.
	State MigrationState `json:"state,omitempty"`

	// WarningsCount: The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
	WarningsCount int `json:"warningsCount,omitempty"`
}

func (x *RepositoryMigration) GetContinueOnError() bool             { return x.ContinueOnError }
func (x *RepositoryMigration) GetCreatedAt() DateTime               { return x.CreatedAt }
func (x *RepositoryMigration) GetDatabaseId() string                { return x.DatabaseId }
func (x *RepositoryMigration) GetFailureReason() string             { return x.FailureReason }
func (x *RepositoryMigration) GetId() ID                            { return x.Id }
func (x *RepositoryMigration) GetMigrationLogUrl() URI              { return x.MigrationLogUrl }
func (x *RepositoryMigration) GetMigrationSource() *MigrationSource { return x.MigrationSource }
func (x *RepositoryMigration) GetRepositoryName() string            { return x.RepositoryName }
func (x *RepositoryMigration) GetSourceUrl() URI                    { return x.SourceUrl }
func (x *RepositoryMigration) GetState() MigrationState             { return x.State }
func (x *RepositoryMigration) GetWarningsCount() int                { return x.WarningsCount }

// RepositoryMigrationConnection (OBJECT): A list of migrations.
type RepositoryMigrationConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryMigrationEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryMigration `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryMigrationConnection) GetEdges() []*RepositoryMigrationEdge { return x.Edges }
func (x *RepositoryMigrationConnection) GetNodes() []*RepositoryMigration     { return x.Nodes }
func (x *RepositoryMigrationConnection) GetPageInfo() *PageInfo               { return x.PageInfo }
func (x *RepositoryMigrationConnection) GetTotalCount() int                   { return x.TotalCount }

// RepositoryMigrationEdge (OBJECT): Represents a repository migration.
type RepositoryMigrationEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryMigration `json:"node,omitempty"`
}

func (x *RepositoryMigrationEdge) GetCursor() string             { return x.Cursor }
func (x *RepositoryMigrationEdge) GetNode() *RepositoryMigration { return x.Node }

// RepositoryMigrationOrder (INPUT_OBJECT): Ordering options for repository migrations.
type RepositoryMigrationOrder struct {
	// Field: The field to order repository migrations by.
	//
	// GraphQL type: RepositoryMigrationOrderField!
	Field RepositoryMigrationOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: RepositoryMigrationOrderDirection!
	Direction RepositoryMigrationOrderDirection `json:"direction,omitempty"`
}

// RepositoryMigrationOrderDirection (ENUM): Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
type RepositoryMigrationOrderDirection string

// RepositoryMigrationOrderDirection_ASC: Specifies an ascending order for a given `orderBy` argument.
const RepositoryMigrationOrderDirection_ASC RepositoryMigrationOrderDirection = "ASC"

// RepositoryMigrationOrderDirection_DESC: Specifies a descending order for a given `orderBy` argument.
const RepositoryMigrationOrderDirection_DESC RepositoryMigrationOrderDirection = "DESC"

// RepositoryMigrationOrderField (ENUM): Properties by which repository migrations can be ordered.
type RepositoryMigrationOrderField string

// RepositoryMigrationOrderField_CREATED_AT: Order mannequins why when they were created.
const RepositoryMigrationOrderField_CREATED_AT RepositoryMigrationOrderField = "CREATED_AT"

// RepositoryNameConditionTarget (OBJECT): Parameters to be used for the repository_name condition.
type RepositoryNameConditionTarget struct {
	// Exclude: Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Exclude []string `json:"exclude,omitempty"`

	// Include: Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Include []string `json:"include,omitempty"`

	// Protected: Target changes that match these patterns will be prevented except by those with bypass permissions.
	Protected bool `json:"protected,omitempty"`
}

func (x *RepositoryNameConditionTarget) GetExclude() []string { return x.Exclude }
func (x *RepositoryNameConditionTarget) GetInclude() []string { return x.Include }
func (x *RepositoryNameConditionTarget) GetProtected() bool   { return x.Protected }

// RepositoryNameConditionTargetInput (INPUT_OBJECT): Parameters to be used for the repository_name condition.
type RepositoryNameConditionTargetInput struct {
	// Exclude: Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	//
	// GraphQL type: [String!]!
	Exclude []string `json:"exclude,omitempty"`

	// Include: Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	//
	// GraphQL type: [String!]!
	Include []string `json:"include,omitempty"`

	// Protected: Target changes that match these patterns will be prevented except by those with bypass permissions.
	//
	// GraphQL type: Boolean
	Protected bool `json:"protected,omitempty"`
}

// RepositoryNode (INTERFACE): Represents a object that belongs to a repository.
// RepositoryNode_Interface: Represents a object that belongs to a repository.
//
// Possible types:
//
//   - *CommitComment
//   - *CommitCommentThread
//   - *DependabotUpdate
//   - *Discussion
//   - *DiscussionCategory
//   - *Issue
//   - *IssueComment
//   - *PinnedDiscussion
//   - *PullRequest
//   - *PullRequestCommitCommentThread
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *RepositoryVulnerabilityAlert
type RepositoryNode_Interface interface {
	isRepositoryNode()
	GetRepository() *Repository
}

func (*CommitComment) isRepositoryNode()                  {}
func (*CommitCommentThread) isRepositoryNode()            {}
func (*DependabotUpdate) isRepositoryNode()               {}
func (*Discussion) isRepositoryNode()                     {}
func (*DiscussionCategory) isRepositoryNode()             {}
func (*Issue) isRepositoryNode()                          {}
func (*IssueComment) isRepositoryNode()                   {}
func (*PinnedDiscussion) isRepositoryNode()               {}
func (*PullRequest) isRepositoryNode()                    {}
func (*PullRequestCommitCommentThread) isRepositoryNode() {}
func (*PullRequestReview) isRepositoryNode()              {}
func (*PullRequestReviewComment) isRepositoryNode()       {}
func (*RepositoryVulnerabilityAlert) isRepositoryNode()   {}

type RepositoryNode struct {
	Interface RepositoryNode_Interface
}

func (x *RepositoryNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RepositoryNode) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RepositoryNode", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "CommitCommentThread":
		x.Interface = new(CommitCommentThread)
	case "DependabotUpdate":
		x.Interface = new(DependabotUpdate)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionCategory":
		x.Interface = new(DiscussionCategory)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "PinnedDiscussion":
		x.Interface = new(PinnedDiscussion)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestCommitCommentThread":
		x.Interface = new(PullRequestCommitCommentThread)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "RepositoryVulnerabilityAlert":
		x.Interface = new(RepositoryVulnerabilityAlert)
	}
	return json.Unmarshal(js, x.Interface)
}

// RepositoryOrder (INPUT_OBJECT): Ordering options for repository connections.
type RepositoryOrder struct {
	// Field: The field to order repositories by.
	//
	// GraphQL type: RepositoryOrderField!
	Field RepositoryOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// RepositoryOrderField (ENUM): Properties by which repository connections can be ordered.
type RepositoryOrderField string

// RepositoryOrderField_CREATED_AT: Order repositories by creation time.
const RepositoryOrderField_CREATED_AT RepositoryOrderField = "CREATED_AT"

// RepositoryOrderField_UPDATED_AT: Order repositories by update time.
const RepositoryOrderField_UPDATED_AT RepositoryOrderField = "UPDATED_AT"

// RepositoryOrderField_PUSHED_AT: Order repositories by push time.
const RepositoryOrderField_PUSHED_AT RepositoryOrderField = "PUSHED_AT"

// RepositoryOrderField_NAME: Order repositories by name.
const RepositoryOrderField_NAME RepositoryOrderField = "NAME"

// RepositoryOrderField_STARGAZERS: Order repositories by number of stargazers.
const RepositoryOrderField_STARGAZERS RepositoryOrderField = "STARGAZERS"

// RepositoryOwner (INTERFACE): Represents an owner of a Repository.
// RepositoryOwner_Interface: Represents an owner of a Repository.
//
// Possible types:
//
//   - *Organization
//   - *User
type RepositoryOwner_Interface interface {
	isRepositoryOwner()
	GetAvatarUrl() URI
	GetId() ID
	GetLogin() string
	GetRepositories() *RepositoryConnection
	GetRepository() *Repository
	GetResourcePath() URI
	GetUrl() URI
}

func (*Organization) isRepositoryOwner() {}
func (*User) isRepositoryOwner()         {}

type RepositoryOwner struct {
	Interface RepositoryOwner_Interface
}

func (x *RepositoryOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RepositoryOwner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RepositoryOwner", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// RepositoryPermission (ENUM): The access level to a repository.
type RepositoryPermission string

// RepositoryPermission_ADMIN: Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators.
const RepositoryPermission_ADMIN RepositoryPermission = "ADMIN"

// RepositoryPermission_MAINTAIN: Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings.
const RepositoryPermission_MAINTAIN RepositoryPermission = "MAINTAIN"

// RepositoryPermission_WRITE: Can read, clone, and push to this repository. Can also manage issues and pull requests.
const RepositoryPermission_WRITE RepositoryPermission = "WRITE"

// RepositoryPermission_TRIAGE: Can read and clone this repository. Can also manage issues and pull requests.
const RepositoryPermission_TRIAGE RepositoryPermission = "TRIAGE"

// RepositoryPermission_READ: Can read and clone this repository. Can also open and comment on issues and pull requests.
const RepositoryPermission_READ RepositoryPermission = "READ"

// RepositoryPlanFeatures (OBJECT): Information about the availability of features and limits for a repository based on its billing plan.
type RepositoryPlanFeatures struct {
	// Codeowners: Whether reviews can be automatically requested and enforced with a CODEOWNERS file.
	Codeowners bool `json:"codeowners,omitempty"`

	// DraftPullRequests: Whether pull requests can be created as or converted to draft.
	DraftPullRequests bool `json:"draftPullRequests,omitempty"`

	// MaximumAssignees: Maximum number of users that can be assigned to an issue or pull request.
	MaximumAssignees int `json:"maximumAssignees,omitempty"`

	// MaximumManualReviewRequests: Maximum number of manually-requested reviews on a pull request.
	MaximumManualReviewRequests int `json:"maximumManualReviewRequests,omitempty"`

	// TeamReviewRequests: Whether teams can be requested to review pull requests.
	TeamReviewRequests bool `json:"teamReviewRequests,omitempty"`
}

func (x *RepositoryPlanFeatures) GetCodeowners() bool        { return x.Codeowners }
func (x *RepositoryPlanFeatures) GetDraftPullRequests() bool { return x.DraftPullRequests }
func (x *RepositoryPlanFeatures) GetMaximumAssignees() int   { return x.MaximumAssignees }
func (x *RepositoryPlanFeatures) GetMaximumManualReviewRequests() int {
	return x.MaximumManualReviewRequests
}
func (x *RepositoryPlanFeatures) GetTeamReviewRequests() bool { return x.TeamReviewRequests }

// RepositoryPrivacy (ENUM): The privacy of a repository.
type RepositoryPrivacy string

// RepositoryPrivacy_PUBLIC: Public.
const RepositoryPrivacy_PUBLIC RepositoryPrivacy = "PUBLIC"

// RepositoryPrivacy_PRIVATE: Private.
const RepositoryPrivacy_PRIVATE RepositoryPrivacy = "PRIVATE"

// RepositoryPropertyConditionTarget (OBJECT): Parameters to be used for the repository_property condition.
type RepositoryPropertyConditionTarget struct {
	// Exclude: Array of repository properties that must not match.
	Exclude []*PropertyTargetDefinition `json:"exclude,omitempty"`

	// Include: Array of repository properties that must match.
	Include []*PropertyTargetDefinition `json:"include,omitempty"`
}

func (x *RepositoryPropertyConditionTarget) GetExclude() []*PropertyTargetDefinition {
	return x.Exclude
}
func (x *RepositoryPropertyConditionTarget) GetInclude() []*PropertyTargetDefinition {
	return x.Include
}

// RepositoryPropertyConditionTargetInput (INPUT_OBJECT): Parameters to be used for the repository_property condition.
type RepositoryPropertyConditionTargetInput struct {
	// Exclude: Array of repository properties that must not match.
	//
	// GraphQL type: [PropertyTargetDefinitionInput!]!
	Exclude []*PropertyTargetDefinitionInput `json:"exclude,omitempty"`

	// Include: Array of repository properties that must match.
	//
	// GraphQL type: [PropertyTargetDefinitionInput!]!
	Include []*PropertyTargetDefinitionInput `json:"include,omitempty"`
}

// RepositoryRule (OBJECT): A repository rule.
type RepositoryRule struct {
	// Id: The Node ID of the RepositoryRule object.
	Id ID `json:"id,omitempty"`

	// Parameters: The parameters for this rule.
	Parameters RuleParameters `json:"parameters,omitempty"`

	// RepositoryRuleset: The repository ruleset associated with this rule configuration.
	RepositoryRuleset *RepositoryRuleset `json:"repositoryRuleset,omitempty"`

	// Type: The type of rule.
	Type RepositoryRuleType `json:"type,omitempty"`
}

func (x *RepositoryRule) GetId() ID                                { return x.Id }
func (x *RepositoryRule) GetParameters() RuleParameters            { return x.Parameters }
func (x *RepositoryRule) GetRepositoryRuleset() *RepositoryRuleset { return x.RepositoryRuleset }
func (x *RepositoryRule) GetType() RepositoryRuleType              { return x.Type }

// RepositoryRuleConditions (OBJECT): Set of conditions that determine if a ruleset will evaluate.
type RepositoryRuleConditions struct {
	// RefName: Configuration for the ref_name condition.
	RefName *RefNameConditionTarget `json:"refName,omitempty"`

	// RepositoryId: Configuration for the repository_id condition.
	RepositoryId *RepositoryIdConditionTarget `json:"repositoryId,omitempty"`

	// RepositoryName: Configuration for the repository_name condition.
	RepositoryName *RepositoryNameConditionTarget `json:"repositoryName,omitempty"`

	// RepositoryProperty: Configuration for the repository_property condition.
	RepositoryProperty *RepositoryPropertyConditionTarget `json:"repositoryProperty,omitempty"`
}

func (x *RepositoryRuleConditions) GetRefName() *RefNameConditionTarget { return x.RefName }
func (x *RepositoryRuleConditions) GetRepositoryId() *RepositoryIdConditionTarget {
	return x.RepositoryId
}
func (x *RepositoryRuleConditions) GetRepositoryName() *RepositoryNameConditionTarget {
	return x.RepositoryName
}
func (x *RepositoryRuleConditions) GetRepositoryProperty() *RepositoryPropertyConditionTarget {
	return x.RepositoryProperty
}

// RepositoryRuleConditionsInput (INPUT_OBJECT): Specifies the conditions required for a ruleset to evaluate.
type RepositoryRuleConditionsInput struct {
	// RefName: Configuration for the ref_name condition.
	//
	// GraphQL type: RefNameConditionTargetInput
	RefName *RefNameConditionTargetInput `json:"refName,omitempty"`

	// RepositoryName: Configuration for the repository_name condition.
	//
	// GraphQL type: RepositoryNameConditionTargetInput
	RepositoryName *RepositoryNameConditionTargetInput `json:"repositoryName,omitempty"`

	// RepositoryId: Configuration for the repository_id condition.
	//
	// GraphQL type: RepositoryIdConditionTargetInput
	RepositoryId *RepositoryIdConditionTargetInput `json:"repositoryId,omitempty"`

	// RepositoryProperty: Configuration for the repository_property condition.
	//
	// GraphQL type: RepositoryPropertyConditionTargetInput
	RepositoryProperty *RepositoryPropertyConditionTargetInput `json:"repositoryProperty,omitempty"`
}

// RepositoryRuleConnection (OBJECT): The connection type for RepositoryRule.
type RepositoryRuleConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryRuleEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryRule `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryRuleConnection) GetEdges() []*RepositoryRuleEdge { return x.Edges }
func (x *RepositoryRuleConnection) GetNodes() []*RepositoryRule     { return x.Nodes }
func (x *RepositoryRuleConnection) GetPageInfo() *PageInfo          { return x.PageInfo }
func (x *RepositoryRuleConnection) GetTotalCount() int              { return x.TotalCount }

// RepositoryRuleEdge (OBJECT): An edge in a connection.
type RepositoryRuleEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryRule `json:"node,omitempty"`
}

func (x *RepositoryRuleEdge) GetCursor() string        { return x.Cursor }
func (x *RepositoryRuleEdge) GetNode() *RepositoryRule { return x.Node }

// RepositoryRuleInput (INPUT_OBJECT): Specifies the attributes for a new or updated rule.
type RepositoryRuleInput struct {
	// Id: Optional ID of this rule when updating.
	//
	// GraphQL type: ID
	Id ID `json:"id,omitempty"`

	// Type: The type of rule to create.
	//
	// GraphQL type: RepositoryRuleType!
	Type RepositoryRuleType `json:"type,omitempty"`

	// Parameters: The parameters for the rule.
	//
	// GraphQL type: RuleParametersInput
	Parameters *RuleParametersInput `json:"parameters,omitempty"`
}

// RepositoryRuleOrder (INPUT_OBJECT): Ordering options for repository rules.
type RepositoryRuleOrder struct {
	// Field: The field to order repository rules by.
	//
	// GraphQL type: RepositoryRuleOrderField!
	Field RepositoryRuleOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// RepositoryRuleOrderField (ENUM): Properties by which repository rule connections can be ordered.
type RepositoryRuleOrderField string

// RepositoryRuleOrderField_UPDATED_AT: Order repository rules by updated time.
const RepositoryRuleOrderField_UPDATED_AT RepositoryRuleOrderField = "UPDATED_AT"

// RepositoryRuleOrderField_CREATED_AT: Order repository rules by created time.
const RepositoryRuleOrderField_CREATED_AT RepositoryRuleOrderField = "CREATED_AT"

// RepositoryRuleOrderField_TYPE: Order repository rules by type.
const RepositoryRuleOrderField_TYPE RepositoryRuleOrderField = "TYPE"

// RepositoryRuleType (ENUM): The rule types supported in rulesets.
type RepositoryRuleType string

// RepositoryRuleType_CREATION: Only allow users with bypass permission to create matching refs.
const RepositoryRuleType_CREATION RepositoryRuleType = "CREATION"

// RepositoryRuleType_UPDATE: Only allow users with bypass permission to update matching refs.
const RepositoryRuleType_UPDATE RepositoryRuleType = "UPDATE"

// RepositoryRuleType_DELETION: Only allow users with bypass permissions to delete matching refs.
const RepositoryRuleType_DELETION RepositoryRuleType = "DELETION"

// RepositoryRuleType_REQUIRED_LINEAR_HISTORY: Prevent merge commits from being pushed to matching refs.
const RepositoryRuleType_REQUIRED_LINEAR_HISTORY RepositoryRuleType = "REQUIRED_LINEAR_HISTORY"

// RepositoryRuleType_MERGE_QUEUE: Merges must be performed via a merge queue.
const RepositoryRuleType_MERGE_QUEUE RepositoryRuleType = "MERGE_QUEUE"

// RepositoryRuleType_REQUIRED_REVIEW_THREAD_RESOLUTION: When enabled, all conversations on code must be resolved before a pull request can be merged into a branch that matches this rule.
const RepositoryRuleType_REQUIRED_REVIEW_THREAD_RESOLUTION RepositoryRuleType = "REQUIRED_REVIEW_THREAD_RESOLUTION"

// RepositoryRuleType_REQUIRED_DEPLOYMENTS: Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
const RepositoryRuleType_REQUIRED_DEPLOYMENTS RepositoryRuleType = "REQUIRED_DEPLOYMENTS"

// RepositoryRuleType_REQUIRED_SIGNATURES: Commits pushed to matching refs must have verified signatures.
const RepositoryRuleType_REQUIRED_SIGNATURES RepositoryRuleType = "REQUIRED_SIGNATURES"

// RepositoryRuleType_PULL_REQUEST: Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
const RepositoryRuleType_PULL_REQUEST RepositoryRuleType = "PULL_REQUEST"

// RepositoryRuleType_REQUIRED_STATUS_CHECKS: Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
const RepositoryRuleType_REQUIRED_STATUS_CHECKS RepositoryRuleType = "REQUIRED_STATUS_CHECKS"

// RepositoryRuleType_REQUIRED_WORKFLOW_STATUS_CHECKS: Require all commits be made to a non-target branch and submitted via a pull request and required workflow checks to pass before they can be merged.
const RepositoryRuleType_REQUIRED_WORKFLOW_STATUS_CHECKS RepositoryRuleType = "REQUIRED_WORKFLOW_STATUS_CHECKS"

// RepositoryRuleType_NON_FAST_FORWARD: Prevent users with push access from force pushing to refs.
const RepositoryRuleType_NON_FAST_FORWARD RepositoryRuleType = "NON_FAST_FORWARD"

// RepositoryRuleType_AUTHORIZATION: Authorization.
const RepositoryRuleType_AUTHORIZATION RepositoryRuleType = "AUTHORIZATION"

// RepositoryRuleType_TAG: Tag.
const RepositoryRuleType_TAG RepositoryRuleType = "TAG"

// RepositoryRuleType_MERGE_QUEUE_LOCKED_REF: Merge queue locked ref.
const RepositoryRuleType_MERGE_QUEUE_LOCKED_REF RepositoryRuleType = "MERGE_QUEUE_LOCKED_REF"

// RepositoryRuleType_LOCK_BRANCH: Branch is read-only. Users cannot push to the branch.
const RepositoryRuleType_LOCK_BRANCH RepositoryRuleType = "LOCK_BRANCH"

// RepositoryRuleType_MAX_REF_UPDATES: Max ref updates.
const RepositoryRuleType_MAX_REF_UPDATES RepositoryRuleType = "MAX_REF_UPDATES"

// RepositoryRuleType_COMMIT_MESSAGE_PATTERN: Commit message pattern.
const RepositoryRuleType_COMMIT_MESSAGE_PATTERN RepositoryRuleType = "COMMIT_MESSAGE_PATTERN"

// RepositoryRuleType_COMMIT_AUTHOR_EMAIL_PATTERN: Commit author email pattern.
const RepositoryRuleType_COMMIT_AUTHOR_EMAIL_PATTERN RepositoryRuleType = "COMMIT_AUTHOR_EMAIL_PATTERN"

// RepositoryRuleType_COMMITTER_EMAIL_PATTERN: Committer email pattern.
const RepositoryRuleType_COMMITTER_EMAIL_PATTERN RepositoryRuleType = "COMMITTER_EMAIL_PATTERN"

// RepositoryRuleType_BRANCH_NAME_PATTERN: Branch name pattern.
const RepositoryRuleType_BRANCH_NAME_PATTERN RepositoryRuleType = "BRANCH_NAME_PATTERN"

// RepositoryRuleType_TAG_NAME_PATTERN: Tag name pattern.
const RepositoryRuleType_TAG_NAME_PATTERN RepositoryRuleType = "TAG_NAME_PATTERN"

// RepositoryRuleType_FILE_PATH_RESTRICTION: Prevent commits that include changes in specified file paths from being pushed to the commit graph.
const RepositoryRuleType_FILE_PATH_RESTRICTION RepositoryRuleType = "FILE_PATH_RESTRICTION"

// RepositoryRuleType_MAX_FILE_PATH_LENGTH: Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.
const RepositoryRuleType_MAX_FILE_PATH_LENGTH RepositoryRuleType = "MAX_FILE_PATH_LENGTH"

// RepositoryRuleType_FILE_EXTENSION_RESTRICTION: Prevent commits that include files with specified file extensions from being pushed to the commit graph.
const RepositoryRuleType_FILE_EXTENSION_RESTRICTION RepositoryRuleType = "FILE_EXTENSION_RESTRICTION"

// RepositoryRuleType_MAX_FILE_SIZE: Prevent commits that exceed a specified file size limit from being pushed to the commit graph.
const RepositoryRuleType_MAX_FILE_SIZE RepositoryRuleType = "MAX_FILE_SIZE"

// RepositoryRuleType_WORKFLOWS: Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
const RepositoryRuleType_WORKFLOWS RepositoryRuleType = "WORKFLOWS"

// RepositoryRuleType_SECRET_SCANNING: Secret scanning.
const RepositoryRuleType_SECRET_SCANNING RepositoryRuleType = "SECRET_SCANNING"

// RepositoryRuleType_WORKFLOW_UPDATES: Workflow files cannot be modified.
const RepositoryRuleType_WORKFLOW_UPDATES RepositoryRuleType = "WORKFLOW_UPDATES"

// RepositoryRuleType_CODE_SCANNING: Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
const RepositoryRuleType_CODE_SCANNING RepositoryRuleType = "CODE_SCANNING"

// RepositoryRuleset (OBJECT): A repository ruleset.
type RepositoryRuleset struct {
	// BypassActors: The actors that can bypass this ruleset.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	BypassActors *RepositoryRulesetBypassActorConnection `json:"bypassActors,omitempty"`

	// Conditions: The set of conditions that must evaluate to true for this ruleset to apply.
	Conditions *RepositoryRuleConditions `json:"conditions,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Enforcement: The enforcement level of this ruleset.
	Enforcement RuleEnforcement `json:"enforcement,omitempty"`

	// Id: The Node ID of the RepositoryRuleset object.
	Id ID `json:"id,omitempty"`

	// Name: Name of the ruleset.
	Name string `json:"name,omitempty"`

	// Rules: List of rules.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - type RepositoryRuleType
	Rules *RepositoryRuleConnection `json:"rules,omitempty"`

	// Source: Source of ruleset.
	Source RuleSource `json:"source,omitempty"`

	// Target: Target of the ruleset.
	Target RepositoryRulesetTarget `json:"target,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *RepositoryRuleset) GetBypassActors() *RepositoryRulesetBypassActorConnection {
	return x.BypassActors
}
func (x *RepositoryRuleset) GetConditions() *RepositoryRuleConditions { return x.Conditions }
func (x *RepositoryRuleset) GetCreatedAt() DateTime                   { return x.CreatedAt }
func (x *RepositoryRuleset) GetDatabaseId() int                       { return x.DatabaseId }
func (x *RepositoryRuleset) GetEnforcement() RuleEnforcement          { return x.Enforcement }
func (x *RepositoryRuleset) GetId() ID                                { return x.Id }
func (x *RepositoryRuleset) GetName() string                          { return x.Name }
func (x *RepositoryRuleset) GetRules() *RepositoryRuleConnection      { return x.Rules }
func (x *RepositoryRuleset) GetSource() RuleSource                    { return x.Source }
func (x *RepositoryRuleset) GetTarget() RepositoryRulesetTarget       { return x.Target }
func (x *RepositoryRuleset) GetUpdatedAt() DateTime                   { return x.UpdatedAt }

// RepositoryRulesetBypassActor (OBJECT): A team or app that has the ability to bypass a rules defined on a ruleset.
type RepositoryRulesetBypassActor struct {
	// Actor: The actor that can bypass rules.
	Actor BypassActor `json:"actor,omitempty"`

	// BypassMode: The mode for the bypass actor.
	BypassMode RepositoryRulesetBypassActorBypassMode `json:"bypassMode,omitempty"`

	// DeployKey: This actor represents the ability for a deploy key to bypass.
	DeployKey bool `json:"deployKey,omitempty"`

	// EnterpriseOwner: This actor represents the ability for an enterprise owner to bypass.
	EnterpriseOwner bool `json:"enterpriseOwner,omitempty"`

	// Id: The Node ID of the RepositoryRulesetBypassActor object.
	Id ID `json:"id,omitempty"`

	// OrganizationAdmin: This actor represents the ability for an organization owner to bypass.
	OrganizationAdmin bool `json:"organizationAdmin,omitempty"`

	// RepositoryRoleDatabaseId: If the actor is a repository role, the repository role's ID that can bypass.
	RepositoryRoleDatabaseId int `json:"repositoryRoleDatabaseId,omitempty"`

	// RepositoryRoleName: If the actor is a repository role, the repository role's name that can bypass.
	RepositoryRoleName string `json:"repositoryRoleName,omitempty"`

	// RepositoryRuleset: Identifies the ruleset associated with the allowed actor.
	RepositoryRuleset *RepositoryRuleset `json:"repositoryRuleset,omitempty"`
}

func (x *RepositoryRulesetBypassActor) GetActor() BypassActor { return x.Actor }
func (x *RepositoryRulesetBypassActor) GetBypassMode() RepositoryRulesetBypassActorBypassMode {
	return x.BypassMode
}
func (x *RepositoryRulesetBypassActor) GetDeployKey() bool         { return x.DeployKey }
func (x *RepositoryRulesetBypassActor) GetEnterpriseOwner() bool   { return x.EnterpriseOwner }
func (x *RepositoryRulesetBypassActor) GetId() ID                  { return x.Id }
func (x *RepositoryRulesetBypassActor) GetOrganizationAdmin() bool { return x.OrganizationAdmin }
func (x *RepositoryRulesetBypassActor) GetRepositoryRoleDatabaseId() int {
	return x.RepositoryRoleDatabaseId
}
func (x *RepositoryRulesetBypassActor) GetRepositoryRoleName() string { return x.RepositoryRoleName }
func (x *RepositoryRulesetBypassActor) GetRepositoryRuleset() *RepositoryRuleset {
	return x.RepositoryRuleset
}

// RepositoryRulesetBypassActorBypassMode (ENUM): The bypass mode for a specific actor on a ruleset.
type RepositoryRulesetBypassActorBypassMode string

// RepositoryRulesetBypassActorBypassMode_ALWAYS: The actor can always bypass rules.
const RepositoryRulesetBypassActorBypassMode_ALWAYS RepositoryRulesetBypassActorBypassMode = "ALWAYS"

// RepositoryRulesetBypassActorBypassMode_PULL_REQUEST: The actor can only bypass rules via a pull request.
const RepositoryRulesetBypassActorBypassMode_PULL_REQUEST RepositoryRulesetBypassActorBypassMode = "PULL_REQUEST"

// RepositoryRulesetBypassActorConnection (OBJECT): The connection type for RepositoryRulesetBypassActor.
type RepositoryRulesetBypassActorConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryRulesetBypassActorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryRulesetBypassActor `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryRulesetBypassActorConnection) GetEdges() []*RepositoryRulesetBypassActorEdge {
	return x.Edges
}
func (x *RepositoryRulesetBypassActorConnection) GetNodes() []*RepositoryRulesetBypassActor {
	return x.Nodes
}
func (x *RepositoryRulesetBypassActorConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *RepositoryRulesetBypassActorConnection) GetTotalCount() int     { return x.TotalCount }

// RepositoryRulesetBypassActorEdge (OBJECT): An edge in a connection.
type RepositoryRulesetBypassActorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryRulesetBypassActor `json:"node,omitempty"`
}

func (x *RepositoryRulesetBypassActorEdge) GetCursor() string                      { return x.Cursor }
func (x *RepositoryRulesetBypassActorEdge) GetNode() *RepositoryRulesetBypassActor { return x.Node }

// RepositoryRulesetBypassActorInput (INPUT_OBJECT): Specifies the attributes for a new or updated ruleset bypass actor. Only one of `actor_id`, `repository_role_database_id`, `organization_admin`, or `deploy_key` should be specified.
type RepositoryRulesetBypassActorInput struct {
	// ActorId: For Team and Integration bypasses, the Team or Integration ID.
	//
	// GraphQL type: ID
	ActorId ID `json:"actorId,omitempty"`

	// RepositoryRoleDatabaseId: For role bypasses, the role database ID.
	//
	// GraphQL type: Int
	RepositoryRoleDatabaseId int `json:"repositoryRoleDatabaseId,omitempty"`

	// OrganizationAdmin: For organization owner bypasses, true.
	//
	// GraphQL type: Boolean
	OrganizationAdmin bool `json:"organizationAdmin,omitempty"`

	// EnterpriseOwner: For enterprise owner bypasses, true.
	//
	// GraphQL type: Boolean
	EnterpriseOwner bool `json:"enterpriseOwner,omitempty"`

	// DeployKey: For deploy key bypasses, true. Can only use ALWAYS as the bypass mode.
	//
	// GraphQL type: Boolean
	DeployKey bool `json:"deployKey,omitempty"`

	// BypassMode: The bypass mode for this actor.
	//
	// GraphQL type: RepositoryRulesetBypassActorBypassMode!
	BypassMode RepositoryRulesetBypassActorBypassMode `json:"bypassMode,omitempty"`
}

// RepositoryRulesetConnection (OBJECT): The connection type for RepositoryRuleset.
type RepositoryRulesetConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryRulesetEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryRuleset `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryRulesetConnection) GetEdges() []*RepositoryRulesetEdge { return x.Edges }
func (x *RepositoryRulesetConnection) GetNodes() []*RepositoryRuleset     { return x.Nodes }
func (x *RepositoryRulesetConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *RepositoryRulesetConnection) GetTotalCount() int                 { return x.TotalCount }

// RepositoryRulesetEdge (OBJECT): An edge in a connection.
type RepositoryRulesetEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryRuleset `json:"node,omitempty"`
}

func (x *RepositoryRulesetEdge) GetCursor() string           { return x.Cursor }
func (x *RepositoryRulesetEdge) GetNode() *RepositoryRuleset { return x.Node }

// RepositoryRulesetTarget (ENUM): The targets supported for rulesets.
type RepositoryRulesetTarget string

// RepositoryRulesetTarget_BRANCH: Branch.
const RepositoryRulesetTarget_BRANCH RepositoryRulesetTarget = "BRANCH"

// RepositoryRulesetTarget_TAG: Tag.
const RepositoryRulesetTarget_TAG RepositoryRulesetTarget = "TAG"

// RepositoryRulesetTarget_PUSH: Push.
const RepositoryRulesetTarget_PUSH RepositoryRulesetTarget = "PUSH"

// RepositoryRulesetTarget_REPOSITORY: repository.
const RepositoryRulesetTarget_REPOSITORY RepositoryRulesetTarget = "REPOSITORY"

// RepositoryTopic (OBJECT): A repository-topic connects a repository to a topic.
type RepositoryTopic struct {
	// Id: The Node ID of the RepositoryTopic object.
	Id ID `json:"id,omitempty"`

	// ResourcePath: The HTTP path for this repository-topic.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Topic: The topic.
	Topic *Topic `json:"topic,omitempty"`

	// Url: The HTTP URL for this repository-topic.
	Url URI `json:"url,omitempty"`
}

func (x *RepositoryTopic) GetId() ID            { return x.Id }
func (x *RepositoryTopic) GetResourcePath() URI { return x.ResourcePath }
func (x *RepositoryTopic) GetTopic() *Topic     { return x.Topic }
func (x *RepositoryTopic) GetUrl() URI          { return x.Url }

// RepositoryTopicConnection (OBJECT): The connection type for RepositoryTopic.
type RepositoryTopicConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryTopicEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryTopic `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryTopicConnection) GetEdges() []*RepositoryTopicEdge { return x.Edges }
func (x *RepositoryTopicConnection) GetNodes() []*RepositoryTopic     { return x.Nodes }
func (x *RepositoryTopicConnection) GetPageInfo() *PageInfo           { return x.PageInfo }
func (x *RepositoryTopicConnection) GetTotalCount() int               { return x.TotalCount }

// RepositoryTopicEdge (OBJECT): An edge in a connection.
type RepositoryTopicEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryTopic `json:"node,omitempty"`
}

func (x *RepositoryTopicEdge) GetCursor() string         { return x.Cursor }
func (x *RepositoryTopicEdge) GetNode() *RepositoryTopic { return x.Node }

// RepositoryVisibility (ENUM): The repository's visibility level.
type RepositoryVisibility string

// RepositoryVisibility_PRIVATE: The repository is visible only to those with explicit access.
const RepositoryVisibility_PRIVATE RepositoryVisibility = "PRIVATE"

// RepositoryVisibility_PUBLIC: The repository is visible to everyone.
const RepositoryVisibility_PUBLIC RepositoryVisibility = "PUBLIC"

// RepositoryVisibility_INTERNAL: The repository is visible only to users in the same enterprise.
const RepositoryVisibility_INTERNAL RepositoryVisibility = "INTERNAL"

// RepositoryVisibilityChangeDisableAuditEntry (OBJECT): Audit log entry for a repository_visibility_change.disable event.
type RepositoryVisibilityChangeDisableAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepositoryVisibilityChangeDisableAuditEntry) GetAction() string         { return x.Action }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetEnterpriseSlug() string {
	return x.EnterpriseSlug
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetEnterpriseUrl() URI { return x.EnterpriseUrl }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetId() ID             { return x.Id }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetUser() *User       { return x.User }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepositoryVisibilityChangeDisableAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepositoryVisibilityChangeEnableAuditEntry (OBJECT): Audit log entry for a repository_visibility_change.enable event.
type RepositoryVisibilityChangeEnableAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// EnterpriseResourcePath: The HTTP path for this enterprise.
	EnterpriseResourcePath URI `json:"enterpriseResourcePath,omitempty"`

	// EnterpriseSlug: The slug of the enterprise.
	EnterpriseSlug string `json:"enterpriseSlug,omitempty"`

	// EnterpriseUrl: The HTTP URL for this enterprise.
	EnterpriseUrl URI `json:"enterpriseUrl,omitempty"`

	// Id: The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object.
	Id ID `json:"id,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *RepositoryVisibilityChangeEnableAuditEntry) GetAction() string         { return x.Action }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetActor() AuditEntryActor { return x.Actor }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetActorIp() string        { return x.ActorIp }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetActorLocation() *ActorLocation {
	return x.ActorLocation
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetActorLogin() string { return x.ActorLogin }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetActorResourcePath() URI {
	return x.ActorResourcePath
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetActorUrl() URI { return x.ActorUrl }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetCreatedAt() PreciseDateTime {
	return x.CreatedAt
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetEnterpriseResourcePath() URI {
	return x.EnterpriseResourcePath
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetEnterpriseSlug() string {
	return x.EnterpriseSlug
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetEnterpriseUrl() URI { return x.EnterpriseUrl }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetId() ID             { return x.Id }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetOperationType() OperationType {
	return x.OperationType
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetOrganization() *Organization {
	return x.Organization
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetOrganizationName() string {
	return x.OrganizationName
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetOrganizationUrl() URI {
	return x.OrganizationUrl
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetUser() *User       { return x.User }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetUserLogin() string { return x.UserLogin }
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetUserResourcePath() URI {
	return x.UserResourcePath
}
func (x *RepositoryVisibilityChangeEnableAuditEntry) GetUserUrl() URI { return x.UserUrl }

// RepositoryVulnerabilityAlert (OBJECT): A Dependabot alert for a repository with a dependency affected by a security vulnerability.
type RepositoryVulnerabilityAlert struct {
	// AutoDismissedAt: When was the alert auto-dismissed?.
	AutoDismissedAt DateTime `json:"autoDismissedAt,omitempty"`

	// CreatedAt: When was the alert created?.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DependabotUpdate: The associated Dependabot update.
	DependabotUpdate *DependabotUpdate `json:"dependabotUpdate,omitempty"`

	// DependencyScope: The scope of an alert's dependency.
	DependencyScope RepositoryVulnerabilityAlertDependencyScope `json:"dependencyScope,omitempty"`

	// DismissComment: Comment explaining the reason the alert was dismissed.
	DismissComment string `json:"dismissComment,omitempty"`

	// DismissReason: The reason the alert was dismissed.
	DismissReason string `json:"dismissReason,omitempty"`

	// DismissedAt: When was the alert dismissed?.
	DismissedAt DateTime `json:"dismissedAt,omitempty"`

	// Dismisser: The user who dismissed the alert.
	Dismisser *User `json:"dismisser,omitempty"`

	// FixedAt: When was the alert fixed?.
	FixedAt DateTime `json:"fixedAt,omitempty"`

	// Id: The Node ID of the RepositoryVulnerabilityAlert object.
	Id ID `json:"id,omitempty"`

	// Number: Identifies the alert number.
	Number int `json:"number,omitempty"`

	// Repository: The associated repository.
	Repository *Repository `json:"repository,omitempty"`

	// SecurityAdvisory: The associated security advisory.
	SecurityAdvisory *SecurityAdvisory `json:"securityAdvisory,omitempty"`

	// SecurityVulnerability: The associated security vulnerability.
	SecurityVulnerability *SecurityVulnerability `json:"securityVulnerability,omitempty"`

	// State: Identifies the state of the alert.
	State RepositoryVulnerabilityAlertState `json:"state,omitempty"`

	// VulnerableManifestFilename: The vulnerable manifest filename.
	VulnerableManifestFilename string `json:"vulnerableManifestFilename,omitempty"`

	// VulnerableManifestPath: The vulnerable manifest path.
	VulnerableManifestPath string `json:"vulnerableManifestPath,omitempty"`

	// VulnerableRequirements: The vulnerable requirements.
	VulnerableRequirements string `json:"vulnerableRequirements,omitempty"`
}

func (x *RepositoryVulnerabilityAlert) GetAutoDismissedAt() DateTime { return x.AutoDismissedAt }
func (x *RepositoryVulnerabilityAlert) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *RepositoryVulnerabilityAlert) GetDependabotUpdate() *DependabotUpdate {
	return x.DependabotUpdate
}
func (x *RepositoryVulnerabilityAlert) GetDependencyScope() RepositoryVulnerabilityAlertDependencyScope {
	return x.DependencyScope
}
func (x *RepositoryVulnerabilityAlert) GetDismissComment() string  { return x.DismissComment }
func (x *RepositoryVulnerabilityAlert) GetDismissReason() string   { return x.DismissReason }
func (x *RepositoryVulnerabilityAlert) GetDismissedAt() DateTime   { return x.DismissedAt }
func (x *RepositoryVulnerabilityAlert) GetDismisser() *User        { return x.Dismisser }
func (x *RepositoryVulnerabilityAlert) GetFixedAt() DateTime       { return x.FixedAt }
func (x *RepositoryVulnerabilityAlert) GetId() ID                  { return x.Id }
func (x *RepositoryVulnerabilityAlert) GetNumber() int             { return x.Number }
func (x *RepositoryVulnerabilityAlert) GetRepository() *Repository { return x.Repository }
func (x *RepositoryVulnerabilityAlert) GetSecurityAdvisory() *SecurityAdvisory {
	return x.SecurityAdvisory
}
func (x *RepositoryVulnerabilityAlert) GetSecurityVulnerability() *SecurityVulnerability {
	return x.SecurityVulnerability
}
func (x *RepositoryVulnerabilityAlert) GetState() RepositoryVulnerabilityAlertState { return x.State }
func (x *RepositoryVulnerabilityAlert) GetVulnerableManifestFilename() string {
	return x.VulnerableManifestFilename
}
func (x *RepositoryVulnerabilityAlert) GetVulnerableManifestPath() string {
	return x.VulnerableManifestPath
}
func (x *RepositoryVulnerabilityAlert) GetVulnerableRequirements() string {
	return x.VulnerableRequirements
}

// RepositoryVulnerabilityAlertConnection (OBJECT): The connection type for RepositoryVulnerabilityAlert.
type RepositoryVulnerabilityAlertConnection struct {
	// Edges: A list of edges.
	Edges []*RepositoryVulnerabilityAlertEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*RepositoryVulnerabilityAlert `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RepositoryVulnerabilityAlertConnection) GetEdges() []*RepositoryVulnerabilityAlertEdge {
	return x.Edges
}
func (x *RepositoryVulnerabilityAlertConnection) GetNodes() []*RepositoryVulnerabilityAlert {
	return x.Nodes
}
func (x *RepositoryVulnerabilityAlertConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *RepositoryVulnerabilityAlertConnection) GetTotalCount() int     { return x.TotalCount }

// RepositoryVulnerabilityAlertDependencyScope (ENUM): The possible scopes of an alert's dependency.
type RepositoryVulnerabilityAlertDependencyScope string

// RepositoryVulnerabilityAlertDependencyScope_RUNTIME: A dependency that is leveraged during application runtime.
const RepositoryVulnerabilityAlertDependencyScope_RUNTIME RepositoryVulnerabilityAlertDependencyScope = "RUNTIME"

// RepositoryVulnerabilityAlertDependencyScope_DEVELOPMENT: A dependency that is only used in development.
const RepositoryVulnerabilityAlertDependencyScope_DEVELOPMENT RepositoryVulnerabilityAlertDependencyScope = "DEVELOPMENT"

// RepositoryVulnerabilityAlertEdge (OBJECT): An edge in a connection.
type RepositoryVulnerabilityAlertEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *RepositoryVulnerabilityAlert `json:"node,omitempty"`
}

func (x *RepositoryVulnerabilityAlertEdge) GetCursor() string                      { return x.Cursor }
func (x *RepositoryVulnerabilityAlertEdge) GetNode() *RepositoryVulnerabilityAlert { return x.Node }

// RepositoryVulnerabilityAlertState (ENUM): The possible states of an alert.
type RepositoryVulnerabilityAlertState string

// RepositoryVulnerabilityAlertState_OPEN: An alert that is still open.
const RepositoryVulnerabilityAlertState_OPEN RepositoryVulnerabilityAlertState = "OPEN"

// RepositoryVulnerabilityAlertState_FIXED: An alert that has been resolved by a code change.
const RepositoryVulnerabilityAlertState_FIXED RepositoryVulnerabilityAlertState = "FIXED"

// RepositoryVulnerabilityAlertState_DISMISSED: An alert that has been manually closed by a user.
const RepositoryVulnerabilityAlertState_DISMISSED RepositoryVulnerabilityAlertState = "DISMISSED"

// RepositoryVulnerabilityAlertState_AUTO_DISMISSED: An alert that has been automatically closed by Dependabot.
const RepositoryVulnerabilityAlertState_AUTO_DISMISSED RepositoryVulnerabilityAlertState = "AUTO_DISMISSED"

// ReprioritizeSubIssueInput (INPUT_OBJECT): Autogenerated input type of ReprioritizeSubIssue.
type ReprioritizeSubIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The id of the parent issue.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`

	// SubIssueId: The id of the sub-issue to reprioritize.
	//
	// GraphQL type: ID!
	SubIssueId ID `json:"subIssueId,omitempty"`

	// AfterId: The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified).
	//
	// GraphQL type: ID
	AfterId ID `json:"afterId,omitempty"`

	// BeforeId: The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified).
	//
	// GraphQL type: ID
	BeforeId ID `json:"beforeId,omitempty"`
}

// ReprioritizeSubIssuePayload (OBJECT): Autogenerated return type of ReprioritizeSubIssue.
type ReprioritizeSubIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The parent issue that the sub-issue was reprioritized in.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *ReprioritizeSubIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *ReprioritizeSubIssuePayload) GetIssue() *Issue            { return x.Issue }

// RequestReviewsInput (INPUT_OBJECT): Autogenerated input type of RequestReviews.
type RequestReviewsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Node ID of the pull request to modify.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// UserIds: The Node IDs of the user to request.
	//
	// GraphQL type: [ID!]
	UserIds []ID `json:"userIds,omitempty"`

	// TeamIds: The Node IDs of the team to request.
	//
	// GraphQL type: [ID!]
	TeamIds []ID `json:"teamIds,omitempty"`

	// Union: Add users to the set rather than replace.
	//
	// GraphQL type: Boolean
	Union bool `json:"union,omitempty"`
}

// RequestReviewsPayload (OBJECT): Autogenerated return type of RequestReviews.
type RequestReviewsPayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that is getting requests.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// RequestedReviewersEdge: The edge from the pull request to the requested reviewers.
	RequestedReviewersEdge *UserEdge `json:"requestedReviewersEdge,omitempty"`
}

func (x *RequestReviewsPayload) GetActor() Actor              { return x.Actor }
func (x *RequestReviewsPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *RequestReviewsPayload) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *RequestReviewsPayload) GetRequestedReviewersEdge() *UserEdge {
	return x.RequestedReviewersEdge
}

// RequestableCheckStatusState (ENUM): The possible states that can be requested when creating a check run.
type RequestableCheckStatusState string

// RequestableCheckStatusState_QUEUED: The check suite or run has been queued.
const RequestableCheckStatusState_QUEUED RequestableCheckStatusState = "QUEUED"

// RequestableCheckStatusState_IN_PROGRESS: The check suite or run is in progress.
const RequestableCheckStatusState_IN_PROGRESS RequestableCheckStatusState = "IN_PROGRESS"

// RequestableCheckStatusState_COMPLETED: The check suite or run has been completed.
const RequestableCheckStatusState_COMPLETED RequestableCheckStatusState = "COMPLETED"

// RequestableCheckStatusState_WAITING: The check suite or run is in waiting state.
const RequestableCheckStatusState_WAITING RequestableCheckStatusState = "WAITING"

// RequestableCheckStatusState_PENDING: The check suite or run is in pending state.
const RequestableCheckStatusState_PENDING RequestableCheckStatusState = "PENDING"

// RequestedReviewer (UNION): Types that can be requested reviewers.
// RequestedReviewer_Interface: Types that can be requested reviewers.
//
// Possible types:
//
//   - *Bot
//   - *Mannequin
//   - *Team
//   - *User
type RequestedReviewer_Interface interface {
	isRequestedReviewer()
}

func (*Bot) isRequestedReviewer()       {}
func (*Mannequin) isRequestedReviewer() {}
func (*Team) isRequestedReviewer()      {}
func (*User) isRequestedReviewer()      {}

type RequestedReviewer struct {
	Interface RequestedReviewer_Interface
}

func (x *RequestedReviewer) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RequestedReviewer) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RequestedReviewer", info.Typename)
	case "Bot":
		x.Interface = new(Bot)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "Team":
		x.Interface = new(Team)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// RequestedReviewerConnection (OBJECT): The connection type for RequestedReviewer.
type RequestedReviewerConnection struct {
	// Edges: A list of edges.
	Edges []*RequestedReviewerEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []RequestedReviewer `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *RequestedReviewerConnection) GetEdges() []*RequestedReviewerEdge { return x.Edges }
func (x *RequestedReviewerConnection) GetNodes() []RequestedReviewer      { return x.Nodes }
func (x *RequestedReviewerConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *RequestedReviewerConnection) GetTotalCount() int                 { return x.TotalCount }

// RequestedReviewerEdge (OBJECT): An edge in a connection.
type RequestedReviewerEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node RequestedReviewer `json:"node,omitempty"`
}

func (x *RequestedReviewerEdge) GetCursor() string          { return x.Cursor }
func (x *RequestedReviewerEdge) GetNode() RequestedReviewer { return x.Node }

// RequirableByPullRequest (INTERFACE): Represents a type that can be required by a pull request for merging.
// RequirableByPullRequest_Interface: Represents a type that can be required by a pull request for merging.
//
// Possible types:
//
//   - *CheckRun
//   - *StatusContext
type RequirableByPullRequest_Interface interface {
	isRequirableByPullRequest()
	GetIsRequired() bool
}

func (*CheckRun) isRequirableByPullRequest()      {}
func (*StatusContext) isRequirableByPullRequest() {}

type RequirableByPullRequest struct {
	Interface RequirableByPullRequest_Interface
}

func (x *RequirableByPullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RequirableByPullRequest) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RequirableByPullRequest", info.Typename)
	case "CheckRun":
		x.Interface = new(CheckRun)
	case "StatusContext":
		x.Interface = new(StatusContext)
	}
	return json.Unmarshal(js, x.Interface)
}

// RequiredDeploymentsParameters (OBJECT): Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
type RequiredDeploymentsParameters struct {
	// RequiredDeploymentEnvironments: The environments that must be successfully deployed to before branches can be merged.
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`
}

func (x *RequiredDeploymentsParameters) GetRequiredDeploymentEnvironments() []string {
	return x.RequiredDeploymentEnvironments
}

// RequiredDeploymentsParametersInput (INPUT_OBJECT): Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
type RequiredDeploymentsParametersInput struct {
	// RequiredDeploymentEnvironments: The environments that must be successfully deployed to before branches can be merged.
	//
	// GraphQL type: [String!]!
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`
}

// RequiredStatusCheckDescription (OBJECT): Represents a required status check for a protected branch, but not any specific run of that check.
type RequiredStatusCheckDescription struct {
	// App: The App that must provide this status in order for it to be accepted.
	App *App `json:"app,omitempty"`

	// Context: The name of this status.
	Context string `json:"context,omitempty"`
}

func (x *RequiredStatusCheckDescription) GetApp() *App       { return x.App }
func (x *RequiredStatusCheckDescription) GetContext() string { return x.Context }

// RequiredStatusCheckInput (INPUT_OBJECT): Specifies the attributes for a new or updated required status check.
type RequiredStatusCheckInput struct {
	// Context: Status check context that must pass for commits to be accepted to the matching branch.
	//
	// GraphQL type: String!
	Context string `json:"context,omitempty"`

	// AppId: The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status.
	//
	// GraphQL type: ID
	AppId ID `json:"appId,omitempty"`
}

// RequiredStatusChecksParameters (OBJECT): Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
type RequiredStatusChecksParameters struct {
	// DoNotEnforceOnCreate: Allow repositories and branches to be created if a check would otherwise prohibit it.
	DoNotEnforceOnCreate bool `json:"doNotEnforceOnCreate,omitempty"`

	// RequiredStatusChecks: Status checks that are required.
	RequiredStatusChecks []*StatusCheckConfiguration `json:"requiredStatusChecks,omitempty"`

	// StrictRequiredStatusChecksPolicy: Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
	StrictRequiredStatusChecksPolicy bool `json:"strictRequiredStatusChecksPolicy,omitempty"`
}

func (x *RequiredStatusChecksParameters) GetDoNotEnforceOnCreate() bool {
	return x.DoNotEnforceOnCreate
}
func (x *RequiredStatusChecksParameters) GetRequiredStatusChecks() []*StatusCheckConfiguration {
	return x.RequiredStatusChecks
}
func (x *RequiredStatusChecksParameters) GetStrictRequiredStatusChecksPolicy() bool {
	return x.StrictRequiredStatusChecksPolicy
}

// RequiredStatusChecksParametersInput (INPUT_OBJECT): Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
type RequiredStatusChecksParametersInput struct {
	// DoNotEnforceOnCreate: Allow repositories and branches to be created if a check would otherwise prohibit it.
	//
	// GraphQL type: Boolean
	DoNotEnforceOnCreate bool `json:"doNotEnforceOnCreate,omitempty"`

	// RequiredStatusChecks: Status checks that are required.
	//
	// GraphQL type: [StatusCheckConfigurationInput!]!
	RequiredStatusChecks []*StatusCheckConfigurationInput `json:"requiredStatusChecks,omitempty"`

	// StrictRequiredStatusChecksPolicy: Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
	//
	// GraphQL type: Boolean!
	StrictRequiredStatusChecksPolicy bool `json:"strictRequiredStatusChecksPolicy,omitempty"`
}

// RerequestCheckSuiteInput (INPUT_OBJECT): Autogenerated input type of RerequestCheckSuite.
type RerequestCheckSuiteInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// CheckSuiteId: The Node ID of the check suite.
	//
	// GraphQL type: ID!
	CheckSuiteId ID `json:"checkSuiteId,omitempty"`
}

// RerequestCheckSuitePayload (OBJECT): Autogenerated return type of RerequestCheckSuite.
type RerequestCheckSuitePayload struct {
	// CheckSuite: The requested check suite.
	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *RerequestCheckSuitePayload) GetCheckSuite() *CheckSuite  { return x.CheckSuite }
func (x *RerequestCheckSuitePayload) GetClientMutationId() string { return x.ClientMutationId }

// ResolveReviewThreadInput (INPUT_OBJECT): Autogenerated input type of ResolveReviewThread.
type ResolveReviewThreadInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ThreadId: The ID of the thread to resolve.
	//
	// GraphQL type: ID!
	ThreadId ID `json:"threadId,omitempty"`
}

// ResolveReviewThreadPayload (OBJECT): Autogenerated return type of ResolveReviewThread.
type ResolveReviewThreadPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Thread: The thread to resolve.
	Thread *PullRequestReviewThread `json:"thread,omitempty"`
}

func (x *ResolveReviewThreadPayload) GetClientMutationId() string         { return x.ClientMutationId }
func (x *ResolveReviewThreadPayload) GetThread() *PullRequestReviewThread { return x.Thread }

// RestrictedContribution (OBJECT): Represents a private contribution a user made on GitHub.
type RestrictedContribution struct {
	// IsRestricted: Whether this contribution is associated with a record you do not have access to. For
	// example, your own 'first issue' contribution may have been made on a repository you can no
	// longer access.
	// .
	IsRestricted bool `json:"isRestricted,omitempty"`

	// OccurredAt: When this contribution was made.
	OccurredAt DateTime `json:"occurredAt,omitempty"`

	// ResourcePath: The HTTP path for this contribution.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Url: The HTTP URL for this contribution.
	Url URI `json:"url,omitempty"`

	// User: The user who made this contribution.
	// .
	User *User `json:"user,omitempty"`
}

func (x *RestrictedContribution) GetIsRestricted() bool   { return x.IsRestricted }
func (x *RestrictedContribution) GetOccurredAt() DateTime { return x.OccurredAt }
func (x *RestrictedContribution) GetResourcePath() URI    { return x.ResourcePath }
func (x *RestrictedContribution) GetUrl() URI             { return x.Url }
func (x *RestrictedContribution) GetUser() *User          { return x.User }

// RetireSponsorsTierInput (INPUT_OBJECT): Autogenerated input type of RetireSponsorsTier.
type RetireSponsorsTierInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TierId: The ID of the published tier to retire.
	//
	// GraphQL type: ID!
	TierId ID `json:"tierId,omitempty"`
}

// RetireSponsorsTierPayload (OBJECT): Autogenerated return type of RetireSponsorsTier.
type RetireSponsorsTierPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorsTier: The tier that was retired.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
}

func (x *RetireSponsorsTierPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *RetireSponsorsTierPayload) GetSponsorsTier() *SponsorsTier { return x.SponsorsTier }

// RevertPullRequestInput (INPUT_OBJECT): Autogenerated input type of RevertPullRequest.
type RevertPullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The ID of the pull request to revert.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// Title: The title of the revert pull request.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The description of the revert pull request.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// Draft: Indicates whether the revert pull request should be a draft.
	//
	// GraphQL type: Boolean
	Draft bool `json:"draft,omitempty"`
}

// RevertPullRequestPayload (OBJECT): Autogenerated return type of RevertPullRequest.
type RevertPullRequestPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The pull request that was reverted.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// RevertPullRequest: The new pull request that reverts the input pull request.
	RevertPullRequest *PullRequest `json:"revertPullRequest,omitempty"`
}

func (x *RevertPullRequestPayload) GetClientMutationId() string        { return x.ClientMutationId }
func (x *RevertPullRequestPayload) GetPullRequest() *PullRequest       { return x.PullRequest }
func (x *RevertPullRequestPayload) GetRevertPullRequest() *PullRequest { return x.RevertPullRequest }

// ReviewDismissalAllowance (OBJECT): A user, team, or app who has the ability to dismiss a review on a protected branch.
type ReviewDismissalAllowance struct {
	// Actor: The actor that can dismiss.
	Actor ReviewDismissalAllowanceActor `json:"actor,omitempty"`

	// BranchProtectionRule: Identifies the branch protection rule associated with the allowed user, team, or app.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// Id: The Node ID of the ReviewDismissalAllowance object.
	Id ID `json:"id,omitempty"`
}

func (x *ReviewDismissalAllowance) GetActor() ReviewDismissalAllowanceActor { return x.Actor }
func (x *ReviewDismissalAllowance) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *ReviewDismissalAllowance) GetId() ID { return x.Id }

// ReviewDismissalAllowanceActor (UNION): Types that can be an actor.
// ReviewDismissalAllowanceActor_Interface: Types that can be an actor.
//
// Possible types:
//
//   - *App
//   - *Team
//   - *User
type ReviewDismissalAllowanceActor_Interface interface {
	isReviewDismissalAllowanceActor()
}

func (*App) isReviewDismissalAllowanceActor()  {}
func (*Team) isReviewDismissalAllowanceActor() {}
func (*User) isReviewDismissalAllowanceActor() {}

type ReviewDismissalAllowanceActor struct {
	Interface ReviewDismissalAllowanceActor_Interface
}

func (x *ReviewDismissalAllowanceActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *ReviewDismissalAllowanceActor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for ReviewDismissalAllowanceActor", info.Typename)
	case "App":
		x.Interface = new(App)
	case "Team":
		x.Interface = new(Team)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// ReviewDismissalAllowanceConnection (OBJECT): The connection type for ReviewDismissalAllowance.
type ReviewDismissalAllowanceConnection struct {
	// Edges: A list of edges.
	Edges []*ReviewDismissalAllowanceEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ReviewDismissalAllowance `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ReviewDismissalAllowanceConnection) GetEdges() []*ReviewDismissalAllowanceEdge {
	return x.Edges
}
func (x *ReviewDismissalAllowanceConnection) GetNodes() []*ReviewDismissalAllowance { return x.Nodes }
func (x *ReviewDismissalAllowanceConnection) GetPageInfo() *PageInfo                { return x.PageInfo }
func (x *ReviewDismissalAllowanceConnection) GetTotalCount() int                    { return x.TotalCount }

// ReviewDismissalAllowanceEdge (OBJECT): An edge in a connection.
type ReviewDismissalAllowanceEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ReviewDismissalAllowance `json:"node,omitempty"`
}

func (x *ReviewDismissalAllowanceEdge) GetCursor() string                  { return x.Cursor }
func (x *ReviewDismissalAllowanceEdge) GetNode() *ReviewDismissalAllowance { return x.Node }

// ReviewDismissedEvent (OBJECT): Represents a 'review_dismissed' event on a given issue or pull request.
type ReviewDismissedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DismissalMessage: Identifies the optional message associated with the 'review_dismissed' event.
	DismissalMessage string `json:"dismissalMessage,omitempty"`

	// DismissalMessageHTML: Identifies the optional message associated with the event, rendered to HTML.
	DismissalMessageHTML string `json:"dismissalMessageHTML,omitempty"`

	// Id: The Node ID of the ReviewDismissedEvent object.
	Id ID `json:"id,omitempty"`

	// PreviousReviewState: Identifies the previous state of the review with the 'review_dismissed' event.
	PreviousReviewState PullRequestReviewState `json:"previousReviewState,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// PullRequestCommit: Identifies the commit which caused the review to become stale.
	PullRequestCommit *PullRequestCommit `json:"pullRequestCommit,omitempty"`

	// ResourcePath: The HTTP path for this review dismissed event.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Review: Identifies the review associated with the 'review_dismissed' event.
	Review *PullRequestReview `json:"review,omitempty"`

	// Url: The HTTP URL for this review dismissed event.
	Url URI `json:"url,omitempty"`
}

func (x *ReviewDismissedEvent) GetActor() Actor                 { return x.Actor }
func (x *ReviewDismissedEvent) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *ReviewDismissedEvent) GetDatabaseId() int              { return x.DatabaseId }
func (x *ReviewDismissedEvent) GetDismissalMessage() string     { return x.DismissalMessage }
func (x *ReviewDismissedEvent) GetDismissalMessageHTML() string { return x.DismissalMessageHTML }
func (x *ReviewDismissedEvent) GetId() ID                       { return x.Id }
func (x *ReviewDismissedEvent) GetPreviousReviewState() PullRequestReviewState {
	return x.PreviousReviewState
}
func (x *ReviewDismissedEvent) GetPullRequest() *PullRequest             { return x.PullRequest }
func (x *ReviewDismissedEvent) GetPullRequestCommit() *PullRequestCommit { return x.PullRequestCommit }
func (x *ReviewDismissedEvent) GetResourcePath() URI                     { return x.ResourcePath }
func (x *ReviewDismissedEvent) GetReview() *PullRequestReview            { return x.Review }
func (x *ReviewDismissedEvent) GetUrl() URI                              { return x.Url }

// ReviewRequest (OBJECT): A request for a user to review a pull request.
type ReviewRequest struct {
	// AsCodeOwner: Whether this request was created for a code owner.
	AsCodeOwner bool `json:"asCodeOwner,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the ReviewRequest object.
	Id ID `json:"id,omitempty"`

	// PullRequest: Identifies the pull request associated with this review request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// RequestedReviewer: The reviewer that is requested.
	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
}

func (x *ReviewRequest) GetAsCodeOwner() bool                    { return x.AsCodeOwner }
func (x *ReviewRequest) GetDatabaseId() int                      { return x.DatabaseId }
func (x *ReviewRequest) GetId() ID                               { return x.Id }
func (x *ReviewRequest) GetPullRequest() *PullRequest            { return x.PullRequest }
func (x *ReviewRequest) GetRequestedReviewer() RequestedReviewer { return x.RequestedReviewer }

// ReviewRequestConnection (OBJECT): The connection type for ReviewRequest.
type ReviewRequestConnection struct {
	// Edges: A list of edges.
	Edges []*ReviewRequestEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*ReviewRequest `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *ReviewRequestConnection) GetEdges() []*ReviewRequestEdge { return x.Edges }
func (x *ReviewRequestConnection) GetNodes() []*ReviewRequest     { return x.Nodes }
func (x *ReviewRequestConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *ReviewRequestConnection) GetTotalCount() int             { return x.TotalCount }

// ReviewRequestEdge (OBJECT): An edge in a connection.
type ReviewRequestEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *ReviewRequest `json:"node,omitempty"`
}

func (x *ReviewRequestEdge) GetCursor() string       { return x.Cursor }
func (x *ReviewRequestEdge) GetNode() *ReviewRequest { return x.Node }

// ReviewRequestRemovedEvent (OBJECT): Represents an 'review_request_removed' event on a given pull request.
type ReviewRequestRemovedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ReviewRequestRemovedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// RequestedReviewer: Identifies the reviewer whose review request was removed.
	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
}

func (x *ReviewRequestRemovedEvent) GetActor() Actor              { return x.Actor }
func (x *ReviewRequestRemovedEvent) GetCreatedAt() DateTime       { return x.CreatedAt }
func (x *ReviewRequestRemovedEvent) GetId() ID                    { return x.Id }
func (x *ReviewRequestRemovedEvent) GetPullRequest() *PullRequest { return x.PullRequest }
func (x *ReviewRequestRemovedEvent) GetRequestedReviewer() RequestedReviewer {
	return x.RequestedReviewer
}

// ReviewRequestedEvent (OBJECT): Represents an 'review_requested' event on a given pull request.
type ReviewRequestedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the ReviewRequestedEvent object.
	Id ID `json:"id,omitempty"`

	// PullRequest: PullRequest referenced by event.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`

	// RequestedReviewer: Identifies the reviewer whose review was requested.
	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
}

func (x *ReviewRequestedEvent) GetActor() Actor                         { return x.Actor }
func (x *ReviewRequestedEvent) GetCreatedAt() DateTime                  { return x.CreatedAt }
func (x *ReviewRequestedEvent) GetId() ID                               { return x.Id }
func (x *ReviewRequestedEvent) GetPullRequest() *PullRequest            { return x.PullRequest }
func (x *ReviewRequestedEvent) GetRequestedReviewer() RequestedReviewer { return x.RequestedReviewer }

// ReviewStatusHovercardContext (OBJECT): A hovercard context with a message describing the current code review state of the pull
// request.
// .
type ReviewStatusHovercardContext struct {
	// Message: A string describing this context.
	Message string `json:"message,omitempty"`

	// Octicon: An octicon to accompany this context.
	Octicon string `json:"octicon,omitempty"`

	// ReviewDecision: The current status of the pull request with respect to code review.
	ReviewDecision PullRequestReviewDecision `json:"reviewDecision,omitempty"`
}

func (x *ReviewStatusHovercardContext) GetMessage() string { return x.Message }
func (x *ReviewStatusHovercardContext) GetOcticon() string { return x.Octicon }
func (x *ReviewStatusHovercardContext) GetReviewDecision() PullRequestReviewDecision {
	return x.ReviewDecision
}

// RevokeEnterpriseOrganizationsMigratorRoleInput (INPUT_OBJECT): Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole.
type RevokeEnterpriseOrganizationsMigratorRoleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of the user to revoke the migrator role.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`
}

// RevokeEnterpriseOrganizationsMigratorRolePayload (OBJECT): Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole.
type RevokeEnterpriseOrganizationsMigratorRolePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Organizations: The organizations that had the migrator role revoked for the given user.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Organizations *OrganizationConnection `json:"organizations,omitempty"`
}

func (x *RevokeEnterpriseOrganizationsMigratorRolePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *RevokeEnterpriseOrganizationsMigratorRolePayload) GetOrganizations() *OrganizationConnection {
	return x.Organizations
}

// RevokeMigratorRoleInput (INPUT_OBJECT): Autogenerated input type of RevokeMigratorRole.
type RevokeMigratorRoleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: The ID of the organization that the user/team belongs to.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// Actor: The user login or Team slug to revoke the migrator role from.
	//
	// GraphQL type: String!
	Actor string `json:"actor,omitempty"`

	// ActorType: Specifies the type of the actor, can be either USER or TEAM.
	//
	// GraphQL type: ActorType!
	ActorType ActorType `json:"actorType,omitempty"`
}

// RevokeMigratorRolePayload (OBJECT): Autogenerated return type of RevokeMigratorRole.
type RevokeMigratorRolePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Success: Did the operation succeed?.
	Success bool `json:"success,omitempty"`
}

func (x *RevokeMigratorRolePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *RevokeMigratorRolePayload) GetSuccess() bool            { return x.Success }

// RoleInOrganization (ENUM): Possible roles a user may have in relation to an organization.
type RoleInOrganization string

// RoleInOrganization_OWNER: A user with full administrative access to the organization.
const RoleInOrganization_OWNER RoleInOrganization = "OWNER"

// RoleInOrganization_DIRECT_MEMBER: A user who is a direct member of the organization.
const RoleInOrganization_DIRECT_MEMBER RoleInOrganization = "DIRECT_MEMBER"

// RoleInOrganization_UNAFFILIATED: A user who is unaffiliated with the organization.
const RoleInOrganization_UNAFFILIATED RoleInOrganization = "UNAFFILIATED"

// RuleEnforcement (ENUM): The level of enforcement for a rule or ruleset.
type RuleEnforcement string

// RuleEnforcement_DISABLED: Do not evaluate or enforce rules.
const RuleEnforcement_DISABLED RuleEnforcement = "DISABLED"

// RuleEnforcement_ACTIVE: Rules will be enforced.
const RuleEnforcement_ACTIVE RuleEnforcement = "ACTIVE"

// RuleEnforcement_EVALUATE: Allow admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
const RuleEnforcement_EVALUATE RuleEnforcement = "EVALUATE"

// RuleParameters (UNION): Types which can be parameters for `RepositoryRule` objects.
// RuleParameters_Interface: Types which can be parameters for `RepositoryRule` objects.
//
// Possible types:
//
//   - *BranchNamePatternParameters
//   - *CodeScanningParameters
//   - *CommitAuthorEmailPatternParameters
//   - *CommitMessagePatternParameters
//   - *CommitterEmailPatternParameters
//   - *FileExtensionRestrictionParameters
//   - *FilePathRestrictionParameters
//   - *MaxFilePathLengthParameters
//   - *MaxFileSizeParameters
//   - *MergeQueueParameters
//   - *PullRequestParameters
//   - *RequiredDeploymentsParameters
//   - *RequiredStatusChecksParameters
//   - *TagNamePatternParameters
//   - *UpdateParameters
//   - *WorkflowsParameters
type RuleParameters_Interface interface {
	isRuleParameters()
}

func (*BranchNamePatternParameters) isRuleParameters()        {}
func (*CodeScanningParameters) isRuleParameters()             {}
func (*CommitAuthorEmailPatternParameters) isRuleParameters() {}
func (*CommitMessagePatternParameters) isRuleParameters()     {}
func (*CommitterEmailPatternParameters) isRuleParameters()    {}
func (*FileExtensionRestrictionParameters) isRuleParameters() {}
func (*FilePathRestrictionParameters) isRuleParameters()      {}
func (*MaxFilePathLengthParameters) isRuleParameters()        {}
func (*MaxFileSizeParameters) isRuleParameters()              {}
func (*MergeQueueParameters) isRuleParameters()               {}
func (*PullRequestParameters) isRuleParameters()              {}
func (*RequiredDeploymentsParameters) isRuleParameters()      {}
func (*RequiredStatusChecksParameters) isRuleParameters()     {}
func (*TagNamePatternParameters) isRuleParameters()           {}
func (*UpdateParameters) isRuleParameters()                   {}
func (*WorkflowsParameters) isRuleParameters()                {}

type RuleParameters struct {
	Interface RuleParameters_Interface
}

func (x *RuleParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RuleParameters) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RuleParameters", info.Typename)
	case "BranchNamePatternParameters":
		x.Interface = new(BranchNamePatternParameters)
	case "CodeScanningParameters":
		x.Interface = new(CodeScanningParameters)
	case "CommitAuthorEmailPatternParameters":
		x.Interface = new(CommitAuthorEmailPatternParameters)
	case "CommitMessagePatternParameters":
		x.Interface = new(CommitMessagePatternParameters)
	case "CommitterEmailPatternParameters":
		x.Interface = new(CommitterEmailPatternParameters)
	case "FileExtensionRestrictionParameters":
		x.Interface = new(FileExtensionRestrictionParameters)
	case "FilePathRestrictionParameters":
		x.Interface = new(FilePathRestrictionParameters)
	case "MaxFilePathLengthParameters":
		x.Interface = new(MaxFilePathLengthParameters)
	case "MaxFileSizeParameters":
		x.Interface = new(MaxFileSizeParameters)
	case "MergeQueueParameters":
		x.Interface = new(MergeQueueParameters)
	case "PullRequestParameters":
		x.Interface = new(PullRequestParameters)
	case "RequiredDeploymentsParameters":
		x.Interface = new(RequiredDeploymentsParameters)
	case "RequiredStatusChecksParameters":
		x.Interface = new(RequiredStatusChecksParameters)
	case "TagNamePatternParameters":
		x.Interface = new(TagNamePatternParameters)
	case "UpdateParameters":
		x.Interface = new(UpdateParameters)
	case "WorkflowsParameters":
		x.Interface = new(WorkflowsParameters)
	}
	return json.Unmarshal(js, x.Interface)
}

// RuleParametersInput (INPUT_OBJECT): Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
type RuleParametersInput struct {
	// Update: Parameters used for the `update` rule type.
	//
	// GraphQL type: UpdateParametersInput
	Update *UpdateParametersInput `json:"update,omitempty"`

	// MergeQueue: Parameters used for the `merge_queue` rule type.
	//
	// GraphQL type: MergeQueueParametersInput
	MergeQueue *MergeQueueParametersInput `json:"mergeQueue,omitempty"`

	// RequiredDeployments: Parameters used for the `required_deployments` rule type.
	//
	// GraphQL type: RequiredDeploymentsParametersInput
	RequiredDeployments *RequiredDeploymentsParametersInput `json:"requiredDeployments,omitempty"`

	// PullRequest: Parameters used for the `pull_request` rule type.
	//
	// GraphQL type: PullRequestParametersInput
	PullRequest *PullRequestParametersInput `json:"pullRequest,omitempty"`

	// RequiredStatusChecks: Parameters used for the `required_status_checks` rule type.
	//
	// GraphQL type: RequiredStatusChecksParametersInput
	RequiredStatusChecks *RequiredStatusChecksParametersInput `json:"requiredStatusChecks,omitempty"`

	// CommitMessagePattern: Parameters used for the `commit_message_pattern` rule type.
	//
	// GraphQL type: CommitMessagePatternParametersInput
	CommitMessagePattern *CommitMessagePatternParametersInput `json:"commitMessagePattern,omitempty"`

	// CommitAuthorEmailPattern: Parameters used for the `commit_author_email_pattern` rule type.
	//
	// GraphQL type: CommitAuthorEmailPatternParametersInput
	CommitAuthorEmailPattern *CommitAuthorEmailPatternParametersInput `json:"commitAuthorEmailPattern,omitempty"`

	// CommitterEmailPattern: Parameters used for the `committer_email_pattern` rule type.
	//
	// GraphQL type: CommitterEmailPatternParametersInput
	CommitterEmailPattern *CommitterEmailPatternParametersInput `json:"committerEmailPattern,omitempty"`

	// BranchNamePattern: Parameters used for the `branch_name_pattern` rule type.
	//
	// GraphQL type: BranchNamePatternParametersInput
	BranchNamePattern *BranchNamePatternParametersInput `json:"branchNamePattern,omitempty"`

	// TagNamePattern: Parameters used for the `tag_name_pattern` rule type.
	//
	// GraphQL type: TagNamePatternParametersInput
	TagNamePattern *TagNamePatternParametersInput `json:"tagNamePattern,omitempty"`

	// FilePathRestriction: Parameters used for the `file_path_restriction` rule type.
	//
	// GraphQL type: FilePathRestrictionParametersInput
	FilePathRestriction *FilePathRestrictionParametersInput `json:"filePathRestriction,omitempty"`

	// MaxFilePathLength: Parameters used for the `max_file_path_length` rule type.
	//
	// GraphQL type: MaxFilePathLengthParametersInput
	MaxFilePathLength *MaxFilePathLengthParametersInput `json:"maxFilePathLength,omitempty"`

	// FileExtensionRestriction: Parameters used for the `file_extension_restriction` rule type.
	//
	// GraphQL type: FileExtensionRestrictionParametersInput
	FileExtensionRestriction *FileExtensionRestrictionParametersInput `json:"fileExtensionRestriction,omitempty"`

	// MaxFileSize: Parameters used for the `max_file_size` rule type.
	//
	// GraphQL type: MaxFileSizeParametersInput
	MaxFileSize *MaxFileSizeParametersInput `json:"maxFileSize,omitempty"`

	// Workflows: Parameters used for the `workflows` rule type.
	//
	// GraphQL type: WorkflowsParametersInput
	Workflows *WorkflowsParametersInput `json:"workflows,omitempty"`

	// CodeScanning: Parameters used for the `code_scanning` rule type.
	//
	// GraphQL type: CodeScanningParametersInput
	CodeScanning *CodeScanningParametersInput `json:"codeScanning,omitempty"`
}

// RuleSource (UNION): Types which can have `RepositoryRule` objects.
// RuleSource_Interface: Types which can have `RepositoryRule` objects.
//
// Possible types:
//
//   - *Enterprise
//   - *Organization
//   - *Repository
type RuleSource_Interface interface {
	isRuleSource()
}

func (*Enterprise) isRuleSource()   {}
func (*Organization) isRuleSource() {}
func (*Repository) isRuleSource()   {}

type RuleSource struct {
	Interface RuleSource_Interface
}

func (x *RuleSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *RuleSource) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for RuleSource", info.Typename)
	case "Enterprise":
		x.Interface = new(Enterprise)
	case "Organization":
		x.Interface = new(Organization)
	case "Repository":
		x.Interface = new(Repository)
	}
	return json.Unmarshal(js, x.Interface)
}

// SamlDigestAlgorithm (ENUM): The possible digest algorithms used to sign SAML requests for an identity provider.
type SamlDigestAlgorithm string

// SamlDigestAlgorithm_SHA1: SHA1.
const SamlDigestAlgorithm_SHA1 SamlDigestAlgorithm = "SHA1"

// SamlDigestAlgorithm_SHA256: SHA256.
const SamlDigestAlgorithm_SHA256 SamlDigestAlgorithm = "SHA256"

// SamlDigestAlgorithm_SHA384: SHA384.
const SamlDigestAlgorithm_SHA384 SamlDigestAlgorithm = "SHA384"

// SamlDigestAlgorithm_SHA512: SHA512.
const SamlDigestAlgorithm_SHA512 SamlDigestAlgorithm = "SHA512"

// SamlSignatureAlgorithm (ENUM): The possible signature algorithms used to sign SAML requests for a Identity Provider.
type SamlSignatureAlgorithm string

// SamlSignatureAlgorithm_RSA_SHA1: RSA-SHA1.
const SamlSignatureAlgorithm_RSA_SHA1 SamlSignatureAlgorithm = "RSA_SHA1"

// SamlSignatureAlgorithm_RSA_SHA256: RSA-SHA256.
const SamlSignatureAlgorithm_RSA_SHA256 SamlSignatureAlgorithm = "RSA_SHA256"

// SamlSignatureAlgorithm_RSA_SHA384: RSA-SHA384.
const SamlSignatureAlgorithm_RSA_SHA384 SamlSignatureAlgorithm = "RSA_SHA384"

// SamlSignatureAlgorithm_RSA_SHA512: RSA-SHA512.
const SamlSignatureAlgorithm_RSA_SHA512 SamlSignatureAlgorithm = "RSA_SHA512"

// SavedReply (OBJECT): A Saved Reply is text a user can use to reply quickly.
type SavedReply struct {
	// Body: The body of the saved reply.
	Body string `json:"body,omitempty"`

	// BodyHTML: The saved reply body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the SavedReply object.
	Id ID `json:"id,omitempty"`

	// Title: The title of the saved reply.
	Title string `json:"title,omitempty"`

	// User: The user that saved this reply.
	User Actor `json:"user,omitempty"`
}

func (x *SavedReply) GetBody() string            { return x.Body }
func (x *SavedReply) GetBodyHTML() template.HTML { return x.BodyHTML }
func (x *SavedReply) GetDatabaseId() int         { return x.DatabaseId }
func (x *SavedReply) GetId() ID                  { return x.Id }
func (x *SavedReply) GetTitle() string           { return x.Title }
func (x *SavedReply) GetUser() Actor             { return x.User }

// SavedReplyConnection (OBJECT): The connection type for SavedReply.
type SavedReplyConnection struct {
	// Edges: A list of edges.
	Edges []*SavedReplyEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SavedReply `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SavedReplyConnection) GetEdges() []*SavedReplyEdge { return x.Edges }
func (x *SavedReplyConnection) GetNodes() []*SavedReply     { return x.Nodes }
func (x *SavedReplyConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *SavedReplyConnection) GetTotalCount() int          { return x.TotalCount }

// SavedReplyEdge (OBJECT): An edge in a connection.
type SavedReplyEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SavedReply `json:"node,omitempty"`
}

func (x *SavedReplyEdge) GetCursor() string    { return x.Cursor }
func (x *SavedReplyEdge) GetNode() *SavedReply { return x.Node }

// SavedReplyOrder (INPUT_OBJECT): Ordering options for saved reply connections.
type SavedReplyOrder struct {
	// Field: The field to order saved replies by.
	//
	// GraphQL type: SavedReplyOrderField!
	Field SavedReplyOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SavedReplyOrderField (ENUM): Properties by which saved reply connections can be ordered.
type SavedReplyOrderField string

// SavedReplyOrderField_UPDATED_AT: Order saved reply by when they were updated.
const SavedReplyOrderField_UPDATED_AT SavedReplyOrderField = "UPDATED_AT"

// SearchResultItem (UNION): The results of a search.
// SearchResultItem_Interface: The results of a search.
//
// Possible types:
//
//   - *App
//   - *Discussion
//   - *Issue
//   - *MarketplaceListing
//   - *Organization
//   - *PullRequest
//   - *Repository
//   - *User
type SearchResultItem_Interface interface {
	isSearchResultItem()
}

func (*App) isSearchResultItem()                {}
func (*Discussion) isSearchResultItem()         {}
func (*Issue) isSearchResultItem()              {}
func (*MarketplaceListing) isSearchResultItem() {}
func (*Organization) isSearchResultItem()       {}
func (*PullRequest) isSearchResultItem()        {}
func (*Repository) isSearchResultItem()         {}
func (*User) isSearchResultItem()               {}

type SearchResultItem struct {
	Interface SearchResultItem_Interface
}

func (x *SearchResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *SearchResultItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for SearchResultItem", info.Typename)
	case "App":
		x.Interface = new(App)
	case "Discussion":
		x.Interface = new(Discussion)
	case "Issue":
		x.Interface = new(Issue)
	case "MarketplaceListing":
		x.Interface = new(MarketplaceListing)
	case "Organization":
		x.Interface = new(Organization)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "Repository":
		x.Interface = new(Repository)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// SearchResultItemConnection (OBJECT): A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages.
type SearchResultItemConnection struct {
	// CodeCount: The total number of pieces of code that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	CodeCount int `json:"codeCount,omitempty"`

	// DiscussionCount: The total number of discussions that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	DiscussionCount int `json:"discussionCount,omitempty"`

	// Edges: A list of edges.
	Edges []*SearchResultItemEdge `json:"edges,omitempty"`

	// IssueCount: The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	IssueCount int `json:"issueCount,omitempty"`

	// Nodes: A list of nodes.
	Nodes []SearchResultItem `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// RepositoryCount: The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	RepositoryCount int `json:"repositoryCount,omitempty"`

	// UserCount: The total number of users that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	UserCount int `json:"userCount,omitempty"`

	// WikiCount: The total number of wiki pages that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	WikiCount int `json:"wikiCount,omitempty"`
}

func (x *SearchResultItemConnection) GetCodeCount() int                 { return x.CodeCount }
func (x *SearchResultItemConnection) GetDiscussionCount() int           { return x.DiscussionCount }
func (x *SearchResultItemConnection) GetEdges() []*SearchResultItemEdge { return x.Edges }
func (x *SearchResultItemConnection) GetIssueCount() int                { return x.IssueCount }
func (x *SearchResultItemConnection) GetNodes() []SearchResultItem      { return x.Nodes }
func (x *SearchResultItemConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *SearchResultItemConnection) GetRepositoryCount() int           { return x.RepositoryCount }
func (x *SearchResultItemConnection) GetUserCount() int                 { return x.UserCount }
func (x *SearchResultItemConnection) GetWikiCount() int                 { return x.WikiCount }

// SearchResultItemEdge (OBJECT): An edge in a connection.
type SearchResultItemEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node SearchResultItem `json:"node,omitempty"`

	// TextMatches: Text matches on the result found.
	TextMatches []*TextMatch `json:"textMatches,omitempty"`
}

func (x *SearchResultItemEdge) GetCursor() string            { return x.Cursor }
func (x *SearchResultItemEdge) GetNode() SearchResultItem    { return x.Node }
func (x *SearchResultItemEdge) GetTextMatches() []*TextMatch { return x.TextMatches }

// SearchType (ENUM): Represents the individual results of a search.
type SearchType string

// SearchType_ISSUE: Returns results matching issues in repositories.
const SearchType_ISSUE SearchType = "ISSUE"

// SearchType_REPOSITORY: Returns results matching repositories.
const SearchType_REPOSITORY SearchType = "REPOSITORY"

// SearchType_USER: Returns results matching users and organizations on GitHub.
const SearchType_USER SearchType = "USER"

// SearchType_DISCUSSION: Returns matching discussions in repositories.
const SearchType_DISCUSSION SearchType = "DISCUSSION"

// SecurityAdvisory (OBJECT): A GitHub Security Advisory.
type SecurityAdvisory struct {
	// Classification: The classification of the advisory.
	Classification SecurityAdvisoryClassification `json:"classification,omitempty"`

	// Cvss: The CVSS associated with this advisory.
	//
	// Deprecated: The CVSS associated with this advisory.
	Cvss *CVSS `json:"cvss,omitempty"`

	// CvssSeverities: The CVSS associated with this advisory.
	CvssSeverities *CvssSeverities `json:"cvssSeverities,omitempty"`

	// Cwes: CWEs associated with this Advisory.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Cwes *CWEConnection `json:"cwes,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: This is a long plaintext description of the advisory.
	Description string `json:"description,omitempty"`

	// Epss: The Exploit Prediction Scoring System.
	Epss *EPSS `json:"epss,omitempty"`

	// GhsaId: The GitHub Security Advisory ID.
	GhsaId string `json:"ghsaId,omitempty"`

	// Id: The Node ID of the SecurityAdvisory object.
	Id ID `json:"id,omitempty"`

	// Identifiers: A list of identifiers for this advisory.
	Identifiers []*SecurityAdvisoryIdentifier `json:"identifiers,omitempty"`

	// NotificationsPermalink: The permalink for the advisory's dependabot alerts page.
	NotificationsPermalink URI `json:"notificationsPermalink,omitempty"`

	// Origin: The organization that originated the advisory.
	Origin string `json:"origin,omitempty"`

	// Permalink: The permalink for the advisory.
	Permalink URI `json:"permalink,omitempty"`

	// PublishedAt: When the advisory was published.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// References: A list of references for this advisory.
	References []*SecurityAdvisoryReference `json:"references,omitempty"`

	// Severity: The severity of the advisory.
	Severity SecurityAdvisorySeverity `json:"severity,omitempty"`

	// Summary: A short plaintext summary of the advisory.
	Summary string `json:"summary,omitempty"`

	// UpdatedAt: When the advisory was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Vulnerabilities: Vulnerabilities associated with this Advisory.
	//
	// Query arguments:
	//   - orderBy SecurityVulnerabilityOrder
	//   - ecosystem SecurityAdvisoryEcosystem
	//   - package String
	//   - severities [SecurityAdvisorySeverity!]
	//   - classifications [SecurityAdvisoryClassification!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Vulnerabilities *SecurityVulnerabilityConnection `json:"vulnerabilities,omitempty"`

	// WithdrawnAt: When the advisory was withdrawn, if it has been withdrawn.
	WithdrawnAt DateTime `json:"withdrawnAt,omitempty"`
}

func (x *SecurityAdvisory) GetClassification() SecurityAdvisoryClassification {
	return x.Classification
}
func (x *SecurityAdvisory) GetCvss() *CVSS                                { return x.Cvss }
func (x *SecurityAdvisory) GetCvssSeverities() *CvssSeverities            { return x.CvssSeverities }
func (x *SecurityAdvisory) GetCwes() *CWEConnection                       { return x.Cwes }
func (x *SecurityAdvisory) GetDatabaseId() int                            { return x.DatabaseId }
func (x *SecurityAdvisory) GetDescription() string                        { return x.Description }
func (x *SecurityAdvisory) GetEpss() *EPSS                                { return x.Epss }
func (x *SecurityAdvisory) GetGhsaId() string                             { return x.GhsaId }
func (x *SecurityAdvisory) GetId() ID                                     { return x.Id }
func (x *SecurityAdvisory) GetIdentifiers() []*SecurityAdvisoryIdentifier { return x.Identifiers }
func (x *SecurityAdvisory) GetNotificationsPermalink() URI                { return x.NotificationsPermalink }
func (x *SecurityAdvisory) GetOrigin() string                             { return x.Origin }
func (x *SecurityAdvisory) GetPermalink() URI                             { return x.Permalink }
func (x *SecurityAdvisory) GetPublishedAt() DateTime                      { return x.PublishedAt }
func (x *SecurityAdvisory) GetReferences() []*SecurityAdvisoryReference   { return x.References }
func (x *SecurityAdvisory) GetSeverity() SecurityAdvisorySeverity         { return x.Severity }
func (x *SecurityAdvisory) GetSummary() string                            { return x.Summary }
func (x *SecurityAdvisory) GetUpdatedAt() DateTime                        { return x.UpdatedAt }
func (x *SecurityAdvisory) GetVulnerabilities() *SecurityVulnerabilityConnection {
	return x.Vulnerabilities
}
func (x *SecurityAdvisory) GetWithdrawnAt() DateTime { return x.WithdrawnAt }

// SecurityAdvisoryClassification (ENUM): Classification of the advisory.
type SecurityAdvisoryClassification string

// SecurityAdvisoryClassification_GENERAL: Classification of general advisories.
const SecurityAdvisoryClassification_GENERAL SecurityAdvisoryClassification = "GENERAL"

// SecurityAdvisoryClassification_MALWARE: Classification of malware advisories.
const SecurityAdvisoryClassification_MALWARE SecurityAdvisoryClassification = "MALWARE"

// SecurityAdvisoryConnection (OBJECT): The connection type for SecurityAdvisory.
type SecurityAdvisoryConnection struct {
	// Edges: A list of edges.
	Edges []*SecurityAdvisoryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SecurityAdvisory `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SecurityAdvisoryConnection) GetEdges() []*SecurityAdvisoryEdge { return x.Edges }
func (x *SecurityAdvisoryConnection) GetNodes() []*SecurityAdvisory     { return x.Nodes }
func (x *SecurityAdvisoryConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *SecurityAdvisoryConnection) GetTotalCount() int                { return x.TotalCount }

// SecurityAdvisoryEcosystem (ENUM): The possible ecosystems of a security vulnerability's package.
type SecurityAdvisoryEcosystem string

// SecurityAdvisoryEcosystem_COMPOSER: PHP packages hosted at packagist.org.
const SecurityAdvisoryEcosystem_COMPOSER SecurityAdvisoryEcosystem = "COMPOSER"

// SecurityAdvisoryEcosystem_ERLANG: Erlang/Elixir packages hosted at hex.pm.
const SecurityAdvisoryEcosystem_ERLANG SecurityAdvisoryEcosystem = "ERLANG"

// SecurityAdvisoryEcosystem_ACTIONS: GitHub Actions.
const SecurityAdvisoryEcosystem_ACTIONS SecurityAdvisoryEcosystem = "ACTIONS"

// SecurityAdvisoryEcosystem_GO: Go modules.
const SecurityAdvisoryEcosystem_GO SecurityAdvisoryEcosystem = "GO"

// SecurityAdvisoryEcosystem_MAVEN: Java artifacts hosted at the Maven central repository.
const SecurityAdvisoryEcosystem_MAVEN SecurityAdvisoryEcosystem = "MAVEN"

// SecurityAdvisoryEcosystem_NPM: JavaScript packages hosted at npmjs.com.
const SecurityAdvisoryEcosystem_NPM SecurityAdvisoryEcosystem = "NPM"

// SecurityAdvisoryEcosystem_NUGET: .NET packages hosted at the NuGet Gallery.
const SecurityAdvisoryEcosystem_NUGET SecurityAdvisoryEcosystem = "NUGET"

// SecurityAdvisoryEcosystem_PIP: Python packages hosted at PyPI.org.
const SecurityAdvisoryEcosystem_PIP SecurityAdvisoryEcosystem = "PIP"

// SecurityAdvisoryEcosystem_PUB: Dart packages hosted at pub.dev.
const SecurityAdvisoryEcosystem_PUB SecurityAdvisoryEcosystem = "PUB"

// SecurityAdvisoryEcosystem_RUBYGEMS: Ruby gems hosted at RubyGems.org.
const SecurityAdvisoryEcosystem_RUBYGEMS SecurityAdvisoryEcosystem = "RUBYGEMS"

// SecurityAdvisoryEcosystem_RUST: Rust crates.
const SecurityAdvisoryEcosystem_RUST SecurityAdvisoryEcosystem = "RUST"

// SecurityAdvisoryEcosystem_SWIFT: Swift packages.
const SecurityAdvisoryEcosystem_SWIFT SecurityAdvisoryEcosystem = "SWIFT"

// SecurityAdvisoryEdge (OBJECT): An edge in a connection.
type SecurityAdvisoryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SecurityAdvisory `json:"node,omitempty"`
}

func (x *SecurityAdvisoryEdge) GetCursor() string          { return x.Cursor }
func (x *SecurityAdvisoryEdge) GetNode() *SecurityAdvisory { return x.Node }

// SecurityAdvisoryIdentifier (OBJECT): A GitHub Security Advisory Identifier.
type SecurityAdvisoryIdentifier struct {
	// Type: The identifier type, e.g. GHSA, CVE.
	Type string `json:"type,omitempty"`

	// Value: The identifier.
	Value string `json:"value,omitempty"`
}

func (x *SecurityAdvisoryIdentifier) GetType() string  { return x.Type }
func (x *SecurityAdvisoryIdentifier) GetValue() string { return x.Value }

// SecurityAdvisoryIdentifierFilter (INPUT_OBJECT): An advisory identifier to filter results on.
type SecurityAdvisoryIdentifierFilter struct {
	// Type: The identifier type.
	//
	// GraphQL type: SecurityAdvisoryIdentifierType!
	Type SecurityAdvisoryIdentifierType `json:"type,omitempty"`

	// Value: The identifier string. Supports exact or partial matching.
	//
	// GraphQL type: String!
	Value string `json:"value,omitempty"`
}

// SecurityAdvisoryIdentifierType (ENUM): Identifier formats available for advisories.
type SecurityAdvisoryIdentifierType string

// SecurityAdvisoryIdentifierType_CVE: Common Vulnerabilities and Exposures Identifier.
const SecurityAdvisoryIdentifierType_CVE SecurityAdvisoryIdentifierType = "CVE"

// SecurityAdvisoryIdentifierType_GHSA: GitHub Security Advisory ID.
const SecurityAdvisoryIdentifierType_GHSA SecurityAdvisoryIdentifierType = "GHSA"

// SecurityAdvisoryOrder (INPUT_OBJECT): Ordering options for security advisory connections.
type SecurityAdvisoryOrder struct {
	// Field: The field to order security advisories by.
	//
	// GraphQL type: SecurityAdvisoryOrderField!
	Field SecurityAdvisoryOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SecurityAdvisoryOrderField (ENUM): Properties by which security advisory connections can be ordered.
type SecurityAdvisoryOrderField string

// SecurityAdvisoryOrderField_PUBLISHED_AT: Order advisories by publication time.
const SecurityAdvisoryOrderField_PUBLISHED_AT SecurityAdvisoryOrderField = "PUBLISHED_AT"

// SecurityAdvisoryOrderField_UPDATED_AT: Order advisories by update time.
const SecurityAdvisoryOrderField_UPDATED_AT SecurityAdvisoryOrderField = "UPDATED_AT"

// SecurityAdvisoryOrderField_EPSS_PERCENTAGE: Order advisories by EPSS percentage.
const SecurityAdvisoryOrderField_EPSS_PERCENTAGE SecurityAdvisoryOrderField = "EPSS_PERCENTAGE"

// SecurityAdvisoryOrderField_EPSS_PERCENTILE: Order advisories by EPSS percentile.
const SecurityAdvisoryOrderField_EPSS_PERCENTILE SecurityAdvisoryOrderField = "EPSS_PERCENTILE"

// SecurityAdvisoryPackage (OBJECT): An individual package.
type SecurityAdvisoryPackage struct {
	// Ecosystem: The ecosystem the package belongs to, e.g. RUBYGEMS, NPM.
	Ecosystem SecurityAdvisoryEcosystem `json:"ecosystem,omitempty"`

	// Name: The package name.
	Name string `json:"name,omitempty"`
}

func (x *SecurityAdvisoryPackage) GetEcosystem() SecurityAdvisoryEcosystem { return x.Ecosystem }
func (x *SecurityAdvisoryPackage) GetName() string                         { return x.Name }

// SecurityAdvisoryPackageVersion (OBJECT): An individual package version.
type SecurityAdvisoryPackageVersion struct {
	// Identifier: The package name or version.
	Identifier string `json:"identifier,omitempty"`
}

func (x *SecurityAdvisoryPackageVersion) GetIdentifier() string { return x.Identifier }

// SecurityAdvisoryReference (OBJECT): A GitHub Security Advisory Reference.
type SecurityAdvisoryReference struct {
	// Url: A publicly accessible reference.
	Url URI `json:"url,omitempty"`
}

func (x *SecurityAdvisoryReference) GetUrl() URI { return x.Url }

// SecurityAdvisorySeverity (ENUM): Severity of the vulnerability.
type SecurityAdvisorySeverity string

// SecurityAdvisorySeverity_LOW: Low.
const SecurityAdvisorySeverity_LOW SecurityAdvisorySeverity = "LOW"

// SecurityAdvisorySeverity_MODERATE: Moderate.
const SecurityAdvisorySeverity_MODERATE SecurityAdvisorySeverity = "MODERATE"

// SecurityAdvisorySeverity_HIGH: High.
const SecurityAdvisorySeverity_HIGH SecurityAdvisorySeverity = "HIGH"

// SecurityAdvisorySeverity_CRITICAL: Critical.
const SecurityAdvisorySeverity_CRITICAL SecurityAdvisorySeverity = "CRITICAL"

// SecurityVulnerability (OBJECT): An individual vulnerability within an Advisory.
type SecurityVulnerability struct {
	// Advisory: The Advisory associated with this Vulnerability.
	Advisory *SecurityAdvisory `json:"advisory,omitempty"`

	// FirstPatchedVersion: The first version containing a fix for the vulnerability.
	FirstPatchedVersion *SecurityAdvisoryPackageVersion `json:"firstPatchedVersion,omitempty"`

	// Package: A description of the vulnerable package.
	Package *SecurityAdvisoryPackage `json:"package,omitempty"`

	// Severity: The severity of the vulnerability within this package.
	Severity SecurityAdvisorySeverity `json:"severity,omitempty"`

	// UpdatedAt: When the vulnerability was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// VulnerableVersionRange: A string that describes the vulnerable package versions.
	// This string follows a basic syntax with a few forms.
	// + `= 0.2.0` denotes a single vulnerable version.
	// + `<= 1.0.8` denotes a version range up to and including the specified version
	// + `< 0.1.11` denotes a version range up to, but excluding, the specified version
	// + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
	// + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
	// .
	VulnerableVersionRange string `json:"vulnerableVersionRange,omitempty"`
}

func (x *SecurityVulnerability) GetAdvisory() *SecurityAdvisory { return x.Advisory }
func (x *SecurityVulnerability) GetFirstPatchedVersion() *SecurityAdvisoryPackageVersion {
	return x.FirstPatchedVersion
}
func (x *SecurityVulnerability) GetPackage() *SecurityAdvisoryPackage  { return x.Package }
func (x *SecurityVulnerability) GetSeverity() SecurityAdvisorySeverity { return x.Severity }
func (x *SecurityVulnerability) GetUpdatedAt() DateTime                { return x.UpdatedAt }
func (x *SecurityVulnerability) GetVulnerableVersionRange() string     { return x.VulnerableVersionRange }

// SecurityVulnerabilityConnection (OBJECT): The connection type for SecurityVulnerability.
type SecurityVulnerabilityConnection struct {
	// Edges: A list of edges.
	Edges []*SecurityVulnerabilityEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SecurityVulnerability `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SecurityVulnerabilityConnection) GetEdges() []*SecurityVulnerabilityEdge { return x.Edges }
func (x *SecurityVulnerabilityConnection) GetNodes() []*SecurityVulnerability     { return x.Nodes }
func (x *SecurityVulnerabilityConnection) GetPageInfo() *PageInfo                 { return x.PageInfo }
func (x *SecurityVulnerabilityConnection) GetTotalCount() int                     { return x.TotalCount }

// SecurityVulnerabilityEdge (OBJECT): An edge in a connection.
type SecurityVulnerabilityEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SecurityVulnerability `json:"node,omitempty"`
}

func (x *SecurityVulnerabilityEdge) GetCursor() string               { return x.Cursor }
func (x *SecurityVulnerabilityEdge) GetNode() *SecurityVulnerability { return x.Node }

// SecurityVulnerabilityOrder (INPUT_OBJECT): Ordering options for security vulnerability connections.
type SecurityVulnerabilityOrder struct {
	// Field: The field to order security vulnerabilities by.
	//
	// GraphQL type: SecurityVulnerabilityOrderField!
	Field SecurityVulnerabilityOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SecurityVulnerabilityOrderField (ENUM): Properties by which security vulnerability connections can be ordered.
type SecurityVulnerabilityOrderField string

// SecurityVulnerabilityOrderField_UPDATED_AT: Order vulnerability by update time.
const SecurityVulnerabilityOrderField_UPDATED_AT SecurityVulnerabilityOrderField = "UPDATED_AT"

// SetEnterpriseIdentityProviderInput (INPUT_OBJECT): Autogenerated input type of SetEnterpriseIdentityProvider.
type SetEnterpriseIdentityProviderInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set an identity provider.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SsoUrl: The URL endpoint for the identity provider's SAML SSO.
	//
	// GraphQL type: URI!
	SsoUrl URI `json:"ssoUrl,omitempty"`

	// Issuer: The Issuer Entity ID for the SAML identity provider.
	//
	// GraphQL type: String
	Issuer string `json:"issuer,omitempty"`

	// IdpCertificate: The x509 certificate used by the identity provider to sign assertions and responses.
	//
	// GraphQL type: String!
	IdpCertificate string `json:"idpCertificate,omitempty"`

	// SignatureMethod: The signature algorithm used to sign SAML requests for the identity provider.
	//
	// GraphQL type: SamlSignatureAlgorithm!
	SignatureMethod SamlSignatureAlgorithm `json:"signatureMethod,omitempty"`

	// DigestMethod: The digest algorithm used to sign SAML requests for the identity provider.
	//
	// GraphQL type: SamlDigestAlgorithm!
	DigestMethod SamlDigestAlgorithm `json:"digestMethod,omitempty"`
}

// SetEnterpriseIdentityProviderPayload (OBJECT): Autogenerated return type of SetEnterpriseIdentityProvider.
type SetEnterpriseIdentityProviderPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IdentityProvider: The identity provider for the enterprise.
	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
}

func (x *SetEnterpriseIdentityProviderPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *SetEnterpriseIdentityProviderPayload) GetIdentityProvider() *EnterpriseIdentityProvider {
	return x.IdentityProvider
}

// SetOrganizationInteractionLimitInput (INPUT_OBJECT): Autogenerated input type of SetOrganizationInteractionLimit.
type SetOrganizationInteractionLimitInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: The ID of the organization to set a limit for.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// Limit: The limit to set.
	//
	// GraphQL type: RepositoryInteractionLimit!
	Limit RepositoryInteractionLimit `json:"limit,omitempty"`

	// Expiry: When this limit should expire.
	//
	// GraphQL type: RepositoryInteractionLimitExpiry
	Expiry RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
}

// SetOrganizationInteractionLimitPayload (OBJECT): Autogenerated return type of SetOrganizationInteractionLimit.
type SetOrganizationInteractionLimitPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Organization: The organization that the interaction limit was set for.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *SetOrganizationInteractionLimitPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *SetOrganizationInteractionLimitPayload) GetOrganization() *Organization {
	return x.Organization
}

// SetRepositoryInteractionLimitInput (INPUT_OBJECT): Autogenerated input type of SetRepositoryInteractionLimit.
type SetRepositoryInteractionLimitInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The ID of the repository to set a limit for.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Limit: The limit to set.
	//
	// GraphQL type: RepositoryInteractionLimit!
	Limit RepositoryInteractionLimit `json:"limit,omitempty"`

	// Expiry: When this limit should expire.
	//
	// GraphQL type: RepositoryInteractionLimitExpiry
	Expiry RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
}

// SetRepositoryInteractionLimitPayload (OBJECT): Autogenerated return type of SetRepositoryInteractionLimit.
type SetRepositoryInteractionLimitPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository that the interaction limit was set for.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *SetRepositoryInteractionLimitPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *SetRepositoryInteractionLimitPayload) GetRepository() *Repository { return x.Repository }

// SetUserInteractionLimitInput (INPUT_OBJECT): Autogenerated input type of SetUserInteractionLimit.
type SetUserInteractionLimitInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// UserId: The ID of the user to set a limit for.
	//
	// GraphQL type: ID!
	UserId ID `json:"userId,omitempty"`

	// Limit: The limit to set.
	//
	// GraphQL type: RepositoryInteractionLimit!
	Limit RepositoryInteractionLimit `json:"limit,omitempty"`

	// Expiry: When this limit should expire.
	//
	// GraphQL type: RepositoryInteractionLimitExpiry
	Expiry RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
}

// SetUserInteractionLimitPayload (OBJECT): Autogenerated return type of SetUserInteractionLimit.
type SetUserInteractionLimitPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// User: The user that the interaction limit was set for.
	User *User `json:"user,omitempty"`
}

func (x *SetUserInteractionLimitPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *SetUserInteractionLimitPayload) GetUser() *User              { return x.User }

// SmimeSignature (OBJECT): Represents an S/MIME signature on a Commit or Tag.
type SmimeSignature struct {
	// Email: Email used to sign this object.
	Email string `json:"email,omitempty"`

	// IsValid: True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid,omitempty"`

	// Payload: Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload,omitempty"`

	// Signature: ASCII-armored signature header from object.
	Signature string `json:"signature,omitempty"`

	// Signer: GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`

	// State: The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state,omitempty"`

	// VerifiedAt: The date the signature was verified, if valid.
	VerifiedAt DateTime `json:"verifiedAt,omitempty"`

	// WasSignedByGitHub: True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub,omitempty"`
}

func (x *SmimeSignature) GetEmail() string            { return x.Email }
func (x *SmimeSignature) GetIsValid() bool            { return x.IsValid }
func (x *SmimeSignature) GetPayload() string          { return x.Payload }
func (x *SmimeSignature) GetSignature() string        { return x.Signature }
func (x *SmimeSignature) GetSigner() *User            { return x.Signer }
func (x *SmimeSignature) GetState() GitSignatureState { return x.State }
func (x *SmimeSignature) GetVerifiedAt() DateTime     { return x.VerifiedAt }
func (x *SmimeSignature) GetWasSignedByGitHub() bool  { return x.WasSignedByGitHub }

// SocialAccount (OBJECT): Social media profile associated with a user.
type SocialAccount struct {
	// DisplayName: Name of the social media account as it appears on the profile.
	DisplayName string `json:"displayName,omitempty"`

	// Provider: Software or company that hosts the social media account.
	Provider SocialAccountProvider `json:"provider,omitempty"`

	// Url: URL of the social media account.
	Url URI `json:"url,omitempty"`
}

func (x *SocialAccount) GetDisplayName() string             { return x.DisplayName }
func (x *SocialAccount) GetProvider() SocialAccountProvider { return x.Provider }
func (x *SocialAccount) GetUrl() URI                        { return x.Url }

// SocialAccountConnection (OBJECT): The connection type for SocialAccount.
type SocialAccountConnection struct {
	// Edges: A list of edges.
	Edges []*SocialAccountEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SocialAccount `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SocialAccountConnection) GetEdges() []*SocialAccountEdge { return x.Edges }
func (x *SocialAccountConnection) GetNodes() []*SocialAccount     { return x.Nodes }
func (x *SocialAccountConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *SocialAccountConnection) GetTotalCount() int             { return x.TotalCount }

// SocialAccountEdge (OBJECT): An edge in a connection.
type SocialAccountEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SocialAccount `json:"node,omitempty"`
}

func (x *SocialAccountEdge) GetCursor() string       { return x.Cursor }
func (x *SocialAccountEdge) GetNode() *SocialAccount { return x.Node }

// SocialAccountProvider (ENUM): Software or company that hosts social media accounts.
type SocialAccountProvider string

// SocialAccountProvider_GENERIC: Catch-all for social media providers that do not yet have specific handling.
const SocialAccountProvider_GENERIC SocialAccountProvider = "GENERIC"

// SocialAccountProvider_FACEBOOK: Social media and networking website.
const SocialAccountProvider_FACEBOOK SocialAccountProvider = "FACEBOOK"

// SocialAccountProvider_HOMETOWN: Fork of Mastodon with a greater focus on local posting.
const SocialAccountProvider_HOMETOWN SocialAccountProvider = "HOMETOWN"

// SocialAccountProvider_INSTAGRAM: Social media website with a focus on photo and video sharing.
const SocialAccountProvider_INSTAGRAM SocialAccountProvider = "INSTAGRAM"

// SocialAccountProvider_LINKEDIN: Professional networking website.
const SocialAccountProvider_LINKEDIN SocialAccountProvider = "LINKEDIN"

// SocialAccountProvider_MASTODON: Open-source federated microblogging service.
const SocialAccountProvider_MASTODON SocialAccountProvider = "MASTODON"

// SocialAccountProvider_REDDIT: Social news aggregation and discussion website.
const SocialAccountProvider_REDDIT SocialAccountProvider = "REDDIT"

// SocialAccountProvider_TWITCH: Live-streaming service.
const SocialAccountProvider_TWITCH SocialAccountProvider = "TWITCH"

// SocialAccountProvider_TWITTER: Microblogging website.
const SocialAccountProvider_TWITTER SocialAccountProvider = "TWITTER"

// SocialAccountProvider_YOUTUBE: Online video platform.
const SocialAccountProvider_YOUTUBE SocialAccountProvider = "YOUTUBE"

// SocialAccountProvider_BLUESKY: Decentralized microblogging social platform.
const SocialAccountProvider_BLUESKY SocialAccountProvider = "BLUESKY"

// SocialAccountProvider_NPM: JavaScript package registry.
const SocialAccountProvider_NPM SocialAccountProvider = "NPM"

// Sponsor (UNION): Entities that can sponsor others via GitHub Sponsors.
// Sponsor_Interface: Entities that can sponsor others via GitHub Sponsors.
//
// Possible types:
//
//   - *Organization
//   - *User
type Sponsor_Interface interface {
	isSponsor()
}

func (*Organization) isSponsor() {}
func (*User) isSponsor()         {}

type Sponsor struct {
	Interface Sponsor_Interface
}

func (x *Sponsor) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Sponsor) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Sponsor", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// SponsorAndLifetimeValue (OBJECT): A GitHub account and the total amount in USD they've paid for sponsorships to a particular maintainer. Does not include payments made via Patreon.
type SponsorAndLifetimeValue struct {
	// AmountInCents: The amount in cents.
	AmountInCents int `json:"amountInCents,omitempty"`

	// FormattedAmount: The amount in USD, formatted as a string.
	FormattedAmount string `json:"formattedAmount,omitempty"`

	// Sponsor: The sponsor's GitHub account.
	Sponsor Sponsorable `json:"sponsor,omitempty"`

	// Sponsorable: The maintainer's GitHub account.
	Sponsorable Sponsorable `json:"sponsorable,omitempty"`
}

func (x *SponsorAndLifetimeValue) GetAmountInCents() int       { return x.AmountInCents }
func (x *SponsorAndLifetimeValue) GetFormattedAmount() string  { return x.FormattedAmount }
func (x *SponsorAndLifetimeValue) GetSponsor() Sponsorable     { return x.Sponsor }
func (x *SponsorAndLifetimeValue) GetSponsorable() Sponsorable { return x.Sponsorable }

// SponsorAndLifetimeValueConnection (OBJECT): The connection type for SponsorAndLifetimeValue.
type SponsorAndLifetimeValueConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorAndLifetimeValueEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SponsorAndLifetimeValue `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SponsorAndLifetimeValueConnection) GetEdges() []*SponsorAndLifetimeValueEdge { return x.Edges }
func (x *SponsorAndLifetimeValueConnection) GetNodes() []*SponsorAndLifetimeValue     { return x.Nodes }
func (x *SponsorAndLifetimeValueConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *SponsorAndLifetimeValueConnection) GetTotalCount() int                       { return x.TotalCount }

// SponsorAndLifetimeValueEdge (OBJECT): An edge in a connection.
type SponsorAndLifetimeValueEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SponsorAndLifetimeValue `json:"node,omitempty"`
}

func (x *SponsorAndLifetimeValueEdge) GetCursor() string                 { return x.Cursor }
func (x *SponsorAndLifetimeValueEdge) GetNode() *SponsorAndLifetimeValue { return x.Node }

// SponsorAndLifetimeValueOrder (INPUT_OBJECT): Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
type SponsorAndLifetimeValueOrder struct {
	// Field: The field to order results by.
	//
	// GraphQL type: SponsorAndLifetimeValueOrderField!
	Field SponsorAndLifetimeValueOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorAndLifetimeValueOrderField (ENUM): Properties by which sponsor and lifetime value connections can be ordered.
type SponsorAndLifetimeValueOrderField string

// SponsorAndLifetimeValueOrderField_SPONSOR_LOGIN: Order results by the sponsor's login (username).
const SponsorAndLifetimeValueOrderField_SPONSOR_LOGIN SponsorAndLifetimeValueOrderField = "SPONSOR_LOGIN"

// SponsorAndLifetimeValueOrderField_SPONSOR_RELEVANCE: Order results by the sponsor's relevance to the viewer.
const SponsorAndLifetimeValueOrderField_SPONSOR_RELEVANCE SponsorAndLifetimeValueOrderField = "SPONSOR_RELEVANCE"

// SponsorAndLifetimeValueOrderField_LIFETIME_VALUE: Order results by how much money the sponsor has paid in total.
const SponsorAndLifetimeValueOrderField_LIFETIME_VALUE SponsorAndLifetimeValueOrderField = "LIFETIME_VALUE"

// SponsorConnection (OBJECT): A list of users and organizations sponsoring someone via GitHub Sponsors.
type SponsorConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []Sponsor `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SponsorConnection) GetEdges() []*SponsorEdge { return x.Edges }
func (x *SponsorConnection) GetNodes() []Sponsor      { return x.Nodes }
func (x *SponsorConnection) GetPageInfo() *PageInfo   { return x.PageInfo }
func (x *SponsorConnection) GetTotalCount() int       { return x.TotalCount }

// SponsorEdge (OBJECT): Represents a user or organization who is sponsoring someone in GitHub Sponsors.
type SponsorEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node Sponsor `json:"node,omitempty"`
}

func (x *SponsorEdge) GetCursor() string { return x.Cursor }
func (x *SponsorEdge) GetNode() Sponsor  { return x.Node }

// SponsorOrder (INPUT_OBJECT): Ordering options for connections to get sponsor entities for GitHub Sponsors.
type SponsorOrder struct {
	// Field: The field to order sponsor entities by.
	//
	// GraphQL type: SponsorOrderField!
	Field SponsorOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorOrderField (ENUM): Properties by which sponsor connections can be ordered.
type SponsorOrderField string

// SponsorOrderField_LOGIN: Order sponsorable entities by login (username).
const SponsorOrderField_LOGIN SponsorOrderField = "LOGIN"

// SponsorOrderField_RELEVANCE: Order sponsors by their relevance to the viewer.
const SponsorOrderField_RELEVANCE SponsorOrderField = "RELEVANCE"

// Sponsorable (INTERFACE): Entities that can sponsor or be sponsored through GitHub Sponsors.
// Sponsorable_Interface: Entities that can sponsor or be sponsored through GitHub Sponsors.
//
// Possible types:
//
//   - *Organization
//   - *User
type Sponsorable_Interface interface {
	isSponsorable()
	GetEstimatedNextSponsorsPayoutInCents() int
	GetHasSponsorsListing() bool
	GetIsSponsoredBy() bool
	GetIsSponsoringViewer() bool
	GetLifetimeReceivedSponsorshipValues() *SponsorAndLifetimeValueConnection
	GetMonthlyEstimatedSponsorsIncomeInCents() int
	GetSponsoring() *SponsorConnection
	GetSponsors() *SponsorConnection
	GetSponsorsActivities() *SponsorsActivityConnection
	GetSponsorsListing() *SponsorsListing
	GetSponsorshipForViewerAsSponsor() *Sponsorship
	GetSponsorshipForViewerAsSponsorable() *Sponsorship
	GetSponsorshipNewsletters() *SponsorshipNewsletterConnection
	GetSponsorshipsAsMaintainer() *SponsorshipConnection
	GetSponsorshipsAsSponsor() *SponsorshipConnection
	GetTotalSponsorshipAmountAsSponsorInCents() int
	GetViewerCanSponsor() bool
	GetViewerIsSponsoring() bool
}

func (*Organization) isSponsorable() {}
func (*User) isSponsorable()         {}

type Sponsorable struct {
	Interface Sponsorable_Interface
}

func (x *Sponsorable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Sponsorable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Sponsorable", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// SponsorableItem (UNION): Entities that can be sponsored via GitHub Sponsors.
// SponsorableItem_Interface: Entities that can be sponsored via GitHub Sponsors.
//
// Possible types:
//
//   - *Organization
//   - *User
type SponsorableItem_Interface interface {
	isSponsorableItem()
}

func (*Organization) isSponsorableItem() {}
func (*User) isSponsorableItem()         {}

type SponsorableItem struct {
	Interface SponsorableItem_Interface
}

func (x *SponsorableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *SponsorableItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for SponsorableItem", info.Typename)
	case "Organization":
		x.Interface = new(Organization)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// SponsorableItemConnection (OBJECT): The connection type for SponsorableItem.
type SponsorableItemConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorableItemEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []SponsorableItem `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SponsorableItemConnection) GetEdges() []*SponsorableItemEdge { return x.Edges }
func (x *SponsorableItemConnection) GetNodes() []SponsorableItem      { return x.Nodes }
func (x *SponsorableItemConnection) GetPageInfo() *PageInfo           { return x.PageInfo }
func (x *SponsorableItemConnection) GetTotalCount() int               { return x.TotalCount }

// SponsorableItemEdge (OBJECT): An edge in a connection.
type SponsorableItemEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node SponsorableItem `json:"node,omitempty"`
}

func (x *SponsorableItemEdge) GetCursor() string        { return x.Cursor }
func (x *SponsorableItemEdge) GetNode() SponsorableItem { return x.Node }

// SponsorableOrder (INPUT_OBJECT): Ordering options for connections to get sponsorable entities for GitHub Sponsors.
type SponsorableOrder struct {
	// Field: The field to order sponsorable entities by.
	//
	// GraphQL type: SponsorableOrderField!
	Field SponsorableOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorableOrderField (ENUM): Properties by which sponsorable connections can be ordered.
type SponsorableOrderField string

// SponsorableOrderField_LOGIN: Order sponsorable entities by login (username).
const SponsorableOrderField_LOGIN SponsorableOrderField = "LOGIN"

// SponsorsActivity (OBJECT): An event related to sponsorship activity.
type SponsorsActivity struct {
	// Action: What action this activity indicates took place.
	Action SponsorsActivityAction `json:"action,omitempty"`

	// CurrentPrivacyLevel: The sponsor's current privacy level.
	CurrentPrivacyLevel SponsorshipPrivacy `json:"currentPrivacyLevel,omitempty"`

	// Id: The Node ID of the SponsorsActivity object.
	Id ID `json:"id,omitempty"`

	// PaymentSource: The platform that was used to pay for the sponsorship.
	PaymentSource SponsorshipPaymentSource `json:"paymentSource,omitempty"`

	// PreviousSponsorsTier: The tier that the sponsorship used to use, for tier change events.
	PreviousSponsorsTier *SponsorsTier `json:"previousSponsorsTier,omitempty"`

	// Sponsor: The user or organization who triggered this activity and was/is sponsoring the sponsorable.
	Sponsor Sponsor `json:"sponsor,omitempty"`

	// Sponsorable: The user or organization that is being sponsored, the maintainer.
	Sponsorable Sponsorable `json:"sponsorable,omitempty"`

	// SponsorsTier: The associated sponsorship tier.
	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`

	// Timestamp: The timestamp of this event.
	Timestamp DateTime `json:"timestamp,omitempty"`

	// ViaBulkSponsorship: Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?.
	ViaBulkSponsorship bool `json:"viaBulkSponsorship,omitempty"`
}

func (x *SponsorsActivity) GetAction() SponsorsActivityAction          { return x.Action }
func (x *SponsorsActivity) GetCurrentPrivacyLevel() SponsorshipPrivacy { return x.CurrentPrivacyLevel }
func (x *SponsorsActivity) GetId() ID                                  { return x.Id }
func (x *SponsorsActivity) GetPaymentSource() SponsorshipPaymentSource { return x.PaymentSource }
func (x *SponsorsActivity) GetPreviousSponsorsTier() *SponsorsTier     { return x.PreviousSponsorsTier }
func (x *SponsorsActivity) GetSponsor() Sponsor                        { return x.Sponsor }
func (x *SponsorsActivity) GetSponsorable() Sponsorable                { return x.Sponsorable }
func (x *SponsorsActivity) GetSponsorsTier() *SponsorsTier             { return x.SponsorsTier }
func (x *SponsorsActivity) GetTimestamp() DateTime                     { return x.Timestamp }
func (x *SponsorsActivity) GetViaBulkSponsorship() bool                { return x.ViaBulkSponsorship }

// SponsorsActivityAction (ENUM): The possible actions that GitHub Sponsors activities can represent.
type SponsorsActivityAction string

// SponsorsActivityAction_NEW_SPONSORSHIP: The activity was starting a sponsorship.
const SponsorsActivityAction_NEW_SPONSORSHIP SponsorsActivityAction = "NEW_SPONSORSHIP"

// SponsorsActivityAction_CANCELLED_SPONSORSHIP: The activity was cancelling a sponsorship.
const SponsorsActivityAction_CANCELLED_SPONSORSHIP SponsorsActivityAction = "CANCELLED_SPONSORSHIP"

// SponsorsActivityAction_TIER_CHANGE: The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
const SponsorsActivityAction_TIER_CHANGE SponsorsActivityAction = "TIER_CHANGE"

// SponsorsActivityAction_REFUND: The activity was funds being refunded to the sponsor or GitHub.
const SponsorsActivityAction_REFUND SponsorsActivityAction = "REFUND"

// SponsorsActivityAction_PENDING_CHANGE: The activity was scheduling a downgrade or cancellation.
const SponsorsActivityAction_PENDING_CHANGE SponsorsActivityAction = "PENDING_CHANGE"

// SponsorsActivityAction_SPONSOR_MATCH_DISABLED: The activity was disabling matching for a previously matched sponsorship.
const SponsorsActivityAction_SPONSOR_MATCH_DISABLED SponsorsActivityAction = "SPONSOR_MATCH_DISABLED"

// SponsorsActivityConnection (OBJECT): The connection type for SponsorsActivity.
type SponsorsActivityConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorsActivityEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SponsorsActivity `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SponsorsActivityConnection) GetEdges() []*SponsorsActivityEdge { return x.Edges }
func (x *SponsorsActivityConnection) GetNodes() []*SponsorsActivity     { return x.Nodes }
func (x *SponsorsActivityConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *SponsorsActivityConnection) GetTotalCount() int                { return x.TotalCount }

// SponsorsActivityEdge (OBJECT): An edge in a connection.
type SponsorsActivityEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SponsorsActivity `json:"node,omitempty"`
}

func (x *SponsorsActivityEdge) GetCursor() string          { return x.Cursor }
func (x *SponsorsActivityEdge) GetNode() *SponsorsActivity { return x.Node }

// SponsorsActivityOrder (INPUT_OBJECT): Ordering options for GitHub Sponsors activity connections.
type SponsorsActivityOrder struct {
	// Field: The field to order activity by.
	//
	// GraphQL type: SponsorsActivityOrderField!
	Field SponsorsActivityOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorsActivityOrderField (ENUM): Properties by which GitHub Sponsors activity connections can be ordered.
type SponsorsActivityOrderField string

// SponsorsActivityOrderField_TIMESTAMP: Order activities by when they happened.
const SponsorsActivityOrderField_TIMESTAMP SponsorsActivityOrderField = "TIMESTAMP"

// SponsorsActivityPeriod (ENUM): The possible time periods for which Sponsors activities can be requested.
type SponsorsActivityPeriod string

// SponsorsActivityPeriod_DAY: The previous calendar day.
const SponsorsActivityPeriod_DAY SponsorsActivityPeriod = "DAY"

// SponsorsActivityPeriod_WEEK: The previous seven days.
const SponsorsActivityPeriod_WEEK SponsorsActivityPeriod = "WEEK"

// SponsorsActivityPeriod_MONTH: The previous thirty days.
const SponsorsActivityPeriod_MONTH SponsorsActivityPeriod = "MONTH"

// SponsorsActivityPeriod_ALL: Don't restrict the activity to any date range, include all activity.
const SponsorsActivityPeriod_ALL SponsorsActivityPeriod = "ALL"

// SponsorsCountryOrRegionCode (ENUM): Represents countries or regions for billing and residence for a GitHub Sponsors profile.
type SponsorsCountryOrRegionCode string

// SponsorsCountryOrRegionCode_AF: Afghanistan.
const SponsorsCountryOrRegionCode_AF SponsorsCountryOrRegionCode = "AF"

// SponsorsCountryOrRegionCode_AX: Åland.
const SponsorsCountryOrRegionCode_AX SponsorsCountryOrRegionCode = "AX"

// SponsorsCountryOrRegionCode_AL: Albania.
const SponsorsCountryOrRegionCode_AL SponsorsCountryOrRegionCode = "AL"

// SponsorsCountryOrRegionCode_DZ: Algeria.
const SponsorsCountryOrRegionCode_DZ SponsorsCountryOrRegionCode = "DZ"

// SponsorsCountryOrRegionCode_AS: American Samoa.
const SponsorsCountryOrRegionCode_AS SponsorsCountryOrRegionCode = "AS"

// SponsorsCountryOrRegionCode_AD: Andorra.
const SponsorsCountryOrRegionCode_AD SponsorsCountryOrRegionCode = "AD"

// SponsorsCountryOrRegionCode_AO: Angola.
const SponsorsCountryOrRegionCode_AO SponsorsCountryOrRegionCode = "AO"

// SponsorsCountryOrRegionCode_AI: Anguilla.
const SponsorsCountryOrRegionCode_AI SponsorsCountryOrRegionCode = "AI"

// SponsorsCountryOrRegionCode_AQ: Antarctica.
const SponsorsCountryOrRegionCode_AQ SponsorsCountryOrRegionCode = "AQ"

// SponsorsCountryOrRegionCode_AG: Antigua and Barbuda.
const SponsorsCountryOrRegionCode_AG SponsorsCountryOrRegionCode = "AG"

// SponsorsCountryOrRegionCode_AR: Argentina.
const SponsorsCountryOrRegionCode_AR SponsorsCountryOrRegionCode = "AR"

// SponsorsCountryOrRegionCode_AM: Armenia.
const SponsorsCountryOrRegionCode_AM SponsorsCountryOrRegionCode = "AM"

// SponsorsCountryOrRegionCode_AW: Aruba.
const SponsorsCountryOrRegionCode_AW SponsorsCountryOrRegionCode = "AW"

// SponsorsCountryOrRegionCode_AU: Australia.
const SponsorsCountryOrRegionCode_AU SponsorsCountryOrRegionCode = "AU"

// SponsorsCountryOrRegionCode_AT: Austria.
const SponsorsCountryOrRegionCode_AT SponsorsCountryOrRegionCode = "AT"

// SponsorsCountryOrRegionCode_AZ: Azerbaijan.
const SponsorsCountryOrRegionCode_AZ SponsorsCountryOrRegionCode = "AZ"

// SponsorsCountryOrRegionCode_BS: Bahamas.
const SponsorsCountryOrRegionCode_BS SponsorsCountryOrRegionCode = "BS"

// SponsorsCountryOrRegionCode_BH: Bahrain.
const SponsorsCountryOrRegionCode_BH SponsorsCountryOrRegionCode = "BH"

// SponsorsCountryOrRegionCode_BD: Bangladesh.
const SponsorsCountryOrRegionCode_BD SponsorsCountryOrRegionCode = "BD"

// SponsorsCountryOrRegionCode_BB: Barbados.
const SponsorsCountryOrRegionCode_BB SponsorsCountryOrRegionCode = "BB"

// SponsorsCountryOrRegionCode_BY: Belarus.
const SponsorsCountryOrRegionCode_BY SponsorsCountryOrRegionCode = "BY"

// SponsorsCountryOrRegionCode_BE: Belgium.
const SponsorsCountryOrRegionCode_BE SponsorsCountryOrRegionCode = "BE"

// SponsorsCountryOrRegionCode_BZ: Belize.
const SponsorsCountryOrRegionCode_BZ SponsorsCountryOrRegionCode = "BZ"

// SponsorsCountryOrRegionCode_BJ: Benin.
const SponsorsCountryOrRegionCode_BJ SponsorsCountryOrRegionCode = "BJ"

// SponsorsCountryOrRegionCode_BM: Bermuda.
const SponsorsCountryOrRegionCode_BM SponsorsCountryOrRegionCode = "BM"

// SponsorsCountryOrRegionCode_BT: Bhutan.
const SponsorsCountryOrRegionCode_BT SponsorsCountryOrRegionCode = "BT"

// SponsorsCountryOrRegionCode_BO: Bolivia.
const SponsorsCountryOrRegionCode_BO SponsorsCountryOrRegionCode = "BO"

// SponsorsCountryOrRegionCode_BQ: Bonaire, Sint Eustatius and Saba.
const SponsorsCountryOrRegionCode_BQ SponsorsCountryOrRegionCode = "BQ"

// SponsorsCountryOrRegionCode_BA: Bosnia and Herzegovina.
const SponsorsCountryOrRegionCode_BA SponsorsCountryOrRegionCode = "BA"

// SponsorsCountryOrRegionCode_BW: Botswana.
const SponsorsCountryOrRegionCode_BW SponsorsCountryOrRegionCode = "BW"

// SponsorsCountryOrRegionCode_BV: Bouvet Island.
const SponsorsCountryOrRegionCode_BV SponsorsCountryOrRegionCode = "BV"

// SponsorsCountryOrRegionCode_BR: Brazil.
const SponsorsCountryOrRegionCode_BR SponsorsCountryOrRegionCode = "BR"

// SponsorsCountryOrRegionCode_IO: British Indian Ocean Territory.
const SponsorsCountryOrRegionCode_IO SponsorsCountryOrRegionCode = "IO"

// SponsorsCountryOrRegionCode_BN: Brunei Darussalam.
const SponsorsCountryOrRegionCode_BN SponsorsCountryOrRegionCode = "BN"

// SponsorsCountryOrRegionCode_BG: Bulgaria.
const SponsorsCountryOrRegionCode_BG SponsorsCountryOrRegionCode = "BG"

// SponsorsCountryOrRegionCode_BF: Burkina Faso.
const SponsorsCountryOrRegionCode_BF SponsorsCountryOrRegionCode = "BF"

// SponsorsCountryOrRegionCode_BI: Burundi.
const SponsorsCountryOrRegionCode_BI SponsorsCountryOrRegionCode = "BI"

// SponsorsCountryOrRegionCode_KH: Cambodia.
const SponsorsCountryOrRegionCode_KH SponsorsCountryOrRegionCode = "KH"

// SponsorsCountryOrRegionCode_CM: Cameroon.
const SponsorsCountryOrRegionCode_CM SponsorsCountryOrRegionCode = "CM"

// SponsorsCountryOrRegionCode_CA: Canada.
const SponsorsCountryOrRegionCode_CA SponsorsCountryOrRegionCode = "CA"

// SponsorsCountryOrRegionCode_CV: Cape Verde.
const SponsorsCountryOrRegionCode_CV SponsorsCountryOrRegionCode = "CV"

// SponsorsCountryOrRegionCode_KY: Cayman Islands.
const SponsorsCountryOrRegionCode_KY SponsorsCountryOrRegionCode = "KY"

// SponsorsCountryOrRegionCode_CF: Central African Republic.
const SponsorsCountryOrRegionCode_CF SponsorsCountryOrRegionCode = "CF"

// SponsorsCountryOrRegionCode_TD: Chad.
const SponsorsCountryOrRegionCode_TD SponsorsCountryOrRegionCode = "TD"

// SponsorsCountryOrRegionCode_CL: Chile.
const SponsorsCountryOrRegionCode_CL SponsorsCountryOrRegionCode = "CL"

// SponsorsCountryOrRegionCode_CN: China.
const SponsorsCountryOrRegionCode_CN SponsorsCountryOrRegionCode = "CN"

// SponsorsCountryOrRegionCode_CX: Christmas Island.
const SponsorsCountryOrRegionCode_CX SponsorsCountryOrRegionCode = "CX"

// SponsorsCountryOrRegionCode_CC: Cocos (Keeling) Islands.
const SponsorsCountryOrRegionCode_CC SponsorsCountryOrRegionCode = "CC"

// SponsorsCountryOrRegionCode_CO: Colombia.
const SponsorsCountryOrRegionCode_CO SponsorsCountryOrRegionCode = "CO"

// SponsorsCountryOrRegionCode_KM: Comoros.
const SponsorsCountryOrRegionCode_KM SponsorsCountryOrRegionCode = "KM"

// SponsorsCountryOrRegionCode_CG: Congo (Brazzaville).
const SponsorsCountryOrRegionCode_CG SponsorsCountryOrRegionCode = "CG"

// SponsorsCountryOrRegionCode_CD: Congo (Kinshasa).
const SponsorsCountryOrRegionCode_CD SponsorsCountryOrRegionCode = "CD"

// SponsorsCountryOrRegionCode_CK: Cook Islands.
const SponsorsCountryOrRegionCode_CK SponsorsCountryOrRegionCode = "CK"

// SponsorsCountryOrRegionCode_CR: Costa Rica.
const SponsorsCountryOrRegionCode_CR SponsorsCountryOrRegionCode = "CR"

// SponsorsCountryOrRegionCode_CI: Côte d'Ivoire.
const SponsorsCountryOrRegionCode_CI SponsorsCountryOrRegionCode = "CI"

// SponsorsCountryOrRegionCode_HR: Croatia.
const SponsorsCountryOrRegionCode_HR SponsorsCountryOrRegionCode = "HR"

// SponsorsCountryOrRegionCode_CW: Curaçao.
const SponsorsCountryOrRegionCode_CW SponsorsCountryOrRegionCode = "CW"

// SponsorsCountryOrRegionCode_CY: Cyprus.
const SponsorsCountryOrRegionCode_CY SponsorsCountryOrRegionCode = "CY"

// SponsorsCountryOrRegionCode_CZ: Czech Republic.
const SponsorsCountryOrRegionCode_CZ SponsorsCountryOrRegionCode = "CZ"

// SponsorsCountryOrRegionCode_DK: Denmark.
const SponsorsCountryOrRegionCode_DK SponsorsCountryOrRegionCode = "DK"

// SponsorsCountryOrRegionCode_DJ: Djibouti.
const SponsorsCountryOrRegionCode_DJ SponsorsCountryOrRegionCode = "DJ"

// SponsorsCountryOrRegionCode_DM: Dominica.
const SponsorsCountryOrRegionCode_DM SponsorsCountryOrRegionCode = "DM"

// SponsorsCountryOrRegionCode_DO: Dominican Republic.
const SponsorsCountryOrRegionCode_DO SponsorsCountryOrRegionCode = "DO"

// SponsorsCountryOrRegionCode_EC: Ecuador.
const SponsorsCountryOrRegionCode_EC SponsorsCountryOrRegionCode = "EC"

// SponsorsCountryOrRegionCode_EG: Egypt.
const SponsorsCountryOrRegionCode_EG SponsorsCountryOrRegionCode = "EG"

// SponsorsCountryOrRegionCode_SV: El Salvador.
const SponsorsCountryOrRegionCode_SV SponsorsCountryOrRegionCode = "SV"

// SponsorsCountryOrRegionCode_GQ: Equatorial Guinea.
const SponsorsCountryOrRegionCode_GQ SponsorsCountryOrRegionCode = "GQ"

// SponsorsCountryOrRegionCode_ER: Eritrea.
const SponsorsCountryOrRegionCode_ER SponsorsCountryOrRegionCode = "ER"

// SponsorsCountryOrRegionCode_EE: Estonia.
const SponsorsCountryOrRegionCode_EE SponsorsCountryOrRegionCode = "EE"

// SponsorsCountryOrRegionCode_ET: Ethiopia.
const SponsorsCountryOrRegionCode_ET SponsorsCountryOrRegionCode = "ET"

// SponsorsCountryOrRegionCode_FK: Falkland Islands.
const SponsorsCountryOrRegionCode_FK SponsorsCountryOrRegionCode = "FK"

// SponsorsCountryOrRegionCode_FO: Faroe Islands.
const SponsorsCountryOrRegionCode_FO SponsorsCountryOrRegionCode = "FO"

// SponsorsCountryOrRegionCode_FJ: Fiji.
const SponsorsCountryOrRegionCode_FJ SponsorsCountryOrRegionCode = "FJ"

// SponsorsCountryOrRegionCode_FI: Finland.
const SponsorsCountryOrRegionCode_FI SponsorsCountryOrRegionCode = "FI"

// SponsorsCountryOrRegionCode_FR: France.
const SponsorsCountryOrRegionCode_FR SponsorsCountryOrRegionCode = "FR"

// SponsorsCountryOrRegionCode_GF: French Guiana.
const SponsorsCountryOrRegionCode_GF SponsorsCountryOrRegionCode = "GF"

// SponsorsCountryOrRegionCode_PF: French Polynesia.
const SponsorsCountryOrRegionCode_PF SponsorsCountryOrRegionCode = "PF"

// SponsorsCountryOrRegionCode_TF: French Southern Lands.
const SponsorsCountryOrRegionCode_TF SponsorsCountryOrRegionCode = "TF"

// SponsorsCountryOrRegionCode_GA: Gabon.
const SponsorsCountryOrRegionCode_GA SponsorsCountryOrRegionCode = "GA"

// SponsorsCountryOrRegionCode_GM: Gambia.
const SponsorsCountryOrRegionCode_GM SponsorsCountryOrRegionCode = "GM"

// SponsorsCountryOrRegionCode_GE: Georgia.
const SponsorsCountryOrRegionCode_GE SponsorsCountryOrRegionCode = "GE"

// SponsorsCountryOrRegionCode_DE: Germany.
const SponsorsCountryOrRegionCode_DE SponsorsCountryOrRegionCode = "DE"

// SponsorsCountryOrRegionCode_GH: Ghana.
const SponsorsCountryOrRegionCode_GH SponsorsCountryOrRegionCode = "GH"

// SponsorsCountryOrRegionCode_GI: Gibraltar.
const SponsorsCountryOrRegionCode_GI SponsorsCountryOrRegionCode = "GI"

// SponsorsCountryOrRegionCode_GR: Greece.
const SponsorsCountryOrRegionCode_GR SponsorsCountryOrRegionCode = "GR"

// SponsorsCountryOrRegionCode_GL: Greenland.
const SponsorsCountryOrRegionCode_GL SponsorsCountryOrRegionCode = "GL"

// SponsorsCountryOrRegionCode_GD: Grenada.
const SponsorsCountryOrRegionCode_GD SponsorsCountryOrRegionCode = "GD"

// SponsorsCountryOrRegionCode_GP: Guadeloupe.
const SponsorsCountryOrRegionCode_GP SponsorsCountryOrRegionCode = "GP"

// SponsorsCountryOrRegionCode_GU: Guam.
const SponsorsCountryOrRegionCode_GU SponsorsCountryOrRegionCode = "GU"

// SponsorsCountryOrRegionCode_GT: Guatemala.
const SponsorsCountryOrRegionCode_GT SponsorsCountryOrRegionCode = "GT"

// SponsorsCountryOrRegionCode_GG: Guernsey.
const SponsorsCountryOrRegionCode_GG SponsorsCountryOrRegionCode = "GG"

// SponsorsCountryOrRegionCode_GN: Guinea.
const SponsorsCountryOrRegionCode_GN SponsorsCountryOrRegionCode = "GN"

// SponsorsCountryOrRegionCode_GW: Guinea-Bissau.
const SponsorsCountryOrRegionCode_GW SponsorsCountryOrRegionCode = "GW"

// SponsorsCountryOrRegionCode_GY: Guyana.
const SponsorsCountryOrRegionCode_GY SponsorsCountryOrRegionCode = "GY"

// SponsorsCountryOrRegionCode_HT: Haiti.
const SponsorsCountryOrRegionCode_HT SponsorsCountryOrRegionCode = "HT"

// SponsorsCountryOrRegionCode_HM: Heard and McDonald Islands.
const SponsorsCountryOrRegionCode_HM SponsorsCountryOrRegionCode = "HM"

// SponsorsCountryOrRegionCode_HN: Honduras.
const SponsorsCountryOrRegionCode_HN SponsorsCountryOrRegionCode = "HN"

// SponsorsCountryOrRegionCode_HK: Hong Kong.
const SponsorsCountryOrRegionCode_HK SponsorsCountryOrRegionCode = "HK"

// SponsorsCountryOrRegionCode_HU: Hungary.
const SponsorsCountryOrRegionCode_HU SponsorsCountryOrRegionCode = "HU"

// SponsorsCountryOrRegionCode_IS: Iceland.
const SponsorsCountryOrRegionCode_IS SponsorsCountryOrRegionCode = "IS"

// SponsorsCountryOrRegionCode_IN: India.
const SponsorsCountryOrRegionCode_IN SponsorsCountryOrRegionCode = "IN"

// SponsorsCountryOrRegionCode_ID: Indonesia.
const SponsorsCountryOrRegionCode_ID SponsorsCountryOrRegionCode = "ID"

// SponsorsCountryOrRegionCode_IR: Iran.
const SponsorsCountryOrRegionCode_IR SponsorsCountryOrRegionCode = "IR"

// SponsorsCountryOrRegionCode_IQ: Iraq.
const SponsorsCountryOrRegionCode_IQ SponsorsCountryOrRegionCode = "IQ"

// SponsorsCountryOrRegionCode_IE: Ireland.
const SponsorsCountryOrRegionCode_IE SponsorsCountryOrRegionCode = "IE"

// SponsorsCountryOrRegionCode_IM: Isle of Man.
const SponsorsCountryOrRegionCode_IM SponsorsCountryOrRegionCode = "IM"

// SponsorsCountryOrRegionCode_IL: Israel.
const SponsorsCountryOrRegionCode_IL SponsorsCountryOrRegionCode = "IL"

// SponsorsCountryOrRegionCode_IT: Italy.
const SponsorsCountryOrRegionCode_IT SponsorsCountryOrRegionCode = "IT"

// SponsorsCountryOrRegionCode_JM: Jamaica.
const SponsorsCountryOrRegionCode_JM SponsorsCountryOrRegionCode = "JM"

// SponsorsCountryOrRegionCode_JP: Japan.
const SponsorsCountryOrRegionCode_JP SponsorsCountryOrRegionCode = "JP"

// SponsorsCountryOrRegionCode_JE: Jersey.
const SponsorsCountryOrRegionCode_JE SponsorsCountryOrRegionCode = "JE"

// SponsorsCountryOrRegionCode_JO: Jordan.
const SponsorsCountryOrRegionCode_JO SponsorsCountryOrRegionCode = "JO"

// SponsorsCountryOrRegionCode_KZ: Kazakhstan.
const SponsorsCountryOrRegionCode_KZ SponsorsCountryOrRegionCode = "KZ"

// SponsorsCountryOrRegionCode_KE: Kenya.
const SponsorsCountryOrRegionCode_KE SponsorsCountryOrRegionCode = "KE"

// SponsorsCountryOrRegionCode_KI: Kiribati.
const SponsorsCountryOrRegionCode_KI SponsorsCountryOrRegionCode = "KI"

// SponsorsCountryOrRegionCode_KR: Korea, South.
const SponsorsCountryOrRegionCode_KR SponsorsCountryOrRegionCode = "KR"

// SponsorsCountryOrRegionCode_KW: Kuwait.
const SponsorsCountryOrRegionCode_KW SponsorsCountryOrRegionCode = "KW"

// SponsorsCountryOrRegionCode_KG: Kyrgyzstan.
const SponsorsCountryOrRegionCode_KG SponsorsCountryOrRegionCode = "KG"

// SponsorsCountryOrRegionCode_LA: Laos.
const SponsorsCountryOrRegionCode_LA SponsorsCountryOrRegionCode = "LA"

// SponsorsCountryOrRegionCode_LV: Latvia.
const SponsorsCountryOrRegionCode_LV SponsorsCountryOrRegionCode = "LV"

// SponsorsCountryOrRegionCode_LB: Lebanon.
const SponsorsCountryOrRegionCode_LB SponsorsCountryOrRegionCode = "LB"

// SponsorsCountryOrRegionCode_LS: Lesotho.
const SponsorsCountryOrRegionCode_LS SponsorsCountryOrRegionCode = "LS"

// SponsorsCountryOrRegionCode_LR: Liberia.
const SponsorsCountryOrRegionCode_LR SponsorsCountryOrRegionCode = "LR"

// SponsorsCountryOrRegionCode_LY: Libya.
const SponsorsCountryOrRegionCode_LY SponsorsCountryOrRegionCode = "LY"

// SponsorsCountryOrRegionCode_LI: Liechtenstein.
const SponsorsCountryOrRegionCode_LI SponsorsCountryOrRegionCode = "LI"

// SponsorsCountryOrRegionCode_LT: Lithuania.
const SponsorsCountryOrRegionCode_LT SponsorsCountryOrRegionCode = "LT"

// SponsorsCountryOrRegionCode_LU: Luxembourg.
const SponsorsCountryOrRegionCode_LU SponsorsCountryOrRegionCode = "LU"

// SponsorsCountryOrRegionCode_MO: Macau.
const SponsorsCountryOrRegionCode_MO SponsorsCountryOrRegionCode = "MO"

// SponsorsCountryOrRegionCode_MK: Macedonia.
const SponsorsCountryOrRegionCode_MK SponsorsCountryOrRegionCode = "MK"

// SponsorsCountryOrRegionCode_MG: Madagascar.
const SponsorsCountryOrRegionCode_MG SponsorsCountryOrRegionCode = "MG"

// SponsorsCountryOrRegionCode_MW: Malawi.
const SponsorsCountryOrRegionCode_MW SponsorsCountryOrRegionCode = "MW"

// SponsorsCountryOrRegionCode_MY: Malaysia.
const SponsorsCountryOrRegionCode_MY SponsorsCountryOrRegionCode = "MY"

// SponsorsCountryOrRegionCode_MV: Maldives.
const SponsorsCountryOrRegionCode_MV SponsorsCountryOrRegionCode = "MV"

// SponsorsCountryOrRegionCode_ML: Mali.
const SponsorsCountryOrRegionCode_ML SponsorsCountryOrRegionCode = "ML"

// SponsorsCountryOrRegionCode_MT: Malta.
const SponsorsCountryOrRegionCode_MT SponsorsCountryOrRegionCode = "MT"

// SponsorsCountryOrRegionCode_MH: Marshall Islands.
const SponsorsCountryOrRegionCode_MH SponsorsCountryOrRegionCode = "MH"

// SponsorsCountryOrRegionCode_MQ: Martinique.
const SponsorsCountryOrRegionCode_MQ SponsorsCountryOrRegionCode = "MQ"

// SponsorsCountryOrRegionCode_MR: Mauritania.
const SponsorsCountryOrRegionCode_MR SponsorsCountryOrRegionCode = "MR"

// SponsorsCountryOrRegionCode_MU: Mauritius.
const SponsorsCountryOrRegionCode_MU SponsorsCountryOrRegionCode = "MU"

// SponsorsCountryOrRegionCode_YT: Mayotte.
const SponsorsCountryOrRegionCode_YT SponsorsCountryOrRegionCode = "YT"

// SponsorsCountryOrRegionCode_MX: Mexico.
const SponsorsCountryOrRegionCode_MX SponsorsCountryOrRegionCode = "MX"

// SponsorsCountryOrRegionCode_FM: Micronesia.
const SponsorsCountryOrRegionCode_FM SponsorsCountryOrRegionCode = "FM"

// SponsorsCountryOrRegionCode_MD: Moldova.
const SponsorsCountryOrRegionCode_MD SponsorsCountryOrRegionCode = "MD"

// SponsorsCountryOrRegionCode_MC: Monaco.
const SponsorsCountryOrRegionCode_MC SponsorsCountryOrRegionCode = "MC"

// SponsorsCountryOrRegionCode_MN: Mongolia.
const SponsorsCountryOrRegionCode_MN SponsorsCountryOrRegionCode = "MN"

// SponsorsCountryOrRegionCode_ME: Montenegro.
const SponsorsCountryOrRegionCode_ME SponsorsCountryOrRegionCode = "ME"

// SponsorsCountryOrRegionCode_MS: Montserrat.
const SponsorsCountryOrRegionCode_MS SponsorsCountryOrRegionCode = "MS"

// SponsorsCountryOrRegionCode_MA: Morocco.
const SponsorsCountryOrRegionCode_MA SponsorsCountryOrRegionCode = "MA"

// SponsorsCountryOrRegionCode_MZ: Mozambique.
const SponsorsCountryOrRegionCode_MZ SponsorsCountryOrRegionCode = "MZ"

// SponsorsCountryOrRegionCode_MM: Myanmar.
const SponsorsCountryOrRegionCode_MM SponsorsCountryOrRegionCode = "MM"

// SponsorsCountryOrRegionCode_NA: Namibia.
const SponsorsCountryOrRegionCode_NA SponsorsCountryOrRegionCode = "NA"

// SponsorsCountryOrRegionCode_NR: Nauru.
const SponsorsCountryOrRegionCode_NR SponsorsCountryOrRegionCode = "NR"

// SponsorsCountryOrRegionCode_NP: Nepal.
const SponsorsCountryOrRegionCode_NP SponsorsCountryOrRegionCode = "NP"

// SponsorsCountryOrRegionCode_NL: Netherlands.
const SponsorsCountryOrRegionCode_NL SponsorsCountryOrRegionCode = "NL"

// SponsorsCountryOrRegionCode_NC: New Caledonia.
const SponsorsCountryOrRegionCode_NC SponsorsCountryOrRegionCode = "NC"

// SponsorsCountryOrRegionCode_NZ: New Zealand.
const SponsorsCountryOrRegionCode_NZ SponsorsCountryOrRegionCode = "NZ"

// SponsorsCountryOrRegionCode_NI: Nicaragua.
const SponsorsCountryOrRegionCode_NI SponsorsCountryOrRegionCode = "NI"

// SponsorsCountryOrRegionCode_NE: Niger.
const SponsorsCountryOrRegionCode_NE SponsorsCountryOrRegionCode = "NE"

// SponsorsCountryOrRegionCode_NG: Nigeria.
const SponsorsCountryOrRegionCode_NG SponsorsCountryOrRegionCode = "NG"

// SponsorsCountryOrRegionCode_NU: Niue.
const SponsorsCountryOrRegionCode_NU SponsorsCountryOrRegionCode = "NU"

// SponsorsCountryOrRegionCode_NF: Norfolk Island.
const SponsorsCountryOrRegionCode_NF SponsorsCountryOrRegionCode = "NF"

// SponsorsCountryOrRegionCode_MP: Northern Mariana Islands.
const SponsorsCountryOrRegionCode_MP SponsorsCountryOrRegionCode = "MP"

// SponsorsCountryOrRegionCode_NO: Norway.
const SponsorsCountryOrRegionCode_NO SponsorsCountryOrRegionCode = "NO"

// SponsorsCountryOrRegionCode_OM: Oman.
const SponsorsCountryOrRegionCode_OM SponsorsCountryOrRegionCode = "OM"

// SponsorsCountryOrRegionCode_PK: Pakistan.
const SponsorsCountryOrRegionCode_PK SponsorsCountryOrRegionCode = "PK"

// SponsorsCountryOrRegionCode_PW: Palau.
const SponsorsCountryOrRegionCode_PW SponsorsCountryOrRegionCode = "PW"

// SponsorsCountryOrRegionCode_PS: Palestine.
const SponsorsCountryOrRegionCode_PS SponsorsCountryOrRegionCode = "PS"

// SponsorsCountryOrRegionCode_PA: Panama.
const SponsorsCountryOrRegionCode_PA SponsorsCountryOrRegionCode = "PA"

// SponsorsCountryOrRegionCode_PG: Papua New Guinea.
const SponsorsCountryOrRegionCode_PG SponsorsCountryOrRegionCode = "PG"

// SponsorsCountryOrRegionCode_PY: Paraguay.
const SponsorsCountryOrRegionCode_PY SponsorsCountryOrRegionCode = "PY"

// SponsorsCountryOrRegionCode_PE: Peru.
const SponsorsCountryOrRegionCode_PE SponsorsCountryOrRegionCode = "PE"

// SponsorsCountryOrRegionCode_PH: Philippines.
const SponsorsCountryOrRegionCode_PH SponsorsCountryOrRegionCode = "PH"

// SponsorsCountryOrRegionCode_PN: Pitcairn.
const SponsorsCountryOrRegionCode_PN SponsorsCountryOrRegionCode = "PN"

// SponsorsCountryOrRegionCode_PL: Poland.
const SponsorsCountryOrRegionCode_PL SponsorsCountryOrRegionCode = "PL"

// SponsorsCountryOrRegionCode_PT: Portugal.
const SponsorsCountryOrRegionCode_PT SponsorsCountryOrRegionCode = "PT"

// SponsorsCountryOrRegionCode_PR: Puerto Rico.
const SponsorsCountryOrRegionCode_PR SponsorsCountryOrRegionCode = "PR"

// SponsorsCountryOrRegionCode_QA: Qatar.
const SponsorsCountryOrRegionCode_QA SponsorsCountryOrRegionCode = "QA"

// SponsorsCountryOrRegionCode_RE: Reunion.
const SponsorsCountryOrRegionCode_RE SponsorsCountryOrRegionCode = "RE"

// SponsorsCountryOrRegionCode_RO: Romania.
const SponsorsCountryOrRegionCode_RO SponsorsCountryOrRegionCode = "RO"

// SponsorsCountryOrRegionCode_RU: Russian Federation.
const SponsorsCountryOrRegionCode_RU SponsorsCountryOrRegionCode = "RU"

// SponsorsCountryOrRegionCode_RW: Rwanda.
const SponsorsCountryOrRegionCode_RW SponsorsCountryOrRegionCode = "RW"

// SponsorsCountryOrRegionCode_BL: Saint Barthélemy.
const SponsorsCountryOrRegionCode_BL SponsorsCountryOrRegionCode = "BL"

// SponsorsCountryOrRegionCode_SH: Saint Helena.
const SponsorsCountryOrRegionCode_SH SponsorsCountryOrRegionCode = "SH"

// SponsorsCountryOrRegionCode_KN: Saint Kitts and Nevis.
const SponsorsCountryOrRegionCode_KN SponsorsCountryOrRegionCode = "KN"

// SponsorsCountryOrRegionCode_LC: Saint Lucia.
const SponsorsCountryOrRegionCode_LC SponsorsCountryOrRegionCode = "LC"

// SponsorsCountryOrRegionCode_MF: Saint Martin (French part).
const SponsorsCountryOrRegionCode_MF SponsorsCountryOrRegionCode = "MF"

// SponsorsCountryOrRegionCode_PM: Saint Pierre and Miquelon.
const SponsorsCountryOrRegionCode_PM SponsorsCountryOrRegionCode = "PM"

// SponsorsCountryOrRegionCode_VC: Saint Vincent and the Grenadines.
const SponsorsCountryOrRegionCode_VC SponsorsCountryOrRegionCode = "VC"

// SponsorsCountryOrRegionCode_WS: Samoa.
const SponsorsCountryOrRegionCode_WS SponsorsCountryOrRegionCode = "WS"

// SponsorsCountryOrRegionCode_SM: San Marino.
const SponsorsCountryOrRegionCode_SM SponsorsCountryOrRegionCode = "SM"

// SponsorsCountryOrRegionCode_ST: Sao Tome and Principe.
const SponsorsCountryOrRegionCode_ST SponsorsCountryOrRegionCode = "ST"

// SponsorsCountryOrRegionCode_SA: Saudi Arabia.
const SponsorsCountryOrRegionCode_SA SponsorsCountryOrRegionCode = "SA"

// SponsorsCountryOrRegionCode_SN: Senegal.
const SponsorsCountryOrRegionCode_SN SponsorsCountryOrRegionCode = "SN"

// SponsorsCountryOrRegionCode_RS: Serbia.
const SponsorsCountryOrRegionCode_RS SponsorsCountryOrRegionCode = "RS"

// SponsorsCountryOrRegionCode_SC: Seychelles.
const SponsorsCountryOrRegionCode_SC SponsorsCountryOrRegionCode = "SC"

// SponsorsCountryOrRegionCode_SL: Sierra Leone.
const SponsorsCountryOrRegionCode_SL SponsorsCountryOrRegionCode = "SL"

// SponsorsCountryOrRegionCode_SG: Singapore.
const SponsorsCountryOrRegionCode_SG SponsorsCountryOrRegionCode = "SG"

// SponsorsCountryOrRegionCode_SX: Sint Maarten (Dutch part).
const SponsorsCountryOrRegionCode_SX SponsorsCountryOrRegionCode = "SX"

// SponsorsCountryOrRegionCode_SK: Slovakia.
const SponsorsCountryOrRegionCode_SK SponsorsCountryOrRegionCode = "SK"

// SponsorsCountryOrRegionCode_SI: Slovenia.
const SponsorsCountryOrRegionCode_SI SponsorsCountryOrRegionCode = "SI"

// SponsorsCountryOrRegionCode_SB: Solomon Islands.
const SponsorsCountryOrRegionCode_SB SponsorsCountryOrRegionCode = "SB"

// SponsorsCountryOrRegionCode_SO: Somalia.
const SponsorsCountryOrRegionCode_SO SponsorsCountryOrRegionCode = "SO"

// SponsorsCountryOrRegionCode_ZA: South Africa.
const SponsorsCountryOrRegionCode_ZA SponsorsCountryOrRegionCode = "ZA"

// SponsorsCountryOrRegionCode_GS: South Georgia and South Sandwich Islands.
const SponsorsCountryOrRegionCode_GS SponsorsCountryOrRegionCode = "GS"

// SponsorsCountryOrRegionCode_SS: South Sudan.
const SponsorsCountryOrRegionCode_SS SponsorsCountryOrRegionCode = "SS"

// SponsorsCountryOrRegionCode_ES: Spain.
const SponsorsCountryOrRegionCode_ES SponsorsCountryOrRegionCode = "ES"

// SponsorsCountryOrRegionCode_LK: Sri Lanka.
const SponsorsCountryOrRegionCode_LK SponsorsCountryOrRegionCode = "LK"

// SponsorsCountryOrRegionCode_SD: Sudan.
const SponsorsCountryOrRegionCode_SD SponsorsCountryOrRegionCode = "SD"

// SponsorsCountryOrRegionCode_SR: Suriname.
const SponsorsCountryOrRegionCode_SR SponsorsCountryOrRegionCode = "SR"

// SponsorsCountryOrRegionCode_SJ: Svalbard and Jan Mayen Islands.
const SponsorsCountryOrRegionCode_SJ SponsorsCountryOrRegionCode = "SJ"

// SponsorsCountryOrRegionCode_SZ: Swaziland.
const SponsorsCountryOrRegionCode_SZ SponsorsCountryOrRegionCode = "SZ"

// SponsorsCountryOrRegionCode_SE: Sweden.
const SponsorsCountryOrRegionCode_SE SponsorsCountryOrRegionCode = "SE"

// SponsorsCountryOrRegionCode_CH: Switzerland.
const SponsorsCountryOrRegionCode_CH SponsorsCountryOrRegionCode = "CH"

// SponsorsCountryOrRegionCode_TW: Taiwan.
const SponsorsCountryOrRegionCode_TW SponsorsCountryOrRegionCode = "TW"

// SponsorsCountryOrRegionCode_TJ: Tajikistan.
const SponsorsCountryOrRegionCode_TJ SponsorsCountryOrRegionCode = "TJ"

// SponsorsCountryOrRegionCode_TZ: Tanzania.
const SponsorsCountryOrRegionCode_TZ SponsorsCountryOrRegionCode = "TZ"

// SponsorsCountryOrRegionCode_TH: Thailand.
const SponsorsCountryOrRegionCode_TH SponsorsCountryOrRegionCode = "TH"

// SponsorsCountryOrRegionCode_TL: Timor-Leste.
const SponsorsCountryOrRegionCode_TL SponsorsCountryOrRegionCode = "TL"

// SponsorsCountryOrRegionCode_TG: Togo.
const SponsorsCountryOrRegionCode_TG SponsorsCountryOrRegionCode = "TG"

// SponsorsCountryOrRegionCode_TK: Tokelau.
const SponsorsCountryOrRegionCode_TK SponsorsCountryOrRegionCode = "TK"

// SponsorsCountryOrRegionCode_TO: Tonga.
const SponsorsCountryOrRegionCode_TO SponsorsCountryOrRegionCode = "TO"

// SponsorsCountryOrRegionCode_TT: Trinidad and Tobago.
const SponsorsCountryOrRegionCode_TT SponsorsCountryOrRegionCode = "TT"

// SponsorsCountryOrRegionCode_TN: Tunisia.
const SponsorsCountryOrRegionCode_TN SponsorsCountryOrRegionCode = "TN"

// SponsorsCountryOrRegionCode_TR: Türkiye.
const SponsorsCountryOrRegionCode_TR SponsorsCountryOrRegionCode = "TR"

// SponsorsCountryOrRegionCode_TM: Turkmenistan.
const SponsorsCountryOrRegionCode_TM SponsorsCountryOrRegionCode = "TM"

// SponsorsCountryOrRegionCode_TC: Turks and Caicos Islands.
const SponsorsCountryOrRegionCode_TC SponsorsCountryOrRegionCode = "TC"

// SponsorsCountryOrRegionCode_TV: Tuvalu.
const SponsorsCountryOrRegionCode_TV SponsorsCountryOrRegionCode = "TV"

// SponsorsCountryOrRegionCode_UG: Uganda.
const SponsorsCountryOrRegionCode_UG SponsorsCountryOrRegionCode = "UG"

// SponsorsCountryOrRegionCode_UA: Ukraine.
const SponsorsCountryOrRegionCode_UA SponsorsCountryOrRegionCode = "UA"

// SponsorsCountryOrRegionCode_AE: United Arab Emirates.
const SponsorsCountryOrRegionCode_AE SponsorsCountryOrRegionCode = "AE"

// SponsorsCountryOrRegionCode_GB: United Kingdom.
const SponsorsCountryOrRegionCode_GB SponsorsCountryOrRegionCode = "GB"

// SponsorsCountryOrRegionCode_UM: United States Minor Outlying Islands.
const SponsorsCountryOrRegionCode_UM SponsorsCountryOrRegionCode = "UM"

// SponsorsCountryOrRegionCode_US: United States of America.
const SponsorsCountryOrRegionCode_US SponsorsCountryOrRegionCode = "US"

// SponsorsCountryOrRegionCode_UY: Uruguay.
const SponsorsCountryOrRegionCode_UY SponsorsCountryOrRegionCode = "UY"

// SponsorsCountryOrRegionCode_UZ: Uzbekistan.
const SponsorsCountryOrRegionCode_UZ SponsorsCountryOrRegionCode = "UZ"

// SponsorsCountryOrRegionCode_VU: Vanuatu.
const SponsorsCountryOrRegionCode_VU SponsorsCountryOrRegionCode = "VU"

// SponsorsCountryOrRegionCode_VA: Vatican City.
const SponsorsCountryOrRegionCode_VA SponsorsCountryOrRegionCode = "VA"

// SponsorsCountryOrRegionCode_VE: Venezuela.
const SponsorsCountryOrRegionCode_VE SponsorsCountryOrRegionCode = "VE"

// SponsorsCountryOrRegionCode_VN: Vietnam.
const SponsorsCountryOrRegionCode_VN SponsorsCountryOrRegionCode = "VN"

// SponsorsCountryOrRegionCode_VG: Virgin Islands, British.
const SponsorsCountryOrRegionCode_VG SponsorsCountryOrRegionCode = "VG"

// SponsorsCountryOrRegionCode_VI: Virgin Islands, U.S.
const SponsorsCountryOrRegionCode_VI SponsorsCountryOrRegionCode = "VI"

// SponsorsCountryOrRegionCode_WF: Wallis and Futuna Islands.
const SponsorsCountryOrRegionCode_WF SponsorsCountryOrRegionCode = "WF"

// SponsorsCountryOrRegionCode_EH: Western Sahara.
const SponsorsCountryOrRegionCode_EH SponsorsCountryOrRegionCode = "EH"

// SponsorsCountryOrRegionCode_YE: Yemen.
const SponsorsCountryOrRegionCode_YE SponsorsCountryOrRegionCode = "YE"

// SponsorsCountryOrRegionCode_ZM: Zambia.
const SponsorsCountryOrRegionCode_ZM SponsorsCountryOrRegionCode = "ZM"

// SponsorsCountryOrRegionCode_ZW: Zimbabwe.
const SponsorsCountryOrRegionCode_ZW SponsorsCountryOrRegionCode = "ZW"

// SponsorsGoal (OBJECT): A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
type SponsorsGoal struct {
	// Description: A description of the goal from the maintainer.
	Description string `json:"description,omitempty"`

	// Kind: What the objective of this goal is.
	Kind SponsorsGoalKind `json:"kind,omitempty"`

	// PercentComplete: The percentage representing how complete this goal is, between 0-100.
	PercentComplete int `json:"percentComplete,omitempty"`

	// TargetValue: What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
	TargetValue int `json:"targetValue,omitempty"`

	// Title: A brief summary of the kind and target value of this goal.
	Title string `json:"title,omitempty"`
}

func (x *SponsorsGoal) GetDescription() string    { return x.Description }
func (x *SponsorsGoal) GetKind() SponsorsGoalKind { return x.Kind }
func (x *SponsorsGoal) GetPercentComplete() int   { return x.PercentComplete }
func (x *SponsorsGoal) GetTargetValue() int       { return x.TargetValue }
func (x *SponsorsGoal) GetTitle() string          { return x.Title }

// SponsorsGoalKind (ENUM): The different kinds of goals a GitHub Sponsors member can have.
type SponsorsGoalKind string

// SponsorsGoalKind_TOTAL_SPONSORS_COUNT: The goal is about reaching a certain number of sponsors.
const SponsorsGoalKind_TOTAL_SPONSORS_COUNT SponsorsGoalKind = "TOTAL_SPONSORS_COUNT"

// SponsorsGoalKind_MONTHLY_SPONSORSHIP_AMOUNT: The goal is about getting a certain amount in USD from sponsorships each month.
const SponsorsGoalKind_MONTHLY_SPONSORSHIP_AMOUNT SponsorsGoalKind = "MONTHLY_SPONSORSHIP_AMOUNT"

// SponsorsListing (OBJECT): A GitHub Sponsors listing.
type SponsorsListing struct {
	// ActiveGoal: The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
	ActiveGoal *SponsorsGoal `json:"activeGoal,omitempty"`

	// ActiveStripeConnectAccount: The Stripe Connect account currently in use for payouts for this Sponsors listing, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	ActiveStripeConnectAccount *StripeConnectAccount `json:"activeStripeConnectAccount,omitempty"`

	// BillingCountryOrRegion: The name of the country or region with the maintainer's bank account or fiscal host. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	BillingCountryOrRegion string `json:"billingCountryOrRegion,omitempty"`

	// ContactEmailAddress: The email address used by GitHub to contact the sponsorable about their GitHub Sponsors profile. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	ContactEmailAddress string `json:"contactEmailAddress,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DashboardResourcePath: The HTTP path for the Sponsors dashboard for this Sponsors listing.
	DashboardResourcePath URI `json:"dashboardResourcePath,omitempty"`

	// DashboardUrl: The HTTP URL for the Sponsors dashboard for this Sponsors listing.
	DashboardUrl URI `json:"dashboardUrl,omitempty"`

	// FeaturedItems: The records featured on the GitHub Sponsors profile.
	//
	// Query arguments:
	//   - featureableTypes [SponsorsListingFeaturedItemFeatureableType!]
	FeaturedItems []*SponsorsListingFeaturedItem `json:"featuredItems,omitempty"`

	// FiscalHost: The fiscal host used for payments, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	FiscalHost *Organization `json:"fiscalHost,omitempty"`

	// FullDescription: The full description of the listing.
	FullDescription string `json:"fullDescription,omitempty"`

	// FullDescriptionHTML: The full description of the listing rendered to HTML.
	FullDescriptionHTML template.HTML `json:"fullDescriptionHTML,omitempty"`

	// Id: The Node ID of the SponsorsListing object.
	Id ID `json:"id,omitempty"`

	// IsPublic: Whether this listing is publicly visible.
	IsPublic bool `json:"isPublic,omitempty"`

	// Name: The listing's full name.
	Name string `json:"name,omitempty"`

	// NextPayoutDate: A future date on which this listing is eligible to receive a payout.
	NextPayoutDate Date `json:"nextPayoutDate,omitempty"`

	// ResidenceCountryOrRegion: The name of the country or region where the maintainer resides. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
	ResidenceCountryOrRegion string `json:"residenceCountryOrRegion,omitempty"`

	// ResourcePath: The HTTP path for this Sponsors listing.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// ShortDescription: The short description of the listing.
	ShortDescription string `json:"shortDescription,omitempty"`

	// Slug: The short name of the listing.
	Slug string `json:"slug,omitempty"`

	// Sponsorable: The entity this listing represents who can be sponsored on GitHub Sponsors.
	Sponsorable Sponsorable `json:"sponsorable,omitempty"`

	// Tiers: The tiers for this GitHub Sponsors profile.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorsTierOrder
	//   - includeUnpublished Boolean
	Tiers *SponsorsTierConnection `json:"tiers,omitempty"`

	// Url: The HTTP URL for this Sponsors listing.
	Url URI `json:"url,omitempty"`
}

func (x *SponsorsListing) GetActiveGoal() *SponsorsGoal { return x.ActiveGoal }
func (x *SponsorsListing) GetActiveStripeConnectAccount() *StripeConnectAccount {
	return x.ActiveStripeConnectAccount
}
func (x *SponsorsListing) GetBillingCountryOrRegion() string                { return x.BillingCountryOrRegion }
func (x *SponsorsListing) GetContactEmailAddress() string                   { return x.ContactEmailAddress }
func (x *SponsorsListing) GetCreatedAt() DateTime                           { return x.CreatedAt }
func (x *SponsorsListing) GetDashboardResourcePath() URI                    { return x.DashboardResourcePath }
func (x *SponsorsListing) GetDashboardUrl() URI                             { return x.DashboardUrl }
func (x *SponsorsListing) GetFeaturedItems() []*SponsorsListingFeaturedItem { return x.FeaturedItems }
func (x *SponsorsListing) GetFiscalHost() *Organization                     { return x.FiscalHost }
func (x *SponsorsListing) GetFullDescription() string                       { return x.FullDescription }
func (x *SponsorsListing) GetFullDescriptionHTML() template.HTML            { return x.FullDescriptionHTML }
func (x *SponsorsListing) GetId() ID                                        { return x.Id }
func (x *SponsorsListing) GetIsPublic() bool                                { return x.IsPublic }
func (x *SponsorsListing) GetName() string                                  { return x.Name }
func (x *SponsorsListing) GetNextPayoutDate() Date                          { return x.NextPayoutDate }
func (x *SponsorsListing) GetResidenceCountryOrRegion() string              { return x.ResidenceCountryOrRegion }
func (x *SponsorsListing) GetResourcePath() URI                             { return x.ResourcePath }
func (x *SponsorsListing) GetShortDescription() string                      { return x.ShortDescription }
func (x *SponsorsListing) GetSlug() string                                  { return x.Slug }
func (x *SponsorsListing) GetSponsorable() Sponsorable                      { return x.Sponsorable }
func (x *SponsorsListing) GetTiers() *SponsorsTierConnection                { return x.Tiers }
func (x *SponsorsListing) GetUrl() URI                                      { return x.Url }

// SponsorsListingFeatureableItem (UNION): A record that can be featured on a GitHub Sponsors profile.
// SponsorsListingFeatureableItem_Interface: A record that can be featured on a GitHub Sponsors profile.
//
// Possible types:
//
//   - *Repository
//   - *User
type SponsorsListingFeatureableItem_Interface interface {
	isSponsorsListingFeatureableItem()
}

func (*Repository) isSponsorsListingFeatureableItem() {}
func (*User) isSponsorsListingFeatureableItem()       {}

type SponsorsListingFeatureableItem struct {
	Interface SponsorsListingFeatureableItem_Interface
}

func (x *SponsorsListingFeatureableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *SponsorsListingFeatureableItem) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for SponsorsListingFeatureableItem", info.Typename)
	case "Repository":
		x.Interface = new(Repository)
	case "User":
		x.Interface = new(User)
	}
	return json.Unmarshal(js, x.Interface)
}

// SponsorsListingFeaturedItem (OBJECT): A record that is promoted on a GitHub Sponsors profile.
type SponsorsListingFeaturedItem struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Description: Will either be a description from the sponsorable maintainer about why they featured this item, or the item's description itself, such as a user's bio from their GitHub profile page.
	Description string `json:"description,omitempty"`

	// Featureable: The record that is featured on the GitHub Sponsors profile.
	Featureable SponsorsListingFeatureableItem `json:"featureable,omitempty"`

	// Id: The Node ID of the SponsorsListingFeaturedItem object.
	Id ID `json:"id,omitempty"`

	// Position: The position of this featured item on the GitHub Sponsors profile with a lower position indicating higher precedence. Starts at 1.
	Position int `json:"position,omitempty"`

	// SponsorsListing: The GitHub Sponsors profile that features this record.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *SponsorsListingFeaturedItem) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *SponsorsListingFeaturedItem) GetDescription() string { return x.Description }
func (x *SponsorsListingFeaturedItem) GetFeatureable() SponsorsListingFeatureableItem {
	return x.Featureable
}
func (x *SponsorsListingFeaturedItem) GetId() ID                            { return x.Id }
func (x *SponsorsListingFeaturedItem) GetPosition() int                     { return x.Position }
func (x *SponsorsListingFeaturedItem) GetSponsorsListing() *SponsorsListing { return x.SponsorsListing }
func (x *SponsorsListingFeaturedItem) GetUpdatedAt() DateTime               { return x.UpdatedAt }

// SponsorsListingFeaturedItemFeatureableType (ENUM): The different kinds of records that can be featured on a GitHub Sponsors profile page.
type SponsorsListingFeaturedItemFeatureableType string

// SponsorsListingFeaturedItemFeatureableType_REPOSITORY: A repository owned by the user or organization with the GitHub Sponsors profile.
const SponsorsListingFeaturedItemFeatureableType_REPOSITORY SponsorsListingFeaturedItemFeatureableType = "REPOSITORY"

// SponsorsListingFeaturedItemFeatureableType_USER: A user who belongs to the organization with the GitHub Sponsors profile.
const SponsorsListingFeaturedItemFeatureableType_USER SponsorsListingFeaturedItemFeatureableType = "USER"

// SponsorsTier (OBJECT): A GitHub Sponsors tier associated with a GitHub Sponsors listing.
type SponsorsTier struct {
	// AdminInfo: SponsorsTier information only visible to users that can administer the associated Sponsors listing.
	AdminInfo *SponsorsTierAdminInfo `json:"adminInfo,omitempty"`

	// ClosestLesserValueTier: Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
	ClosestLesserValueTier *SponsorsTier `json:"closestLesserValueTier,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Description: The description of the tier.
	Description string `json:"description,omitempty"`

	// DescriptionHTML: The tier description rendered to HTML.
	DescriptionHTML template.HTML `json:"descriptionHTML,omitempty"`

	// Id: The Node ID of the SponsorsTier object.
	Id ID `json:"id,omitempty"`

	// IsCustomAmount: Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
	IsCustomAmount bool `json:"isCustomAmount,omitempty"`

	// IsOneTime: Whether this tier is only for use with one-time sponsorships.
	IsOneTime bool `json:"isOneTime,omitempty"`

	// MonthlyPriceInCents: How much this tier costs per month in cents.
	MonthlyPriceInCents int `json:"monthlyPriceInCents,omitempty"`

	// MonthlyPriceInDollars: How much this tier costs per month in USD.
	MonthlyPriceInDollars int `json:"monthlyPriceInDollars,omitempty"`

	// Name: The name of the tier.
	Name string `json:"name,omitempty"`

	// SponsorsListing: The sponsors listing that this tier belongs to.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *SponsorsTier) GetAdminInfo() *SponsorsTierAdminInfo     { return x.AdminInfo }
func (x *SponsorsTier) GetClosestLesserValueTier() *SponsorsTier { return x.ClosestLesserValueTier }
func (x *SponsorsTier) GetCreatedAt() DateTime                   { return x.CreatedAt }
func (x *SponsorsTier) GetDescription() string                   { return x.Description }
func (x *SponsorsTier) GetDescriptionHTML() template.HTML        { return x.DescriptionHTML }
func (x *SponsorsTier) GetId() ID                                { return x.Id }
func (x *SponsorsTier) GetIsCustomAmount() bool                  { return x.IsCustomAmount }
func (x *SponsorsTier) GetIsOneTime() bool                       { return x.IsOneTime }
func (x *SponsorsTier) GetMonthlyPriceInCents() int              { return x.MonthlyPriceInCents }
func (x *SponsorsTier) GetMonthlyPriceInDollars() int            { return x.MonthlyPriceInDollars }
func (x *SponsorsTier) GetName() string                          { return x.Name }
func (x *SponsorsTier) GetSponsorsListing() *SponsorsListing     { return x.SponsorsListing }
func (x *SponsorsTier) GetUpdatedAt() DateTime                   { return x.UpdatedAt }

// SponsorsTierAdminInfo (OBJECT): SponsorsTier information only visible to users that can administer the associated Sponsors listing.
type SponsorsTierAdminInfo struct {
	// IsDraft: Indicates whether this tier is still a work in progress by the sponsorable and not yet published to the associated GitHub Sponsors profile. Draft tiers cannot be used for new sponsorships and will not be in use on existing sponsorships. Draft tiers cannot be seen by anyone but the admins of the GitHub Sponsors profile.
	IsDraft bool `json:"isDraft,omitempty"`

	// IsPublished: Indicates whether this tier is published to the associated GitHub Sponsors profile. Published tiers are visible to anyone who can see the GitHub Sponsors profile, and are available for use in sponsorships if the GitHub Sponsors profile is publicly visible.
	IsPublished bool `json:"isPublished,omitempty"`

	// IsRetired: Indicates whether this tier has been retired from the associated GitHub Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors profile and cannot be chosen for new sponsorships. Existing sponsorships may still use retired tiers if the sponsor selected the tier before it was retired.
	IsRetired bool `json:"isRetired,omitempty"`

	// Sponsorships: The sponsorships using this tier.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - includePrivate Boolean
	//   - orderBy SponsorshipOrder
	Sponsorships *SponsorshipConnection `json:"sponsorships,omitempty"`
}

func (x *SponsorsTierAdminInfo) GetIsDraft() bool                        { return x.IsDraft }
func (x *SponsorsTierAdminInfo) GetIsPublished() bool                    { return x.IsPublished }
func (x *SponsorsTierAdminInfo) GetIsRetired() bool                      { return x.IsRetired }
func (x *SponsorsTierAdminInfo) GetSponsorships() *SponsorshipConnection { return x.Sponsorships }

// SponsorsTierConnection (OBJECT): The connection type for SponsorsTier.
type SponsorsTierConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorsTierEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SponsorsTier `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SponsorsTierConnection) GetEdges() []*SponsorsTierEdge { return x.Edges }
func (x *SponsorsTierConnection) GetNodes() []*SponsorsTier     { return x.Nodes }
func (x *SponsorsTierConnection) GetPageInfo() *PageInfo        { return x.PageInfo }
func (x *SponsorsTierConnection) GetTotalCount() int            { return x.TotalCount }

// SponsorsTierEdge (OBJECT): An edge in a connection.
type SponsorsTierEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SponsorsTier `json:"node,omitempty"`
}

func (x *SponsorsTierEdge) GetCursor() string      { return x.Cursor }
func (x *SponsorsTierEdge) GetNode() *SponsorsTier { return x.Node }

// SponsorsTierOrder (INPUT_OBJECT): Ordering options for Sponsors tiers connections.
type SponsorsTierOrder struct {
	// Field: The field to order tiers by.
	//
	// GraphQL type: SponsorsTierOrderField!
	Field SponsorsTierOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorsTierOrderField (ENUM): Properties by which Sponsors tiers connections can be ordered.
type SponsorsTierOrderField string

// SponsorsTierOrderField_CREATED_AT: Order tiers by creation time.
const SponsorsTierOrderField_CREATED_AT SponsorsTierOrderField = "CREATED_AT"

// SponsorsTierOrderField_MONTHLY_PRICE_IN_CENTS: Order tiers by their monthly price in cents.
const SponsorsTierOrderField_MONTHLY_PRICE_IN_CENTS SponsorsTierOrderField = "MONTHLY_PRICE_IN_CENTS"

// Sponsorship (OBJECT): A sponsorship relationship between a sponsor and a maintainer.
type Sponsorship struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the Sponsorship object.
	Id ID `json:"id,omitempty"`

	// IsActive: Whether the sponsorship is active. False implies the sponsor is a past sponsor of the maintainer, while true implies they are a current sponsor.
	IsActive bool `json:"isActive,omitempty"`

	// IsOneTimePayment: Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
	IsOneTimePayment bool `json:"isOneTimePayment,omitempty"`

	// IsSponsorOptedIntoEmail: Whether the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this.
	IsSponsorOptedIntoEmail bool `json:"isSponsorOptedIntoEmail,omitempty"`

	// Maintainer: The entity that is being sponsored.
	//
	// Deprecated: The entity that is being sponsored.
	Maintainer *User `json:"maintainer,omitempty"`

	// PaymentSource: The platform that was most recently used to pay for the sponsorship.
	PaymentSource SponsorshipPaymentSource `json:"paymentSource,omitempty"`

	// PrivacyLevel: The privacy level for this sponsorship.
	PrivacyLevel SponsorshipPrivacy `json:"privacyLevel,omitempty"`

	// Sponsor: The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
	//
	// Deprecated: The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
	Sponsor *User `json:"sponsor,omitempty"`

	// SponsorEntity: The user or organization that is sponsoring, if you have permission to view them.
	SponsorEntity Sponsor `json:"sponsorEntity,omitempty"`

	// Sponsorable: The entity that is being sponsored.
	Sponsorable Sponsorable `json:"sponsorable,omitempty"`

	// Tier: The associated sponsorship tier.
	Tier *SponsorsTier `json:"tier,omitempty"`

	// TierSelectedAt: Identifies the date and time when the current tier was chosen for this sponsorship.
	TierSelectedAt DateTime `json:"tierSelectedAt,omitempty"`
}

func (x *Sponsorship) GetCreatedAt() DateTime                     { return x.CreatedAt }
func (x *Sponsorship) GetId() ID                                  { return x.Id }
func (x *Sponsorship) GetIsActive() bool                          { return x.IsActive }
func (x *Sponsorship) GetIsOneTimePayment() bool                  { return x.IsOneTimePayment }
func (x *Sponsorship) GetIsSponsorOptedIntoEmail() bool           { return x.IsSponsorOptedIntoEmail }
func (x *Sponsorship) GetMaintainer() *User                       { return x.Maintainer }
func (x *Sponsorship) GetPaymentSource() SponsorshipPaymentSource { return x.PaymentSource }
func (x *Sponsorship) GetPrivacyLevel() SponsorshipPrivacy        { return x.PrivacyLevel }
func (x *Sponsorship) GetSponsor() *User                          { return x.Sponsor }
func (x *Sponsorship) GetSponsorEntity() Sponsor                  { return x.SponsorEntity }
func (x *Sponsorship) GetSponsorable() Sponsorable                { return x.Sponsorable }
func (x *Sponsorship) GetTier() *SponsorsTier                     { return x.Tier }
func (x *Sponsorship) GetTierSelectedAt() DateTime                { return x.TierSelectedAt }

// SponsorshipConnection (OBJECT): A list of sponsorships either from the subject or received by the subject.
type SponsorshipConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorshipEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Sponsorship `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`

	// TotalRecurringMonthlyPriceInCents: The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
	TotalRecurringMonthlyPriceInCents int `json:"totalRecurringMonthlyPriceInCents,omitempty"`

	// TotalRecurringMonthlyPriceInDollars: The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
	TotalRecurringMonthlyPriceInDollars int `json:"totalRecurringMonthlyPriceInDollars,omitempty"`
}

func (x *SponsorshipConnection) GetEdges() []*SponsorshipEdge { return x.Edges }
func (x *SponsorshipConnection) GetNodes() []*Sponsorship     { return x.Nodes }
func (x *SponsorshipConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *SponsorshipConnection) GetTotalCount() int           { return x.TotalCount }
func (x *SponsorshipConnection) GetTotalRecurringMonthlyPriceInCents() int {
	return x.TotalRecurringMonthlyPriceInCents
}
func (x *SponsorshipConnection) GetTotalRecurringMonthlyPriceInDollars() int {
	return x.TotalRecurringMonthlyPriceInDollars
}

// SponsorshipEdge (OBJECT): An edge in a connection.
type SponsorshipEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Sponsorship `json:"node,omitempty"`
}

func (x *SponsorshipEdge) GetCursor() string     { return x.Cursor }
func (x *SponsorshipEdge) GetNode() *Sponsorship { return x.Node }

// SponsorshipNewsletter (OBJECT): An update sent to sponsors of a user or organization on GitHub Sponsors.
type SponsorshipNewsletter struct {
	// Author: The author of the newsletter.
	Author *User `json:"author,omitempty"`

	// Body: The contents of the newsletter, the message the sponsorable wanted to give.
	Body string `json:"body,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the SponsorshipNewsletter object.
	Id ID `json:"id,omitempty"`

	// IsPublished: Indicates if the newsletter has been made available to sponsors.
	IsPublished bool `json:"isPublished,omitempty"`

	// Sponsorable: The user or organization this newsletter is from.
	Sponsorable Sponsorable `json:"sponsorable,omitempty"`

	// Subject: The subject of the newsletter, what it's about.
	Subject string `json:"subject,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *SponsorshipNewsletter) GetAuthor() *User            { return x.Author }
func (x *SponsorshipNewsletter) GetBody() string             { return x.Body }
func (x *SponsorshipNewsletter) GetCreatedAt() DateTime      { return x.CreatedAt }
func (x *SponsorshipNewsletter) GetId() ID                   { return x.Id }
func (x *SponsorshipNewsletter) GetIsPublished() bool        { return x.IsPublished }
func (x *SponsorshipNewsletter) GetSponsorable() Sponsorable { return x.Sponsorable }
func (x *SponsorshipNewsletter) GetSubject() string          { return x.Subject }
func (x *SponsorshipNewsletter) GetUpdatedAt() DateTime      { return x.UpdatedAt }

// SponsorshipNewsletterConnection (OBJECT): The connection type for SponsorshipNewsletter.
type SponsorshipNewsletterConnection struct {
	// Edges: A list of edges.
	Edges []*SponsorshipNewsletterEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*SponsorshipNewsletter `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SponsorshipNewsletterConnection) GetEdges() []*SponsorshipNewsletterEdge { return x.Edges }
func (x *SponsorshipNewsletterConnection) GetNodes() []*SponsorshipNewsletter     { return x.Nodes }
func (x *SponsorshipNewsletterConnection) GetPageInfo() *PageInfo                 { return x.PageInfo }
func (x *SponsorshipNewsletterConnection) GetTotalCount() int                     { return x.TotalCount }

// SponsorshipNewsletterEdge (OBJECT): An edge in a connection.
type SponsorshipNewsletterEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *SponsorshipNewsletter `json:"node,omitempty"`
}

func (x *SponsorshipNewsletterEdge) GetCursor() string               { return x.Cursor }
func (x *SponsorshipNewsletterEdge) GetNode() *SponsorshipNewsletter { return x.Node }

// SponsorshipNewsletterOrder (INPUT_OBJECT): Ordering options for sponsorship newsletter connections.
type SponsorshipNewsletterOrder struct {
	// Field: The field to order sponsorship newsletters by.
	//
	// GraphQL type: SponsorshipNewsletterOrderField!
	Field SponsorshipNewsletterOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorshipNewsletterOrderField (ENUM): Properties by which sponsorship update connections can be ordered.
type SponsorshipNewsletterOrderField string

// SponsorshipNewsletterOrderField_CREATED_AT: Order sponsorship newsletters by when they were created.
const SponsorshipNewsletterOrderField_CREATED_AT SponsorshipNewsletterOrderField = "CREATED_AT"

// SponsorshipOrder (INPUT_OBJECT): Ordering options for sponsorship connections.
type SponsorshipOrder struct {
	// Field: The field to order sponsorship by.
	//
	// GraphQL type: SponsorshipOrderField!
	Field SponsorshipOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// SponsorshipOrderField (ENUM): Properties by which sponsorship connections can be ordered.
type SponsorshipOrderField string

// SponsorshipOrderField_CREATED_AT: Order sponsorship by creation time.
const SponsorshipOrderField_CREATED_AT SponsorshipOrderField = "CREATED_AT"

// SponsorshipPaymentSource (ENUM): How payment was made for funding a GitHub Sponsors sponsorship.
type SponsorshipPaymentSource string

// SponsorshipPaymentSource_GITHUB: Payment was made through GitHub.
const SponsorshipPaymentSource_GITHUB SponsorshipPaymentSource = "GITHUB"

// SponsorshipPaymentSource_PATREON: Payment was made through Patreon.
const SponsorshipPaymentSource_PATREON SponsorshipPaymentSource = "PATREON"

// SponsorshipPrivacy (ENUM): The privacy of a sponsorship.
type SponsorshipPrivacy string

// SponsorshipPrivacy_PUBLIC: Public.
const SponsorshipPrivacy_PUBLIC SponsorshipPrivacy = "PUBLIC"

// SponsorshipPrivacy_PRIVATE: Private.
const SponsorshipPrivacy_PRIVATE SponsorshipPrivacy = "PRIVATE"

// SquashMergeCommitMessage (ENUM): The possible default commit messages for squash merges.
type SquashMergeCommitMessage string

// SquashMergeCommitMessage_PR_BODY: Default to the pull request's body.
const SquashMergeCommitMessage_PR_BODY SquashMergeCommitMessage = "PR_BODY"

// SquashMergeCommitMessage_COMMIT_MESSAGES: Default to the branch's commit messages.
const SquashMergeCommitMessage_COMMIT_MESSAGES SquashMergeCommitMessage = "COMMIT_MESSAGES"

// SquashMergeCommitMessage_BLANK: Default to a blank commit message.
const SquashMergeCommitMessage_BLANK SquashMergeCommitMessage = "BLANK"

// SquashMergeCommitTitle (ENUM): The possible default commit titles for squash merges.
type SquashMergeCommitTitle string

// SquashMergeCommitTitle_PR_TITLE: Default to the pull request's title.
const SquashMergeCommitTitle_PR_TITLE SquashMergeCommitTitle = "PR_TITLE"

// SquashMergeCommitTitle_COMMIT_OR_PR_TITLE: Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
const SquashMergeCommitTitle_COMMIT_OR_PR_TITLE SquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"

// SshSignature (OBJECT): Represents an SSH signature on a Commit or Tag.
type SshSignature struct {
	// Email: Email used to sign this object.
	Email string `json:"email,omitempty"`

	// IsValid: True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid,omitempty"`

	// KeyFingerprint: Hex-encoded fingerprint of the key that signed this object.
	KeyFingerprint string `json:"keyFingerprint,omitempty"`

	// Payload: Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload,omitempty"`

	// Signature: ASCII-armored signature header from object.
	Signature string `json:"signature,omitempty"`

	// Signer: GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`

	// State: The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state,omitempty"`

	// VerifiedAt: The date the signature was verified, if valid.
	VerifiedAt DateTime `json:"verifiedAt,omitempty"`

	// WasSignedByGitHub: True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub,omitempty"`
}

func (x *SshSignature) GetEmail() string            { return x.Email }
func (x *SshSignature) GetIsValid() bool            { return x.IsValid }
func (x *SshSignature) GetKeyFingerprint() string   { return x.KeyFingerprint }
func (x *SshSignature) GetPayload() string          { return x.Payload }
func (x *SshSignature) GetSignature() string        { return x.Signature }
func (x *SshSignature) GetSigner() *User            { return x.Signer }
func (x *SshSignature) GetState() GitSignatureState { return x.State }
func (x *SshSignature) GetVerifiedAt() DateTime     { return x.VerifiedAt }
func (x *SshSignature) GetWasSignedByGitHub() bool  { return x.WasSignedByGitHub }

// StarOrder (INPUT_OBJECT): Ways in which star connections can be ordered.
type StarOrder struct {
	// Field: The field in which to order nodes by.
	//
	// GraphQL type: StarOrderField!
	Field StarOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order nodes.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// StarOrderField (ENUM): Properties by which star connections can be ordered.
type StarOrderField string

// StarOrderField_STARRED_AT: Allows ordering a list of stars by when they were created.
const StarOrderField_STARRED_AT StarOrderField = "STARRED_AT"

// StargazerConnection (OBJECT): The connection type for User.
type StargazerConnection struct {
	// Edges: A list of edges.
	Edges []*StargazerEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *StargazerConnection) GetEdges() []*StargazerEdge { return x.Edges }
func (x *StargazerConnection) GetNodes() []*User          { return x.Nodes }
func (x *StargazerConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *StargazerConnection) GetTotalCount() int         { return x.TotalCount }

// StargazerEdge (OBJECT): Represents a user that's starred a repository.
type StargazerEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: undocumented.
	Node *User `json:"node,omitempty"`

	// StarredAt: Identifies when the item was starred.
	StarredAt DateTime `json:"starredAt,omitempty"`
}

func (x *StargazerEdge) GetCursor() string      { return x.Cursor }
func (x *StargazerEdge) GetNode() *User         { return x.Node }
func (x *StargazerEdge) GetStarredAt() DateTime { return x.StarredAt }

// Starrable (INTERFACE): Things that can be starred.
// Starrable_Interface: Things that can be starred.
//
// Possible types:
//
//   - *Gist
//   - *Repository
//   - *Topic
type Starrable_Interface interface {
	isStarrable()
	GetId() ID
	GetStargazerCount() int
	GetStargazers() *StargazerConnection
	GetViewerHasStarred() bool
}

func (*Gist) isStarrable()       {}
func (*Repository) isStarrable() {}
func (*Topic) isStarrable()      {}

type Starrable struct {
	Interface Starrable_Interface
}

func (x *Starrable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Starrable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Starrable", info.Typename)
	case "Gist":
		x.Interface = new(Gist)
	case "Repository":
		x.Interface = new(Repository)
	case "Topic":
		x.Interface = new(Topic)
	}
	return json.Unmarshal(js, x.Interface)
}

// StarredRepositoryConnection (OBJECT): The connection type for Repository.
type StarredRepositoryConnection struct {
	// Edges: A list of edges.
	Edges []*StarredRepositoryEdge `json:"edges,omitempty"`

	// IsOverLimit: Is the list of stars for this user truncated? This is true for users that have many stars.
	IsOverLimit bool `json:"isOverLimit,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Repository `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *StarredRepositoryConnection) GetEdges() []*StarredRepositoryEdge { return x.Edges }
func (x *StarredRepositoryConnection) GetIsOverLimit() bool               { return x.IsOverLimit }
func (x *StarredRepositoryConnection) GetNodes() []*Repository            { return x.Nodes }
func (x *StarredRepositoryConnection) GetPageInfo() *PageInfo             { return x.PageInfo }
func (x *StarredRepositoryConnection) GetTotalCount() int                 { return x.TotalCount }

// StarredRepositoryEdge (OBJECT): Represents a starred repository.
type StarredRepositoryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: undocumented.
	Node *Repository `json:"node,omitempty"`

	// StarredAt: Identifies when the item was starred.
	StarredAt DateTime `json:"starredAt,omitempty"`
}

func (x *StarredRepositoryEdge) GetCursor() string      { return x.Cursor }
func (x *StarredRepositoryEdge) GetNode() *Repository   { return x.Node }
func (x *StarredRepositoryEdge) GetStarredAt() DateTime { return x.StarredAt }

// StartOrganizationMigrationInput (INPUT_OBJECT): Autogenerated input type of StartOrganizationMigration.
type StartOrganizationMigrationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SourceOrgUrl: The URL of the organization to migrate.
	//
	// GraphQL type: URI!
	SourceOrgUrl URI `json:"sourceOrgUrl,omitempty"`

	// TargetOrgName: The name of the target organization.
	//
	// GraphQL type: String!
	TargetOrgName string `json:"targetOrgName,omitempty"`

	// TargetEnterpriseId: The ID of the enterprise the target organization belongs to.
	//
	// GraphQL type: ID!
	TargetEnterpriseId ID `json:"targetEnterpriseId,omitempty"`

	// SourceAccessToken: The migration source access token.
	//
	// GraphQL type: String!
	SourceAccessToken string `json:"sourceAccessToken,omitempty"`
}

// StartOrganizationMigrationPayload (OBJECT): Autogenerated return type of StartOrganizationMigration.
type StartOrganizationMigrationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrgMigration: The new organization migration.
	OrgMigration *OrganizationMigration `json:"orgMigration,omitempty"`
}

func (x *StartOrganizationMigrationPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *StartOrganizationMigrationPayload) GetOrgMigration() *OrganizationMigration {
	return x.OrgMigration
}

// StartRepositoryMigrationInput (INPUT_OBJECT): Autogenerated input type of StartRepositoryMigration.
type StartRepositoryMigrationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SourceId: The ID of the migration source.
	//
	// GraphQL type: ID!
	SourceId ID `json:"sourceId,omitempty"`

	// OwnerId: The ID of the organization that will own the imported repository.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// SourceRepositoryUrl: The URL of the source repository.
	//
	// GraphQL type: URI!
	SourceRepositoryUrl URI `json:"sourceRepositoryUrl,omitempty"`

	// RepositoryName: The name of the imported repository.
	//
	// GraphQL type: String!
	RepositoryName string `json:"repositoryName,omitempty"`

	// ContinueOnError: Whether to continue the migration on error. Defaults to `true`.
	//
	// GraphQL type: Boolean
	ContinueOnError bool `json:"continueOnError,omitempty"`

	// GitArchiveUrl: The signed URL to access the user-uploaded git archive.
	//
	// GraphQL type: String
	GitArchiveUrl string `json:"gitArchiveUrl,omitempty"`

	// MetadataArchiveUrl: The signed URL to access the user-uploaded metadata archive.
	//
	// GraphQL type: String
	MetadataArchiveUrl string `json:"metadataArchiveUrl,omitempty"`

	// AccessToken: The migration source access token.
	//
	// GraphQL type: String
	AccessToken string `json:"accessToken,omitempty"`

	// GithubPat: The GitHub personal access token of the user importing to the target repository.
	//
	// GraphQL type: String
	GithubPat string `json:"githubPat,omitempty"`

	// SkipReleases: Whether to skip migrating releases for the repository.
	//
	// GraphQL type: Boolean
	SkipReleases bool `json:"skipReleases,omitempty"`

	// TargetRepoVisibility: The visibility of the imported repository.
	//
	// GraphQL type: String
	TargetRepoVisibility string `json:"targetRepoVisibility,omitempty"`

	// LockSource: Whether to lock the source repository.
	//
	// GraphQL type: Boolean
	LockSource bool `json:"lockSource,omitempty"`
}

// StartRepositoryMigrationPayload (OBJECT): Autogenerated return type of StartRepositoryMigration.
type StartRepositoryMigrationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryMigration: The new repository migration.
	RepositoryMigration *RepositoryMigration `json:"repositoryMigration,omitempty"`
}

func (x *StartRepositoryMigrationPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *StartRepositoryMigrationPayload) GetRepositoryMigration() *RepositoryMigration {
	return x.RepositoryMigration
}

// Status (OBJECT): Represents a commit status.
type Status struct {
	// CombinedContexts: A list of status contexts and check runs for this commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	CombinedContexts *StatusCheckRollupContextConnection `json:"combinedContexts,omitempty"`

	// Commit: The commit this status is attached to.
	Commit *Commit `json:"commit,omitempty"`

	// Context: Looks up an individual status context by context name.
	//
	// Query arguments:
	//   - name String!
	Context *StatusContext `json:"context,omitempty"`

	// Contexts: The individual status contexts for this commit.
	Contexts []*StatusContext `json:"contexts,omitempty"`

	// Id: The Node ID of the Status object.
	Id ID `json:"id,omitempty"`

	// State: The combined commit status.
	State StatusState `json:"state,omitempty"`
}

func (x *Status) GetCombinedContexts() *StatusCheckRollupContextConnection { return x.CombinedContexts }
func (x *Status) GetCommit() *Commit                                       { return x.Commit }
func (x *Status) GetContext() *StatusContext                               { return x.Context }
func (x *Status) GetContexts() []*StatusContext                            { return x.Contexts }
func (x *Status) GetId() ID                                                { return x.Id }
func (x *Status) GetState() StatusState                                    { return x.State }

// StatusCheckConfiguration (OBJECT): Required status check.
type StatusCheckConfiguration struct {
	// Context: The status check context name that must be present on the commit.
	Context string `json:"context,omitempty"`

	// IntegrationId: The optional integration ID that this status check must originate from.
	IntegrationId int `json:"integrationId,omitempty"`
}

func (x *StatusCheckConfiguration) GetContext() string    { return x.Context }
func (x *StatusCheckConfiguration) GetIntegrationId() int { return x.IntegrationId }

// StatusCheckConfigurationInput (INPUT_OBJECT): Required status check.
type StatusCheckConfigurationInput struct {
	// Context: The status check context name that must be present on the commit.
	//
	// GraphQL type: String!
	Context string `json:"context,omitempty"`

	// IntegrationId: The optional integration ID that this status check must originate from.
	//
	// GraphQL type: Int
	IntegrationId int `json:"integrationId,omitempty"`
}

// StatusCheckRollup (OBJECT): Represents the rollup for both the check runs and status for a commit.
type StatusCheckRollup struct {
	// Commit: The commit the status and check runs are attached to.
	Commit *Commit `json:"commit,omitempty"`

	// Contexts: A list of status contexts and check runs for this commit.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Contexts *StatusCheckRollupContextConnection `json:"contexts,omitempty"`

	// Id: The Node ID of the StatusCheckRollup object.
	Id ID `json:"id,omitempty"`

	// State: The combined status for the commit.
	State StatusState `json:"state,omitempty"`
}

func (x *StatusCheckRollup) GetCommit() *Commit                               { return x.Commit }
func (x *StatusCheckRollup) GetContexts() *StatusCheckRollupContextConnection { return x.Contexts }
func (x *StatusCheckRollup) GetId() ID                                        { return x.Id }
func (x *StatusCheckRollup) GetState() StatusState                            { return x.State }

// StatusCheckRollupContext (UNION): Types that can be inside a StatusCheckRollup context.
// StatusCheckRollupContext_Interface: Types that can be inside a StatusCheckRollup context.
//
// Possible types:
//
//   - *CheckRun
//   - *StatusContext
type StatusCheckRollupContext_Interface interface {
	isStatusCheckRollupContext()
}

func (*CheckRun) isStatusCheckRollupContext()      {}
func (*StatusContext) isStatusCheckRollupContext() {}

type StatusCheckRollupContext struct {
	Interface StatusCheckRollupContext_Interface
}

func (x *StatusCheckRollupContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *StatusCheckRollupContext) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for StatusCheckRollupContext", info.Typename)
	case "CheckRun":
		x.Interface = new(CheckRun)
	case "StatusContext":
		x.Interface = new(StatusContext)
	}
	return json.Unmarshal(js, x.Interface)
}

// StatusCheckRollupContextConnection (OBJECT): The connection type for StatusCheckRollupContext.
type StatusCheckRollupContextConnection struct {
	// CheckRunCount: The number of check runs in this rollup.
	CheckRunCount int `json:"checkRunCount,omitempty"`

	// CheckRunCountsByState: Counts of check runs by state.
	CheckRunCountsByState []*CheckRunStateCount `json:"checkRunCountsByState,omitempty"`

	// Edges: A list of edges.
	Edges []*StatusCheckRollupContextEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []StatusCheckRollupContext `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// StatusContextCount: The number of status contexts in this rollup.
	StatusContextCount int `json:"statusContextCount,omitempty"`

	// StatusContextCountsByState: Counts of status contexts by state.
	StatusContextCountsByState []*StatusContextStateCount `json:"statusContextCountsByState,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *StatusCheckRollupContextConnection) GetCheckRunCount() int { return x.CheckRunCount }
func (x *StatusCheckRollupContextConnection) GetCheckRunCountsByState() []*CheckRunStateCount {
	return x.CheckRunCountsByState
}
func (x *StatusCheckRollupContextConnection) GetEdges() []*StatusCheckRollupContextEdge {
	return x.Edges
}
func (x *StatusCheckRollupContextConnection) GetNodes() []StatusCheckRollupContext { return x.Nodes }
func (x *StatusCheckRollupContextConnection) GetPageInfo() *PageInfo               { return x.PageInfo }
func (x *StatusCheckRollupContextConnection) GetStatusContextCount() int           { return x.StatusContextCount }
func (x *StatusCheckRollupContextConnection) GetStatusContextCountsByState() []*StatusContextStateCount {
	return x.StatusContextCountsByState
}
func (x *StatusCheckRollupContextConnection) GetTotalCount() int { return x.TotalCount }

// StatusCheckRollupContextEdge (OBJECT): An edge in a connection.
type StatusCheckRollupContextEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node StatusCheckRollupContext `json:"node,omitempty"`
}

func (x *StatusCheckRollupContextEdge) GetCursor() string                 { return x.Cursor }
func (x *StatusCheckRollupContextEdge) GetNode() StatusCheckRollupContext { return x.Node }

// StatusContext (OBJECT): Represents an individual commit status context.
type StatusContext struct {
	// AvatarUrl: The avatar of the OAuth application or the user that created the status.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// Commit: This commit this status context is attached to.
	Commit *Commit `json:"commit,omitempty"`

	// Context: The name of this status context.
	Context string `json:"context,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Creator: The actor who created this status context.
	Creator Actor `json:"creator,omitempty"`

	// Description: The description for this status context.
	Description string `json:"description,omitempty"`

	// Id: The Node ID of the StatusContext object.
	Id ID `json:"id,omitempty"`

	// IsRequired: Whether this is required to pass before merging for a specific pull request.
	//
	// Query arguments:
	//   - pullRequestId ID
	//   - pullRequestNumber Int
	IsRequired bool `json:"isRequired,omitempty"`

	// State: The state of this status context.
	State StatusState `json:"state,omitempty"`

	// TargetUrl: The URL for this status context.
	TargetUrl URI `json:"targetUrl,omitempty"`
}

func (x *StatusContext) GetAvatarUrl() URI      { return x.AvatarUrl }
func (x *StatusContext) GetCommit() *Commit     { return x.Commit }
func (x *StatusContext) GetContext() string     { return x.Context }
func (x *StatusContext) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *StatusContext) GetCreator() Actor      { return x.Creator }
func (x *StatusContext) GetDescription() string { return x.Description }
func (x *StatusContext) GetId() ID              { return x.Id }
func (x *StatusContext) GetIsRequired() bool    { return x.IsRequired }
func (x *StatusContext) GetState() StatusState  { return x.State }
func (x *StatusContext) GetTargetUrl() URI      { return x.TargetUrl }

// StatusContextStateCount (OBJECT): Represents a count of the state of a status context.
type StatusContextStateCount struct {
	// Count: The number of statuses with this state.
	Count int `json:"count,omitempty"`

	// State: The state of a status context.
	State StatusState `json:"state,omitempty"`
}

func (x *StatusContextStateCount) GetCount() int         { return x.Count }
func (x *StatusContextStateCount) GetState() StatusState { return x.State }

// StatusState (ENUM): The possible commit status states.
type StatusState string

// StatusState_EXPECTED: Status is expected.
const StatusState_EXPECTED StatusState = "EXPECTED"

// StatusState_ERROR: Status is errored.
const StatusState_ERROR StatusState = "ERROR"

// StatusState_FAILURE: Status is failing.
const StatusState_FAILURE StatusState = "FAILURE"

// StatusState_PENDING: Status is pending.
const StatusState_PENDING StatusState = "PENDING"

// StatusState_SUCCESS: Status is successful.
const StatusState_SUCCESS StatusState = "SUCCESS"

// String (SCALAR): Represents textual data as UTF-8 character sequences. This type is most often used by GraphQL to represent free-form human-readable text.
type String string

// StripeConnectAccount (OBJECT): A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
type StripeConnectAccount struct {
	// AccountId: The account number used to identify this Stripe Connect account.
	AccountId string `json:"accountId,omitempty"`

	// BillingCountryOrRegion: The name of the country or region of an external account, such as a bank account, tied to the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization.
	BillingCountryOrRegion string `json:"billingCountryOrRegion,omitempty"`

	// CountryOrRegion: The name of the country or region of the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization.
	CountryOrRegion string `json:"countryOrRegion,omitempty"`

	// IsActive: Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
	IsActive bool `json:"isActive,omitempty"`

	// SponsorsListing: The GitHub Sponsors profile associated with this Stripe Connect account.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`

	// StripeDashboardUrl: The URL to access this Stripe Connect account on Stripe's website.
	StripeDashboardUrl URI `json:"stripeDashboardUrl,omitempty"`
}

func (x *StripeConnectAccount) GetAccountId() string                 { return x.AccountId }
func (x *StripeConnectAccount) GetBillingCountryOrRegion() string    { return x.BillingCountryOrRegion }
func (x *StripeConnectAccount) GetCountryOrRegion() string           { return x.CountryOrRegion }
func (x *StripeConnectAccount) GetIsActive() bool                    { return x.IsActive }
func (x *StripeConnectAccount) GetSponsorsListing() *SponsorsListing { return x.SponsorsListing }
func (x *StripeConnectAccount) GetStripeDashboardUrl() URI           { return x.StripeDashboardUrl }

// SubIssueAddedEvent (OBJECT): Represents a 'sub_issue_added' event on a given issue.
type SubIssueAddedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the SubIssueAddedEvent object.
	Id ID `json:"id,omitempty"`

	// SubIssue: The sub-issue added.
	SubIssue *Issue `json:"subIssue,omitempty"`
}

func (x *SubIssueAddedEvent) GetActor() Actor        { return x.Actor }
func (x *SubIssueAddedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *SubIssueAddedEvent) GetId() ID              { return x.Id }
func (x *SubIssueAddedEvent) GetSubIssue() *Issue    { return x.SubIssue }

// SubIssueRemovedEvent (OBJECT): Represents a 'sub_issue_removed' event on a given issue.
type SubIssueRemovedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the SubIssueRemovedEvent object.
	Id ID `json:"id,omitempty"`

	// SubIssue: The sub-issue removed.
	SubIssue *Issue `json:"subIssue,omitempty"`
}

func (x *SubIssueRemovedEvent) GetActor() Actor        { return x.Actor }
func (x *SubIssueRemovedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *SubIssueRemovedEvent) GetId() ID              { return x.Id }
func (x *SubIssueRemovedEvent) GetSubIssue() *Issue    { return x.SubIssue }

// SubIssuesSummary (OBJECT): Summary of the state of an issue's sub-issues.
type SubIssuesSummary struct {
	// Completed: Count of completed sub-issues.
	Completed int `json:"completed,omitempty"`

	// PercentCompleted: Percent of sub-issues which are completed.
	PercentCompleted int `json:"percentCompleted,omitempty"`

	// Total: Count of total number of sub-issues.
	Total int `json:"total,omitempty"`
}

func (x *SubIssuesSummary) GetCompleted() int        { return x.Completed }
func (x *SubIssuesSummary) GetPercentCompleted() int { return x.PercentCompleted }
func (x *SubIssuesSummary) GetTotal() int            { return x.Total }

// SubmitPullRequestReviewInput (INPUT_OBJECT): Autogenerated input type of SubmitPullRequestReview.
type SubmitPullRequestReviewInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Pull Request ID to submit any pending reviews.
	//
	// GraphQL type: ID
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// PullRequestReviewId: The Pull Request Review ID to submit.
	//
	// GraphQL type: ID
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`

	// Event: The event to send to the Pull Request Review.
	//
	// GraphQL type: PullRequestReviewEvent!
	Event PullRequestReviewEvent `json:"event,omitempty"`

	// Body: The text field to set on the Pull Request Review.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`
}

// SubmitPullRequestReviewPayload (OBJECT): Autogenerated return type of SubmitPullRequestReview.
type SubmitPullRequestReviewPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReview: The submitted pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

func (x *SubmitPullRequestReviewPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *SubmitPullRequestReviewPayload) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}

// Submodule (OBJECT): A pointer to a repository at a specific revision embedded inside another repository.
type Submodule struct {
	// Branch: The branch of the upstream submodule for tracking updates.
	Branch string `json:"branch,omitempty"`

	// GitUrl: The git URL of the submodule repository.
	GitUrl URI `json:"gitUrl,omitempty"`

	// Name: The name of the submodule in .gitmodules.
	Name string `json:"name,omitempty"`

	// NameRaw: The name of the submodule in .gitmodules (Base64-encoded).
	NameRaw Base64String `json:"nameRaw,omitempty"`

	// Path: The path in the superproject that this submodule is located in.
	Path string `json:"path,omitempty"`

	// PathRaw: The path in the superproject that this submodule is located in (Base64-encoded).
	PathRaw Base64String `json:"pathRaw,omitempty"`

	// SubprojectCommitOid: The commit revision of the subproject repository being tracked by the submodule.
	SubprojectCommitOid GitObjectID `json:"subprojectCommitOid,omitempty"`
}

func (x *Submodule) GetBranch() string                   { return x.Branch }
func (x *Submodule) GetGitUrl() URI                      { return x.GitUrl }
func (x *Submodule) GetName() string                     { return x.Name }
func (x *Submodule) GetNameRaw() Base64String            { return x.NameRaw }
func (x *Submodule) GetPath() string                     { return x.Path }
func (x *Submodule) GetPathRaw() Base64String            { return x.PathRaw }
func (x *Submodule) GetSubprojectCommitOid() GitObjectID { return x.SubprojectCommitOid }

// SubmoduleConnection (OBJECT): The connection type for Submodule.
type SubmoduleConnection struct {
	// Edges: A list of edges.
	Edges []*SubmoduleEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Submodule `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *SubmoduleConnection) GetEdges() []*SubmoduleEdge { return x.Edges }
func (x *SubmoduleConnection) GetNodes() []*Submodule     { return x.Nodes }
func (x *SubmoduleConnection) GetPageInfo() *PageInfo     { return x.PageInfo }
func (x *SubmoduleConnection) GetTotalCount() int         { return x.TotalCount }

// SubmoduleEdge (OBJECT): An edge in a connection.
type SubmoduleEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Submodule `json:"node,omitempty"`
}

func (x *SubmoduleEdge) GetCursor() string   { return x.Cursor }
func (x *SubmoduleEdge) GetNode() *Submodule { return x.Node }

// Subscribable (INTERFACE): Entities that can be subscribed to for web and email notifications.
// Subscribable_Interface: Entities that can be subscribed to for web and email notifications.
//
// Possible types:
//
//   - *Commit
//   - *Discussion
//   - *Issue
//   - *PullRequest
//   - *Repository
//   - *Team
//   - *TeamDiscussion
type Subscribable_Interface interface {
	isSubscribable()
	GetId() ID
	GetViewerCanSubscribe() bool
	GetViewerSubscription() SubscriptionState
}

func (*Commit) isSubscribable()         {}
func (*Discussion) isSubscribable()     {}
func (*Issue) isSubscribable()          {}
func (*PullRequest) isSubscribable()    {}
func (*Repository) isSubscribable()     {}
func (*Team) isSubscribable()           {}
func (*TeamDiscussion) isSubscribable() {}

type Subscribable struct {
	Interface Subscribable_Interface
}

func (x *Subscribable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Subscribable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Subscribable", info.Typename)
	case "Commit":
		x.Interface = new(Commit)
	case "Discussion":
		x.Interface = new(Discussion)
	case "Issue":
		x.Interface = new(Issue)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "Repository":
		x.Interface = new(Repository)
	case "Team":
		x.Interface = new(Team)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	}
	return json.Unmarshal(js, x.Interface)
}

// SubscribableThread (INTERFACE): Entities that can be subscribed to for web and email notifications.
// SubscribableThread_Interface: Entities that can be subscribed to for web and email notifications.
//
// Possible types:
//
//   - *Issue
type SubscribableThread_Interface interface {
	isSubscribableThread()
	GetId() ID
	GetViewerThreadSubscriptionFormAction() ThreadSubscriptionFormAction
	GetViewerThreadSubscriptionStatus() ThreadSubscriptionState
}

func (*Issue) isSubscribableThread() {}

type SubscribableThread struct {
	Interface SubscribableThread_Interface
}

func (x *SubscribableThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *SubscribableThread) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for SubscribableThread", info.Typename)
	case "Issue":
		x.Interface = new(Issue)
	}
	return json.Unmarshal(js, x.Interface)
}

// SubscribedEvent (OBJECT): Represents a 'subscribed' event on a given `Subscribable`.
type SubscribedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the SubscribedEvent object.
	Id ID `json:"id,omitempty"`

	// Subscribable: Object referenced by event.
	Subscribable Subscribable `json:"subscribable,omitempty"`
}

func (x *SubscribedEvent) GetActor() Actor               { return x.Actor }
func (x *SubscribedEvent) GetCreatedAt() DateTime        { return x.CreatedAt }
func (x *SubscribedEvent) GetId() ID                     { return x.Id }
func (x *SubscribedEvent) GetSubscribable() Subscribable { return x.Subscribable }

// SubscriptionState (ENUM): The possible states of a subscription.
type SubscriptionState string

// SubscriptionState_UNSUBSCRIBED: The User is only notified when participating or @mentioned.
const SubscriptionState_UNSUBSCRIBED SubscriptionState = "UNSUBSCRIBED"

// SubscriptionState_SUBSCRIBED: The User is notified of all conversations.
const SubscriptionState_SUBSCRIBED SubscriptionState = "SUBSCRIBED"

// SubscriptionState_IGNORED: The User is never notified.
const SubscriptionState_IGNORED SubscriptionState = "IGNORED"

// SuggestedReviewer (OBJECT): A suggestion to review a pull request based on a user's commit history and review comments.
type SuggestedReviewer struct {
	// IsAuthor: Is this suggestion based on past commits?.
	IsAuthor bool `json:"isAuthor,omitempty"`

	// IsCommenter: Is this suggestion based on past review comments?.
	IsCommenter bool `json:"isCommenter,omitempty"`

	// Reviewer: Identifies the user suggested to review the pull request.
	Reviewer *User `json:"reviewer,omitempty"`
}

func (x *SuggestedReviewer) GetIsAuthor() bool    { return x.IsAuthor }
func (x *SuggestedReviewer) GetIsCommenter() bool { return x.IsCommenter }
func (x *SuggestedReviewer) GetReviewer() *User   { return x.Reviewer }

// Tag (OBJECT): Represents a Git tag.
type Tag struct {
	// AbbreviatedOid: An abbreviated version of the Git object ID.
	AbbreviatedOid string `json:"abbreviatedOid,omitempty"`

	// CommitResourcePath: The HTTP path for this Git object.
	CommitResourcePath URI `json:"commitResourcePath,omitempty"`

	// CommitUrl: The HTTP URL for this Git object.
	CommitUrl URI `json:"commitUrl,omitempty"`

	// Id: The Node ID of the Tag object.
	Id ID `json:"id,omitempty"`

	// Message: The Git tag message.
	Message string `json:"message,omitempty"`

	// Name: The Git tag name.
	Name string `json:"name,omitempty"`

	// Oid: The Git object ID.
	Oid GitObjectID `json:"oid,omitempty"`

	// Repository: The Repository the Git object belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// Tagger: Details about the tag author.
	Tagger *GitActor `json:"tagger,omitempty"`

	// Target: The Git object the tag points to.
	Target GitObject `json:"target,omitempty"`
}

func (x *Tag) GetAbbreviatedOid() string  { return x.AbbreviatedOid }
func (x *Tag) GetCommitResourcePath() URI { return x.CommitResourcePath }
func (x *Tag) GetCommitUrl() URI          { return x.CommitUrl }
func (x *Tag) GetId() ID                  { return x.Id }
func (x *Tag) GetMessage() string         { return x.Message }
func (x *Tag) GetName() string            { return x.Name }
func (x *Tag) GetOid() GitObjectID        { return x.Oid }
func (x *Tag) GetRepository() *Repository { return x.Repository }
func (x *Tag) GetTagger() *GitActor       { return x.Tagger }
func (x *Tag) GetTarget() GitObject       { return x.Target }

// TagNamePatternParameters (OBJECT): Parameters to be used for the tag_name_pattern rule.
type TagNamePatternParameters struct {
	// Name: How this rule will appear to users.
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	Pattern string `json:"pattern,omitempty"`
}

func (x *TagNamePatternParameters) GetName() string     { return x.Name }
func (x *TagNamePatternParameters) GetNegate() bool     { return x.Negate }
func (x *TagNamePatternParameters) GetOperator() string { return x.Operator }
func (x *TagNamePatternParameters) GetPattern() string  { return x.Pattern }

// TagNamePatternParametersInput (INPUT_OBJECT): Parameters to be used for the tag_name_pattern rule.
type TagNamePatternParametersInput struct {
	// Name: How this rule will appear to users.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Negate: If true, the rule will fail if the pattern matches.
	//
	// GraphQL type: Boolean
	Negate bool `json:"negate,omitempty"`

	// Operator: The operator to use for matching.
	//
	// GraphQL type: String!
	Operator string `json:"operator,omitempty"`

	// Pattern: The pattern to match with.
	//
	// GraphQL type: String!
	Pattern string `json:"pattern,omitempty"`
}

// Team (OBJECT): A team of users in an organization.
type Team struct {
	// Ancestors: A list of teams that are ancestors of this team.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Ancestors *TeamConnection `json:"ancestors,omitempty"`

	// AvatarUrl: A URL pointing to the team's avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// ChildTeams: List of child teams belonging to this team.
	//
	// Query arguments:
	//   - orderBy TeamOrder
	//   - userLogins [String!]
	//   - immediateOnly Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ChildTeams *TeamConnection `json:"childTeams,omitempty"`

	// CombinedSlug: The slug corresponding to the organization and team.
	CombinedSlug string `json:"combinedSlug,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Description: The description of the team.
	Description string `json:"description,omitempty"`

	// Discussion: Find a team discussion by its number.
	//
	// Query arguments:
	//   - number Int!
	Discussion *TeamDiscussion `json:"discussion,omitempty"`

	// Discussions: A list of team discussions.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - isPinned Boolean
	//   - orderBy TeamDiscussionOrder
	Discussions *TeamDiscussionConnection `json:"discussions,omitempty"`

	// DiscussionsResourcePath: The HTTP path for team discussions.
	DiscussionsResourcePath URI `json:"discussionsResourcePath,omitempty"`

	// DiscussionsUrl: The HTTP URL for team discussions.
	DiscussionsUrl URI `json:"discussionsUrl,omitempty"`

	// EditTeamResourcePath: The HTTP path for editing this team.
	EditTeamResourcePath URI `json:"editTeamResourcePath,omitempty"`

	// EditTeamUrl: The HTTP URL for editing this team.
	EditTeamUrl URI `json:"editTeamUrl,omitempty"`

	// Id: The Node ID of the Team object.
	Id ID `json:"id,omitempty"`

	// Invitations: A list of pending invitations for users to this team.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Invitations *OrganizationInvitationConnection `json:"invitations,omitempty"`

	// MemberStatuses: Get the status messages members of this entity have set that are either public or visible only to the organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy UserStatusOrder
	MemberStatuses *UserStatusConnection `json:"memberStatuses,omitempty"`

	// Members: A list of users who are members of this team.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - query String
	//   - membership TeamMembershipType
	//   - role TeamMemberRole
	//   - orderBy TeamMemberOrder
	Members *TeamMemberConnection `json:"members,omitempty"`

	// MembersResourcePath: The HTTP path for the team' members.
	MembersResourcePath URI `json:"membersResourcePath,omitempty"`

	// MembersUrl: The HTTP URL for the team' members.
	MembersUrl URI `json:"membersUrl,omitempty"`

	// Name: The name of the team.
	Name string `json:"name,omitempty"`

	// NewTeamResourcePath: The HTTP path creating a new team.
	NewTeamResourcePath URI `json:"newTeamResourcePath,omitempty"`

	// NewTeamUrl: The HTTP URL creating a new team.
	NewTeamUrl URI `json:"newTeamUrl,omitempty"`

	// NotificationSetting: The notification setting that the team has set.
	NotificationSetting TeamNotificationSetting `json:"notificationSetting,omitempty"`

	// Organization: The organization that owns this team.
	Organization *Organization `json:"organization,omitempty"`

	// ParentTeam: The parent team of the team.
	ParentTeam *Team `json:"parentTeam,omitempty"`

	// Privacy: The level of privacy the team has.
	Privacy TeamPrivacy `json:"privacy,omitempty"`

	// ProjectV2: Finds and returns the project according to the provided project number.
	//
	// Query arguments:
	//   - number Int!
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`

	// ProjectsV2: List of projects this team has collaborator access to.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy ProjectV2Order
	//   - filterBy ProjectV2Filters
	//   - query String
	//   - minPermissionLevel ProjectV2PermissionLevel
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// Repositories: A list of repositories this team has access to.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - query String
	//   - orderBy TeamRepositoryOrder
	Repositories *TeamRepositoryConnection `json:"repositories,omitempty"`

	// RepositoriesResourcePath: The HTTP path for this team's repositories.
	RepositoriesResourcePath URI `json:"repositoriesResourcePath,omitempty"`

	// RepositoriesUrl: The HTTP URL for this team's repositories.
	RepositoriesUrl URI `json:"repositoriesUrl,omitempty"`

	// ResourcePath: The HTTP path for this team.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// ReviewRequestDelegationAlgorithm: What algorithm is used for review assignment for this team.
	ReviewRequestDelegationAlgorithm TeamReviewAssignmentAlgorithm `json:"reviewRequestDelegationAlgorithm,omitempty"`

	// ReviewRequestDelegationEnabled: True if review assignment is enabled for this team.
	ReviewRequestDelegationEnabled bool `json:"reviewRequestDelegationEnabled,omitempty"`

	// ReviewRequestDelegationMemberCount: How many team members are required for review assignment for this team.
	ReviewRequestDelegationMemberCount int `json:"reviewRequestDelegationMemberCount,omitempty"`

	// ReviewRequestDelegationNotifyTeam: When assigning team members via delegation, whether the entire team should be notified as well.
	ReviewRequestDelegationNotifyTeam bool `json:"reviewRequestDelegationNotifyTeam,omitempty"`

	// Slug: The slug corresponding to the team.
	Slug string `json:"slug,omitempty"`

	// TeamsResourcePath: The HTTP path for this team's teams.
	TeamsResourcePath URI `json:"teamsResourcePath,omitempty"`

	// TeamsUrl: The HTTP URL for this team's teams.
	TeamsUrl URI `json:"teamsUrl,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this team.
	Url URI `json:"url,omitempty"`

	// ViewerCanAdminister: Team is adminable by the viewer.
	ViewerCanAdminister bool `json:"viewerCanAdminister,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (x *Team) GetAncestors() *TeamConnection                     { return x.Ancestors }
func (x *Team) GetAvatarUrl() URI                                 { return x.AvatarUrl }
func (x *Team) GetChildTeams() *TeamConnection                    { return x.ChildTeams }
func (x *Team) GetCombinedSlug() string                           { return x.CombinedSlug }
func (x *Team) GetCreatedAt() DateTime                            { return x.CreatedAt }
func (x *Team) GetDatabaseId() int                                { return x.DatabaseId }
func (x *Team) GetDescription() string                            { return x.Description }
func (x *Team) GetDiscussion() *TeamDiscussion                    { return x.Discussion }
func (x *Team) GetDiscussions() *TeamDiscussionConnection         { return x.Discussions }
func (x *Team) GetDiscussionsResourcePath() URI                   { return x.DiscussionsResourcePath }
func (x *Team) GetDiscussionsUrl() URI                            { return x.DiscussionsUrl }
func (x *Team) GetEditTeamResourcePath() URI                      { return x.EditTeamResourcePath }
func (x *Team) GetEditTeamUrl() URI                               { return x.EditTeamUrl }
func (x *Team) GetId() ID                                         { return x.Id }
func (x *Team) GetInvitations() *OrganizationInvitationConnection { return x.Invitations }
func (x *Team) GetMemberStatuses() *UserStatusConnection          { return x.MemberStatuses }
func (x *Team) GetMembers() *TeamMemberConnection                 { return x.Members }
func (x *Team) GetMembersResourcePath() URI                       { return x.MembersResourcePath }
func (x *Team) GetMembersUrl() URI                                { return x.MembersUrl }
func (x *Team) GetName() string                                   { return x.Name }
func (x *Team) GetNewTeamResourcePath() URI                       { return x.NewTeamResourcePath }
func (x *Team) GetNewTeamUrl() URI                                { return x.NewTeamUrl }
func (x *Team) GetNotificationSetting() TeamNotificationSetting   { return x.NotificationSetting }
func (x *Team) GetOrganization() *Organization                    { return x.Organization }
func (x *Team) GetParentTeam() *Team                              { return x.ParentTeam }
func (x *Team) GetPrivacy() TeamPrivacy                           { return x.Privacy }
func (x *Team) GetProjectV2() *ProjectV2                          { return x.ProjectV2 }
func (x *Team) GetProjectsV2() *ProjectV2Connection               { return x.ProjectsV2 }
func (x *Team) GetRepositories() *TeamRepositoryConnection        { return x.Repositories }
func (x *Team) GetRepositoriesResourcePath() URI                  { return x.RepositoriesResourcePath }
func (x *Team) GetRepositoriesUrl() URI                           { return x.RepositoriesUrl }
func (x *Team) GetResourcePath() URI                              { return x.ResourcePath }
func (x *Team) GetReviewRequestDelegationAlgorithm() TeamReviewAssignmentAlgorithm {
	return x.ReviewRequestDelegationAlgorithm
}
func (x *Team) GetReviewRequestDelegationEnabled() bool { return x.ReviewRequestDelegationEnabled }
func (x *Team) GetReviewRequestDelegationMemberCount() int {
	return x.ReviewRequestDelegationMemberCount
}
func (x *Team) GetReviewRequestDelegationNotifyTeam() bool {
	return x.ReviewRequestDelegationNotifyTeam
}
func (x *Team) GetSlug() string                          { return x.Slug }
func (x *Team) GetTeamsResourcePath() URI                { return x.TeamsResourcePath }
func (x *Team) GetTeamsUrl() URI                         { return x.TeamsUrl }
func (x *Team) GetUpdatedAt() DateTime                   { return x.UpdatedAt }
func (x *Team) GetUrl() URI                              { return x.Url }
func (x *Team) GetViewerCanAdminister() bool             { return x.ViewerCanAdminister }
func (x *Team) GetViewerCanSubscribe() bool              { return x.ViewerCanSubscribe }
func (x *Team) GetViewerSubscription() SubscriptionState { return x.ViewerSubscription }

// TeamAddMemberAuditEntry (OBJECT): Audit log entry for a team.add_member event.
type TeamAddMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the TeamAddMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IsLdapMapped: Whether the team was mapped to an LDAP Group.
	IsLdapMapped bool `json:"isLdapMapped,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Team: The team associated with the action.
	Team *Team `json:"team,omitempty"`

	// TeamName: The name of the team.
	TeamName string `json:"teamName,omitempty"`

	// TeamResourcePath: The HTTP path for this team.
	TeamResourcePath URI `json:"teamResourcePath,omitempty"`

	// TeamUrl: The HTTP URL for this team.
	TeamUrl URI `json:"teamUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *TeamAddMemberAuditEntry) GetAction() string                { return x.Action }
func (x *TeamAddMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *TeamAddMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *TeamAddMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *TeamAddMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *TeamAddMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *TeamAddMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *TeamAddMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *TeamAddMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *TeamAddMemberAuditEntry) GetIsLdapMapped() bool            { return x.IsLdapMapped }
func (x *TeamAddMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *TeamAddMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *TeamAddMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *TeamAddMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *TeamAddMemberAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *TeamAddMemberAuditEntry) GetTeam() *Team           { return x.Team }
func (x *TeamAddMemberAuditEntry) GetTeamName() string      { return x.TeamName }
func (x *TeamAddMemberAuditEntry) GetTeamResourcePath() URI { return x.TeamResourcePath }
func (x *TeamAddMemberAuditEntry) GetTeamUrl() URI          { return x.TeamUrl }
func (x *TeamAddMemberAuditEntry) GetUser() *User           { return x.User }
func (x *TeamAddMemberAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *TeamAddMemberAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *TeamAddMemberAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// TeamAddRepositoryAuditEntry (OBJECT): Audit log entry for a team.add_repository event.
type TeamAddRepositoryAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the TeamAddRepositoryAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IsLdapMapped: Whether the team was mapped to an LDAP Group.
	IsLdapMapped bool `json:"isLdapMapped,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// Team: The team associated with the action.
	Team *Team `json:"team,omitempty"`

	// TeamName: The name of the team.
	TeamName string `json:"teamName,omitempty"`

	// TeamResourcePath: The HTTP path for this team.
	TeamResourcePath URI `json:"teamResourcePath,omitempty"`

	// TeamUrl: The HTTP URL for this team.
	TeamUrl URI `json:"teamUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *TeamAddRepositoryAuditEntry) GetAction() string                { return x.Action }
func (x *TeamAddRepositoryAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *TeamAddRepositoryAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *TeamAddRepositoryAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *TeamAddRepositoryAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *TeamAddRepositoryAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *TeamAddRepositoryAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *TeamAddRepositoryAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *TeamAddRepositoryAuditEntry) GetId() ID                        { return x.Id }
func (x *TeamAddRepositoryAuditEntry) GetIsLdapMapped() bool            { return x.IsLdapMapped }
func (x *TeamAddRepositoryAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *TeamAddRepositoryAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *TeamAddRepositoryAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *TeamAddRepositoryAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *TeamAddRepositoryAuditEntry) GetOrganizationUrl() URI    { return x.OrganizationUrl }
func (x *TeamAddRepositoryAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *TeamAddRepositoryAuditEntry) GetRepositoryName() string  { return x.RepositoryName }
func (x *TeamAddRepositoryAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *TeamAddRepositoryAuditEntry) GetRepositoryUrl() URI    { return x.RepositoryUrl }
func (x *TeamAddRepositoryAuditEntry) GetTeam() *Team           { return x.Team }
func (x *TeamAddRepositoryAuditEntry) GetTeamName() string      { return x.TeamName }
func (x *TeamAddRepositoryAuditEntry) GetTeamResourcePath() URI { return x.TeamResourcePath }
func (x *TeamAddRepositoryAuditEntry) GetTeamUrl() URI          { return x.TeamUrl }
func (x *TeamAddRepositoryAuditEntry) GetUser() *User           { return x.User }
func (x *TeamAddRepositoryAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *TeamAddRepositoryAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *TeamAddRepositoryAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// TeamAuditEntryData (INTERFACE): Metadata for an audit entry with action team.*.
// TeamAuditEntryData_Interface: Metadata for an audit entry with action team.*.
//
// Possible types:
//
//   - *OrgRestoreMemberMembershipTeamAuditEntryData
//   - *TeamAddMemberAuditEntry
//   - *TeamAddRepositoryAuditEntry
//   - *TeamChangeParentTeamAuditEntry
//   - *TeamRemoveMemberAuditEntry
//   - *TeamRemoveRepositoryAuditEntry
type TeamAuditEntryData_Interface interface {
	isTeamAuditEntryData()
	GetTeam() *Team
	GetTeamName() string
	GetTeamResourcePath() URI
	GetTeamUrl() URI
}

func (*OrgRestoreMemberMembershipTeamAuditEntryData) isTeamAuditEntryData() {}
func (*TeamAddMemberAuditEntry) isTeamAuditEntryData()                      {}
func (*TeamAddRepositoryAuditEntry) isTeamAuditEntryData()                  {}
func (*TeamChangeParentTeamAuditEntry) isTeamAuditEntryData()               {}
func (*TeamRemoveMemberAuditEntry) isTeamAuditEntryData()                   {}
func (*TeamRemoveRepositoryAuditEntry) isTeamAuditEntryData()               {}

type TeamAuditEntryData struct {
	Interface TeamAuditEntryData_Interface
}

func (x *TeamAuditEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *TeamAuditEntryData) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for TeamAuditEntryData", info.Typename)
	case "OrgRestoreMemberMembershipTeamAuditEntryData":
		x.Interface = new(OrgRestoreMemberMembershipTeamAuditEntryData)
	case "TeamAddMemberAuditEntry":
		x.Interface = new(TeamAddMemberAuditEntry)
	case "TeamAddRepositoryAuditEntry":
		x.Interface = new(TeamAddRepositoryAuditEntry)
	case "TeamChangeParentTeamAuditEntry":
		x.Interface = new(TeamChangeParentTeamAuditEntry)
	case "TeamRemoveMemberAuditEntry":
		x.Interface = new(TeamRemoveMemberAuditEntry)
	case "TeamRemoveRepositoryAuditEntry":
		x.Interface = new(TeamRemoveRepositoryAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// TeamChangeParentTeamAuditEntry (OBJECT): Audit log entry for a team.change_parent_team event.
type TeamChangeParentTeamAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the TeamChangeParentTeamAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IsLdapMapped: Whether the team was mapped to an LDAP Group.
	IsLdapMapped bool `json:"isLdapMapped,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// ParentTeam: The new parent team.
	ParentTeam *Team `json:"parentTeam,omitempty"`

	// ParentTeamName: The name of the new parent team.
	ParentTeamName string `json:"parentTeamName,omitempty"`

	// ParentTeamNameWas: The name of the former parent team.
	ParentTeamNameWas string `json:"parentTeamNameWas,omitempty"`

	// ParentTeamResourcePath: The HTTP path for the parent team.
	ParentTeamResourcePath URI `json:"parentTeamResourcePath,omitempty"`

	// ParentTeamUrl: The HTTP URL for the parent team.
	ParentTeamUrl URI `json:"parentTeamUrl,omitempty"`

	// ParentTeamWas: The former parent team.
	ParentTeamWas *Team `json:"parentTeamWas,omitempty"`

	// ParentTeamWasResourcePath: The HTTP path for the previous parent team.
	ParentTeamWasResourcePath URI `json:"parentTeamWasResourcePath,omitempty"`

	// ParentTeamWasUrl: The HTTP URL for the previous parent team.
	ParentTeamWasUrl URI `json:"parentTeamWasUrl,omitempty"`

	// Team: The team associated with the action.
	Team *Team `json:"team,omitempty"`

	// TeamName: The name of the team.
	TeamName string `json:"teamName,omitempty"`

	// TeamResourcePath: The HTTP path for this team.
	TeamResourcePath URI `json:"teamResourcePath,omitempty"`

	// TeamUrl: The HTTP URL for this team.
	TeamUrl URI `json:"teamUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *TeamChangeParentTeamAuditEntry) GetAction() string                { return x.Action }
func (x *TeamChangeParentTeamAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *TeamChangeParentTeamAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *TeamChangeParentTeamAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *TeamChangeParentTeamAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *TeamChangeParentTeamAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *TeamChangeParentTeamAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *TeamChangeParentTeamAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *TeamChangeParentTeamAuditEntry) GetId() ID                        { return x.Id }
func (x *TeamChangeParentTeamAuditEntry) GetIsLdapMapped() bool            { return x.IsLdapMapped }
func (x *TeamChangeParentTeamAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *TeamChangeParentTeamAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *TeamChangeParentTeamAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *TeamChangeParentTeamAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *TeamChangeParentTeamAuditEntry) GetOrganizationUrl() URI      { return x.OrganizationUrl }
func (x *TeamChangeParentTeamAuditEntry) GetParentTeam() *Team         { return x.ParentTeam }
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamName() string    { return x.ParentTeamName }
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamNameWas() string { return x.ParentTeamNameWas }
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamResourcePath() URI {
	return x.ParentTeamResourcePath
}
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamUrl() URI   { return x.ParentTeamUrl }
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamWas() *Team { return x.ParentTeamWas }
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamWasResourcePath() URI {
	return x.ParentTeamWasResourcePath
}
func (x *TeamChangeParentTeamAuditEntry) GetParentTeamWasUrl() URI { return x.ParentTeamWasUrl }
func (x *TeamChangeParentTeamAuditEntry) GetTeam() *Team           { return x.Team }
func (x *TeamChangeParentTeamAuditEntry) GetTeamName() string      { return x.TeamName }
func (x *TeamChangeParentTeamAuditEntry) GetTeamResourcePath() URI { return x.TeamResourcePath }
func (x *TeamChangeParentTeamAuditEntry) GetTeamUrl() URI          { return x.TeamUrl }
func (x *TeamChangeParentTeamAuditEntry) GetUser() *User           { return x.User }
func (x *TeamChangeParentTeamAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *TeamChangeParentTeamAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *TeamChangeParentTeamAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// TeamConnection (OBJECT): The connection type for Team.
type TeamConnection struct {
	// Edges: A list of edges.
	Edges []*TeamEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Team `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *TeamConnection) GetEdges() []*TeamEdge  { return x.Edges }
func (x *TeamConnection) GetNodes() []*Team      { return x.Nodes }
func (x *TeamConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *TeamConnection) GetTotalCount() int     { return x.TotalCount }

// TeamDiscussion (OBJECT): A team discussion.
type TeamDiscussion struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the discussion's team.
	//
	// Deprecated: Author's association with the discussion's team.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: The body as Markdown.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// BodyVersion: Identifies the discussion body hash.
	//
	// Deprecated: Identifies the discussion body hash.
	BodyVersion string `json:"bodyVersion,omitempty"`

	// Comments: A list of comments on this discussion.
	//
	// Deprecated: A list of comments on this discussion.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy TeamDiscussionCommentOrder
	//   - fromComment Int
	Comments *TeamDiscussionCommentConnection `json:"comments,omitempty"`

	// CommentsResourcePath: The HTTP path for discussion comments.
	//
	// Deprecated: The HTTP path for discussion comments.
	CommentsResourcePath URI `json:"commentsResourcePath,omitempty"`

	// CommentsUrl: The HTTP URL for discussion comments.
	//
	// Deprecated: The HTTP URL for discussion comments.
	CommentsUrl URI `json:"commentsUrl,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// Id: The Node ID of the TeamDiscussion object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// IsPinned: Whether or not the discussion is pinned.
	//
	// Deprecated: Whether or not the discussion is pinned.
	IsPinned bool `json:"isPinned,omitempty"`

	// IsPrivate: Whether or not the discussion is only visible to team members and organization owners.
	//
	// Deprecated: Whether or not the discussion is only visible to team members and organization owners.
	IsPrivate bool `json:"isPrivate,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// Number: Identifies the discussion within its team.
	//
	// Deprecated: Identifies the discussion within its team.
	Number int `json:"number,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// ResourcePath: The HTTP path for this discussion.
	//
	// Deprecated: The HTTP path for this discussion.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Team: The team that defines the context of this discussion.
	//
	// Deprecated: The team that defines the context of this discussion.
	Team *Team `json:"team,omitempty"`

	// Title: The title of the discussion.
	//
	// Deprecated: The title of the discussion.
	Title string `json:"title,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this discussion.
	//
	// Deprecated: The HTTP URL for this discussion.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanPin: Whether or not the current viewer can pin this discussion.
	//
	// Deprecated: Whether or not the current viewer can pin this discussion.
	ViewerCanPin bool `json:"viewerCanPin,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanSubscribe: Check if the viewer is able to change their subscription status for the repository.
	ViewerCanSubscribe bool `json:"viewerCanSubscribe,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`

	// ViewerSubscription: Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
	ViewerSubscription SubscriptionState `json:"viewerSubscription,omitempty"`
}

func (x *TeamDiscussion) GetAuthor() Actor                                { return x.Author }
func (x *TeamDiscussion) GetAuthorAssociation() CommentAuthorAssociation  { return x.AuthorAssociation }
func (x *TeamDiscussion) GetBody() string                                 { return x.Body }
func (x *TeamDiscussion) GetBodyHTML() template.HTML                      { return x.BodyHTML }
func (x *TeamDiscussion) GetBodyText() string                             { return x.BodyText }
func (x *TeamDiscussion) GetBodyVersion() string                          { return x.BodyVersion }
func (x *TeamDiscussion) GetComments() *TeamDiscussionCommentConnection   { return x.Comments }
func (x *TeamDiscussion) GetCommentsResourcePath() URI                    { return x.CommentsResourcePath }
func (x *TeamDiscussion) GetCommentsUrl() URI                             { return x.CommentsUrl }
func (x *TeamDiscussion) GetCreatedAt() DateTime                          { return x.CreatedAt }
func (x *TeamDiscussion) GetCreatedViaEmail() bool                        { return x.CreatedViaEmail }
func (x *TeamDiscussion) GetDatabaseId() int                              { return x.DatabaseId }
func (x *TeamDiscussion) GetEditor() Actor                                { return x.Editor }
func (x *TeamDiscussion) GetId() ID                                       { return x.Id }
func (x *TeamDiscussion) GetIncludesCreatedEdit() bool                    { return x.IncludesCreatedEdit }
func (x *TeamDiscussion) GetIsPinned() bool                               { return x.IsPinned }
func (x *TeamDiscussion) GetIsPrivate() bool                              { return x.IsPrivate }
func (x *TeamDiscussion) GetLastEditedAt() DateTime                       { return x.LastEditedAt }
func (x *TeamDiscussion) GetNumber() int                                  { return x.Number }
func (x *TeamDiscussion) GetPublishedAt() DateTime                        { return x.PublishedAt }
func (x *TeamDiscussion) GetReactionGroups() []*ReactionGroup             { return x.ReactionGroups }
func (x *TeamDiscussion) GetReactions() *ReactionConnection               { return x.Reactions }
func (x *TeamDiscussion) GetResourcePath() URI                            { return x.ResourcePath }
func (x *TeamDiscussion) GetTeam() *Team                                  { return x.Team }
func (x *TeamDiscussion) GetTitle() string                                { return x.Title }
func (x *TeamDiscussion) GetUpdatedAt() DateTime                          { return x.UpdatedAt }
func (x *TeamDiscussion) GetUrl() URI                                     { return x.Url }
func (x *TeamDiscussion) GetUserContentEdits() *UserContentEditConnection { return x.UserContentEdits }
func (x *TeamDiscussion) GetViewerCanDelete() bool                        { return x.ViewerCanDelete }
func (x *TeamDiscussion) GetViewerCanPin() bool                           { return x.ViewerCanPin }
func (x *TeamDiscussion) GetViewerCanReact() bool                         { return x.ViewerCanReact }
func (x *TeamDiscussion) GetViewerCanSubscribe() bool                     { return x.ViewerCanSubscribe }
func (x *TeamDiscussion) GetViewerCanUpdate() bool                        { return x.ViewerCanUpdate }
func (x *TeamDiscussion) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *TeamDiscussion) GetViewerDidAuthor() bool                 { return x.ViewerDidAuthor }
func (x *TeamDiscussion) GetViewerSubscription() SubscriptionState { return x.ViewerSubscription }

// TeamDiscussionComment (OBJECT): A comment on a team discussion.
type TeamDiscussionComment struct {
	// Author: The actor who authored the comment.
	Author Actor `json:"author,omitempty"`

	// AuthorAssociation: Author's association with the comment's team.
	//
	// Deprecated: Author's association with the comment's team.
	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation,omitempty"`

	// Body: The body as Markdown.
	Body string `json:"body,omitempty"`

	// BodyHTML: The body rendered to HTML.
	BodyHTML template.HTML `json:"bodyHTML,omitempty"`

	// BodyText: The body rendered to text.
	BodyText string `json:"bodyText,omitempty"`

	// BodyVersion: The current version of the body content.
	//
	// Deprecated: The current version of the body content.
	BodyVersion string `json:"bodyVersion,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// CreatedViaEmail: Check if this comment was created via an email reply.
	CreatedViaEmail bool `json:"createdViaEmail,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Discussion: The discussion this comment is about.
	//
	// Deprecated: The discussion this comment is about.
	Discussion *TeamDiscussion `json:"discussion,omitempty"`

	// Editor: The actor who edited the comment.
	Editor Actor `json:"editor,omitempty"`

	// Id: The Node ID of the TeamDiscussionComment object.
	Id ID `json:"id,omitempty"`

	// IncludesCreatedEdit: Check if this comment was edited and includes an edit with the creation data.
	IncludesCreatedEdit bool `json:"includesCreatedEdit,omitempty"`

	// LastEditedAt: The moment the editor made the last edit.
	LastEditedAt DateTime `json:"lastEditedAt,omitempty"`

	// Number: Identifies the comment number.
	//
	// Deprecated: Identifies the comment number.
	Number int `json:"number,omitempty"`

	// PublishedAt: Identifies when the comment was published at.
	PublishedAt DateTime `json:"publishedAt,omitempty"`

	// ReactionGroups: A list of reactions grouped by content left on the subject.
	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`

	// Reactions: A list of Reactions left on the Issue.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - content ReactionContent
	//   - orderBy ReactionOrder
	Reactions *ReactionConnection `json:"reactions,omitempty"`

	// ResourcePath: The HTTP path for this comment.
	//
	// Deprecated: The HTTP path for this comment.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this comment.
	//
	// Deprecated: The HTTP URL for this comment.
	Url URI `json:"url,omitempty"`

	// UserContentEdits: A list of edits to this content.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`

	// ViewerCanDelete: Check if the current viewer can delete this object.
	ViewerCanDelete bool `json:"viewerCanDelete,omitempty"`

	// ViewerCanReact: Can user react to this subject.
	ViewerCanReact bool `json:"viewerCanReact,omitempty"`

	// ViewerCanUpdate: Check if the current viewer can update this object.
	ViewerCanUpdate bool `json:"viewerCanUpdate,omitempty"`

	// ViewerCannotUpdateReasons: Reasons why the current viewer can not update this comment.
	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`

	// ViewerDidAuthor: Did the viewer author this comment.
	ViewerDidAuthor bool `json:"viewerDidAuthor,omitempty"`
}

func (x *TeamDiscussionComment) GetAuthor() Actor { return x.Author }
func (x *TeamDiscussionComment) GetAuthorAssociation() CommentAuthorAssociation {
	return x.AuthorAssociation
}
func (x *TeamDiscussionComment) GetBody() string                     { return x.Body }
func (x *TeamDiscussionComment) GetBodyHTML() template.HTML          { return x.BodyHTML }
func (x *TeamDiscussionComment) GetBodyText() string                 { return x.BodyText }
func (x *TeamDiscussionComment) GetBodyVersion() string              { return x.BodyVersion }
func (x *TeamDiscussionComment) GetCreatedAt() DateTime              { return x.CreatedAt }
func (x *TeamDiscussionComment) GetCreatedViaEmail() bool            { return x.CreatedViaEmail }
func (x *TeamDiscussionComment) GetDatabaseId() int                  { return x.DatabaseId }
func (x *TeamDiscussionComment) GetDiscussion() *TeamDiscussion      { return x.Discussion }
func (x *TeamDiscussionComment) GetEditor() Actor                    { return x.Editor }
func (x *TeamDiscussionComment) GetId() ID                           { return x.Id }
func (x *TeamDiscussionComment) GetIncludesCreatedEdit() bool        { return x.IncludesCreatedEdit }
func (x *TeamDiscussionComment) GetLastEditedAt() DateTime           { return x.LastEditedAt }
func (x *TeamDiscussionComment) GetNumber() int                      { return x.Number }
func (x *TeamDiscussionComment) GetPublishedAt() DateTime            { return x.PublishedAt }
func (x *TeamDiscussionComment) GetReactionGroups() []*ReactionGroup { return x.ReactionGroups }
func (x *TeamDiscussionComment) GetReactions() *ReactionConnection   { return x.Reactions }
func (x *TeamDiscussionComment) GetResourcePath() URI                { return x.ResourcePath }
func (x *TeamDiscussionComment) GetUpdatedAt() DateTime              { return x.UpdatedAt }
func (x *TeamDiscussionComment) GetUrl() URI                         { return x.Url }
func (x *TeamDiscussionComment) GetUserContentEdits() *UserContentEditConnection {
	return x.UserContentEdits
}
func (x *TeamDiscussionComment) GetViewerCanDelete() bool { return x.ViewerCanDelete }
func (x *TeamDiscussionComment) GetViewerCanReact() bool  { return x.ViewerCanReact }
func (x *TeamDiscussionComment) GetViewerCanUpdate() bool { return x.ViewerCanUpdate }
func (x *TeamDiscussionComment) GetViewerCannotUpdateReasons() []CommentCannotUpdateReason {
	return x.ViewerCannotUpdateReasons
}
func (x *TeamDiscussionComment) GetViewerDidAuthor() bool { return x.ViewerDidAuthor }

// TeamDiscussionCommentConnection (OBJECT): The connection type for TeamDiscussionComment.
type TeamDiscussionCommentConnection struct {
	// Edges: A list of edges.
	Edges []*TeamDiscussionCommentEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*TeamDiscussionComment `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *TeamDiscussionCommentConnection) GetEdges() []*TeamDiscussionCommentEdge { return x.Edges }
func (x *TeamDiscussionCommentConnection) GetNodes() []*TeamDiscussionComment     { return x.Nodes }
func (x *TeamDiscussionCommentConnection) GetPageInfo() *PageInfo                 { return x.PageInfo }
func (x *TeamDiscussionCommentConnection) GetTotalCount() int                     { return x.TotalCount }

// TeamDiscussionCommentEdge (OBJECT): An edge in a connection.
type TeamDiscussionCommentEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *TeamDiscussionComment `json:"node,omitempty"`
}

func (x *TeamDiscussionCommentEdge) GetCursor() string               { return x.Cursor }
func (x *TeamDiscussionCommentEdge) GetNode() *TeamDiscussionComment { return x.Node }

// TeamDiscussionCommentOrder (INPUT_OBJECT): Ways in which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrder struct {
	// Field: The field by which to order nodes.
	//
	// GraphQL type: TeamDiscussionCommentOrderField!
	Field TeamDiscussionCommentOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order nodes.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// TeamDiscussionCommentOrderField (ENUM): Properties by which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrderField string

// TeamDiscussionCommentOrderField_NUMBER: Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
const TeamDiscussionCommentOrderField_NUMBER TeamDiscussionCommentOrderField = "NUMBER"

// TeamDiscussionConnection (OBJECT): The connection type for TeamDiscussion.
type TeamDiscussionConnection struct {
	// Edges: A list of edges.
	Edges []*TeamDiscussionEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*TeamDiscussion `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *TeamDiscussionConnection) GetEdges() []*TeamDiscussionEdge { return x.Edges }
func (x *TeamDiscussionConnection) GetNodes() []*TeamDiscussion     { return x.Nodes }
func (x *TeamDiscussionConnection) GetPageInfo() *PageInfo          { return x.PageInfo }
func (x *TeamDiscussionConnection) GetTotalCount() int              { return x.TotalCount }

// TeamDiscussionEdge (OBJECT): An edge in a connection.
type TeamDiscussionEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *TeamDiscussion `json:"node,omitempty"`
}

func (x *TeamDiscussionEdge) GetCursor() string        { return x.Cursor }
func (x *TeamDiscussionEdge) GetNode() *TeamDiscussion { return x.Node }

// TeamDiscussionOrder (INPUT_OBJECT): Ways in which team discussion connections can be ordered.
type TeamDiscussionOrder struct {
	// Field: The field by which to order nodes.
	//
	// GraphQL type: TeamDiscussionOrderField!
	Field TeamDiscussionOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order nodes.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// TeamDiscussionOrderField (ENUM): Properties by which team discussion connections can be ordered.
type TeamDiscussionOrderField string

// TeamDiscussionOrderField_CREATED_AT: Allows chronological ordering of team discussions.
const TeamDiscussionOrderField_CREATED_AT TeamDiscussionOrderField = "CREATED_AT"

// TeamEdge (OBJECT): An edge in a connection.
type TeamEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *Team `json:"node,omitempty"`
}

func (x *TeamEdge) GetCursor() string { return x.Cursor }
func (x *TeamEdge) GetNode() *Team    { return x.Node }

// TeamMemberConnection (OBJECT): The connection type for User.
type TeamMemberConnection struct {
	// Edges: A list of edges.
	Edges []*TeamMemberEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *TeamMemberConnection) GetEdges() []*TeamMemberEdge { return x.Edges }
func (x *TeamMemberConnection) GetNodes() []*User           { return x.Nodes }
func (x *TeamMemberConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *TeamMemberConnection) GetTotalCount() int          { return x.TotalCount }

// TeamMemberEdge (OBJECT): Represents a user who is a member of a team.
type TeamMemberEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// MemberAccessResourcePath: The HTTP path to the organization's member access page.
	MemberAccessResourcePath URI `json:"memberAccessResourcePath,omitempty"`

	// MemberAccessUrl: The HTTP URL to the organization's member access page.
	MemberAccessUrl URI `json:"memberAccessUrl,omitempty"`

	// Node: undocumented.
	Node *User `json:"node,omitempty"`

	// Role: The role the member has on the team.
	Role TeamMemberRole `json:"role,omitempty"`
}

func (x *TeamMemberEdge) GetCursor() string                { return x.Cursor }
func (x *TeamMemberEdge) GetMemberAccessResourcePath() URI { return x.MemberAccessResourcePath }
func (x *TeamMemberEdge) GetMemberAccessUrl() URI          { return x.MemberAccessUrl }
func (x *TeamMemberEdge) GetNode() *User                   { return x.Node }
func (x *TeamMemberEdge) GetRole() TeamMemberRole          { return x.Role }

// TeamMemberOrder (INPUT_OBJECT): Ordering options for team member connections.
type TeamMemberOrder struct {
	// Field: The field to order team members by.
	//
	// GraphQL type: TeamMemberOrderField!
	Field TeamMemberOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// TeamMemberOrderField (ENUM): Properties by which team member connections can be ordered.
type TeamMemberOrderField string

// TeamMemberOrderField_LOGIN: Order team members by login.
const TeamMemberOrderField_LOGIN TeamMemberOrderField = "LOGIN"

// TeamMemberOrderField_CREATED_AT: Order team members by creation time.
const TeamMemberOrderField_CREATED_AT TeamMemberOrderField = "CREATED_AT"

// TeamMemberRole (ENUM): The possible team member roles; either 'maintainer' or 'member'.
type TeamMemberRole string

// TeamMemberRole_MAINTAINER: A team maintainer has permission to add and remove team members.
const TeamMemberRole_MAINTAINER TeamMemberRole = "MAINTAINER"

// TeamMemberRole_MEMBER: A team member has no administrative permissions on the team.
const TeamMemberRole_MEMBER TeamMemberRole = "MEMBER"

// TeamMembershipType (ENUM): Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
type TeamMembershipType string

// TeamMembershipType_IMMEDIATE: Includes only immediate members of the team.
const TeamMembershipType_IMMEDIATE TeamMembershipType = "IMMEDIATE"

// TeamMembershipType_CHILD_TEAM: Includes only child team members for the team.
const TeamMembershipType_CHILD_TEAM TeamMembershipType = "CHILD_TEAM"

// TeamMembershipType_ALL: Includes immediate and child team members for the team.
const TeamMembershipType_ALL TeamMembershipType = "ALL"

// TeamNotificationSetting (ENUM): The possible team notification values.
type TeamNotificationSetting string

// TeamNotificationSetting_NOTIFICATIONS_ENABLED: Everyone will receive notifications when the team is @mentioned.
const TeamNotificationSetting_NOTIFICATIONS_ENABLED TeamNotificationSetting = "NOTIFICATIONS_ENABLED"

// TeamNotificationSetting_NOTIFICATIONS_DISABLED: No one will receive notifications.
const TeamNotificationSetting_NOTIFICATIONS_DISABLED TeamNotificationSetting = "NOTIFICATIONS_DISABLED"

// TeamOrder (INPUT_OBJECT): Ways in which team connections can be ordered.
type TeamOrder struct {
	// Field: The field in which to order nodes by.
	//
	// GraphQL type: TeamOrderField!
	Field TeamOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order nodes.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// TeamOrderField (ENUM): Properties by which team connections can be ordered.
type TeamOrderField string

// TeamOrderField_NAME: Allows ordering a list of teams by name.
const TeamOrderField_NAME TeamOrderField = "NAME"

// TeamPrivacy (ENUM): The possible team privacy values.
type TeamPrivacy string

// TeamPrivacy_SECRET: A secret team can only be seen by its members.
const TeamPrivacy_SECRET TeamPrivacy = "SECRET"

// TeamPrivacy_VISIBLE: A visible team can be seen and @mentioned by every member of the organization.
const TeamPrivacy_VISIBLE TeamPrivacy = "VISIBLE"

// TeamRemoveMemberAuditEntry (OBJECT): Audit log entry for a team.remove_member event.
type TeamRemoveMemberAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the TeamRemoveMemberAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IsLdapMapped: Whether the team was mapped to an LDAP Group.
	IsLdapMapped bool `json:"isLdapMapped,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Team: The team associated with the action.
	Team *Team `json:"team,omitempty"`

	// TeamName: The name of the team.
	TeamName string `json:"teamName,omitempty"`

	// TeamResourcePath: The HTTP path for this team.
	TeamResourcePath URI `json:"teamResourcePath,omitempty"`

	// TeamUrl: The HTTP URL for this team.
	TeamUrl URI `json:"teamUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *TeamRemoveMemberAuditEntry) GetAction() string                { return x.Action }
func (x *TeamRemoveMemberAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *TeamRemoveMemberAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *TeamRemoveMemberAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *TeamRemoveMemberAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *TeamRemoveMemberAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *TeamRemoveMemberAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *TeamRemoveMemberAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *TeamRemoveMemberAuditEntry) GetId() ID                        { return x.Id }
func (x *TeamRemoveMemberAuditEntry) GetIsLdapMapped() bool            { return x.IsLdapMapped }
func (x *TeamRemoveMemberAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *TeamRemoveMemberAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *TeamRemoveMemberAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *TeamRemoveMemberAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *TeamRemoveMemberAuditEntry) GetOrganizationUrl() URI  { return x.OrganizationUrl }
func (x *TeamRemoveMemberAuditEntry) GetTeam() *Team           { return x.Team }
func (x *TeamRemoveMemberAuditEntry) GetTeamName() string      { return x.TeamName }
func (x *TeamRemoveMemberAuditEntry) GetTeamResourcePath() URI { return x.TeamResourcePath }
func (x *TeamRemoveMemberAuditEntry) GetTeamUrl() URI          { return x.TeamUrl }
func (x *TeamRemoveMemberAuditEntry) GetUser() *User           { return x.User }
func (x *TeamRemoveMemberAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *TeamRemoveMemberAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *TeamRemoveMemberAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// TeamRemoveRepositoryAuditEntry (OBJECT): Audit log entry for a team.remove_repository event.
type TeamRemoveRepositoryAuditEntry struct {
	// Action: The action name.
	Action string `json:"action,omitempty"`

	// Actor: The user who initiated the action.
	Actor AuditEntryActor `json:"actor,omitempty"`

	// ActorIp: The IP address of the actor.
	ActorIp string `json:"actorIp,omitempty"`

	// ActorLocation: A readable representation of the actor's location.
	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`

	// ActorLogin: The username of the user who initiated the action.
	ActorLogin string `json:"actorLogin,omitempty"`

	// ActorResourcePath: The HTTP path for the actor.
	ActorResourcePath URI `json:"actorResourcePath,omitempty"`

	// ActorUrl: The HTTP URL for the actor.
	ActorUrl URI `json:"actorUrl,omitempty"`

	// CreatedAt: The time the action was initiated.
	CreatedAt PreciseDateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the TeamRemoveRepositoryAuditEntry object.
	Id ID `json:"id,omitempty"`

	// IsLdapMapped: Whether the team was mapped to an LDAP Group.
	IsLdapMapped bool `json:"isLdapMapped,omitempty"`

	// OperationType: The corresponding operation type for the action.
	OperationType OperationType `json:"operationType,omitempty"`

	// Organization: The Organization associated with the Audit Entry.
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationName: The name of the Organization.
	OrganizationName string `json:"organizationName,omitempty"`

	// OrganizationResourcePath: The HTTP path for the organization.
	OrganizationResourcePath URI `json:"organizationResourcePath,omitempty"`

	// OrganizationUrl: The HTTP URL for the organization.
	OrganizationUrl URI `json:"organizationUrl,omitempty"`

	// Repository: The repository associated with the action.
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryName: The name of the repository.
	RepositoryName string `json:"repositoryName,omitempty"`

	// RepositoryResourcePath: The HTTP path for the repository.
	RepositoryResourcePath URI `json:"repositoryResourcePath,omitempty"`

	// RepositoryUrl: The HTTP URL for the repository.
	RepositoryUrl URI `json:"repositoryUrl,omitempty"`

	// Team: The team associated with the action.
	Team *Team `json:"team,omitempty"`

	// TeamName: The name of the team.
	TeamName string `json:"teamName,omitempty"`

	// TeamResourcePath: The HTTP path for this team.
	TeamResourcePath URI `json:"teamResourcePath,omitempty"`

	// TeamUrl: The HTTP URL for this team.
	TeamUrl URI `json:"teamUrl,omitempty"`

	// User: The user affected by the action.
	User *User `json:"user,omitempty"`

	// UserLogin: For actions involving two users, the actor is the initiator and the user is the affected user.
	UserLogin string `json:"userLogin,omitempty"`

	// UserResourcePath: The HTTP path for the user.
	UserResourcePath URI `json:"userResourcePath,omitempty"`

	// UserUrl: The HTTP URL for the user.
	UserUrl URI `json:"userUrl,omitempty"`
}

func (x *TeamRemoveRepositoryAuditEntry) GetAction() string                { return x.Action }
func (x *TeamRemoveRepositoryAuditEntry) GetActor() AuditEntryActor        { return x.Actor }
func (x *TeamRemoveRepositoryAuditEntry) GetActorIp() string               { return x.ActorIp }
func (x *TeamRemoveRepositoryAuditEntry) GetActorLocation() *ActorLocation { return x.ActorLocation }
func (x *TeamRemoveRepositoryAuditEntry) GetActorLogin() string            { return x.ActorLogin }
func (x *TeamRemoveRepositoryAuditEntry) GetActorResourcePath() URI        { return x.ActorResourcePath }
func (x *TeamRemoveRepositoryAuditEntry) GetActorUrl() URI                 { return x.ActorUrl }
func (x *TeamRemoveRepositoryAuditEntry) GetCreatedAt() PreciseDateTime    { return x.CreatedAt }
func (x *TeamRemoveRepositoryAuditEntry) GetId() ID                        { return x.Id }
func (x *TeamRemoveRepositoryAuditEntry) GetIsLdapMapped() bool            { return x.IsLdapMapped }
func (x *TeamRemoveRepositoryAuditEntry) GetOperationType() OperationType  { return x.OperationType }
func (x *TeamRemoveRepositoryAuditEntry) GetOrganization() *Organization   { return x.Organization }
func (x *TeamRemoveRepositoryAuditEntry) GetOrganizationName() string      { return x.OrganizationName }
func (x *TeamRemoveRepositoryAuditEntry) GetOrganizationResourcePath() URI {
	return x.OrganizationResourcePath
}
func (x *TeamRemoveRepositoryAuditEntry) GetOrganizationUrl() URI    { return x.OrganizationUrl }
func (x *TeamRemoveRepositoryAuditEntry) GetRepository() *Repository { return x.Repository }
func (x *TeamRemoveRepositoryAuditEntry) GetRepositoryName() string  { return x.RepositoryName }
func (x *TeamRemoveRepositoryAuditEntry) GetRepositoryResourcePath() URI {
	return x.RepositoryResourcePath
}
func (x *TeamRemoveRepositoryAuditEntry) GetRepositoryUrl() URI    { return x.RepositoryUrl }
func (x *TeamRemoveRepositoryAuditEntry) GetTeam() *Team           { return x.Team }
func (x *TeamRemoveRepositoryAuditEntry) GetTeamName() string      { return x.TeamName }
func (x *TeamRemoveRepositoryAuditEntry) GetTeamResourcePath() URI { return x.TeamResourcePath }
func (x *TeamRemoveRepositoryAuditEntry) GetTeamUrl() URI          { return x.TeamUrl }
func (x *TeamRemoveRepositoryAuditEntry) GetUser() *User           { return x.User }
func (x *TeamRemoveRepositoryAuditEntry) GetUserLogin() string     { return x.UserLogin }
func (x *TeamRemoveRepositoryAuditEntry) GetUserResourcePath() URI { return x.UserResourcePath }
func (x *TeamRemoveRepositoryAuditEntry) GetUserUrl() URI          { return x.UserUrl }

// TeamRepositoryConnection (OBJECT): The connection type for Repository.
type TeamRepositoryConnection struct {
	// Edges: A list of edges.
	Edges []*TeamRepositoryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*Repository `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *TeamRepositoryConnection) GetEdges() []*TeamRepositoryEdge { return x.Edges }
func (x *TeamRepositoryConnection) GetNodes() []*Repository         { return x.Nodes }
func (x *TeamRepositoryConnection) GetPageInfo() *PageInfo          { return x.PageInfo }
func (x *TeamRepositoryConnection) GetTotalCount() int              { return x.TotalCount }

// TeamRepositoryEdge (OBJECT): Represents a team repository.
type TeamRepositoryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: undocumented.
	Node *Repository `json:"node,omitempty"`

	// Permission: The permission level the team has on the repository.
	Permission RepositoryPermission `json:"permission,omitempty"`
}

func (x *TeamRepositoryEdge) GetCursor() string                   { return x.Cursor }
func (x *TeamRepositoryEdge) GetNode() *Repository                { return x.Node }
func (x *TeamRepositoryEdge) GetPermission() RepositoryPermission { return x.Permission }

// TeamRepositoryOrder (INPUT_OBJECT): Ordering options for team repository connections.
type TeamRepositoryOrder struct {
	// Field: The field to order repositories by.
	//
	// GraphQL type: TeamRepositoryOrderField!
	Field TeamRepositoryOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// TeamRepositoryOrderField (ENUM): Properties by which team repository connections can be ordered.
type TeamRepositoryOrderField string

// TeamRepositoryOrderField_CREATED_AT: Order repositories by creation time.
const TeamRepositoryOrderField_CREATED_AT TeamRepositoryOrderField = "CREATED_AT"

// TeamRepositoryOrderField_UPDATED_AT: Order repositories by update time.
const TeamRepositoryOrderField_UPDATED_AT TeamRepositoryOrderField = "UPDATED_AT"

// TeamRepositoryOrderField_PUSHED_AT: Order repositories by push time.
const TeamRepositoryOrderField_PUSHED_AT TeamRepositoryOrderField = "PUSHED_AT"

// TeamRepositoryOrderField_NAME: Order repositories by name.
const TeamRepositoryOrderField_NAME TeamRepositoryOrderField = "NAME"

// TeamRepositoryOrderField_PERMISSION: Order repositories by permission.
const TeamRepositoryOrderField_PERMISSION TeamRepositoryOrderField = "PERMISSION"

// TeamRepositoryOrderField_STARGAZERS: Order repositories by number of stargazers.
const TeamRepositoryOrderField_STARGAZERS TeamRepositoryOrderField = "STARGAZERS"

// TeamReviewAssignmentAlgorithm (ENUM): The possible team review assignment algorithms.
type TeamReviewAssignmentAlgorithm string

// TeamReviewAssignmentAlgorithm_ROUND_ROBIN: Alternate reviews between each team member.
const TeamReviewAssignmentAlgorithm_ROUND_ROBIN TeamReviewAssignmentAlgorithm = "ROUND_ROBIN"

// TeamReviewAssignmentAlgorithm_LOAD_BALANCE: Balance review load across the entire team.
const TeamReviewAssignmentAlgorithm_LOAD_BALANCE TeamReviewAssignmentAlgorithm = "LOAD_BALANCE"

// TeamRole (ENUM): The role of a user on a team.
type TeamRole string

// TeamRole_ADMIN: User has admin rights on the team.
const TeamRole_ADMIN TeamRole = "ADMIN"

// TeamRole_MEMBER: User is a member of the team.
const TeamRole_MEMBER TeamRole = "MEMBER"

// TextMatch (OBJECT): A text match within a search result.
type TextMatch struct {
	// Fragment: The specific text fragment within the property matched on.
	Fragment string `json:"fragment,omitempty"`

	// Highlights: Highlights within the matched fragment.
	Highlights []*TextMatchHighlight `json:"highlights,omitempty"`

	// Property: The property matched on.
	Property string `json:"property,omitempty"`
}

func (x *TextMatch) GetFragment() string                  { return x.Fragment }
func (x *TextMatch) GetHighlights() []*TextMatchHighlight { return x.Highlights }
func (x *TextMatch) GetProperty() string                  { return x.Property }

// TextMatchHighlight (OBJECT): Represents a single highlight in a search result match.
type TextMatchHighlight struct {
	// BeginIndice: The indice in the fragment where the matched text begins.
	BeginIndice int `json:"beginIndice,omitempty"`

	// EndIndice: The indice in the fragment where the matched text ends.
	EndIndice int `json:"endIndice,omitempty"`

	// Text: The text matched.
	Text string `json:"text,omitempty"`
}

func (x *TextMatchHighlight) GetBeginIndice() int { return x.BeginIndice }
func (x *TextMatchHighlight) GetEndIndice() int   { return x.EndIndice }
func (x *TextMatchHighlight) GetText() string     { return x.Text }

// ThreadSubscriptionFormAction (ENUM): The possible states of a thread subscription form action.
type ThreadSubscriptionFormAction string

// ThreadSubscriptionFormAction_NONE: The User cannot subscribe or unsubscribe to the thread.
const ThreadSubscriptionFormAction_NONE ThreadSubscriptionFormAction = "NONE"

// ThreadSubscriptionFormAction_SUBSCRIBE: The User can subscribe to the thread.
const ThreadSubscriptionFormAction_SUBSCRIBE ThreadSubscriptionFormAction = "SUBSCRIBE"

// ThreadSubscriptionFormAction_UNSUBSCRIBE: The User can unsubscribe to the thread.
const ThreadSubscriptionFormAction_UNSUBSCRIBE ThreadSubscriptionFormAction = "UNSUBSCRIBE"

// ThreadSubscriptionState (ENUM): The possible states of a subscription.
type ThreadSubscriptionState string

// ThreadSubscriptionState_UNAVAILABLE: The subscription status is currently unavailable.
const ThreadSubscriptionState_UNAVAILABLE ThreadSubscriptionState = "UNAVAILABLE"

// ThreadSubscriptionState_DISABLED: The subscription status is currently disabled.
const ThreadSubscriptionState_DISABLED ThreadSubscriptionState = "DISABLED"

// ThreadSubscriptionState_IGNORING_LIST: The User is never notified because they are ignoring the list.
const ThreadSubscriptionState_IGNORING_LIST ThreadSubscriptionState = "IGNORING_LIST"

// ThreadSubscriptionState_SUBSCRIBED_TO_THREAD_EVENTS: The User is notified because they chose custom settings for this thread.
const ThreadSubscriptionState_SUBSCRIBED_TO_THREAD_EVENTS ThreadSubscriptionState = "SUBSCRIBED_TO_THREAD_EVENTS"

// ThreadSubscriptionState_IGNORING_THREAD: The User is never notified because they are ignoring the thread.
const ThreadSubscriptionState_IGNORING_THREAD ThreadSubscriptionState = "IGNORING_THREAD"

// ThreadSubscriptionState_SUBSCRIBED_TO_LIST: The User is notified becuase they are watching the list.
const ThreadSubscriptionState_SUBSCRIBED_TO_LIST ThreadSubscriptionState = "SUBSCRIBED_TO_LIST"

// ThreadSubscriptionState_SUBSCRIBED_TO_THREAD_TYPE: The User is notified because they chose custom settings for this thread.
const ThreadSubscriptionState_SUBSCRIBED_TO_THREAD_TYPE ThreadSubscriptionState = "SUBSCRIBED_TO_THREAD_TYPE"

// ThreadSubscriptionState_SUBSCRIBED_TO_THREAD: The User is notified because they are subscribed to the thread.
const ThreadSubscriptionState_SUBSCRIBED_TO_THREAD ThreadSubscriptionState = "SUBSCRIBED_TO_THREAD"

// ThreadSubscriptionState_NONE: The User is not recieving notifications from this thread.
const ThreadSubscriptionState_NONE ThreadSubscriptionState = "NONE"

// Topic (OBJECT): A topic aggregates entities that are related to a subject.
type Topic struct {
	// Id: The Node ID of the Topic object.
	Id ID `json:"id,omitempty"`

	// Name: The topic's name.
	Name string `json:"name,omitempty"`

	// RelatedTopics: A list of related topics, including aliases of this topic, sorted with the most relevant
	// first. Returns up to 10 Topics.
	// .
	//
	// Query arguments:
	//   - first Int
	RelatedTopics []*Topic `json:"relatedTopics,omitempty"`

	// Repositories: A list of repositories.
	//
	// Query arguments:
	//   - privacy RepositoryPrivacy
	//   - visibility RepositoryVisibility
	//   - orderBy RepositoryOrder
	//   - affiliations [RepositoryAffiliation]
	//   - ownerAffiliations [RepositoryAffiliation]
	//   - isLocked Boolean
	//   - hasIssuesEnabled Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - sponsorableOnly Boolean
	Repositories *RepositoryConnection `json:"repositories,omitempty"`

	// StargazerCount: Returns a count of how many stargazers there are on this object
	// .
	StargazerCount int `json:"stargazerCount,omitempty"`

	// Stargazers: A list of users who have starred this starrable.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy StarOrder
	Stargazers *StargazerConnection `json:"stargazers,omitempty"`

	// ViewerHasStarred: Returns a boolean indicating whether the viewing user has starred this starrable.
	ViewerHasStarred bool `json:"viewerHasStarred,omitempty"`
}

func (x *Topic) GetId() ID                              { return x.Id }
func (x *Topic) GetName() string                        { return x.Name }
func (x *Topic) GetRelatedTopics() []*Topic             { return x.RelatedTopics }
func (x *Topic) GetRepositories() *RepositoryConnection { return x.Repositories }
func (x *Topic) GetStargazerCount() int                 { return x.StargazerCount }
func (x *Topic) GetStargazers() *StargazerConnection    { return x.Stargazers }
func (x *Topic) GetViewerHasStarred() bool              { return x.ViewerHasStarred }

// TopicAuditEntryData (INTERFACE): Metadata for an audit entry with a topic.
// TopicAuditEntryData_Interface: Metadata for an audit entry with a topic.
//
// Possible types:
//
//   - *RepoAddTopicAuditEntry
//   - *RepoRemoveTopicAuditEntry
type TopicAuditEntryData_Interface interface {
	isTopicAuditEntryData()
	GetTopic() *Topic
	GetTopicName() string
}

func (*RepoAddTopicAuditEntry) isTopicAuditEntryData()    {}
func (*RepoRemoveTopicAuditEntry) isTopicAuditEntryData() {}

type TopicAuditEntryData struct {
	Interface TopicAuditEntryData_Interface
}

func (x *TopicAuditEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *TopicAuditEntryData) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for TopicAuditEntryData", info.Typename)
	case "RepoAddTopicAuditEntry":
		x.Interface = new(RepoAddTopicAuditEntry)
	case "RepoRemoveTopicAuditEntry":
		x.Interface = new(RepoRemoveTopicAuditEntry)
	}
	return json.Unmarshal(js, x.Interface)
}

// TopicSuggestionDeclineReason (ENUM): Reason that the suggested topic is declined.
type TopicSuggestionDeclineReason string

// TopicSuggestionDeclineReason_NOT_RELEVANT: The suggested topic is not relevant to the repository.
const TopicSuggestionDeclineReason_NOT_RELEVANT TopicSuggestionDeclineReason = "NOT_RELEVANT"

// TopicSuggestionDeclineReason_TOO_SPECIFIC: The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
const TopicSuggestionDeclineReason_TOO_SPECIFIC TopicSuggestionDeclineReason = "TOO_SPECIFIC"

// TopicSuggestionDeclineReason_PERSONAL_PREFERENCE: The viewer does not like the suggested topic.
const TopicSuggestionDeclineReason_PERSONAL_PREFERENCE TopicSuggestionDeclineReason = "PERSONAL_PREFERENCE"

// TopicSuggestionDeclineReason_TOO_GENERAL: The suggested topic is too general for the repository.
const TopicSuggestionDeclineReason_TOO_GENERAL TopicSuggestionDeclineReason = "TOO_GENERAL"

// TrackedIssueStates (ENUM): The possible states of a tracked issue.
type TrackedIssueStates string

// TrackedIssueStates_OPEN: The tracked issue is open.
const TrackedIssueStates_OPEN TrackedIssueStates = "OPEN"

// TrackedIssueStates_CLOSED: The tracked issue is closed.
const TrackedIssueStates_CLOSED TrackedIssueStates = "CLOSED"

// TransferEnterpriseOrganizationInput (INPUT_OBJECT): Autogenerated input type of TransferEnterpriseOrganization.
type TransferEnterpriseOrganizationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: The ID of the organization to transfer.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// DestinationEnterpriseId: The ID of the enterprise where the organization should be transferred.
	//
	// GraphQL type: ID!
	DestinationEnterpriseId ID `json:"destinationEnterpriseId,omitempty"`
}

// TransferEnterpriseOrganizationPayload (OBJECT): Autogenerated return type of TransferEnterpriseOrganization.
type TransferEnterpriseOrganizationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Organization: The organization for which a transfer was initiated.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *TransferEnterpriseOrganizationPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *TransferEnterpriseOrganizationPayload) GetOrganization() *Organization {
	return x.Organization
}

// TransferIssueInput (INPUT_OBJECT): Autogenerated input type of TransferIssue.
type TransferIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The Node ID of the issue to be transferred.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`

	// RepositoryId: The Node ID of the repository the issue should be transferred to.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// CreateLabelsIfMissing: Whether to create labels if they don't exist in the target repository (matched by name).
	//
	// GraphQL type: Boolean
	CreateLabelsIfMissing bool `json:"createLabelsIfMissing,omitempty"`
}

// TransferIssuePayload (OBJECT): Autogenerated return type of TransferIssue.
type TransferIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue that was transferred.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *TransferIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *TransferIssuePayload) GetIssue() *Issue            { return x.Issue }

// TransferredEvent (OBJECT): Represents a 'transferred' event on a given issue or pull request.
type TransferredEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// FromRepository: The repository this came from.
	FromRepository *Repository `json:"fromRepository,omitempty"`

	// Id: The Node ID of the TransferredEvent object.
	Id ID `json:"id,omitempty"`

	// Issue: Identifies the issue associated with the event.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *TransferredEvent) GetActor() Actor                { return x.Actor }
func (x *TransferredEvent) GetCreatedAt() DateTime         { return x.CreatedAt }
func (x *TransferredEvent) GetFromRepository() *Repository { return x.FromRepository }
func (x *TransferredEvent) GetId() ID                      { return x.Id }
func (x *TransferredEvent) GetIssue() *Issue               { return x.Issue }

// Tree (OBJECT): Represents a Git tree.
type Tree struct {
	// AbbreviatedOid: An abbreviated version of the Git object ID.
	AbbreviatedOid string `json:"abbreviatedOid,omitempty"`

	// CommitResourcePath: The HTTP path for this Git object.
	CommitResourcePath URI `json:"commitResourcePath,omitempty"`

	// CommitUrl: The HTTP URL for this Git object.
	CommitUrl URI `json:"commitUrl,omitempty"`

	// Entries: A list of tree entries.
	Entries []*TreeEntry `json:"entries,omitempty"`

	// Id: The Node ID of the Tree object.
	Id ID `json:"id,omitempty"`

	// Oid: The Git object ID.
	Oid GitObjectID `json:"oid,omitempty"`

	// Repository: The Repository the Git object belongs to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *Tree) GetAbbreviatedOid() string  { return x.AbbreviatedOid }
func (x *Tree) GetCommitResourcePath() URI { return x.CommitResourcePath }
func (x *Tree) GetCommitUrl() URI          { return x.CommitUrl }
func (x *Tree) GetEntries() []*TreeEntry   { return x.Entries }
func (x *Tree) GetId() ID                  { return x.Id }
func (x *Tree) GetOid() GitObjectID        { return x.Oid }
func (x *Tree) GetRepository() *Repository { return x.Repository }

// TreeEntry (OBJECT): Represents a Git tree entry.
type TreeEntry struct {
	// Extension: The extension of the file.
	Extension string `json:"extension,omitempty"`

	// IsGenerated: Whether or not this tree entry is generated.
	IsGenerated bool `json:"isGenerated,omitempty"`

	// Language: The programming language this file is written in.
	Language *Language `json:"language,omitempty"`

	// LineCount: Number of lines in the file.
	LineCount int `json:"lineCount,omitempty"`

	// Mode: Entry file mode.
	Mode int `json:"mode,omitempty"`

	// Name: Entry file name.
	Name string `json:"name,omitempty"`

	// NameRaw: Entry file name. (Base64-encoded).
	NameRaw Base64String `json:"nameRaw,omitempty"`

	// Object: Entry file object.
	Object GitObject `json:"object,omitempty"`

	// Oid: Entry file Git object ID.
	Oid GitObjectID `json:"oid,omitempty"`

	// Path: The full path of the file.
	Path string `json:"path,omitempty"`

	// PathRaw: The full path of the file. (Base64-encoded).
	PathRaw Base64String `json:"pathRaw,omitempty"`

	// Repository: The Repository the tree entry belongs to.
	Repository *Repository `json:"repository,omitempty"`

	// Size: Entry byte size.
	Size int `json:"size,omitempty"`

	// Submodule: If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule.
	Submodule *Submodule `json:"submodule,omitempty"`

	// Type: Entry file type.
	Type string `json:"type,omitempty"`
}

func (x *TreeEntry) GetExtension() string       { return x.Extension }
func (x *TreeEntry) GetIsGenerated() bool       { return x.IsGenerated }
func (x *TreeEntry) GetLanguage() *Language     { return x.Language }
func (x *TreeEntry) GetLineCount() int          { return x.LineCount }
func (x *TreeEntry) GetMode() int               { return x.Mode }
func (x *TreeEntry) GetName() string            { return x.Name }
func (x *TreeEntry) GetNameRaw() Base64String   { return x.NameRaw }
func (x *TreeEntry) GetObject() GitObject       { return x.Object }
func (x *TreeEntry) GetOid() GitObjectID        { return x.Oid }
func (x *TreeEntry) GetPath() string            { return x.Path }
func (x *TreeEntry) GetPathRaw() Base64String   { return x.PathRaw }
func (x *TreeEntry) GetRepository() *Repository { return x.Repository }
func (x *TreeEntry) GetSize() int               { return x.Size }
func (x *TreeEntry) GetSubmodule() *Submodule   { return x.Submodule }
func (x *TreeEntry) GetType() string            { return x.Type }

// TwoFactorCredentialSecurityType (ENUM): Filters by whether or not 2FA is enabled and if the method configured is considered secure or insecure.
type TwoFactorCredentialSecurityType string

// TwoFactorCredentialSecurityType_SECURE: Has only secure methods of two-factor authentication.
const TwoFactorCredentialSecurityType_SECURE TwoFactorCredentialSecurityType = "SECURE"

// TwoFactorCredentialSecurityType_INSECURE: Has an insecure method of two-factor authentication. GitHub currently defines this as SMS two-factor authentication.
const TwoFactorCredentialSecurityType_INSECURE TwoFactorCredentialSecurityType = "INSECURE"

// TwoFactorCredentialSecurityType_DISABLED: No method of two-factor authentication.
const TwoFactorCredentialSecurityType_DISABLED TwoFactorCredentialSecurityType = "DISABLED"

// URI (SCALAR): An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
type URI string

// UnarchiveProjectV2ItemInput (INPUT_OBJECT): Autogenerated input type of UnarchiveProjectV2Item.
type UnarchiveProjectV2ItemInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to archive the item from.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ItemId: The ID of the ProjectV2Item to unarchive.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`
}

// UnarchiveProjectV2ItemPayload (OBJECT): Autogenerated return type of UnarchiveProjectV2Item.
type UnarchiveProjectV2ItemPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Item: The item unarchived from the project.
	Item *ProjectV2Item `json:"item,omitempty"`
}

func (x *UnarchiveProjectV2ItemPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnarchiveProjectV2ItemPayload) GetItem() *ProjectV2Item     { return x.Item }

// UnarchiveRepositoryInput (INPUT_OBJECT): Autogenerated input type of UnarchiveRepository.
type UnarchiveRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The ID of the repository to unarchive.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// UnarchiveRepositoryPayload (OBJECT): Autogenerated return type of UnarchiveRepository.
type UnarchiveRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository that was unarchived.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UnarchiveRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnarchiveRepositoryPayload) GetRepository() *Repository  { return x.Repository }

// UnassignedEvent (OBJECT): Represents an 'unassigned' event on any assignable object.
type UnassignedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Assignable: Identifies the assignable associated with the event.
	Assignable Assignable `json:"assignable,omitempty"`

	// Assignee: Identifies the user or mannequin that was unassigned.
	Assignee Assignee `json:"assignee,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the UnassignedEvent object.
	Id ID `json:"id,omitempty"`

	// User: Identifies the subject (user) who was unassigned.
	//
	// Deprecated: Identifies the subject (user) who was unassigned.
	User *User `json:"user,omitempty"`
}

func (x *UnassignedEvent) GetActor() Actor           { return x.Actor }
func (x *UnassignedEvent) GetAssignable() Assignable { return x.Assignable }
func (x *UnassignedEvent) GetAssignee() Assignee     { return x.Assignee }
func (x *UnassignedEvent) GetCreatedAt() DateTime    { return x.CreatedAt }
func (x *UnassignedEvent) GetId() ID                 { return x.Id }
func (x *UnassignedEvent) GetUser() *User            { return x.User }

// UnfollowOrganizationInput (INPUT_OBJECT): Autogenerated input type of UnfollowOrganization.
type UnfollowOrganizationInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: ID of the organization to unfollow.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`
}

// UnfollowOrganizationPayload (OBJECT): Autogenerated return type of UnfollowOrganization.
type UnfollowOrganizationPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Organization: The organization that was unfollowed.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *UnfollowOrganizationPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *UnfollowOrganizationPayload) GetOrganization() *Organization { return x.Organization }

// UnfollowUserInput (INPUT_OBJECT): Autogenerated input type of UnfollowUser.
type UnfollowUserInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// UserId: ID of the user to unfollow.
	//
	// GraphQL type: ID!
	UserId ID `json:"userId,omitempty"`
}

// UnfollowUserPayload (OBJECT): Autogenerated return type of UnfollowUser.
type UnfollowUserPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// User: The user that was unfollowed.
	User *User `json:"user,omitempty"`
}

func (x *UnfollowUserPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnfollowUserPayload) GetUser() *User              { return x.User }

// UniformResourceLocatable (INTERFACE): Represents a type that can be retrieved by a URL.
// UniformResourceLocatable_Interface: Represents a type that can be retrieved by a URL.
//
// Possible types:
//
//   - *Bot
//   - *CheckRun
//   - *ClosedEvent
//   - *Commit
//   - *ConvertToDraftEvent
//   - *CrossReferencedEvent
//   - *Gist
//   - *Issue
//   - *Mannequin
//   - *MergedEvent
//   - *Milestone
//   - *Organization
//   - *PullRequest
//   - *PullRequestCommit
//   - *ReadyForReviewEvent
//   - *Release
//   - *Repository
//   - *RepositoryTopic
//   - *ReviewDismissedEvent
//   - *TeamDiscussion
//   - *TeamDiscussionComment
//   - *User
//   - *Workflow
//   - *WorkflowRun
//   - *WorkflowRunFile
type UniformResourceLocatable_Interface interface {
	isUniformResourceLocatable()
	GetResourcePath() URI
	GetUrl() URI
}

func (*Bot) isUniformResourceLocatable()                   {}
func (*CheckRun) isUniformResourceLocatable()              {}
func (*ClosedEvent) isUniformResourceLocatable()           {}
func (*Commit) isUniformResourceLocatable()                {}
func (*ConvertToDraftEvent) isUniformResourceLocatable()   {}
func (*CrossReferencedEvent) isUniformResourceLocatable()  {}
func (*Gist) isUniformResourceLocatable()                  {}
func (*Issue) isUniformResourceLocatable()                 {}
func (*Mannequin) isUniformResourceLocatable()             {}
func (*MergedEvent) isUniformResourceLocatable()           {}
func (*Milestone) isUniformResourceLocatable()             {}
func (*Organization) isUniformResourceLocatable()          {}
func (*PullRequest) isUniformResourceLocatable()           {}
func (*PullRequestCommit) isUniformResourceLocatable()     {}
func (*ReadyForReviewEvent) isUniformResourceLocatable()   {}
func (*Release) isUniformResourceLocatable()               {}
func (*Repository) isUniformResourceLocatable()            {}
func (*RepositoryTopic) isUniformResourceLocatable()       {}
func (*ReviewDismissedEvent) isUniformResourceLocatable()  {}
func (*TeamDiscussion) isUniformResourceLocatable()        {}
func (*TeamDiscussionComment) isUniformResourceLocatable() {}
func (*User) isUniformResourceLocatable()                  {}
func (*Workflow) isUniformResourceLocatable()              {}
func (*WorkflowRun) isUniformResourceLocatable()           {}
func (*WorkflowRunFile) isUniformResourceLocatable()       {}

type UniformResourceLocatable struct {
	Interface UniformResourceLocatable_Interface
}

func (x *UniformResourceLocatable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *UniformResourceLocatable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for UniformResourceLocatable", info.Typename)
	case "Bot":
		x.Interface = new(Bot)
	case "CheckRun":
		x.Interface = new(CheckRun)
	case "ClosedEvent":
		x.Interface = new(ClosedEvent)
	case "Commit":
		x.Interface = new(Commit)
	case "ConvertToDraftEvent":
		x.Interface = new(ConvertToDraftEvent)
	case "CrossReferencedEvent":
		x.Interface = new(CrossReferencedEvent)
	case "Gist":
		x.Interface = new(Gist)
	case "Issue":
		x.Interface = new(Issue)
	case "Mannequin":
		x.Interface = new(Mannequin)
	case "MergedEvent":
		x.Interface = new(MergedEvent)
	case "Milestone":
		x.Interface = new(Milestone)
	case "Organization":
		x.Interface = new(Organization)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestCommit":
		x.Interface = new(PullRequestCommit)
	case "ReadyForReviewEvent":
		x.Interface = new(ReadyForReviewEvent)
	case "Release":
		x.Interface = new(Release)
	case "Repository":
		x.Interface = new(Repository)
	case "RepositoryTopic":
		x.Interface = new(RepositoryTopic)
	case "ReviewDismissedEvent":
		x.Interface = new(ReviewDismissedEvent)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	case "User":
		x.Interface = new(User)
	case "Workflow":
		x.Interface = new(Workflow)
	case "WorkflowRun":
		x.Interface = new(WorkflowRun)
	case "WorkflowRunFile":
		x.Interface = new(WorkflowRunFile)
	}
	return json.Unmarshal(js, x.Interface)
}

// UnknownSignature (OBJECT): Represents an unknown signature on a Commit or Tag.
type UnknownSignature struct {
	// Email: Email used to sign this object.
	Email string `json:"email,omitempty"`

	// IsValid: True if the signature is valid and verified by GitHub.
	IsValid bool `json:"isValid,omitempty"`

	// Payload: Payload for GPG signing object. Raw ODB object without the signature header.
	Payload string `json:"payload,omitempty"`

	// Signature: ASCII-armored signature header from object.
	Signature string `json:"signature,omitempty"`

	// Signer: GitHub user corresponding to the email signing this commit.
	Signer *User `json:"signer,omitempty"`

	// State: The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
	State GitSignatureState `json:"state,omitempty"`

	// VerifiedAt: The date the signature was verified, if valid.
	VerifiedAt DateTime `json:"verifiedAt,omitempty"`

	// WasSignedByGitHub: True if the signature was made with GitHub's signing key.
	WasSignedByGitHub bool `json:"wasSignedByGitHub,omitempty"`
}

func (x *UnknownSignature) GetEmail() string            { return x.Email }
func (x *UnknownSignature) GetIsValid() bool            { return x.IsValid }
func (x *UnknownSignature) GetPayload() string          { return x.Payload }
func (x *UnknownSignature) GetSignature() string        { return x.Signature }
func (x *UnknownSignature) GetSigner() *User            { return x.Signer }
func (x *UnknownSignature) GetState() GitSignatureState { return x.State }
func (x *UnknownSignature) GetVerifiedAt() DateTime     { return x.VerifiedAt }
func (x *UnknownSignature) GetWasSignedByGitHub() bool  { return x.WasSignedByGitHub }

// UnlabeledEvent (OBJECT): Represents an 'unlabeled' event on a given issue or pull request.
type UnlabeledEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the UnlabeledEvent object.
	Id ID `json:"id,omitempty"`

	// Label: Identifies the label associated with the 'unlabeled' event.
	Label *Label `json:"label,omitempty"`

	// Labelable: Identifies the `Labelable` associated with the event.
	Labelable Labelable `json:"labelable,omitempty"`
}

func (x *UnlabeledEvent) GetActor() Actor         { return x.Actor }
func (x *UnlabeledEvent) GetCreatedAt() DateTime  { return x.CreatedAt }
func (x *UnlabeledEvent) GetId() ID               { return x.Id }
func (x *UnlabeledEvent) GetLabel() *Label        { return x.Label }
func (x *UnlabeledEvent) GetLabelable() Labelable { return x.Labelable }

// UnlinkProjectV2FromRepositoryInput (INPUT_OBJECT): Autogenerated input type of UnlinkProjectV2FromRepository.
type UnlinkProjectV2FromRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the project to unlink from the repository.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// RepositoryId: The ID of the repository to unlink from the project.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// UnlinkProjectV2FromRepositoryPayload (OBJECT): Autogenerated return type of UnlinkProjectV2FromRepository.
type UnlinkProjectV2FromRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository the project is no longer linked to.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UnlinkProjectV2FromRepositoryPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UnlinkProjectV2FromRepositoryPayload) GetRepository() *Repository { return x.Repository }

// UnlinkProjectV2FromTeamInput (INPUT_OBJECT): Autogenerated input type of UnlinkProjectV2FromTeam.
type UnlinkProjectV2FromTeamInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the project to unlink from the team.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// TeamId: The ID of the team to unlink from the project.
	//
	// GraphQL type: ID!
	TeamId ID `json:"teamId,omitempty"`
}

// UnlinkProjectV2FromTeamPayload (OBJECT): Autogenerated return type of UnlinkProjectV2FromTeam.
type UnlinkProjectV2FromTeamPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Team: The team the project is unlinked from.
	Team *Team `json:"team,omitempty"`
}

func (x *UnlinkProjectV2FromTeamPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnlinkProjectV2FromTeamPayload) GetTeam() *Team              { return x.Team }

// UnlinkRepositoryFromProjectInput (INPUT_OBJECT): Autogenerated input type of UnlinkRepositoryFromProject.
type UnlinkRepositoryFromProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project linked to the Repository.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// RepositoryId: The ID of the Repository linked to the Project.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`
}

// UnlinkRepositoryFromProjectPayload (OBJECT): Autogenerated return type of UnlinkRepositoryFromProject.
type UnlinkRepositoryFromProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Project: The linked Project.
	Project *Project `json:"project,omitempty"`

	// Repository: The linked Repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UnlinkRepositoryFromProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnlinkRepositoryFromProjectPayload) GetProject() *Project        { return x.Project }
func (x *UnlinkRepositoryFromProjectPayload) GetRepository() *Repository  { return x.Repository }

// UnlockLockableInput (INPUT_OBJECT): Autogenerated input type of UnlockLockable.
type UnlockLockableInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// LockableId: ID of the item to be unlocked.
	//
	// GraphQL type: ID!
	LockableId ID `json:"lockableId,omitempty"`
}

// UnlockLockablePayload (OBJECT): Autogenerated return type of UnlockLockable.
type UnlockLockablePayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// UnlockedRecord: The item that was unlocked.
	UnlockedRecord Lockable `json:"unlockedRecord,omitempty"`
}

func (x *UnlockLockablePayload) GetActor() Actor             { return x.Actor }
func (x *UnlockLockablePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnlockLockablePayload) GetUnlockedRecord() Lockable { return x.UnlockedRecord }

// UnlockedEvent (OBJECT): Represents an 'unlocked' event on a given issue or pull request.
type UnlockedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the UnlockedEvent object.
	Id ID `json:"id,omitempty"`

	// Lockable: Object that was unlocked.
	Lockable Lockable `json:"lockable,omitempty"`
}

func (x *UnlockedEvent) GetActor() Actor        { return x.Actor }
func (x *UnlockedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *UnlockedEvent) GetId() ID              { return x.Id }
func (x *UnlockedEvent) GetLockable() Lockable  { return x.Lockable }

// UnmarkDiscussionCommentAsAnswerInput (INPUT_OBJECT): Autogenerated input type of UnmarkDiscussionCommentAsAnswer.
type UnmarkDiscussionCommentAsAnswerInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the discussion comment to unmark as an answer.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// UnmarkDiscussionCommentAsAnswerPayload (OBJECT): Autogenerated return type of UnmarkDiscussionCommentAsAnswer.
type UnmarkDiscussionCommentAsAnswerPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The discussion that includes the comment.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *UnmarkDiscussionCommentAsAnswerPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UnmarkDiscussionCommentAsAnswerPayload) GetDiscussion() *Discussion { return x.Discussion }

// UnmarkFileAsViewedInput (INPUT_OBJECT): Autogenerated input type of UnmarkFileAsViewed.
type UnmarkFileAsViewedInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Node ID of the pull request.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// Path: The path of the file to mark as unviewed.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`
}

// UnmarkFileAsViewedPayload (OBJECT): Autogenerated return type of UnmarkFileAsViewed.
type UnmarkFileAsViewedPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *UnmarkFileAsViewedPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *UnmarkFileAsViewedPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// UnmarkIssueAsDuplicateInput (INPUT_OBJECT): Autogenerated input type of UnmarkIssueAsDuplicate.
type UnmarkIssueAsDuplicateInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DuplicateId: ID of the issue or pull request currently marked as a duplicate.
	//
	// GraphQL type: ID!
	DuplicateId ID `json:"duplicateId,omitempty"`

	// CanonicalId: ID of the issue or pull request currently considered canonical/authoritative/original.
	//
	// GraphQL type: ID!
	CanonicalId ID `json:"canonicalId,omitempty"`
}

// UnmarkIssueAsDuplicatePayload (OBJECT): Autogenerated return type of UnmarkIssueAsDuplicate.
type UnmarkIssueAsDuplicatePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Duplicate: The issue or pull request that was marked as a duplicate.
	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
}

func (x *UnmarkIssueAsDuplicatePayload) GetClientMutationId() string      { return x.ClientMutationId }
func (x *UnmarkIssueAsDuplicatePayload) GetDuplicate() IssueOrPullRequest { return x.Duplicate }

// UnmarkProjectV2AsTemplateInput (INPUT_OBJECT): Autogenerated input type of UnmarkProjectV2AsTemplate.
type UnmarkProjectV2AsTemplateInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to unmark as a template.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`
}

// UnmarkProjectV2AsTemplatePayload (OBJECT): Autogenerated return type of UnmarkProjectV2AsTemplate.
type UnmarkProjectV2AsTemplatePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2: The project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *UnmarkProjectV2AsTemplatePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnmarkProjectV2AsTemplatePayload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// UnmarkedAsDuplicateEvent (OBJECT): Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
type UnmarkedAsDuplicateEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// Canonical: The authoritative issue or pull request which has been duplicated by another.
	Canonical IssueOrPullRequest `json:"canonical,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Duplicate: The issue or pull request which has been marked as a duplicate of another.
	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`

	// Id: The Node ID of the UnmarkedAsDuplicateEvent object.
	Id ID `json:"id,omitempty"`

	// IsCrossRepository: Canonical and duplicate belong to different repositories.
	IsCrossRepository bool `json:"isCrossRepository,omitempty"`
}

func (x *UnmarkedAsDuplicateEvent) GetActor() Actor                  { return x.Actor }
func (x *UnmarkedAsDuplicateEvent) GetCanonical() IssueOrPullRequest { return x.Canonical }
func (x *UnmarkedAsDuplicateEvent) GetCreatedAt() DateTime           { return x.CreatedAt }
func (x *UnmarkedAsDuplicateEvent) GetDuplicate() IssueOrPullRequest { return x.Duplicate }
func (x *UnmarkedAsDuplicateEvent) GetId() ID                        { return x.Id }
func (x *UnmarkedAsDuplicateEvent) GetIsCrossRepository() bool       { return x.IsCrossRepository }

// UnminimizeCommentInput (INPUT_OBJECT): Autogenerated input type of UnminimizeComment.
type UnminimizeCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubjectId: The Node ID of the subject to modify.
	//
	// GraphQL type: ID!
	SubjectId ID `json:"subjectId,omitempty"`
}

// UnminimizeCommentPayload (OBJECT): Autogenerated return type of UnminimizeComment.
type UnminimizeCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// UnminimizedComment: The comment that was unminimized.
	UnminimizedComment Minimizable `json:"unminimizedComment,omitempty"`
}

func (x *UnminimizeCommentPayload) GetClientMutationId() string        { return x.ClientMutationId }
func (x *UnminimizeCommentPayload) GetUnminimizedComment() Minimizable { return x.UnminimizedComment }

// UnpinIssueInput (INPUT_OBJECT): Autogenerated input type of UnpinIssue.
type UnpinIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueId: The ID of the issue to be unpinned.
	//
	// GraphQL type: ID!
	IssueId ID `json:"issueId,omitempty"`
}

// UnpinIssuePayload (OBJECT): Autogenerated return type of UnpinIssue.
type UnpinIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The id of the pinned issue that was unpinned.
	Id ID `json:"id,omitempty"`

	// Issue: The issue that was unpinned.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *UnpinIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UnpinIssuePayload) GetId() ID                   { return x.Id }
func (x *UnpinIssuePayload) GetIssue() *Issue            { return x.Issue }

// UnpinnedEvent (OBJECT): Represents an 'unpinned' event on a given issue or pull request.
type UnpinnedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the UnpinnedEvent object.
	Id ID `json:"id,omitempty"`

	// Issue: Identifies the issue associated with the event.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *UnpinnedEvent) GetActor() Actor        { return x.Actor }
func (x *UnpinnedEvent) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *UnpinnedEvent) GetId() ID              { return x.Id }
func (x *UnpinnedEvent) GetIssue() *Issue       { return x.Issue }

// UnresolveReviewThreadInput (INPUT_OBJECT): Autogenerated input type of UnresolveReviewThread.
type UnresolveReviewThreadInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ThreadId: The ID of the thread to unresolve.
	//
	// GraphQL type: ID!
	ThreadId ID `json:"threadId,omitempty"`
}

// UnresolveReviewThreadPayload (OBJECT): Autogenerated return type of UnresolveReviewThread.
type UnresolveReviewThreadPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Thread: The thread to resolve.
	Thread *PullRequestReviewThread `json:"thread,omitempty"`
}

func (x *UnresolveReviewThreadPayload) GetClientMutationId() string         { return x.ClientMutationId }
func (x *UnresolveReviewThreadPayload) GetThread() *PullRequestReviewThread { return x.Thread }

// UnsubscribedEvent (OBJECT): Represents an 'unsubscribed' event on a given `Subscribable`.
type UnsubscribedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the UnsubscribedEvent object.
	Id ID `json:"id,omitempty"`

	// Subscribable: Object referenced by event.
	Subscribable Subscribable `json:"subscribable,omitempty"`
}

func (x *UnsubscribedEvent) GetActor() Actor               { return x.Actor }
func (x *UnsubscribedEvent) GetCreatedAt() DateTime        { return x.CreatedAt }
func (x *UnsubscribedEvent) GetId() ID                     { return x.Id }
func (x *UnsubscribedEvent) GetSubscribable() Subscribable { return x.Subscribable }

// Updatable (INTERFACE): Entities that can be updated.
// Updatable_Interface: Entities that can be updated.
//
// Possible types:
//
//   - *CommitComment
//   - *Discussion
//   - *DiscussionComment
//   - *GistComment
//   - *Issue
//   - *IssueComment
//   - *Project
//   - *ProjectV2
//   - *PullRequest
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *TeamDiscussion
//   - *TeamDiscussionComment
type Updatable_Interface interface {
	isUpdatable()
	GetViewerCanUpdate() bool
}

func (*CommitComment) isUpdatable()            {}
func (*Discussion) isUpdatable()               {}
func (*DiscussionComment) isUpdatable()        {}
func (*GistComment) isUpdatable()              {}
func (*Issue) isUpdatable()                    {}
func (*IssueComment) isUpdatable()             {}
func (*Project) isUpdatable()                  {}
func (*ProjectV2) isUpdatable()                {}
func (*PullRequest) isUpdatable()              {}
func (*PullRequestReview) isUpdatable()        {}
func (*PullRequestReviewComment) isUpdatable() {}
func (*TeamDiscussion) isUpdatable()           {}
func (*TeamDiscussionComment) isUpdatable()    {}

type Updatable struct {
	Interface Updatable_Interface
}

func (x *Updatable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Updatable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Updatable", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "GistComment":
		x.Interface = new(GistComment)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "Project":
		x.Interface = new(Project)
	case "ProjectV2":
		x.Interface = new(ProjectV2)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// UpdatableComment (INTERFACE): Comments that can be updated.
// UpdatableComment_Interface: Comments that can be updated.
//
// Possible types:
//
//   - *CommitComment
//   - *DiscussionComment
//   - *GistComment
//   - *Issue
//   - *IssueComment
//   - *PullRequest
//   - *PullRequestReview
//   - *PullRequestReviewComment
//   - *TeamDiscussion
//   - *TeamDiscussionComment
type UpdatableComment_Interface interface {
	isUpdatableComment()
	GetViewerCannotUpdateReasons() []CommentCannotUpdateReason
}

func (*CommitComment) isUpdatableComment()            {}
func (*DiscussionComment) isUpdatableComment()        {}
func (*GistComment) isUpdatableComment()              {}
func (*Issue) isUpdatableComment()                    {}
func (*IssueComment) isUpdatableComment()             {}
func (*PullRequest) isUpdatableComment()              {}
func (*PullRequestReview) isUpdatableComment()        {}
func (*PullRequestReviewComment) isUpdatableComment() {}
func (*TeamDiscussion) isUpdatableComment()           {}
func (*TeamDiscussionComment) isUpdatableComment()    {}

type UpdatableComment struct {
	Interface UpdatableComment_Interface
}

func (x *UpdatableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *UpdatableComment) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for UpdatableComment", info.Typename)
	case "CommitComment":
		x.Interface = new(CommitComment)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	case "GistComment":
		x.Interface = new(GistComment)
	case "Issue":
		x.Interface = new(Issue)
	case "IssueComment":
		x.Interface = new(IssueComment)
	case "PullRequest":
		x.Interface = new(PullRequest)
	case "PullRequestReview":
		x.Interface = new(PullRequestReview)
	case "PullRequestReviewComment":
		x.Interface = new(PullRequestReviewComment)
	case "TeamDiscussion":
		x.Interface = new(TeamDiscussion)
	case "TeamDiscussionComment":
		x.Interface = new(TeamDiscussionComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// UpdateBranchProtectionRuleInput (INPUT_OBJECT): Autogenerated input type of UpdateBranchProtectionRule.
type UpdateBranchProtectionRuleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// BranchProtectionRuleId: The global relay id of the branch protection rule to be updated.
	//
	// GraphQL type: ID!
	BranchProtectionRuleId ID `json:"branchProtectionRuleId,omitempty"`

	// Pattern: The glob-like pattern used to determine matching branches.
	//
	// GraphQL type: String
	Pattern string `json:"pattern,omitempty"`

	// RequiresApprovingReviews: Are approving reviews required to update matching branches.
	//
	// GraphQL type: Boolean
	RequiresApprovingReviews bool `json:"requiresApprovingReviews,omitempty"`

	// RequiredApprovingReviewCount: Number of approving reviews required to update matching branches.
	//
	// GraphQL type: Int
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount,omitempty"`

	// RequiresCommitSignatures: Are commits required to be signed.
	//
	// GraphQL type: Boolean
	RequiresCommitSignatures bool `json:"requiresCommitSignatures,omitempty"`

	// RequiresLinearHistory: Are merge commits prohibited from being pushed to this branch.
	//
	// GraphQL type: Boolean
	RequiresLinearHistory bool `json:"requiresLinearHistory,omitempty"`

	// BlocksCreations: Is branch creation a protected operation.
	//
	// GraphQL type: Boolean
	BlocksCreations bool `json:"blocksCreations,omitempty"`

	// AllowsForcePushes: Are force pushes allowed on this branch.
	//
	// GraphQL type: Boolean
	AllowsForcePushes bool `json:"allowsForcePushes,omitempty"`

	// AllowsDeletions: Can this branch be deleted.
	//
	// GraphQL type: Boolean
	AllowsDeletions bool `json:"allowsDeletions,omitempty"`

	// IsAdminEnforced: Can admins override branch protection.
	//
	// GraphQL type: Boolean
	IsAdminEnforced bool `json:"isAdminEnforced,omitempty"`

	// RequiresStatusChecks: Are status checks required to update matching branches.
	//
	// GraphQL type: Boolean
	RequiresStatusChecks bool `json:"requiresStatusChecks,omitempty"`

	// RequiresStrictStatusChecks: Are branches required to be up to date before merging.
	//
	// GraphQL type: Boolean
	RequiresStrictStatusChecks bool `json:"requiresStrictStatusChecks,omitempty"`

	// RequiresCodeOwnerReviews: Are reviews from code owners required to update matching branches.
	//
	// GraphQL type: Boolean
	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews,omitempty"`

	// DismissesStaleReviews: Will new commits pushed to matching branches dismiss pull request review approvals.
	//
	// GraphQL type: Boolean
	DismissesStaleReviews bool `json:"dismissesStaleReviews,omitempty"`

	// RestrictsReviewDismissals: Is dismissal of pull request reviews restricted.
	//
	// GraphQL type: Boolean
	RestrictsReviewDismissals bool `json:"restrictsReviewDismissals,omitempty"`

	// ReviewDismissalActorIds: A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
	//
	// GraphQL type: [ID!]
	ReviewDismissalActorIds []ID `json:"reviewDismissalActorIds,omitempty"`

	// BypassPullRequestActorIds: A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
	//
	// GraphQL type: [ID!]
	BypassPullRequestActorIds []ID `json:"bypassPullRequestActorIds,omitempty"`

	// BypassForcePushActorIds: A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
	//
	// GraphQL type: [ID!]
	BypassForcePushActorIds []ID `json:"bypassForcePushActorIds,omitempty"`

	// RestrictsPushes: Is pushing to matching branches restricted.
	//
	// GraphQL type: Boolean
	RestrictsPushes bool `json:"restrictsPushes,omitempty"`

	// PushActorIds: A list of User, Team, or App IDs allowed to push to matching branches.
	//
	// GraphQL type: [ID!]
	PushActorIds []ID `json:"pushActorIds,omitempty"`

	// RequiredStatusCheckContexts: List of required status check contexts that must pass for commits to be accepted to matching branches.
	//
	// GraphQL type: [String!]
	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`

	// RequiredStatusChecks: The list of required status checks.
	//
	// GraphQL type: [RequiredStatusCheckInput!]
	RequiredStatusChecks []*RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`

	// RequiresDeployments: Are successful deployments required before merging.
	//
	// GraphQL type: Boolean
	RequiresDeployments bool `json:"requiresDeployments,omitempty"`

	// RequiredDeploymentEnvironments: The list of required deployment environments.
	//
	// GraphQL type: [String!]
	RequiredDeploymentEnvironments []string `json:"requiredDeploymentEnvironments,omitempty"`

	// RequiresConversationResolution: Are conversations required to be resolved before merging.
	//
	// GraphQL type: Boolean
	RequiresConversationResolution bool `json:"requiresConversationResolution,omitempty"`

	// RequireLastPushApproval: Whether the most recent push must be approved by someone other than the person who pushed it.
	//
	// GraphQL type: Boolean
	RequireLastPushApproval bool `json:"requireLastPushApproval,omitempty"`

	// LockBranch: Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	//
	// GraphQL type: Boolean
	LockBranch bool `json:"lockBranch,omitempty"`

	// LockAllowsFetchAndMerge: Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
	//
	// GraphQL type: Boolean
	LockAllowsFetchAndMerge bool `json:"lockAllowsFetchAndMerge,omitempty"`
}

// UpdateBranchProtectionRulePayload (OBJECT): Autogenerated return type of UpdateBranchProtectionRule.
type UpdateBranchProtectionRulePayload struct {
	// BranchProtectionRule: The newly created BranchProtectionRule.
	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *UpdateBranchProtectionRulePayload) GetBranchProtectionRule() *BranchProtectionRule {
	return x.BranchProtectionRule
}
func (x *UpdateBranchProtectionRulePayload) GetClientMutationId() string { return x.ClientMutationId }

// UpdateCheckRunInput (INPUT_OBJECT): Autogenerated input type of UpdateCheckRun.
type UpdateCheckRunInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// CheckRunId: The node of the check.
	//
	// GraphQL type: ID!
	CheckRunId ID `json:"checkRunId,omitempty"`

	// Name: The name of the check.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// DetailsUrl: The URL of the integrator's site that has the full details of the check.
	//
	// GraphQL type: URI
	DetailsUrl URI `json:"detailsUrl,omitempty"`

	// ExternalId: A reference for the run on the integrator's system.
	//
	// GraphQL type: String
	ExternalId string `json:"externalId,omitempty"`

	// Status: The current status.
	//
	// GraphQL type: RequestableCheckStatusState
	Status RequestableCheckStatusState `json:"status,omitempty"`

	// StartedAt: The time that the check run began.
	//
	// GraphQL type: DateTime
	StartedAt DateTime `json:"startedAt,omitempty"`

	// Conclusion: The final conclusion of the check.
	//
	// GraphQL type: CheckConclusionState
	Conclusion CheckConclusionState `json:"conclusion,omitempty"`

	// CompletedAt: The time that the check run finished.
	//
	// GraphQL type: DateTime
	CompletedAt DateTime `json:"completedAt,omitempty"`

	// Output: Descriptive details about the run.
	//
	// GraphQL type: CheckRunOutput
	Output *CheckRunOutput `json:"output,omitempty"`

	// Actions: Possible further actions the integrator can perform, which a user may trigger.
	//
	// GraphQL type: [CheckRunAction!]
	Actions []*CheckRunAction `json:"actions,omitempty"`
}

// UpdateCheckRunPayload (OBJECT): Autogenerated return type of UpdateCheckRun.
type UpdateCheckRunPayload struct {
	// CheckRun: The updated check run.
	CheckRun *CheckRun `json:"checkRun,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *UpdateCheckRunPayload) GetCheckRun() *CheckRun      { return x.CheckRun }
func (x *UpdateCheckRunPayload) GetClientMutationId() string { return x.ClientMutationId }

// UpdateCheckSuitePreferencesInput (INPUT_OBJECT): Autogenerated input type of UpdateCheckSuitePreferences.
type UpdateCheckSuitePreferencesInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// AutoTriggerPreferences: The check suite preferences to modify.
	//
	// GraphQL type: [CheckSuiteAutoTriggerPreference!]!
	AutoTriggerPreferences []*CheckSuiteAutoTriggerPreference `json:"autoTriggerPreferences,omitempty"`
}

// UpdateCheckSuitePreferencesPayload (OBJECT): Autogenerated return type of UpdateCheckSuitePreferences.
type UpdateCheckSuitePreferencesPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UpdateCheckSuitePreferencesPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateCheckSuitePreferencesPayload) GetRepository() *Repository  { return x.Repository }

// UpdateDiscussionCommentInput (INPUT_OBJECT): Autogenerated input type of UpdateDiscussionComment.
type UpdateDiscussionCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// CommentId: The Node ID of the discussion comment to update.
	//
	// GraphQL type: ID!
	CommentId ID `json:"commentId,omitempty"`

	// Body: The new contents of the comment body.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// UpdateDiscussionCommentPayload (OBJECT): Autogenerated return type of UpdateDiscussionComment.
type UpdateDiscussionCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Comment: The modified discussion comment.
	Comment *DiscussionComment `json:"comment,omitempty"`
}

func (x *UpdateDiscussionCommentPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *UpdateDiscussionCommentPayload) GetComment() *DiscussionComment { return x.Comment }

// UpdateDiscussionInput (INPUT_OBJECT): Autogenerated input type of UpdateDiscussion.
type UpdateDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DiscussionId: The Node ID of the discussion to update.
	//
	// GraphQL type: ID!
	DiscussionId ID `json:"discussionId,omitempty"`

	// Title: The new discussion title.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The new contents of the discussion body.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// CategoryId: The Node ID of a discussion category within the same repository to change this discussion to.
	//
	// GraphQL type: ID
	CategoryId ID `json:"categoryId,omitempty"`
}

// UpdateDiscussionPayload (OBJECT): Autogenerated return type of UpdateDiscussion.
type UpdateDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Discussion: The modified discussion.
	Discussion *Discussion `json:"discussion,omitempty"`
}

func (x *UpdateDiscussionPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateDiscussionPayload) GetDiscussion() *Discussion  { return x.Discussion }

// UpdateEnterpriseAdministratorRoleInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseAdministratorRole.
type UpdateEnterpriseAdministratorRoleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the Enterprise which the admin belongs to.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Login: The login of a administrator whose role is being changed.
	//
	// GraphQL type: String!
	Login string `json:"login,omitempty"`

	// Role: The new role for the Enterprise administrator.
	//
	// GraphQL type: EnterpriseAdministratorRole!
	Role EnterpriseAdministratorRole `json:"role,omitempty"`
}

// UpdateEnterpriseAdministratorRolePayload (OBJECT): Autogenerated return type of UpdateEnterpriseAdministratorRole.
type UpdateEnterpriseAdministratorRolePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of changing the administrator's role.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseAdministratorRolePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseAdministratorRolePayload) GetMessage() string { return x.Message }

// UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting.
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the allow private repository forking setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the allow private repository forking setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`

	// PolicyValue: The value for the allow private repository forking policy on the enterprise.
	//
	// GraphQL type: EnterpriseAllowPrivateRepositoryForkingPolicyValue
	PolicyValue EnterpriseAllowPrivateRepositoryForkingPolicyValue `json:"policyValue,omitempty"`
}

// UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting.
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated allow private repository forking setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the allow private repository forking setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseDefaultRepositoryPermissionSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting.
type UpdateEnterpriseDefaultRepositoryPermissionSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the base repository permission setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the base repository permission setting on the enterprise.
	//
	// GraphQL type: EnterpriseDefaultRepositoryPermissionSettingValue!
	SettingValue EnterpriseDefaultRepositoryPermissionSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseDefaultRepositoryPermissionSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting.
type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated base repository permission setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the base repository permission setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseDeployKeySettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseDeployKeySetting.
type UpdateEnterpriseDeployKeySettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the deploy key setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the deploy key setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseDeployKeySettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseDeployKeySetting.
type UpdateEnterpriseDeployKeySettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated deploy key setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the deploy key setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseDeployKeySettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseDeployKeySettingPayload) GetEnterprise() *Enterprise { return x.Enterprise }
func (x *UpdateEnterpriseDeployKeySettingPayload) GetMessage() string         { return x.Message }

// UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting.
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can change repository visibility setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can change repository visibility setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting.
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can change repository visibility setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can change repository visibility setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseMembersCanCreateRepositoriesSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting.
type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can create repositories setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
	//
	// GraphQL type: EnterpriseMembersCanCreateRepositoriesSettingValue
	SettingValue EnterpriseMembersCanCreateRepositoriesSettingValue `json:"settingValue,omitempty"`

	// MembersCanCreateRepositoriesPolicyEnabled: When false, allow member organizations to set their own repository creation member privileges.
	//
	// GraphQL type: Boolean
	MembersCanCreateRepositoriesPolicyEnabled bool `json:"membersCanCreateRepositoriesPolicyEnabled,omitempty"`

	// MembersCanCreatePublicRepositories: Allow members to create public repositories. Defaults to current value.
	//
	// GraphQL type: Boolean
	MembersCanCreatePublicRepositories bool `json:"membersCanCreatePublicRepositories,omitempty"`

	// MembersCanCreatePrivateRepositories: Allow members to create private repositories. Defaults to current value.
	//
	// GraphQL type: Boolean
	MembersCanCreatePrivateRepositories bool `json:"membersCanCreatePrivateRepositories,omitempty"`

	// MembersCanCreateInternalRepositories: Allow members to create internal repositories. Defaults to current value.
	//
	// GraphQL type: Boolean
	MembersCanCreateInternalRepositories bool `json:"membersCanCreateInternalRepositories,omitempty"`
}

// UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting.
type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can create repositories setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can create repositories setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseMembersCanDeleteIssuesSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting.
type UpdateEnterpriseMembersCanDeleteIssuesSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can delete issues setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can delete issues setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanDeleteIssuesSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting.
type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can delete issues setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can delete issues setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload) GetMessage() string { return x.Message }

// UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting.
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can delete repositories setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can delete repositories setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting.
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can delete repositories setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can delete repositories setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting.
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can invite collaborators setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can invite collaborators setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting.
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can invite collaborators setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can invite collaborators setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseMembersCanMakePurchasesSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting.
type UpdateEnterpriseMembersCanMakePurchasesSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can make purchases setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can make purchases setting on the enterprise.
	//
	// GraphQL type: EnterpriseMembersCanMakePurchasesSettingValue!
	SettingValue EnterpriseMembersCanMakePurchasesSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanMakePurchasesSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting.
type UpdateEnterpriseMembersCanMakePurchasesSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can make purchases setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can make purchases setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanMakePurchasesSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanMakePurchasesSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanMakePurchasesSettingPayload) GetMessage() string { return x.Message }

// UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting.
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can update protected branches setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can update protected branches setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting.
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can update protected branches setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can update protected branches setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting.
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the members can view dependency insights setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the members can view dependency insights setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting.
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated members can view dependency insights setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the members can view dependency insights setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseOrganizationProjectsSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting.
type UpdateEnterpriseOrganizationProjectsSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the organization projects setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the organization projects setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseOrganizationProjectsSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting.
type UpdateEnterpriseOrganizationProjectsSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated organization projects setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the organization projects setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseOrganizationProjectsSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseOrganizationProjectsSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseOrganizationProjectsSettingPayload) GetMessage() string { return x.Message }

// UpdateEnterpriseOwnerOrganizationRoleInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole.
type UpdateEnterpriseOwnerOrganizationRoleInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the Enterprise which the owner belongs to.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// OrganizationId: The ID of the organization for membership change.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// OrganizationRole: The role to assume in the organization.
	//
	// GraphQL type: RoleInOrganization!
	OrganizationRole RoleInOrganization `json:"organizationRole,omitempty"`
}

// UpdateEnterpriseOwnerOrganizationRolePayload (OBJECT): Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole.
type UpdateEnterpriseOwnerOrganizationRolePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of changing the owner's organization role.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseOwnerOrganizationRolePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseOwnerOrganizationRolePayload) GetMessage() string { return x.Message }

// UpdateEnterpriseProfileInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseProfile.
type UpdateEnterpriseProfileInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The Enterprise ID to update.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// Name: The name of the enterprise.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Description: The description of the enterprise.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// WebsiteUrl: The URL of the enterprise's website.
	//
	// GraphQL type: String
	WebsiteUrl string `json:"websiteUrl,omitempty"`

	// Location: The location of the enterprise.
	//
	// GraphQL type: String
	Location string `json:"location,omitempty"`
}

// UpdateEnterpriseProfilePayload (OBJECT): Autogenerated return type of UpdateEnterpriseProfile.
type UpdateEnterpriseProfilePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The updated enterprise.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
}

func (x *UpdateEnterpriseProfilePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateEnterpriseProfilePayload) GetEnterprise() *Enterprise  { return x.Enterprise }

// UpdateEnterpriseRepositoryProjectsSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting.
type UpdateEnterpriseRepositoryProjectsSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the repository projects setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the repository projects setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseRepositoryProjectsSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting.
type UpdateEnterpriseRepositoryProjectsSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated repository projects setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the repository projects setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseRepositoryProjectsSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseRepositoryProjectsSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseRepositoryProjectsSettingPayload) GetMessage() string { return x.Message }

// UpdateEnterpriseTeamDiscussionsSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting.
type UpdateEnterpriseTeamDiscussionsSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the team discussions setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the team discussions setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledDisabledSettingValue!
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseTeamDiscussionsSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting.
type UpdateEnterpriseTeamDiscussionsSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated team discussions setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the team discussions setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseTeamDiscussionsSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseTeamDiscussionsSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseTeamDiscussionsSettingPayload) GetMessage() string { return x.Message }

// UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting.
type UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the two-factor authentication disallowed methods setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the two-factor authentication disallowed methods setting on the enterprise.
	//
	// GraphQL type: EnterpriseDisallowedMethodsSettingValue!
	SettingValue EnterpriseDisallowedMethodsSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting.
type UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated two-factor authentication disallowed methods setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the two-factor authentication disallowed methods setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting.
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnterpriseId: The ID of the enterprise on which to set the two factor authentication required setting.
	//
	// GraphQL type: ID!
	EnterpriseId ID `json:"enterpriseId,omitempty"`

	// SettingValue: The value for the two factor authentication required setting on the enterprise.
	//
	// GraphQL type: EnterpriseEnabledSettingValue!
	SettingValue EnterpriseEnabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload (OBJECT): Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting.
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Enterprise: The enterprise with the updated two factor authentication required setting.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// Message: A message confirming the result of updating the two factor authentication required setting.
	Message string `json:"message,omitempty"`
}

func (x *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload) GetEnterprise() *Enterprise {
	return x.Enterprise
}
func (x *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload) GetMessage() string {
	return x.Message
}

// UpdateEnvironmentInput (INPUT_OBJECT): Autogenerated input type of UpdateEnvironment.
type UpdateEnvironmentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// EnvironmentId: The node ID of the environment.
	//
	// GraphQL type: ID!
	EnvironmentId ID `json:"environmentId,omitempty"`

	// WaitTimer: The wait timer in minutes.
	//
	// GraphQL type: Int
	WaitTimer int `json:"waitTimer,omitempty"`

	// Reviewers: The ids of users or teams that can approve deployments to this environment.
	//
	// GraphQL type: [ID!]
	Reviewers []ID `json:"reviewers,omitempty"`

	// PreventSelfReview: Whether deployments to this environment can be approved by the user who created the deployment.
	//
	// GraphQL type: Boolean
	PreventSelfReview bool `json:"preventSelfReview,omitempty"`
}

// UpdateEnvironmentPayload (OBJECT): Autogenerated return type of UpdateEnvironment.
type UpdateEnvironmentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Environment: The updated environment.
	Environment *Environment `json:"environment,omitempty"`
}

func (x *UpdateEnvironmentPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *UpdateEnvironmentPayload) GetEnvironment() *Environment { return x.Environment }

// UpdateIpAllowListEnabledSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateIpAllowListEnabledSetting.
type UpdateIpAllowListEnabledSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The ID of the owner on which to set the IP allow list enabled setting.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// SettingValue: The value for the IP allow list enabled setting.
	//
	// GraphQL type: IpAllowListEnabledSettingValue!
	SettingValue IpAllowListEnabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateIpAllowListEnabledSettingPayload (OBJECT): Autogenerated return type of UpdateIpAllowListEnabledSetting.
type UpdateIpAllowListEnabledSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Owner: The IP allow list owner on which the setting was updated.
	Owner IpAllowListOwner `json:"owner,omitempty"`
}

func (x *UpdateIpAllowListEnabledSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateIpAllowListEnabledSettingPayload) GetOwner() IpAllowListOwner { return x.Owner }

// UpdateIpAllowListEntryInput (INPUT_OBJECT): Autogenerated input type of UpdateIpAllowListEntry.
type UpdateIpAllowListEntryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IpAllowListEntryId: The ID of the IP allow list entry to update.
	//
	// GraphQL type: ID!
	IpAllowListEntryId ID `json:"ipAllowListEntryId,omitempty"`

	// AllowListValue: An IP address or range of addresses in CIDR notation.
	//
	// GraphQL type: String!
	AllowListValue string `json:"allowListValue,omitempty"`

	// Name: An optional name for the IP allow list entry.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// IsActive: Whether the IP allow list entry is active when an IP allow list is enabled.
	//
	// GraphQL type: Boolean!
	IsActive bool `json:"isActive,omitempty"`
}

// UpdateIpAllowListEntryPayload (OBJECT): Autogenerated return type of UpdateIpAllowListEntry.
type UpdateIpAllowListEntryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IpAllowListEntry: The IP allow list entry that was updated.
	IpAllowListEntry *IpAllowListEntry `json:"ipAllowListEntry,omitempty"`
}

func (x *UpdateIpAllowListEntryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateIpAllowListEntryPayload) GetIpAllowListEntry() *IpAllowListEntry {
	return x.IpAllowListEntry
}

// UpdateIpAllowListForInstalledAppsEnabledSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting.
type UpdateIpAllowListForInstalledAppsEnabledSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The ID of the owner.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// SettingValue: The value for the IP allow list configuration for installed GitHub Apps setting.
	//
	// GraphQL type: IpAllowListForInstalledAppsEnabledSettingValue!
	SettingValue IpAllowListForInstalledAppsEnabledSettingValue `json:"settingValue,omitempty"`
}

// UpdateIpAllowListForInstalledAppsEnabledSettingPayload (OBJECT): Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting.
type UpdateIpAllowListForInstalledAppsEnabledSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Owner: The IP allow list owner on which the setting was updated.
	Owner IpAllowListOwner `json:"owner,omitempty"`
}

func (x *UpdateIpAllowListForInstalledAppsEnabledSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateIpAllowListForInstalledAppsEnabledSettingPayload) GetOwner() IpAllowListOwner {
	return x.Owner
}

// UpdateIssueCommentInput (INPUT_OBJECT): Autogenerated input type of UpdateIssueComment.
type UpdateIssueCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the IssueComment to modify.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`

	// Body: The updated text of the comment.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// UpdateIssueCommentPayload (OBJECT): Autogenerated return type of UpdateIssueComment.
type UpdateIssueCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// IssueComment: The updated comment.
	IssueComment *IssueComment `json:"issueComment,omitempty"`
}

func (x *UpdateIssueCommentPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *UpdateIssueCommentPayload) GetIssueComment() *IssueComment { return x.IssueComment }

// UpdateIssueInput (INPUT_OBJECT): Autogenerated input type of UpdateIssue.
type UpdateIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the Issue to modify.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`

	// Title: The title for the issue.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The body for the issue description.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// AssigneeIds: An array of Node IDs of users for this issue.
	//
	// GraphQL type: [ID!]
	AssigneeIds []ID `json:"assigneeIds,omitempty"`

	// MilestoneId: The Node ID of the milestone for this issue.
	//
	// GraphQL type: ID
	MilestoneId ID `json:"milestoneId,omitempty"`

	// LabelIds: An array of Node IDs of labels for this issue.
	//
	// GraphQL type: [ID!]
	LabelIds []ID `json:"labelIds,omitempty"`

	// State: The desired issue state.
	//
	// GraphQL type: IssueState
	State IssueState `json:"state,omitempty"`

	// ProjectIds: An array of Node IDs for projects associated with this issue.
	//
	// GraphQL type: [ID!]
	ProjectIds []ID `json:"projectIds,omitempty"`
}

// UpdateIssuePayload (OBJECT): Autogenerated return type of UpdateIssue.
type UpdateIssuePayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Issue: The issue.
	Issue *Issue `json:"issue,omitempty"`
}

func (x *UpdateIssuePayload) GetActor() Actor             { return x.Actor }
func (x *UpdateIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateIssuePayload) GetIssue() *Issue            { return x.Issue }

// UpdateLabelInput (INPUT_OBJECT): Autogenerated input type of UpdateLabel.
type UpdateLabelInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the label to be updated.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`

	// Color: A 6 character hex code, without the leading #, identifying the updated color of the label.
	//
	// GraphQL type: String
	Color string `json:"color,omitempty"`

	// Description: A brief description of the label, such as its purpose.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// Name: The updated name of the label.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`
}

// UpdateLabelPayload (OBJECT): Autogenerated return type of UpdateLabel.
type UpdateLabelPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Label: The updated label.
	Label *Label `json:"label,omitempty"`
}

func (x *UpdateLabelPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateLabelPayload) GetLabel() *Label            { return x.Label }

// UpdateNotificationRestrictionSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateNotificationRestrictionSetting.
type UpdateNotificationRestrictionSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OwnerId: The ID of the owner on which to set the restrict notifications setting.
	//
	// GraphQL type: ID!
	OwnerId ID `json:"ownerId,omitempty"`

	// SettingValue: The value for the restrict notifications setting.
	//
	// GraphQL type: NotificationRestrictionSettingValue!
	SettingValue NotificationRestrictionSettingValue `json:"settingValue,omitempty"`
}

// UpdateNotificationRestrictionSettingPayload (OBJECT): Autogenerated return type of UpdateNotificationRestrictionSetting.
type UpdateNotificationRestrictionSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Owner: The owner on which the setting was updated.
	Owner VerifiableDomainOwner `json:"owner,omitempty"`
}

func (x *UpdateNotificationRestrictionSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateNotificationRestrictionSettingPayload) GetOwner() VerifiableDomainOwner {
	return x.Owner
}

// UpdateOrganizationAllowPrivateRepositoryForkingSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting.
type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: The ID of the organization on which to set the allow private repository forking setting.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// ForkingEnabled: Enable forking of private repositories in the organization?.
	//
	// GraphQL type: Boolean!
	ForkingEnabled bool `json:"forkingEnabled,omitempty"`
}

// UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload (OBJECT): Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting.
type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of updating the allow private repository forking setting.
	Message string `json:"message,omitempty"`

	// Organization: The organization with the updated allow private repository forking setting.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload) GetMessage() string {
	return x.Message
}
func (x *UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload) GetOrganization() *Organization {
	return x.Organization
}

// UpdateOrganizationWebCommitSignoffSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting.
type UpdateOrganizationWebCommitSignoffSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// OrganizationId: The ID of the organization on which to set the web commit signoff setting.
	//
	// GraphQL type: ID!
	OrganizationId ID `json:"organizationId,omitempty"`

	// WebCommitSignoffRequired: Enable signoff on web-based commits for repositories in the organization?.
	//
	// GraphQL type: Boolean!
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired,omitempty"`
}

// UpdateOrganizationWebCommitSignoffSettingPayload (OBJECT): Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting.
type UpdateOrganizationWebCommitSignoffSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of updating the web commit signoff setting.
	Message string `json:"message,omitempty"`

	// Organization: The organization with the updated web commit signoff setting.
	Organization *Organization `json:"organization,omitempty"`
}

func (x *UpdateOrganizationWebCommitSignoffSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateOrganizationWebCommitSignoffSettingPayload) GetMessage() string { return x.Message }
func (x *UpdateOrganizationWebCommitSignoffSettingPayload) GetOrganization() *Organization {
	return x.Organization
}

// UpdateParameters (OBJECT): Only allow users with bypass permission to update matching refs.
type UpdateParameters struct {
	// UpdateAllowsFetchAndMerge: Branch can pull changes from its upstream repository.
	UpdateAllowsFetchAndMerge bool `json:"updateAllowsFetchAndMerge,omitempty"`
}

func (x *UpdateParameters) GetUpdateAllowsFetchAndMerge() bool { return x.UpdateAllowsFetchAndMerge }

// UpdateParametersInput (INPUT_OBJECT): Only allow users with bypass permission to update matching refs.
type UpdateParametersInput struct {
	// UpdateAllowsFetchAndMerge: Branch can pull changes from its upstream repository.
	//
	// GraphQL type: Boolean!
	UpdateAllowsFetchAndMerge bool `json:"updateAllowsFetchAndMerge,omitempty"`
}

// UpdatePatreonSponsorabilityInput (INPUT_OBJECT): Autogenerated input type of UpdatePatreonSponsorability.
type UpdatePatreonSponsorabilityInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorableLogin: The username of the organization with the GitHub Sponsors profile, if any. Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`

	// EnablePatreonSponsorships: Whether Patreon tiers should be shown on the GitHub Sponsors profile page, allowing potential sponsors to make their payment through Patreon instead of GitHub.
	//
	// GraphQL type: Boolean!
	EnablePatreonSponsorships bool `json:"enablePatreonSponsorships,omitempty"`
}

// UpdatePatreonSponsorabilityPayload (OBJECT): Autogenerated return type of UpdatePatreonSponsorability.
type UpdatePatreonSponsorabilityPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorsListing: The GitHub Sponsors profile.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
}

func (x *UpdatePatreonSponsorabilityPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdatePatreonSponsorabilityPayload) GetSponsorsListing() *SponsorsListing {
	return x.SponsorsListing
}

// UpdateProjectCardInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectCard.
type UpdateProjectCardInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectCardId: The ProjectCard ID to update.
	//
	// GraphQL type: ID!
	ProjectCardId ID `json:"projectCardId,omitempty"`

	// IsArchived: Whether or not the ProjectCard should be archived.
	//
	// GraphQL type: Boolean
	IsArchived bool `json:"isArchived,omitempty"`

	// Note: The note of ProjectCard.
	//
	// GraphQL type: String
	Note string `json:"note,omitempty"`
}

// UpdateProjectCardPayload (OBJECT): Autogenerated return type of UpdateProjectCard.
type UpdateProjectCardPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectCard: The updated ProjectCard.
	ProjectCard *ProjectCard `json:"projectCard,omitempty"`
}

func (x *UpdateProjectCardPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *UpdateProjectCardPayload) GetProjectCard() *ProjectCard { return x.ProjectCard }

// UpdateProjectColumnInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectColumn.
type UpdateProjectColumnInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectColumnId: The ProjectColumn ID to update.
	//
	// GraphQL type: ID!
	ProjectColumnId ID `json:"projectColumnId,omitempty"`

	// Name: The name of project column.
	//
	// GraphQL type: String!
	Name string `json:"name,omitempty"`
}

// UpdateProjectColumnPayload (OBJECT): Autogenerated return type of UpdateProjectColumn.
type UpdateProjectColumnPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectColumn: The updated project column.
	ProjectColumn *ProjectColumn `json:"projectColumn,omitempty"`
}

func (x *UpdateProjectColumnPayload) GetClientMutationId() string      { return x.ClientMutationId }
func (x *UpdateProjectColumnPayload) GetProjectColumn() *ProjectColumn { return x.ProjectColumn }

// UpdateProjectInput (INPUT_OBJECT): Autogenerated input type of UpdateProject.
type UpdateProjectInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The Project ID to update.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// Name: The name of project.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Body: The description of project.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// State: Whether the project is open or closed.
	//
	// GraphQL type: ProjectState
	State ProjectState `json:"state,omitempty"`

	// Public: Whether the project is public or not.
	//
	// GraphQL type: Boolean
	Public bool `json:"public,omitempty"`
}

// UpdateProjectPayload (OBJECT): Autogenerated return type of UpdateProject.
type UpdateProjectPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Project: The updated project.
	Project *Project `json:"project,omitempty"`
}

func (x *UpdateProjectPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateProjectPayload) GetProject() *Project        { return x.Project }

// UpdateProjectV2CollaboratorsInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2Collaborators.
type UpdateProjectV2CollaboratorsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the project to update the collaborators for.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// Collaborators: The collaborators to update.
	//
	// GraphQL type: [ProjectV2Collaborator!]!
	Collaborators []*ProjectV2Collaborator `json:"collaborators,omitempty"`
}

// UpdateProjectV2CollaboratorsPayload (OBJECT): Autogenerated return type of UpdateProjectV2Collaborators.
type UpdateProjectV2CollaboratorsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Collaborators: The collaborators granted a role.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Collaborators *ProjectV2ActorConnection `json:"collaborators,omitempty"`
}

func (x *UpdateProjectV2CollaboratorsPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateProjectV2CollaboratorsPayload) GetCollaborators() *ProjectV2ActorConnection {
	return x.Collaborators
}

// UpdateProjectV2DraftIssueInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2DraftIssue.
type UpdateProjectV2DraftIssueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DraftIssueId: The ID of the draft issue to update.
	//
	// GraphQL type: ID!
	DraftIssueId ID `json:"draftIssueId,omitempty"`

	// Title: The title of the draft issue.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The body of the draft issue.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// AssigneeIds: The IDs of the assignees of the draft issue.
	//
	// GraphQL type: [ID!]
	AssigneeIds []ID `json:"assigneeIds,omitempty"`
}

// UpdateProjectV2DraftIssuePayload (OBJECT): Autogenerated return type of UpdateProjectV2DraftIssue.
type UpdateProjectV2DraftIssuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// DraftIssue: The draft issue updated in the project.
	DraftIssue *DraftIssue `json:"draftIssue,omitempty"`
}

func (x *UpdateProjectV2DraftIssuePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateProjectV2DraftIssuePayload) GetDraftIssue() *DraftIssue  { return x.DraftIssue }

// UpdateProjectV2FieldInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2Field.
type UpdateProjectV2FieldInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// FieldId: The ID of the field to update.
	//
	// GraphQL type: ID!
	FieldId ID `json:"fieldId,omitempty"`

	// Name: The name to update.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// SingleSelectOptions: Options for a field of type SINGLE_SELECT. If empty, no changes will be made to the options. If values are present, they will overwrite the existing options for the field.
	//
	// GraphQL type: [ProjectV2SingleSelectFieldOptionInput!]
	SingleSelectOptions []*ProjectV2SingleSelectFieldOptionInput `json:"singleSelectOptions,omitempty"`
}

// UpdateProjectV2FieldPayload (OBJECT): Autogenerated return type of UpdateProjectV2Field.
type UpdateProjectV2FieldPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2Field: The updated field.
	ProjectV2Field ProjectV2FieldConfiguration `json:"projectV2Field,omitempty"`
}

func (x *UpdateProjectV2FieldPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateProjectV2FieldPayload) GetProjectV2Field() ProjectV2FieldConfiguration {
	return x.ProjectV2Field
}

// UpdateProjectV2Input (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2.
type UpdateProjectV2Input struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project to update.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// Title: Set the title of the project.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// ShortDescription: Set the short description of the project.
	//
	// GraphQL type: String
	ShortDescription string `json:"shortDescription,omitempty"`

	// Readme: Set the readme description of the project.
	//
	// GraphQL type: String
	Readme string `json:"readme,omitempty"`

	// Closed: Set the project to closed or open.
	//
	// GraphQL type: Boolean
	Closed bool `json:"closed,omitempty"`

	// Public: Set the project to public or private.
	//
	// GraphQL type: Boolean
	Public bool `json:"public,omitempty"`
}

// UpdateProjectV2ItemFieldValueInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2ItemFieldValue.
type UpdateProjectV2ItemFieldValueInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ItemId: The ID of the item to be updated.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`

	// FieldId: The ID of the field to be updated.
	//
	// GraphQL type: ID!
	FieldId ID `json:"fieldId,omitempty"`

	// Value: The value which will be set on the field.
	//
	// GraphQL type: ProjectV2FieldValue!
	Value *ProjectV2FieldValue `json:"value,omitempty"`
}

// UpdateProjectV2ItemFieldValuePayload (OBJECT): Autogenerated return type of UpdateProjectV2ItemFieldValue.
type UpdateProjectV2ItemFieldValuePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2Item: The updated item.
	ProjectV2Item *ProjectV2Item `json:"projectV2Item,omitempty"`
}

func (x *UpdateProjectV2ItemFieldValuePayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateProjectV2ItemFieldValuePayload) GetProjectV2Item() *ProjectV2Item {
	return x.ProjectV2Item
}

// UpdateProjectV2ItemPositionInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2ItemPosition.
type UpdateProjectV2ItemPositionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectId: The ID of the Project.
	//
	// GraphQL type: ID!
	ProjectId ID `json:"projectId,omitempty"`

	// ItemId: The ID of the item to be moved.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`

	// AfterId: The ID of the item to position this item after. If omitted or set to null the item will be moved to top.
	//
	// GraphQL type: ID
	AfterId ID `json:"afterId,omitempty"`
}

// UpdateProjectV2ItemPositionPayload (OBJECT): Autogenerated return type of UpdateProjectV2ItemPosition.
type UpdateProjectV2ItemPositionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Items: The items in the new order.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Items *ProjectV2ItemConnection `json:"items,omitempty"`
}

func (x *UpdateProjectV2ItemPositionPayload) GetClientMutationId() string        { return x.ClientMutationId }
func (x *UpdateProjectV2ItemPositionPayload) GetItems() *ProjectV2ItemConnection { return x.Items }

// UpdateProjectV2Payload (OBJECT): Autogenerated return type of UpdateProjectV2.
type UpdateProjectV2Payload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ProjectV2: The updated Project.
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`
}

func (x *UpdateProjectV2Payload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateProjectV2Payload) GetProjectV2() *ProjectV2    { return x.ProjectV2 }

// UpdateProjectV2StatusUpdateInput (INPUT_OBJECT): Autogenerated input type of UpdateProjectV2StatusUpdate.
type UpdateProjectV2StatusUpdateInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// StatusUpdateId: The ID of the status update to be updated.
	//
	// GraphQL type: ID!
	StatusUpdateId ID `json:"statusUpdateId,omitempty"`

	// StartDate: The start date of the status update.
	//
	// GraphQL type: Date
	StartDate Date `json:"startDate,omitempty"`

	// TargetDate: The target date of the status update.
	//
	// GraphQL type: Date
	TargetDate Date `json:"targetDate,omitempty"`

	// Status: The status of the status update.
	//
	// GraphQL type: ProjectV2StatusUpdateStatus
	Status ProjectV2StatusUpdateStatus `json:"status,omitempty"`

	// Body: The body of the status update.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`
}

// UpdateProjectV2StatusUpdatePayload (OBJECT): Autogenerated return type of UpdateProjectV2StatusUpdate.
type UpdateProjectV2StatusUpdatePayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// StatusUpdate: The status update updated in the project.
	StatusUpdate *ProjectV2StatusUpdate `json:"statusUpdate,omitempty"`
}

func (x *UpdateProjectV2StatusUpdatePayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateProjectV2StatusUpdatePayload) GetStatusUpdate() *ProjectV2StatusUpdate {
	return x.StatusUpdate
}

// UpdatePullRequestBranchInput (INPUT_OBJECT): Autogenerated input type of UpdatePullRequestBranch.
type UpdatePullRequestBranchInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Node ID of the pull request.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// ExpectedHeadOid: The head ref oid for the upstream branch.
	//
	// GraphQL type: GitObjectID
	ExpectedHeadOid GitObjectID `json:"expectedHeadOid,omitempty"`

	// UpdateMethod: The update branch method to use. If omitted, defaults to 'MERGE'.
	//
	// GraphQL type: PullRequestBranchUpdateMethod
	UpdateMethod PullRequestBranchUpdateMethod `json:"updateMethod,omitempty"`
}

// UpdatePullRequestBranchPayload (OBJECT): Autogenerated return type of UpdatePullRequestBranch.
type UpdatePullRequestBranchPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *UpdatePullRequestBranchPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *UpdatePullRequestBranchPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// UpdatePullRequestInput (INPUT_OBJECT): Autogenerated input type of UpdatePullRequest.
type UpdatePullRequestInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestId: The Node ID of the pull request.
	//
	// GraphQL type: ID!
	PullRequestId ID `json:"pullRequestId,omitempty"`

	// BaseRefName: The name of the branch you want your changes pulled into. This should be an existing branch
	// on the current repository.
	// .
	//
	// GraphQL type: String
	BaseRefName string `json:"baseRefName,omitempty"`

	// Title: The title of the pull request.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The contents of the pull request.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// State: The target state of the pull request.
	//
	// GraphQL type: PullRequestUpdateState
	State PullRequestUpdateState `json:"state,omitempty"`

	// MaintainerCanModify: Indicates whether maintainers can modify the pull request.
	//
	// GraphQL type: Boolean
	MaintainerCanModify bool `json:"maintainerCanModify,omitempty"`

	// AssigneeIds: An array of Node IDs of users for this pull request.
	//
	// GraphQL type: [ID!]
	AssigneeIds []ID `json:"assigneeIds,omitempty"`

	// MilestoneId: The Node ID of the milestone for this pull request.
	//
	// GraphQL type: ID
	MilestoneId ID `json:"milestoneId,omitempty"`

	// LabelIds: An array of Node IDs of labels for this pull request.
	//
	// GraphQL type: [ID!]
	LabelIds []ID `json:"labelIds,omitempty"`

	// ProjectIds: An array of Node IDs for projects associated with this pull request.
	//
	// GraphQL type: [ID!]
	ProjectIds []ID `json:"projectIds,omitempty"`
}

// UpdatePullRequestPayload (OBJECT): Autogenerated return type of UpdatePullRequest.
type UpdatePullRequestPayload struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequest: The updated pull request.
	PullRequest *PullRequest `json:"pullRequest,omitempty"`
}

func (x *UpdatePullRequestPayload) GetActor() Actor              { return x.Actor }
func (x *UpdatePullRequestPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *UpdatePullRequestPayload) GetPullRequest() *PullRequest { return x.PullRequest }

// UpdatePullRequestReviewCommentInput (INPUT_OBJECT): Autogenerated input type of UpdatePullRequestReviewComment.
type UpdatePullRequestReviewCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReviewCommentId: The Node ID of the comment to modify.
	//
	// GraphQL type: ID!
	PullRequestReviewCommentId ID `json:"pullRequestReviewCommentId,omitempty"`

	// Body: The text of the comment.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// UpdatePullRequestReviewCommentPayload (OBJECT): Autogenerated return type of UpdatePullRequestReviewComment.
type UpdatePullRequestReviewCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReviewComment: The updated comment.
	PullRequestReviewComment *PullRequestReviewComment `json:"pullRequestReviewComment,omitempty"`
}

func (x *UpdatePullRequestReviewCommentPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdatePullRequestReviewCommentPayload) GetPullRequestReviewComment() *PullRequestReviewComment {
	return x.PullRequestReviewComment
}

// UpdatePullRequestReviewInput (INPUT_OBJECT): Autogenerated input type of UpdatePullRequestReview.
type UpdatePullRequestReviewInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReviewId: The Node ID of the pull request review to modify.
	//
	// GraphQL type: ID!
	PullRequestReviewId ID `json:"pullRequestReviewId,omitempty"`

	// Body: The contents of the pull request review body.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`
}

// UpdatePullRequestReviewPayload (OBJECT): Autogenerated return type of UpdatePullRequestReview.
type UpdatePullRequestReviewPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// PullRequestReview: The updated pull request review.
	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
}

func (x *UpdatePullRequestReviewPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdatePullRequestReviewPayload) GetPullRequestReview() *PullRequestReview {
	return x.PullRequestReview
}

// UpdateRefInput (INPUT_OBJECT): Autogenerated input type of UpdateRef.
type UpdateRefInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RefId: The Node ID of the Ref to be updated.
	//
	// GraphQL type: ID!
	RefId ID `json:"refId,omitempty"`

	// Oid: The GitObjectID that the Ref shall be updated to target.
	//
	// GraphQL type: GitObjectID!
	Oid GitObjectID `json:"oid,omitempty"`

	// Force: Permit updates of branch Refs that are not fast-forwards?.
	//
	// GraphQL type: Boolean
	Force bool `json:"force,omitempty"`
}

// UpdateRefPayload (OBJECT): Autogenerated return type of UpdateRef.
type UpdateRefPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Ref: The updated Ref.
	Ref *Ref `json:"ref,omitempty"`
}

func (x *UpdateRefPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateRefPayload) GetRef() *Ref                { return x.Ref }

// UpdateRefsInput (INPUT_OBJECT): Autogenerated input type of UpdateRefs.
type UpdateRefsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// RefUpdates: A list of ref updates.
	//
	// GraphQL type: [RefUpdate!]!
	RefUpdates []*RefUpdate `json:"refUpdates,omitempty"`
}

// UpdateRefsPayload (OBJECT): Autogenerated return type of UpdateRefs.
type UpdateRefsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
}

func (x *UpdateRefsPayload) GetClientMutationId() string { return x.ClientMutationId }

// UpdateRepositoryInput (INPUT_OBJECT): Autogenerated input type of UpdateRepository.
type UpdateRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The ID of the repository to update.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// Name: The new name of the repository.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Description: A new description for the repository. Pass an empty string to erase the existing description.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// Template: Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
	//
	// GraphQL type: Boolean
	Template bool `json:"template,omitempty"`

	// HomepageUrl: The URL for a web page about this repository. Pass an empty string to erase the existing URL.
	//
	// GraphQL type: URI
	HomepageUrl URI `json:"homepageUrl,omitempty"`

	// HasWikiEnabled: Indicates if the repository should have the wiki feature enabled.
	//
	// GraphQL type: Boolean
	HasWikiEnabled bool `json:"hasWikiEnabled,omitempty"`

	// HasIssuesEnabled: Indicates if the repository should have the issues feature enabled.
	//
	// GraphQL type: Boolean
	HasIssuesEnabled bool `json:"hasIssuesEnabled,omitempty"`

	// HasProjectsEnabled: Indicates if the repository should have the project boards feature enabled.
	//
	// GraphQL type: Boolean
	HasProjectsEnabled bool `json:"hasProjectsEnabled,omitempty"`

	// HasDiscussionsEnabled: Indicates if the repository should have the discussions feature enabled.
	//
	// GraphQL type: Boolean
	HasDiscussionsEnabled bool `json:"hasDiscussionsEnabled,omitempty"`

	// HasSponsorshipsEnabled: Indicates if the repository displays a Sponsor button for financial contributions.
	//
	// GraphQL type: Boolean
	HasSponsorshipsEnabled bool `json:"hasSponsorshipsEnabled,omitempty"`
}

// UpdateRepositoryPayload (OBJECT): Autogenerated return type of UpdateRepository.
type UpdateRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UpdateRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateRepositoryPayload) GetRepository() *Repository  { return x.Repository }

// UpdateRepositoryRulesetInput (INPUT_OBJECT): Autogenerated input type of UpdateRepositoryRuleset.
type UpdateRepositoryRulesetInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryRulesetId: The global relay id of the repository ruleset to be updated.
	//
	// GraphQL type: ID!
	RepositoryRulesetId ID `json:"repositoryRulesetId,omitempty"`

	// Name: The name of the ruleset.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Target: The target of the ruleset.
	//
	// GraphQL type: RepositoryRulesetTarget
	Target RepositoryRulesetTarget `json:"target,omitempty"`

	// Rules: The list of rules for this ruleset.
	//
	// GraphQL type: [RepositoryRuleInput!]
	Rules []*RepositoryRuleInput `json:"rules,omitempty"`

	// Conditions: The list of conditions for this ruleset.
	//
	// GraphQL type: RepositoryRuleConditionsInput
	Conditions *RepositoryRuleConditionsInput `json:"conditions,omitempty"`

	// Enforcement: The enforcement level for this ruleset.
	//
	// GraphQL type: RuleEnforcement
	Enforcement RuleEnforcement `json:"enforcement,omitempty"`

	// BypassActors: A list of actors that are allowed to bypass rules in this ruleset.
	//
	// GraphQL type: [RepositoryRulesetBypassActorInput!]
	BypassActors []*RepositoryRulesetBypassActorInput `json:"bypassActors,omitempty"`
}

// UpdateRepositoryRulesetPayload (OBJECT): Autogenerated return type of UpdateRepositoryRuleset.
type UpdateRepositoryRulesetPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Ruleset: The newly created Ruleset.
	Ruleset *RepositoryRuleset `json:"ruleset,omitempty"`
}

func (x *UpdateRepositoryRulesetPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *UpdateRepositoryRulesetPayload) GetRuleset() *RepositoryRuleset { return x.Ruleset }

// UpdateRepositoryWebCommitSignoffSettingInput (INPUT_OBJECT): Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting.
type UpdateRepositoryWebCommitSignoffSettingInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The ID of the repository to update.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// WebCommitSignoffRequired: Indicates if the repository should require signoff on web-based commits.
	//
	// GraphQL type: Boolean!
	WebCommitSignoffRequired bool `json:"webCommitSignoffRequired,omitempty"`
}

// UpdateRepositoryWebCommitSignoffSettingPayload (OBJECT): Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting.
type UpdateRepositoryWebCommitSignoffSettingPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Message: A message confirming the result of updating the web commit signoff setting.
	Message string `json:"message,omitempty"`

	// Repository: The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UpdateRepositoryWebCommitSignoffSettingPayload) GetClientMutationId() string {
	return x.ClientMutationId
}
func (x *UpdateRepositoryWebCommitSignoffSettingPayload) GetMessage() string { return x.Message }
func (x *UpdateRepositoryWebCommitSignoffSettingPayload) GetRepository() *Repository {
	return x.Repository
}

// UpdateSponsorshipPreferencesInput (INPUT_OBJECT): Autogenerated input type of UpdateSponsorshipPreferences.
type UpdateSponsorshipPreferencesInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SponsorId: The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
	//
	// GraphQL type: ID
	SponsorId ID `json:"sponsorId,omitempty"`

	// SponsorLogin: The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
	//
	// GraphQL type: String
	SponsorLogin string `json:"sponsorLogin,omitempty"`

	// SponsorableId: The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
	//
	// GraphQL type: ID
	SponsorableId ID `json:"sponsorableId,omitempty"`

	// SponsorableLogin: The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
	//
	// GraphQL type: String
	SponsorableLogin string `json:"sponsorableLogin,omitempty"`

	// ReceiveEmails: Whether the sponsor should receive email updates from the sponsorable.
	//
	// GraphQL type: Boolean
	ReceiveEmails bool `json:"receiveEmails,omitempty"`

	// PrivacyLevel: Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
	//
	// GraphQL type: SponsorshipPrivacy
	PrivacyLevel SponsorshipPrivacy `json:"privacyLevel,omitempty"`
}

// UpdateSponsorshipPreferencesPayload (OBJECT): Autogenerated return type of UpdateSponsorshipPreferences.
type UpdateSponsorshipPreferencesPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Sponsorship: The sponsorship that was updated.
	Sponsorship *Sponsorship `json:"sponsorship,omitempty"`
}

func (x *UpdateSponsorshipPreferencesPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *UpdateSponsorshipPreferencesPayload) GetSponsorship() *Sponsorship { return x.Sponsorship }

// UpdateSubscriptionInput (INPUT_OBJECT): Autogenerated input type of UpdateSubscription.
type UpdateSubscriptionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// SubscribableId: The Node ID of the subscribable object to modify.
	//
	// GraphQL type: ID!
	SubscribableId ID `json:"subscribableId,omitempty"`

	// State: The new state of the subscription.
	//
	// GraphQL type: SubscriptionState!
	State SubscriptionState `json:"state,omitempty"`
}

// UpdateSubscriptionPayload (OBJECT): Autogenerated return type of UpdateSubscription.
type UpdateSubscriptionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Subscribable: The input subscribable entity.
	Subscribable Subscribable `json:"subscribable,omitempty"`
}

func (x *UpdateSubscriptionPayload) GetClientMutationId() string   { return x.ClientMutationId }
func (x *UpdateSubscriptionPayload) GetSubscribable() Subscribable { return x.Subscribable }

// UpdateTeamDiscussionCommentInput (INPUT_OBJECT): Autogenerated input type of UpdateTeamDiscussionComment.
type UpdateTeamDiscussionCommentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the comment to modify.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`

	// Body: The updated text of the comment.
	//
	// GraphQL type: String!
	Body string `json:"body,omitempty"`

	// BodyVersion: The current version of the body content.
	//
	// GraphQL type: String
	BodyVersion string `json:"bodyVersion,omitempty"`
}

// UpdateTeamDiscussionCommentPayload (OBJECT): Autogenerated return type of UpdateTeamDiscussionComment.
type UpdateTeamDiscussionCommentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TeamDiscussionComment: The updated comment.
	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment,omitempty"`
}

func (x *UpdateTeamDiscussionCommentPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateTeamDiscussionCommentPayload) GetTeamDiscussionComment() *TeamDiscussionComment {
	return x.TeamDiscussionComment
}

// UpdateTeamDiscussionInput (INPUT_OBJECT): Autogenerated input type of UpdateTeamDiscussion.
type UpdateTeamDiscussionInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the discussion to modify.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`

	// Title: The updated title of the discussion.
	//
	// GraphQL type: String
	Title string `json:"title,omitempty"`

	// Body: The updated text of the discussion.
	//
	// GraphQL type: String
	Body string `json:"body,omitempty"`

	// BodyVersion: The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
	//
	// GraphQL type: String
	BodyVersion string `json:"bodyVersion,omitempty"`

	// Pinned: If provided, sets the pinned state of the updated discussion.
	//
	// GraphQL type: Boolean
	Pinned bool `json:"pinned,omitempty"`
}

// UpdateTeamDiscussionPayload (OBJECT): Autogenerated return type of UpdateTeamDiscussion.
type UpdateTeamDiscussionPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// TeamDiscussion: The updated discussion.
	TeamDiscussion *TeamDiscussion `json:"teamDiscussion,omitempty"`
}

func (x *UpdateTeamDiscussionPayload) GetClientMutationId() string        { return x.ClientMutationId }
func (x *UpdateTeamDiscussionPayload) GetTeamDiscussion() *TeamDiscussion { return x.TeamDiscussion }

// UpdateTeamReviewAssignmentInput (INPUT_OBJECT): Autogenerated input type of UpdateTeamReviewAssignment.
type UpdateTeamReviewAssignmentInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The Node ID of the team to update review assignments of.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`

	// Enabled: Turn on or off review assignment.
	//
	// GraphQL type: Boolean!
	Enabled bool `json:"enabled,omitempty"`

	// Algorithm: The algorithm to use for review assignment.
	//
	// GraphQL type: TeamReviewAssignmentAlgorithm
	Algorithm TeamReviewAssignmentAlgorithm `json:"algorithm,omitempty"`

	// TeamMemberCount: The number of team members to assign.
	//
	// GraphQL type: Int
	TeamMemberCount int `json:"teamMemberCount,omitempty"`

	// NotifyTeam: Notify the entire team of the PR if it is delegated.
	//
	// GraphQL type: Boolean
	NotifyTeam bool `json:"notifyTeam,omitempty"`

	// RemoveTeamRequest: Remove the team review request when assigning.
	//
	// GraphQL type: Boolean
	RemoveTeamRequest bool `json:"removeTeamRequest,omitempty"`

	// IncludeChildTeamMembers: Include the members of any child teams when assigning.
	//
	// GraphQL type: Boolean
	IncludeChildTeamMembers bool `json:"includeChildTeamMembers,omitempty"`

	// CountMembersAlreadyRequested: Count any members whose review has already been requested against the required number of members assigned to review.
	//
	// GraphQL type: Boolean
	CountMembersAlreadyRequested bool `json:"countMembersAlreadyRequested,omitempty"`

	// ExcludedTeamMemberIds: An array of team member IDs to exclude.
	//
	// GraphQL type: [ID!]
	ExcludedTeamMemberIds []ID `json:"excludedTeamMemberIds,omitempty"`
}

// UpdateTeamReviewAssignmentPayload (OBJECT): Autogenerated return type of UpdateTeamReviewAssignment.
type UpdateTeamReviewAssignmentPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Team: The team that was modified.
	Team *Team `json:"team,omitempty"`
}

func (x *UpdateTeamReviewAssignmentPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateTeamReviewAssignmentPayload) GetTeam() *Team              { return x.Team }

// UpdateTeamsRepositoryInput (INPUT_OBJECT): Autogenerated input type of UpdateTeamsRepository.
type UpdateTeamsRepositoryInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: Repository ID being granted access to.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// TeamIds: A list of teams being granted access. Limit: 10.
	//
	// GraphQL type: [ID!]!
	TeamIds []ID `json:"teamIds,omitempty"`

	// Permission: Permission that should be granted to the teams.
	//
	// GraphQL type: RepositoryPermission!
	Permission RepositoryPermission `json:"permission,omitempty"`
}

// UpdateTeamsRepositoryPayload (OBJECT): Autogenerated return type of UpdateTeamsRepository.
type UpdateTeamsRepositoryPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Repository: The repository that was updated.
	Repository *Repository `json:"repository,omitempty"`

	// Teams: The teams granted permission on the repository.
	Teams []*Team `json:"teams,omitempty"`
}

func (x *UpdateTeamsRepositoryPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateTeamsRepositoryPayload) GetRepository() *Repository  { return x.Repository }
func (x *UpdateTeamsRepositoryPayload) GetTeams() []*Team           { return x.Teams }

// UpdateTopicsInput (INPUT_OBJECT): Autogenerated input type of UpdateTopics.
type UpdateTopicsInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// RepositoryId: The Node ID of the repository.
	//
	// GraphQL type: ID!
	RepositoryId ID `json:"repositoryId,omitempty"`

	// TopicNames: An array of topic names.
	//
	// GraphQL type: [String!]!
	TopicNames []string `json:"topicNames,omitempty"`
}

// UpdateTopicsPayload (OBJECT): Autogenerated return type of UpdateTopics.
type UpdateTopicsPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// InvalidTopicNames: Names of the provided topics that are not valid.
	InvalidTopicNames []string `json:"invalidTopicNames,omitempty"`

	// Repository: The updated repository.
	Repository *Repository `json:"repository,omitempty"`
}

func (x *UpdateTopicsPayload) GetClientMutationId() string    { return x.ClientMutationId }
func (x *UpdateTopicsPayload) GetInvalidTopicNames() []string { return x.InvalidTopicNames }
func (x *UpdateTopicsPayload) GetRepository() *Repository     { return x.Repository }

// UpdateUserListInput (INPUT_OBJECT): Autogenerated input type of UpdateUserList.
type UpdateUserListInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ListId: The ID of the list to update.
	//
	// GraphQL type: ID!
	ListId ID `json:"listId,omitempty"`

	// Name: The name of the list.
	//
	// GraphQL type: String
	Name string `json:"name,omitempty"`

	// Description: A description of the list.
	//
	// GraphQL type: String
	Description string `json:"description,omitempty"`

	// IsPrivate: Whether or not the list is private.
	//
	// GraphQL type: Boolean
	IsPrivate bool `json:"isPrivate,omitempty"`
}

// UpdateUserListPayload (OBJECT): Autogenerated return type of UpdateUserList.
type UpdateUserListPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// List: The list that was just updated.
	List *UserList `json:"list,omitempty"`
}

func (x *UpdateUserListPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateUserListPayload) GetList() *UserList          { return x.List }

// UpdateUserListsForItemInput (INPUT_OBJECT): Autogenerated input type of UpdateUserListsForItem.
type UpdateUserListsForItemInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// ItemId: The item to add to the list.
	//
	// GraphQL type: ID!
	ItemId ID `json:"itemId,omitempty"`

	// ListIds: The lists to which this item should belong.
	//
	// GraphQL type: [ID!]!
	ListIds []ID `json:"listIds,omitempty"`

	// SuggestedListIds: The suggested lists to create and add this item to.
	//
	// GraphQL type: [ID!]
	SuggestedListIds []ID `json:"suggestedListIds,omitempty"`
}

// UpdateUserListsForItemPayload (OBJECT): Autogenerated return type of UpdateUserListsForItem.
type UpdateUserListsForItemPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Item: The item that was added.
	Item UserListItems `json:"item,omitempty"`

	// Lists: The lists to which this item belongs.
	Lists []*UserList `json:"lists,omitempty"`

	// User: The user who owns the lists.
	User *User `json:"user,omitempty"`
}

func (x *UpdateUserListsForItemPayload) GetClientMutationId() string { return x.ClientMutationId }
func (x *UpdateUserListsForItemPayload) GetItem() UserListItems      { return x.Item }
func (x *UpdateUserListsForItemPayload) GetLists() []*UserList       { return x.Lists }
func (x *UpdateUserListsForItemPayload) GetUser() *User              { return x.User }

// User (OBJECT): A user is an individual's account on GitHub that owns repositories and can make new content.
type User struct {
	// AnyPinnableItems: Determine if this repository owner has any items that can be pinned to their profile.
	//
	// Query arguments:
	//   - type PinnableItemType
	AnyPinnableItems bool `json:"anyPinnableItems,omitempty"`

	// AvatarUrl: A URL pointing to the user's public avatar.
	//
	// Query arguments:
	//   - size Int
	AvatarUrl URI `json:"avatarUrl,omitempty"`

	// Bio: The user's public profile bio.
	Bio string `json:"bio,omitempty"`

	// BioHTML: The user's public profile bio as HTML.
	BioHTML template.HTML `json:"bioHTML,omitempty"`

	// CanReceiveOrganizationEmailsWhenNotificationsRestricted: Could this user receive email notifications, if the organization had notification restrictions enabled?.
	//
	// Query arguments:
	//   - login String!
	CanReceiveOrganizationEmailsWhenNotificationsRestricted bool `json:"canReceiveOrganizationEmailsWhenNotificationsRestricted,omitempty"`

	// CommitComments: A list of commit comments made by this user.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	CommitComments *CommitCommentConnection `json:"commitComments,omitempty"`

	// Company: The user's public profile company.
	Company string `json:"company,omitempty"`

	// CompanyHTML: The user's public profile company as HTML.
	CompanyHTML template.HTML `json:"companyHTML,omitempty"`

	// ContributionsCollection: The collection of contributions this user has made to different repositories.
	//
	// Query arguments:
	//   - organizationID ID
	//   - from DateTime
	//   - to DateTime
	ContributionsCollection *ContributionsCollection `json:"contributionsCollection,omitempty"`

	// CopilotEndpoints: The user's Copilot endpoint information.
	CopilotEndpoints *CopilotEndpoints `json:"copilotEndpoints,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Email: The user's publicly visible profile email.
	Email string `json:"email,omitempty"`

	// Enterprises: A list of enterprises that the user belongs to.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy EnterpriseOrder
	//   - membershipType EnterpriseMembershipType
	Enterprises *EnterpriseConnection `json:"enterprises,omitempty"`

	// EstimatedNextSponsorsPayoutInCents: The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
	EstimatedNextSponsorsPayoutInCents int `json:"estimatedNextSponsorsPayoutInCents,omitempty"`

	// Followers: A list of users the given user is followed by.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Followers *FollowerConnection `json:"followers,omitempty"`

	// Following: A list of users the given user is following.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Following *FollowingConnection `json:"following,omitempty"`

	// Gist: Find gist by repo name.
	//
	// Query arguments:
	//   - name String!
	Gist *Gist `json:"gist,omitempty"`

	// GistComments: A list of gist comments made by this user.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	GistComments *GistCommentConnection `json:"gistComments,omitempty"`

	// Gists: A list of the Gists the user has created.
	//
	// Query arguments:
	//   - privacy GistPrivacy
	//   - orderBy GistOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Gists *GistConnection `json:"gists,omitempty"`

	// HasSponsorsListing: True if this user/organization has a GitHub Sponsors listing.
	HasSponsorsListing bool `json:"hasSponsorsListing,omitempty"`

	// Hovercard: The hovercard information for this user in a given context.
	//
	// Query arguments:
	//   - primarySubjectId ID
	Hovercard *Hovercard `json:"hovercard,omitempty"`

	// Id: The Node ID of the User object.
	Id ID `json:"id,omitempty"`

	// InteractionAbility: The interaction ability settings for this user.
	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`

	// IsBountyHunter: Whether or not this user is a participant in the GitHub Security Bug Bounty.
	IsBountyHunter bool `json:"isBountyHunter,omitempty"`

	// IsCampusExpert: Whether or not this user is a participant in the GitHub Campus Experts Program.
	IsCampusExpert bool `json:"isCampusExpert,omitempty"`

	// IsDeveloperProgramMember: Whether or not this user is a GitHub Developer Program member.
	IsDeveloperProgramMember bool `json:"isDeveloperProgramMember,omitempty"`

	// IsEmployee: Whether or not this user is a GitHub employee.
	IsEmployee bool `json:"isEmployee,omitempty"`

	// IsFollowingViewer: Whether or not this user is following the viewer. Inverse of viewerIsFollowing.
	IsFollowingViewer bool `json:"isFollowingViewer,omitempty"`

	// IsGitHubStar: Whether or not this user is a member of the GitHub Stars Program.
	IsGitHubStar bool `json:"isGitHubStar,omitempty"`

	// IsHireable: Whether or not the user has marked themselves as for hire.
	IsHireable bool `json:"isHireable,omitempty"`

	// IsSiteAdmin: Whether or not this user is a site administrator.
	IsSiteAdmin bool `json:"isSiteAdmin,omitempty"`

	// IsSponsoredBy: Whether the given account is sponsoring this user/organization.
	//
	// Query arguments:
	//   - accountLogin String!
	IsSponsoredBy bool `json:"isSponsoredBy,omitempty"`

	// IsSponsoringViewer: True if the viewer is sponsored by this user/organization.
	IsSponsoringViewer bool `json:"isSponsoringViewer,omitempty"`

	// IsViewer: Whether or not this user is the viewing user.
	IsViewer bool `json:"isViewer,omitempty"`

	// IssueComments: A list of issue comments made by this user.
	//
	// Query arguments:
	//   - orderBy IssueCommentOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	IssueComments *IssueCommentConnection `json:"issueComments,omitempty"`

	// Issues: A list of issues associated with this user.
	//
	// Query arguments:
	//   - orderBy IssueOrder
	//   - labels [String!]
	//   - states [IssueState!]
	//   - filterBy IssueFilters
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Issues *IssueConnection `json:"issues,omitempty"`

	// ItemShowcase: Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
	ItemShowcase *ProfileItemShowcase `json:"itemShowcase,omitempty"`

	// LifetimeReceivedSponsorshipValues: Calculate how much each sponsor has ever paid total to this maintainer via GitHub Sponsors. Does not include sponsorships paid via Patreon.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorAndLifetimeValueOrder
	LifetimeReceivedSponsorshipValues *SponsorAndLifetimeValueConnection `json:"lifetimeReceivedSponsorshipValues,omitempty"`

	// Lists: A user-curated list of repositories.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Lists *UserListConnection `json:"lists,omitempty"`

	// Location: The user's public profile location.
	Location string `json:"location,omitempty"`

	// Login: The username used to login.
	Login string `json:"login,omitempty"`

	// MonthlyEstimatedSponsorsIncomeInCents: The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
	MonthlyEstimatedSponsorsIncomeInCents int `json:"monthlyEstimatedSponsorsIncomeInCents,omitempty"`

	// Name: The user's public profile name.
	Name string `json:"name,omitempty"`

	// Organization: Find an organization by its login that the user belongs to.
	//
	// Query arguments:
	//   - login String!
	Organization *Organization `json:"organization,omitempty"`

	// OrganizationVerifiedDomainEmails: Verified email addresses that match verified domains for a specified organization the user is a member of.
	//
	// Query arguments:
	//   - login String!
	OrganizationVerifiedDomainEmails []string `json:"organizationVerifiedDomainEmails,omitempty"`

	// Organizations: A list of organizations the user belongs to.
	//
	// Query arguments:
	//   - orderBy OrganizationOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Organizations *OrganizationConnection `json:"organizations,omitempty"`

	// Packages: A list of packages under the owner.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - names [String]
	//   - repositoryId ID
	//   - packageType PackageType
	//   - orderBy PackageOrder
	Packages *PackageConnection `json:"packages,omitempty"`

	// PinnableItems: A list of repositories and gists this profile owner can pin to their profile.
	//
	// Query arguments:
	//   - types [PinnableItemType!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PinnableItems *PinnableItemConnection `json:"pinnableItems,omitempty"`

	// PinnedItems: A list of repositories and gists this profile owner has pinned to their profile.
	//
	// Query arguments:
	//   - types [PinnableItemType!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PinnedItems *PinnableItemConnection `json:"pinnedItems,omitempty"`

	// PinnedItemsRemaining: Returns how many more items this profile owner can pin to their profile.
	PinnedItemsRemaining int `json:"pinnedItemsRemaining,omitempty"`

	// Project: Find project by number.
	//
	// Deprecated: Find project by number.
	//
	// Query arguments:
	//   - number Int!
	Project *Project `json:"project,omitempty"`

	// ProjectV2: Find a project by number.
	//
	// Query arguments:
	//   - number Int!
	ProjectV2 *ProjectV2 `json:"projectV2,omitempty"`

	// Projects: A list of projects under the owner.
	//
	// Deprecated: A list of projects under the owner.
	//
	// Query arguments:
	//   - orderBy ProjectOrder
	//   - search String
	//   - states [ProjectState!]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Projects *ProjectConnection `json:"projects,omitempty"`

	// ProjectsResourcePath: The HTTP path listing user's projects.
	ProjectsResourcePath URI `json:"projectsResourcePath,omitempty"`

	// ProjectsUrl: The HTTP URL listing user's projects.
	ProjectsUrl URI `json:"projectsUrl,omitempty"`

	// ProjectsV2: A list of projects under the owner.
	//
	// Query arguments:
	//   - query String
	//   - orderBy ProjectV2Order
	//   - minPermissionLevel ProjectV2PermissionLevel
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	ProjectsV2 *ProjectV2Connection `json:"projectsV2,omitempty"`

	// Pronouns: The user's profile pronouns.
	Pronouns string `json:"pronouns,omitempty"`

	// PublicKeys: A list of public keys associated with this user.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PublicKeys *PublicKeyConnection `json:"publicKeys,omitempty"`

	// PullRequests: A list of pull requests associated with this user.
	//
	// Query arguments:
	//   - states [PullRequestState!]
	//   - labels [String!]
	//   - headRefName String
	//   - baseRefName String
	//   - orderBy IssueOrder
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`

	// RecentProjects: Recent projects that this user has modified in the context of the owner.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RecentProjects *ProjectV2Connection `json:"recentProjects,omitempty"`

	// Repositories: A list of repositories that the user owns.
	//
	// Query arguments:
	//   - privacy RepositoryPrivacy
	//   - visibility RepositoryVisibility
	//   - orderBy RepositoryOrder
	//   - affiliations [RepositoryAffiliation]
	//   - ownerAffiliations [RepositoryAffiliation]
	//   - isLocked Boolean
	//   - hasIssuesEnabled Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - isArchived Boolean
	//   - isFork Boolean
	Repositories *RepositoryConnection `json:"repositories,omitempty"`

	// RepositoriesContributedTo: A list of repositories that the user recently contributed to.
	//
	// Query arguments:
	//   - privacy RepositoryPrivacy
	//   - orderBy RepositoryOrder
	//   - isLocked Boolean
	//   - hasIssues Boolean
	//   - includeUserRepositories Boolean
	//   - contributionTypes [RepositoryContributionType]
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	RepositoriesContributedTo *RepositoryConnection `json:"repositoriesContributedTo,omitempty"`

	// Repository: Find Repository.
	//
	// Query arguments:
	//   - name String!
	//   - followRenames Boolean
	Repository *Repository `json:"repository,omitempty"`

	// RepositoryDiscussionComments: Discussion comments this user has authored.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - repositoryId ID
	//   - onlyAnswers Boolean
	RepositoryDiscussionComments *DiscussionCommentConnection `json:"repositoryDiscussionComments,omitempty"`

	// RepositoryDiscussions: Discussions this user has started.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy DiscussionOrder
	//   - repositoryId ID
	//   - answered Boolean
	//   - states [DiscussionState!]
	RepositoryDiscussions *DiscussionConnection `json:"repositoryDiscussions,omitempty"`

	// ResourcePath: The HTTP path for this user.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// SavedReplies: Replies this user has saved.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SavedReplyOrder
	SavedReplies *SavedReplyConnection `json:"savedReplies,omitempty"`

	// SocialAccounts: The user's social media accounts, ordered as they appear on the user's profile.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	SocialAccounts *SocialAccountConnection `json:"socialAccounts,omitempty"`

	// Sponsoring: List of users and organizations this entity is sponsoring.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorOrder
	Sponsoring *SponsorConnection `json:"sponsoring,omitempty"`

	// Sponsors: List of sponsors for this user or organization.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - tierId ID
	//   - orderBy SponsorOrder
	Sponsors *SponsorConnection `json:"sponsors,omitempty"`

	// SponsorsActivities: Events involving this sponsorable, such as new sponsorships.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - period SponsorsActivityPeriod
	//   - since DateTime
	//   - until DateTime
	//   - orderBy SponsorsActivityOrder
	//   - actions [SponsorsActivityAction!]
	//   - includeAsSponsor Boolean
	//   - includePrivate Boolean
	SponsorsActivities *SponsorsActivityConnection `json:"sponsorsActivities,omitempty"`

	// SponsorsListing: The GitHub Sponsors listing for this user or organization.
	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`

	// SponsorshipForViewerAsSponsor: The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
	//
	// Query arguments:
	//   - activeOnly Boolean
	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor,omitempty"`

	// SponsorshipForViewerAsSponsorable: The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
	//
	// Query arguments:
	//   - activeOnly Boolean
	SponsorshipForViewerAsSponsorable *Sponsorship `json:"sponsorshipForViewerAsSponsorable,omitempty"`

	// SponsorshipNewsletters: List of sponsorship updates sent from this sponsorable to sponsors.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorshipNewsletterOrder
	SponsorshipNewsletters *SponsorshipNewsletterConnection `json:"sponsorshipNewsletters,omitempty"`

	// SponsorshipsAsMaintainer: The sponsorships where this user or organization is the maintainer receiving the funds.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - includePrivate Boolean
	//   - orderBy SponsorshipOrder
	//   - activeOnly Boolean
	SponsorshipsAsMaintainer *SponsorshipConnection `json:"sponsorshipsAsMaintainer,omitempty"`

	// SponsorshipsAsSponsor: The sponsorships where this user or organization is the funder.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy SponsorshipOrder
	//   - maintainerLogins [String!]
	//   - activeOnly Boolean
	SponsorshipsAsSponsor *SponsorshipConnection `json:"sponsorshipsAsSponsor,omitempty"`

	// StarredRepositories: Repositories the user has starred.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - ownedByViewer Boolean
	//   - orderBy StarOrder
	StarredRepositories *StarredRepositoryConnection `json:"starredRepositories,omitempty"`

	// Status: The user's description of what they're currently doing.
	Status *UserStatus `json:"status,omitempty"`

	// SuggestedListNames: Suggested names for user lists.
	SuggestedListNames []*UserListSuggestion `json:"suggestedListNames,omitempty"`

	// TopRepositories: Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
	// .
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy RepositoryOrder!
	//   - since DateTime
	TopRepositories *RepositoryConnection `json:"topRepositories,omitempty"`

	// TotalSponsorshipAmountAsSponsorInCents: The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
	//
	// Query arguments:
	//   - since DateTime
	//   - until DateTime
	//   - sponsorableLogins [String!]
	TotalSponsorshipAmountAsSponsorInCents int `json:"totalSponsorshipAmountAsSponsorInCents,omitempty"`

	// TwitterUsername: The user's Twitter username.
	TwitterUsername string `json:"twitterUsername,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this user.
	Url URI `json:"url,omitempty"`

	// UserViewType: Whether the request returns publicly visible information or privately visible information about the user.
	UserViewType UserViewType `json:"userViewType,omitempty"`

	// ViewerCanChangePinnedItems: Can the viewer pin repositories and gists to the profile?.
	ViewerCanChangePinnedItems bool `json:"viewerCanChangePinnedItems,omitempty"`

	// ViewerCanCreateProjects: Can the current viewer create new projects on this owner.
	ViewerCanCreateProjects bool `json:"viewerCanCreateProjects,omitempty"`

	// ViewerCanFollow: Whether or not the viewer is able to follow the user.
	ViewerCanFollow bool `json:"viewerCanFollow,omitempty"`

	// ViewerCanSponsor: Whether or not the viewer is able to sponsor this user/organization.
	ViewerCanSponsor bool `json:"viewerCanSponsor,omitempty"`

	// ViewerIsFollowing: Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
	ViewerIsFollowing bool `json:"viewerIsFollowing,omitempty"`

	// ViewerIsSponsoring: True if the viewer is sponsoring this user/organization.
	ViewerIsSponsoring bool `json:"viewerIsSponsoring,omitempty"`

	// Watching: A list of repositories the given user is watching.
	//
	// Query arguments:
	//   - privacy RepositoryPrivacy
	//   - visibility RepositoryVisibility
	//   - orderBy RepositoryOrder
	//   - affiliations [RepositoryAffiliation]
	//   - ownerAffiliations [RepositoryAffiliation]
	//   - isLocked Boolean
	//   - hasIssuesEnabled Boolean
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Watching *RepositoryConnection `json:"watching,omitempty"`

	// WebsiteUrl: A URL pointing to the user's public website/blog.
	WebsiteUrl URI `json:"websiteUrl,omitempty"`
}

func (x *User) GetAnyPinnableItems() bool { return x.AnyPinnableItems }
func (x *User) GetAvatarUrl() URI         { return x.AvatarUrl }
func (x *User) GetBio() string            { return x.Bio }
func (x *User) GetBioHTML() template.HTML { return x.BioHTML }
func (x *User) GetCanReceiveOrganizationEmailsWhenNotificationsRestricted() bool {
	return x.CanReceiveOrganizationEmailsWhenNotificationsRestricted
}
func (x *User) GetCommitComments() *CommitCommentConnection { return x.CommitComments }
func (x *User) GetCompany() string                          { return x.Company }
func (x *User) GetCompanyHTML() template.HTML               { return x.CompanyHTML }
func (x *User) GetContributionsCollection() *ContributionsCollection {
	return x.ContributionsCollection
}
func (x *User) GetCopilotEndpoints() *CopilotEndpoints { return x.CopilotEndpoints }
func (x *User) GetCreatedAt() DateTime                 { return x.CreatedAt }
func (x *User) GetDatabaseId() int                     { return x.DatabaseId }
func (x *User) GetEmail() string                       { return x.Email }
func (x *User) GetEnterprises() *EnterpriseConnection  { return x.Enterprises }
func (x *User) GetEstimatedNextSponsorsPayoutInCents() int {
	return x.EstimatedNextSponsorsPayoutInCents
}
func (x *User) GetFollowers() *FollowerConnection                    { return x.Followers }
func (x *User) GetFollowing() *FollowingConnection                   { return x.Following }
func (x *User) GetGist() *Gist                                       { return x.Gist }
func (x *User) GetGistComments() *GistCommentConnection              { return x.GistComments }
func (x *User) GetGists() *GistConnection                            { return x.Gists }
func (x *User) GetHasSponsorsListing() bool                          { return x.HasSponsorsListing }
func (x *User) GetHovercard() *Hovercard                             { return x.Hovercard }
func (x *User) GetId() ID                                            { return x.Id }
func (x *User) GetInteractionAbility() *RepositoryInteractionAbility { return x.InteractionAbility }
func (x *User) GetIsBountyHunter() bool                              { return x.IsBountyHunter }
func (x *User) GetIsCampusExpert() bool                              { return x.IsCampusExpert }
func (x *User) GetIsDeveloperProgramMember() bool                    { return x.IsDeveloperProgramMember }
func (x *User) GetIsEmployee() bool                                  { return x.IsEmployee }
func (x *User) GetIsFollowingViewer() bool                           { return x.IsFollowingViewer }
func (x *User) GetIsGitHubStar() bool                                { return x.IsGitHubStar }
func (x *User) GetIsHireable() bool                                  { return x.IsHireable }
func (x *User) GetIsSiteAdmin() bool                                 { return x.IsSiteAdmin }
func (x *User) GetIsSponsoredBy() bool                               { return x.IsSponsoredBy }
func (x *User) GetIsSponsoringViewer() bool                          { return x.IsSponsoringViewer }
func (x *User) GetIsViewer() bool                                    { return x.IsViewer }
func (x *User) GetIssueComments() *IssueCommentConnection            { return x.IssueComments }
func (x *User) GetIssues() *IssueConnection                          { return x.Issues }
func (x *User) GetItemShowcase() *ProfileItemShowcase                { return x.ItemShowcase }
func (x *User) GetLifetimeReceivedSponsorshipValues() *SponsorAndLifetimeValueConnection {
	return x.LifetimeReceivedSponsorshipValues
}
func (x *User) GetLists() *UserListConnection { return x.Lists }
func (x *User) GetLocation() string           { return x.Location }
func (x *User) GetLogin() string              { return x.Login }
func (x *User) GetMonthlyEstimatedSponsorsIncomeInCents() int {
	return x.MonthlyEstimatedSponsorsIncomeInCents
}
func (x *User) GetName() string                { return x.Name }
func (x *User) GetOrganization() *Organization { return x.Organization }
func (x *User) GetOrganizationVerifiedDomainEmails() []string {
	return x.OrganizationVerifiedDomainEmails
}
func (x *User) GetOrganizations() *OrganizationConnection { return x.Organizations }
func (x *User) GetPackages() *PackageConnection           { return x.Packages }
func (x *User) GetPinnableItems() *PinnableItemConnection { return x.PinnableItems }
func (x *User) GetPinnedItems() *PinnableItemConnection   { return x.PinnedItems }
func (x *User) GetPinnedItemsRemaining() int              { return x.PinnedItemsRemaining }
func (x *User) GetProject() *Project                      { return x.Project }
func (x *User) GetProjectV2() *ProjectV2                  { return x.ProjectV2 }
func (x *User) GetProjects() *ProjectConnection           { return x.Projects }
func (x *User) GetProjectsResourcePath() URI              { return x.ProjectsResourcePath }
func (x *User) GetProjectsUrl() URI                       { return x.ProjectsUrl }
func (x *User) GetProjectsV2() *ProjectV2Connection       { return x.ProjectsV2 }
func (x *User) GetPronouns() string                       { return x.Pronouns }
func (x *User) GetPublicKeys() *PublicKeyConnection       { return x.PublicKeys }
func (x *User) GetPullRequests() *PullRequestConnection   { return x.PullRequests }
func (x *User) GetRecentProjects() *ProjectV2Connection   { return x.RecentProjects }
func (x *User) GetRepositories() *RepositoryConnection    { return x.Repositories }
func (x *User) GetRepositoriesContributedTo() *RepositoryConnection {
	return x.RepositoriesContributedTo
}
func (x *User) GetRepository() *Repository { return x.Repository }
func (x *User) GetRepositoryDiscussionComments() *DiscussionCommentConnection {
	return x.RepositoryDiscussionComments
}
func (x *User) GetRepositoryDiscussions() *DiscussionConnection    { return x.RepositoryDiscussions }
func (x *User) GetResourcePath() URI                               { return x.ResourcePath }
func (x *User) GetSavedReplies() *SavedReplyConnection             { return x.SavedReplies }
func (x *User) GetSocialAccounts() *SocialAccountConnection        { return x.SocialAccounts }
func (x *User) GetSponsoring() *SponsorConnection                  { return x.Sponsoring }
func (x *User) GetSponsors() *SponsorConnection                    { return x.Sponsors }
func (x *User) GetSponsorsActivities() *SponsorsActivityConnection { return x.SponsorsActivities }
func (x *User) GetSponsorsListing() *SponsorsListing               { return x.SponsorsListing }
func (x *User) GetSponsorshipForViewerAsSponsor() *Sponsorship {
	return x.SponsorshipForViewerAsSponsor
}
func (x *User) GetSponsorshipForViewerAsSponsorable() *Sponsorship {
	return x.SponsorshipForViewerAsSponsorable
}
func (x *User) GetSponsorshipNewsletters() *SponsorshipNewsletterConnection {
	return x.SponsorshipNewsletters
}
func (x *User) GetSponsorshipsAsMaintainer() *SponsorshipConnection {
	return x.SponsorshipsAsMaintainer
}
func (x *User) GetSponsorshipsAsSponsor() *SponsorshipConnection     { return x.SponsorshipsAsSponsor }
func (x *User) GetStarredRepositories() *StarredRepositoryConnection { return x.StarredRepositories }
func (x *User) GetStatus() *UserStatus                               { return x.Status }
func (x *User) GetSuggestedListNames() []*UserListSuggestion         { return x.SuggestedListNames }
func (x *User) GetTopRepositories() *RepositoryConnection            { return x.TopRepositories }
func (x *User) GetTotalSponsorshipAmountAsSponsorInCents() int {
	return x.TotalSponsorshipAmountAsSponsorInCents
}
func (x *User) GetTwitterUsername() string          { return x.TwitterUsername }
func (x *User) GetUpdatedAt() DateTime              { return x.UpdatedAt }
func (x *User) GetUrl() URI                         { return x.Url }
func (x *User) GetUserViewType() UserViewType       { return x.UserViewType }
func (x *User) GetViewerCanChangePinnedItems() bool { return x.ViewerCanChangePinnedItems }
func (x *User) GetViewerCanCreateProjects() bool    { return x.ViewerCanCreateProjects }
func (x *User) GetViewerCanFollow() bool            { return x.ViewerCanFollow }
func (x *User) GetViewerCanSponsor() bool           { return x.ViewerCanSponsor }
func (x *User) GetViewerIsFollowing() bool          { return x.ViewerIsFollowing }
func (x *User) GetViewerIsSponsoring() bool         { return x.ViewerIsSponsoring }
func (x *User) GetWatching() *RepositoryConnection  { return x.Watching }
func (x *User) GetWebsiteUrl() URI                  { return x.WebsiteUrl }

// UserBlockDuration (ENUM): The possible durations that a user can be blocked for.
type UserBlockDuration string

// UserBlockDuration_ONE_DAY: The user was blocked for 1 day.
const UserBlockDuration_ONE_DAY UserBlockDuration = "ONE_DAY"

// UserBlockDuration_THREE_DAYS: The user was blocked for 3 days.
const UserBlockDuration_THREE_DAYS UserBlockDuration = "THREE_DAYS"

// UserBlockDuration_ONE_WEEK: The user was blocked for 7 days.
const UserBlockDuration_ONE_WEEK UserBlockDuration = "ONE_WEEK"

// UserBlockDuration_ONE_MONTH: The user was blocked for 30 days.
const UserBlockDuration_ONE_MONTH UserBlockDuration = "ONE_MONTH"

// UserBlockDuration_PERMANENT: The user was blocked permanently.
const UserBlockDuration_PERMANENT UserBlockDuration = "PERMANENT"

// UserBlockedEvent (OBJECT): Represents a 'user_blocked' event on a given user.
type UserBlockedEvent struct {
	// Actor: Identifies the actor who performed the event.
	Actor Actor `json:"actor,omitempty"`

	// BlockDuration: Number of days that the user was blocked for.
	BlockDuration UserBlockDuration `json:"blockDuration,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Id: The Node ID of the UserBlockedEvent object.
	Id ID `json:"id,omitempty"`

	// Subject: The user who was blocked.
	Subject *User `json:"subject,omitempty"`
}

func (x *UserBlockedEvent) GetActor() Actor                     { return x.Actor }
func (x *UserBlockedEvent) GetBlockDuration() UserBlockDuration { return x.BlockDuration }
func (x *UserBlockedEvent) GetCreatedAt() DateTime              { return x.CreatedAt }
func (x *UserBlockedEvent) GetId() ID                           { return x.Id }
func (x *UserBlockedEvent) GetSubject() *User                   { return x.Subject }

// UserConnection (OBJECT): A list of users.
type UserConnection struct {
	// Edges: A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*User `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *UserConnection) GetEdges() []*UserEdge  { return x.Edges }
func (x *UserConnection) GetNodes() []*User      { return x.Nodes }
func (x *UserConnection) GetPageInfo() *PageInfo { return x.PageInfo }
func (x *UserConnection) GetTotalCount() int     { return x.TotalCount }

// UserContentEdit (OBJECT): An edit on user content.
type UserContentEdit struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DeletedAt: Identifies the date and time when the object was deleted.
	DeletedAt DateTime `json:"deletedAt,omitempty"`

	// DeletedBy: The actor who deleted this content.
	DeletedBy Actor `json:"deletedBy,omitempty"`

	// Diff: A summary of the changes for this edit.
	Diff string `json:"diff,omitempty"`

	// EditedAt: When this content was edited.
	EditedAt DateTime `json:"editedAt,omitempty"`

	// Editor: The actor who edited this content.
	Editor Actor `json:"editor,omitempty"`

	// Id: The Node ID of the UserContentEdit object.
	Id ID `json:"id,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`
}

func (x *UserContentEdit) GetCreatedAt() DateTime { return x.CreatedAt }
func (x *UserContentEdit) GetDeletedAt() DateTime { return x.DeletedAt }
func (x *UserContentEdit) GetDeletedBy() Actor    { return x.DeletedBy }
func (x *UserContentEdit) GetDiff() string        { return x.Diff }
func (x *UserContentEdit) GetEditedAt() DateTime  { return x.EditedAt }
func (x *UserContentEdit) GetEditor() Actor       { return x.Editor }
func (x *UserContentEdit) GetId() ID              { return x.Id }
func (x *UserContentEdit) GetUpdatedAt() DateTime { return x.UpdatedAt }

// UserContentEditConnection (OBJECT): A list of edits to content.
type UserContentEditConnection struct {
	// Edges: A list of edges.
	Edges []*UserContentEditEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*UserContentEdit `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *UserContentEditConnection) GetEdges() []*UserContentEditEdge { return x.Edges }
func (x *UserContentEditConnection) GetNodes() []*UserContentEdit     { return x.Nodes }
func (x *UserContentEditConnection) GetPageInfo() *PageInfo           { return x.PageInfo }
func (x *UserContentEditConnection) GetTotalCount() int               { return x.TotalCount }

// UserContentEditEdge (OBJECT): An edge in a connection.
type UserContentEditEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *UserContentEdit `json:"node,omitempty"`
}

func (x *UserContentEditEdge) GetCursor() string         { return x.Cursor }
func (x *UserContentEditEdge) GetNode() *UserContentEdit { return x.Node }

// UserEdge (OBJECT): Represents a user.
type UserEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *User `json:"node,omitempty"`
}

func (x *UserEdge) GetCursor() string { return x.Cursor }
func (x *UserEdge) GetNode() *User    { return x.Node }

// UserEmailMetadata (OBJECT): Email attributes from External Identity.
type UserEmailMetadata struct {
	// Primary: Boolean to identify primary emails.
	Primary bool `json:"primary,omitempty"`

	// Type: Type of email.
	Type string `json:"type,omitempty"`

	// Value: Email id.
	Value string `json:"value,omitempty"`
}

func (x *UserEmailMetadata) GetPrimary() bool { return x.Primary }
func (x *UserEmailMetadata) GetType() string  { return x.Type }
func (x *UserEmailMetadata) GetValue() string { return x.Value }

// UserList (OBJECT): A user-curated list of repositories.
type UserList struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Description: The description of this list.
	Description string `json:"description,omitempty"`

	// Id: The Node ID of the UserList object.
	Id ID `json:"id,omitempty"`

	// IsPrivate: Whether or not this list is private.
	IsPrivate bool `json:"isPrivate,omitempty"`

	// Items: The items associated with this list.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	Items *UserListItemsConnection `json:"items,omitempty"`

	// LastAddedAt: The date and time at which this list was created or last had items added to it.
	LastAddedAt DateTime `json:"lastAddedAt,omitempty"`

	// Name: The name of this list.
	Name string `json:"name,omitempty"`

	// Slug: The slug of this list.
	Slug string `json:"slug,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// User: The user to which this list belongs.
	User *User `json:"user,omitempty"`
}

func (x *UserList) GetCreatedAt() DateTime             { return x.CreatedAt }
func (x *UserList) GetDescription() string             { return x.Description }
func (x *UserList) GetId() ID                          { return x.Id }
func (x *UserList) GetIsPrivate() bool                 { return x.IsPrivate }
func (x *UserList) GetItems() *UserListItemsConnection { return x.Items }
func (x *UserList) GetLastAddedAt() DateTime           { return x.LastAddedAt }
func (x *UserList) GetName() string                    { return x.Name }
func (x *UserList) GetSlug() string                    { return x.Slug }
func (x *UserList) GetUpdatedAt() DateTime             { return x.UpdatedAt }
func (x *UserList) GetUser() *User                     { return x.User }

// UserListConnection (OBJECT): The connection type for UserList.
type UserListConnection struct {
	// Edges: A list of edges.
	Edges []*UserListEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*UserList `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *UserListConnection) GetEdges() []*UserListEdge { return x.Edges }
func (x *UserListConnection) GetNodes() []*UserList     { return x.Nodes }
func (x *UserListConnection) GetPageInfo() *PageInfo    { return x.PageInfo }
func (x *UserListConnection) GetTotalCount() int        { return x.TotalCount }

// UserListEdge (OBJECT): An edge in a connection.
type UserListEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *UserList `json:"node,omitempty"`
}

func (x *UserListEdge) GetCursor() string  { return x.Cursor }
func (x *UserListEdge) GetNode() *UserList { return x.Node }

// UserListItems (UNION): Types that can be added to a user list.
// UserListItems_Interface: Types that can be added to a user list.
//
// Possible types:
//
//   - *Repository
type UserListItems_Interface interface {
	isUserListItems()
}

func (*Repository) isUserListItems() {}

type UserListItems struct {
	Interface UserListItems_Interface
}

func (x *UserListItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *UserListItems) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for UserListItems", info.Typename)
	case "Repository":
		x.Interface = new(Repository)
	}
	return json.Unmarshal(js, x.Interface)
}

// UserListItemsConnection (OBJECT): The connection type for UserListItems.
type UserListItemsConnection struct {
	// Edges: A list of edges.
	Edges []*UserListItemsEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []UserListItems `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *UserListItemsConnection) GetEdges() []*UserListItemsEdge { return x.Edges }
func (x *UserListItemsConnection) GetNodes() []UserListItems      { return x.Nodes }
func (x *UserListItemsConnection) GetPageInfo() *PageInfo         { return x.PageInfo }
func (x *UserListItemsConnection) GetTotalCount() int             { return x.TotalCount }

// UserListItemsEdge (OBJECT): An edge in a connection.
type UserListItemsEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node UserListItems `json:"node,omitempty"`
}

func (x *UserListItemsEdge) GetCursor() string      { return x.Cursor }
func (x *UserListItemsEdge) GetNode() UserListItems { return x.Node }

// UserListSuggestion (OBJECT): Represents a suggested user list.
type UserListSuggestion struct {
	// Id: The ID of the suggested user list.
	Id ID `json:"id,omitempty"`

	// Name: The name of the suggested user list.
	Name string `json:"name,omitempty"`
}

func (x *UserListSuggestion) GetId() ID       { return x.Id }
func (x *UserListSuggestion) GetName() string { return x.Name }

// UserNamespaceRepository (OBJECT): A repository owned by an Enterprise Managed user.
type UserNamespaceRepository struct {
	// Id: The Node ID of the UserNamespaceRepository object.
	Id ID `json:"id,omitempty"`

	// Name: The name of the repository.
	Name string `json:"name,omitempty"`

	// NameWithOwner: The repository's name with owner.
	NameWithOwner string `json:"nameWithOwner,omitempty"`

	// Owner: The user owner of the repository.
	Owner RepositoryOwner `json:"owner,omitempty"`

	// Repository: The repository owned by an enterprise managed user.
	Repository RepositoryInfo `json:"repository,omitempty"`
}

func (x *UserNamespaceRepository) GetId() ID                     { return x.Id }
func (x *UserNamespaceRepository) GetName() string               { return x.Name }
func (x *UserNamespaceRepository) GetNameWithOwner() string      { return x.NameWithOwner }
func (x *UserNamespaceRepository) GetOwner() RepositoryOwner     { return x.Owner }
func (x *UserNamespaceRepository) GetRepository() RepositoryInfo { return x.Repository }

// UserNamespaceRepositoryConnection (OBJECT): A list of repositories owned by users in an enterprise with Enterprise Managed Users.
type UserNamespaceRepositoryConnection struct {
	// Edges: A list of edges.
	Edges []*UserNamespaceRepositoryEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*UserNamespaceRepository `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *UserNamespaceRepositoryConnection) GetEdges() []*UserNamespaceRepositoryEdge { return x.Edges }
func (x *UserNamespaceRepositoryConnection) GetNodes() []*UserNamespaceRepository     { return x.Nodes }
func (x *UserNamespaceRepositoryConnection) GetPageInfo() *PageInfo                   { return x.PageInfo }
func (x *UserNamespaceRepositoryConnection) GetTotalCount() int                       { return x.TotalCount }

// UserNamespaceRepositoryEdge (OBJECT): An edge in a connection.
type UserNamespaceRepositoryEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *UserNamespaceRepository `json:"node,omitempty"`
}

func (x *UserNamespaceRepositoryEdge) GetCursor() string                 { return x.Cursor }
func (x *UserNamespaceRepositoryEdge) GetNode() *UserNamespaceRepository { return x.Node }

// UserStatus (OBJECT): The user's description of what they're currently doing.
type UserStatus struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// Emoji: An emoji summarizing the user's status.
	Emoji string `json:"emoji,omitempty"`

	// EmojiHTML: The status emoji as HTML.
	EmojiHTML template.HTML `json:"emojiHTML,omitempty"`

	// ExpiresAt: If set, the status will not be shown after this date.
	ExpiresAt DateTime `json:"expiresAt,omitempty"`

	// Id: The Node ID of the UserStatus object.
	Id ID `json:"id,omitempty"`

	// IndicatesLimitedAvailability: Whether this status indicates the user is not fully available on GitHub.
	IndicatesLimitedAvailability bool `json:"indicatesLimitedAvailability,omitempty"`

	// Message: A brief message describing what the user is doing.
	Message string `json:"message,omitempty"`

	// Organization: The organization whose members can see this status. If null, this status is publicly visible.
	Organization *Organization `json:"organization,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// User: The user who has this status.
	User *User `json:"user,omitempty"`
}

func (x *UserStatus) GetCreatedAt() DateTime                { return x.CreatedAt }
func (x *UserStatus) GetEmoji() string                      { return x.Emoji }
func (x *UserStatus) GetEmojiHTML() template.HTML           { return x.EmojiHTML }
func (x *UserStatus) GetExpiresAt() DateTime                { return x.ExpiresAt }
func (x *UserStatus) GetId() ID                             { return x.Id }
func (x *UserStatus) GetIndicatesLimitedAvailability() bool { return x.IndicatesLimitedAvailability }
func (x *UserStatus) GetMessage() string                    { return x.Message }
func (x *UserStatus) GetOrganization() *Organization        { return x.Organization }
func (x *UserStatus) GetUpdatedAt() DateTime                { return x.UpdatedAt }
func (x *UserStatus) GetUser() *User                        { return x.User }

// UserStatusConnection (OBJECT): The connection type for UserStatus.
type UserStatusConnection struct {
	// Edges: A list of edges.
	Edges []*UserStatusEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*UserStatus `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *UserStatusConnection) GetEdges() []*UserStatusEdge { return x.Edges }
func (x *UserStatusConnection) GetNodes() []*UserStatus     { return x.Nodes }
func (x *UserStatusConnection) GetPageInfo() *PageInfo      { return x.PageInfo }
func (x *UserStatusConnection) GetTotalCount() int          { return x.TotalCount }

// UserStatusEdge (OBJECT): An edge in a connection.
type UserStatusEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *UserStatus `json:"node,omitempty"`
}

func (x *UserStatusEdge) GetCursor() string    { return x.Cursor }
func (x *UserStatusEdge) GetNode() *UserStatus { return x.Node }

// UserStatusOrder (INPUT_OBJECT): Ordering options for user status connections.
type UserStatusOrder struct {
	// Field: The field to order user statuses by.
	//
	// GraphQL type: UserStatusOrderField!
	Field UserStatusOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// UserStatusOrderField (ENUM): Properties by which user status connections can be ordered.
type UserStatusOrderField string

// UserStatusOrderField_UPDATED_AT: Order user statuses by when they were updated.
const UserStatusOrderField_UPDATED_AT UserStatusOrderField = "UPDATED_AT"

// UserViewType (ENUM): Whether a user being viewed contains public or private information.
type UserViewType string

// UserViewType_PUBLIC: A user that is publicly visible.
const UserViewType_PUBLIC UserViewType = "PUBLIC"

// UserViewType_PRIVATE: A user containing information only visible to the authenticated user.
const UserViewType_PRIVATE UserViewType = "PRIVATE"

// VerifiableDomain (OBJECT): A domain that can be verified or approved for an organization or an enterprise.
type VerifiableDomain struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DnsHostName: The DNS host name that should be used for verification.
	DnsHostName URI `json:"dnsHostName,omitempty"`

	// Domain: The unicode encoded domain.
	Domain URI `json:"domain,omitempty"`

	// HasFoundHostName: Whether a TXT record for verification with the expected host name was found.
	HasFoundHostName bool `json:"hasFoundHostName,omitempty"`

	// HasFoundVerificationToken: Whether a TXT record for verification with the expected verification token was found.
	HasFoundVerificationToken bool `json:"hasFoundVerificationToken,omitempty"`

	// Id: The Node ID of the VerifiableDomain object.
	Id ID `json:"id,omitempty"`

	// IsApproved: Whether or not the domain is approved.
	IsApproved bool `json:"isApproved,omitempty"`

	// IsRequiredForPolicyEnforcement: Whether this domain is required to exist for an organization or enterprise policy to be enforced.
	IsRequiredForPolicyEnforcement bool `json:"isRequiredForPolicyEnforcement,omitempty"`

	// IsVerified: Whether or not the domain is verified.
	IsVerified bool `json:"isVerified,omitempty"`

	// Owner: The owner of the domain.
	Owner VerifiableDomainOwner `json:"owner,omitempty"`

	// PunycodeEncodedDomain: The punycode encoded domain.
	PunycodeEncodedDomain URI `json:"punycodeEncodedDomain,omitempty"`

	// TokenExpirationTime: The time that the current verification token will expire.
	TokenExpirationTime DateTime `json:"tokenExpirationTime,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// VerificationToken: The current verification token for the domain.
	VerificationToken string `json:"verificationToken,omitempty"`
}

func (x *VerifiableDomain) GetCreatedAt() DateTime             { return x.CreatedAt }
func (x *VerifiableDomain) GetDatabaseId() int                 { return x.DatabaseId }
func (x *VerifiableDomain) GetDnsHostName() URI                { return x.DnsHostName }
func (x *VerifiableDomain) GetDomain() URI                     { return x.Domain }
func (x *VerifiableDomain) GetHasFoundHostName() bool          { return x.HasFoundHostName }
func (x *VerifiableDomain) GetHasFoundVerificationToken() bool { return x.HasFoundVerificationToken }
func (x *VerifiableDomain) GetId() ID                          { return x.Id }
func (x *VerifiableDomain) GetIsApproved() bool                { return x.IsApproved }
func (x *VerifiableDomain) GetIsRequiredForPolicyEnforcement() bool {
	return x.IsRequiredForPolicyEnforcement
}
func (x *VerifiableDomain) GetIsVerified() bool              { return x.IsVerified }
func (x *VerifiableDomain) GetOwner() VerifiableDomainOwner  { return x.Owner }
func (x *VerifiableDomain) GetPunycodeEncodedDomain() URI    { return x.PunycodeEncodedDomain }
func (x *VerifiableDomain) GetTokenExpirationTime() DateTime { return x.TokenExpirationTime }
func (x *VerifiableDomain) GetUpdatedAt() DateTime           { return x.UpdatedAt }
func (x *VerifiableDomain) GetVerificationToken() string     { return x.VerificationToken }

// VerifiableDomainConnection (OBJECT): The connection type for VerifiableDomain.
type VerifiableDomainConnection struct {
	// Edges: A list of edges.
	Edges []*VerifiableDomainEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*VerifiableDomain `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *VerifiableDomainConnection) GetEdges() []*VerifiableDomainEdge { return x.Edges }
func (x *VerifiableDomainConnection) GetNodes() []*VerifiableDomain     { return x.Nodes }
func (x *VerifiableDomainConnection) GetPageInfo() *PageInfo            { return x.PageInfo }
func (x *VerifiableDomainConnection) GetTotalCount() int                { return x.TotalCount }

// VerifiableDomainEdge (OBJECT): An edge in a connection.
type VerifiableDomainEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *VerifiableDomain `json:"node,omitempty"`
}

func (x *VerifiableDomainEdge) GetCursor() string          { return x.Cursor }
func (x *VerifiableDomainEdge) GetNode() *VerifiableDomain { return x.Node }

// VerifiableDomainOrder (INPUT_OBJECT): Ordering options for verifiable domain connections.
type VerifiableDomainOrder struct {
	// Field: The field to order verifiable domains by.
	//
	// GraphQL type: VerifiableDomainOrderField!
	Field VerifiableDomainOrderField `json:"field,omitempty"`

	// Direction: The ordering direction.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// VerifiableDomainOrderField (ENUM): Properties by which verifiable domain connections can be ordered.
type VerifiableDomainOrderField string

// VerifiableDomainOrderField_DOMAIN: Order verifiable domains by the domain name.
const VerifiableDomainOrderField_DOMAIN VerifiableDomainOrderField = "DOMAIN"

// VerifiableDomainOrderField_CREATED_AT: Order verifiable domains by their creation date.
const VerifiableDomainOrderField_CREATED_AT VerifiableDomainOrderField = "CREATED_AT"

// VerifiableDomainOwner (UNION): Types that can own a verifiable domain.
// VerifiableDomainOwner_Interface: Types that can own a verifiable domain.
//
// Possible types:
//
//   - *Enterprise
//   - *Organization
type VerifiableDomainOwner_Interface interface {
	isVerifiableDomainOwner()
}

func (*Enterprise) isVerifiableDomainOwner()   {}
func (*Organization) isVerifiableDomainOwner() {}

type VerifiableDomainOwner struct {
	Interface VerifiableDomainOwner_Interface
}

func (x *VerifiableDomainOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *VerifiableDomainOwner) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for VerifiableDomainOwner", info.Typename)
	case "Enterprise":
		x.Interface = new(Enterprise)
	case "Organization":
		x.Interface = new(Organization)
	}
	return json.Unmarshal(js, x.Interface)
}

// VerifyVerifiableDomainInput (INPUT_OBJECT): Autogenerated input type of VerifyVerifiableDomain.
type VerifyVerifiableDomainInput struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	//
	// GraphQL type: String
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Id: The ID of the verifiable domain to verify.
	//
	// GraphQL type: ID!
	Id ID `json:"id,omitempty"`
}

// VerifyVerifiableDomainPayload (OBJECT): Autogenerated return type of VerifyVerifiableDomain.
type VerifyVerifiableDomainPayload struct {
	// ClientMutationId: A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`

	// Domain: The verifiable domain that was verified.
	Domain *VerifiableDomain `json:"domain,omitempty"`
}

func (x *VerifyVerifiableDomainPayload) GetClientMutationId() string  { return x.ClientMutationId }
func (x *VerifyVerifiableDomainPayload) GetDomain() *VerifiableDomain { return x.Domain }

// ViewerHovercardContext (OBJECT): A hovercard context with a message describing how the viewer is related.
type ViewerHovercardContext struct {
	// Message: A string describing this context.
	Message string `json:"message,omitempty"`

	// Octicon: An octicon to accompany this context.
	Octicon string `json:"octicon,omitempty"`

	// Viewer: Identifies the user who is related to this context.
	Viewer *User `json:"viewer,omitempty"`
}

func (x *ViewerHovercardContext) GetMessage() string { return x.Message }
func (x *ViewerHovercardContext) GetOcticon() string { return x.Octicon }
func (x *ViewerHovercardContext) GetViewer() *User   { return x.Viewer }

// Votable (INTERFACE): A subject that may be upvoted.
// Votable_Interface: A subject that may be upvoted.
//
// Possible types:
//
//   - *Discussion
//   - *DiscussionComment
type Votable_Interface interface {
	isVotable()
	GetUpvoteCount() int
	GetViewerCanUpvote() bool
	GetViewerHasUpvoted() bool
}

func (*Discussion) isVotable()        {}
func (*DiscussionComment) isVotable() {}

type Votable struct {
	Interface Votable_Interface
}

func (x *Votable) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.Interface)
}

func (x *Votable) UnmarshalJSON(js []byte) error {
	var info struct {
		Typename string `json:"__Typename"`
	}
	if err := json.Unmarshal(js, &info); err != nil {
		return err
	}
	switch info.Typename {
	default:
		if isNull(js) {
			return nil
		}
		return fmt.Errorf("unexpected type %q for Votable", info.Typename)
	case "Discussion":
		x.Interface = new(Discussion)
	case "DiscussionComment":
		x.Interface = new(DiscussionComment)
	}
	return json.Unmarshal(js, x.Interface)
}

// Workflow (OBJECT): A workflow contains meta information about an Actions workflow file.
type Workflow struct {
	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// Id: The Node ID of the Workflow object.
	Id ID `json:"id,omitempty"`

	// Name: The name of the workflow.
	Name string `json:"name,omitempty"`

	// ResourcePath: The HTTP path for this workflow.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Runs: The runs of the workflow.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	//   - orderBy WorkflowRunOrder
	Runs *WorkflowRunConnection `json:"runs,omitempty"`

	// State: The state of the workflow.
	State WorkflowState `json:"state,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this workflow.
	Url URI `json:"url,omitempty"`
}

func (x *Workflow) GetCreatedAt() DateTime          { return x.CreatedAt }
func (x *Workflow) GetDatabaseId() int              { return x.DatabaseId }
func (x *Workflow) GetId() ID                       { return x.Id }
func (x *Workflow) GetName() string                 { return x.Name }
func (x *Workflow) GetResourcePath() URI            { return x.ResourcePath }
func (x *Workflow) GetRuns() *WorkflowRunConnection { return x.Runs }
func (x *Workflow) GetState() WorkflowState         { return x.State }
func (x *Workflow) GetUpdatedAt() DateTime          { return x.UpdatedAt }
func (x *Workflow) GetUrl() URI                     { return x.Url }

// WorkflowFileReference (OBJECT): A workflow that must run for this rule to pass.
type WorkflowFileReference struct {
	// Path: The path to the workflow file.
	Path string `json:"path,omitempty"`

	// Ref: The ref (branch or tag) of the workflow file to use.
	Ref string `json:"ref,omitempty"`

	// RepositoryId: The ID of the repository where the workflow is defined.
	RepositoryId int `json:"repositoryId,omitempty"`

	// Sha: The commit SHA of the workflow file to use.
	Sha string `json:"sha,omitempty"`
}

func (x *WorkflowFileReference) GetPath() string      { return x.Path }
func (x *WorkflowFileReference) GetRef() string       { return x.Ref }
func (x *WorkflowFileReference) GetRepositoryId() int { return x.RepositoryId }
func (x *WorkflowFileReference) GetSha() string       { return x.Sha }

// WorkflowFileReferenceInput (INPUT_OBJECT): A workflow that must run for this rule to pass.
type WorkflowFileReferenceInput struct {
	// Path: The path to the workflow file.
	//
	// GraphQL type: String!
	Path string `json:"path,omitempty"`

	// Ref: The ref (branch or tag) of the workflow file to use.
	//
	// GraphQL type: String
	Ref string `json:"ref,omitempty"`

	// RepositoryId: The ID of the repository where the workflow is defined.
	//
	// GraphQL type: Int!
	RepositoryId int `json:"repositoryId,omitempty"`

	// Sha: The commit SHA of the workflow file to use.
	//
	// GraphQL type: String
	Sha string `json:"sha,omitempty"`
}

// WorkflowRun (OBJECT): A workflow run.
type WorkflowRun struct {
	// CheckSuite: The check suite this workflow run belongs to.
	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`

	// CreatedAt: Identifies the date and time when the object was created.
	CreatedAt DateTime `json:"createdAt,omitempty"`

	// DatabaseId: Identifies the primary key from the database.
	DatabaseId int `json:"databaseId,omitempty"`

	// DeploymentReviews: The log of deployment reviews.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	DeploymentReviews *DeploymentReviewConnection `json:"deploymentReviews,omitempty"`

	// Event: The event that triggered the workflow run.
	Event string `json:"event,omitempty"`

	// File: The workflow file.
	File *WorkflowRunFile `json:"file,omitempty"`

	// Id: The Node ID of the WorkflowRun object.
	Id ID `json:"id,omitempty"`

	// PendingDeploymentRequests: The pending deployment requests of all check runs in this workflow run.
	//
	// Query arguments:
	//   - after String
	//   - before String
	//   - first Int
	//   - last Int
	PendingDeploymentRequests *DeploymentRequestConnection `json:"pendingDeploymentRequests,omitempty"`

	// ResourcePath: The HTTP path for this workflow run.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// RunNumber: A number that uniquely identifies this workflow run in its parent workflow.
	RunNumber int `json:"runNumber,omitempty"`

	// UpdatedAt: Identifies the date and time when the object was last updated.
	UpdatedAt DateTime `json:"updatedAt,omitempty"`

	// Url: The HTTP URL for this workflow run.
	Url URI `json:"url,omitempty"`

	// Workflow: The workflow executed in this workflow run.
	Workflow *Workflow `json:"workflow,omitempty"`
}

func (x *WorkflowRun) GetCheckSuite() *CheckSuite                        { return x.CheckSuite }
func (x *WorkflowRun) GetCreatedAt() DateTime                            { return x.CreatedAt }
func (x *WorkflowRun) GetDatabaseId() int                                { return x.DatabaseId }
func (x *WorkflowRun) GetDeploymentReviews() *DeploymentReviewConnection { return x.DeploymentReviews }
func (x *WorkflowRun) GetEvent() string                                  { return x.Event }
func (x *WorkflowRun) GetFile() *WorkflowRunFile                         { return x.File }
func (x *WorkflowRun) GetId() ID                                         { return x.Id }
func (x *WorkflowRun) GetPendingDeploymentRequests() *DeploymentRequestConnection {
	return x.PendingDeploymentRequests
}
func (x *WorkflowRun) GetResourcePath() URI   { return x.ResourcePath }
func (x *WorkflowRun) GetRunNumber() int      { return x.RunNumber }
func (x *WorkflowRun) GetUpdatedAt() DateTime { return x.UpdatedAt }
func (x *WorkflowRun) GetUrl() URI            { return x.Url }
func (x *WorkflowRun) GetWorkflow() *Workflow { return x.Workflow }

// WorkflowRunConnection (OBJECT): The connection type for WorkflowRun.
type WorkflowRunConnection struct {
	// Edges: A list of edges.
	Edges []*WorkflowRunEdge `json:"edges,omitempty"`

	// Nodes: A list of nodes.
	Nodes []*WorkflowRun `json:"nodes,omitempty"`

	// PageInfo: Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo,omitempty"`

	// TotalCount: Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount,omitempty"`
}

func (x *WorkflowRunConnection) GetEdges() []*WorkflowRunEdge { return x.Edges }
func (x *WorkflowRunConnection) GetNodes() []*WorkflowRun     { return x.Nodes }
func (x *WorkflowRunConnection) GetPageInfo() *PageInfo       { return x.PageInfo }
func (x *WorkflowRunConnection) GetTotalCount() int           { return x.TotalCount }

// WorkflowRunEdge (OBJECT): An edge in a connection.
type WorkflowRunEdge struct {
	// Cursor: A cursor for use in pagination.
	Cursor string `json:"cursor,omitempty"`

	// Node: The item at the end of the edge.
	Node *WorkflowRun `json:"node,omitempty"`
}

func (x *WorkflowRunEdge) GetCursor() string     { return x.Cursor }
func (x *WorkflowRunEdge) GetNode() *WorkflowRun { return x.Node }

// WorkflowRunFile (OBJECT): An executed workflow file for a workflow run.
type WorkflowRunFile struct {
	// Id: The Node ID of the WorkflowRunFile object.
	Id ID `json:"id,omitempty"`

	// Path: The path of the workflow file relative to its repository.
	Path string `json:"path,omitempty"`

	// RepositoryFileUrl: The direct link to the file in the repository which stores the workflow file.
	RepositoryFileUrl URI `json:"repositoryFileUrl,omitempty"`

	// RepositoryName: The repository name and owner which stores the workflow file.
	RepositoryName URI `json:"repositoryName,omitempty"`

	// ResourcePath: The HTTP path for this workflow run file.
	ResourcePath URI `json:"resourcePath,omitempty"`

	// Run: The parent workflow run execution for this file.
	Run *WorkflowRun `json:"run,omitempty"`

	// Url: The HTTP URL for this workflow run file.
	Url URI `json:"url,omitempty"`

	// ViewerCanPushRepository: If the viewer has permissions to push to the repository which stores the workflow.
	ViewerCanPushRepository bool `json:"viewerCanPushRepository,omitempty"`

	// ViewerCanReadRepository: If the viewer has permissions to read the repository which stores the workflow.
	ViewerCanReadRepository bool `json:"viewerCanReadRepository,omitempty"`
}

func (x *WorkflowRunFile) GetId() ID                        { return x.Id }
func (x *WorkflowRunFile) GetPath() string                  { return x.Path }
func (x *WorkflowRunFile) GetRepositoryFileUrl() URI        { return x.RepositoryFileUrl }
func (x *WorkflowRunFile) GetRepositoryName() URI           { return x.RepositoryName }
func (x *WorkflowRunFile) GetResourcePath() URI             { return x.ResourcePath }
func (x *WorkflowRunFile) GetRun() *WorkflowRun             { return x.Run }
func (x *WorkflowRunFile) GetUrl() URI                      { return x.Url }
func (x *WorkflowRunFile) GetViewerCanPushRepository() bool { return x.ViewerCanPushRepository }
func (x *WorkflowRunFile) GetViewerCanReadRepository() bool { return x.ViewerCanReadRepository }

// WorkflowRunOrder (INPUT_OBJECT): Ways in which lists of workflow runs can be ordered upon return.
type WorkflowRunOrder struct {
	// Field: The field by which to order workflows.
	//
	// GraphQL type: WorkflowRunOrderField!
	Field WorkflowRunOrderField `json:"field,omitempty"`

	// Direction: The direction in which to order workflow runs by the specified field.
	//
	// GraphQL type: OrderDirection!
	Direction OrderDirection `json:"direction,omitempty"`
}

// WorkflowRunOrderField (ENUM): Properties by which workflow run connections can be ordered.
type WorkflowRunOrderField string

// WorkflowRunOrderField_CREATED_AT: Order workflow runs by most recently created.
const WorkflowRunOrderField_CREATED_AT WorkflowRunOrderField = "CREATED_AT"

// WorkflowState (ENUM): The possible states for a workflow.
type WorkflowState string

// WorkflowState_ACTIVE: The workflow is active.
const WorkflowState_ACTIVE WorkflowState = "ACTIVE"

// WorkflowState_DELETED: The workflow was deleted from the git repository.
const WorkflowState_DELETED WorkflowState = "DELETED"

// WorkflowState_DISABLED_FORK: The workflow was disabled by default on a fork.
const WorkflowState_DISABLED_FORK WorkflowState = "DISABLED_FORK"

// WorkflowState_DISABLED_INACTIVITY: The workflow was disabled for inactivity in the repository.
const WorkflowState_DISABLED_INACTIVITY WorkflowState = "DISABLED_INACTIVITY"

// WorkflowState_DISABLED_MANUALLY: The workflow was disabled manually.
const WorkflowState_DISABLED_MANUALLY WorkflowState = "DISABLED_MANUALLY"

// WorkflowsParameters (OBJECT): Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
type WorkflowsParameters struct {
	// DoNotEnforceOnCreate: Allow repositories and branches to be created if a check would otherwise prohibit it.
	DoNotEnforceOnCreate bool `json:"doNotEnforceOnCreate,omitempty"`

	// Workflows: Workflows that must pass for this rule to pass.
	Workflows []*WorkflowFileReference `json:"workflows,omitempty"`
}

func (x *WorkflowsParameters) GetDoNotEnforceOnCreate() bool          { return x.DoNotEnforceOnCreate }
func (x *WorkflowsParameters) GetWorkflows() []*WorkflowFileReference { return x.Workflows }

// WorkflowsParametersInput (INPUT_OBJECT): Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
type WorkflowsParametersInput struct {
	// DoNotEnforceOnCreate: Allow repositories and branches to be created if a check would otherwise prohibit it.
	//
	// GraphQL type: Boolean
	DoNotEnforceOnCreate bool `json:"doNotEnforceOnCreate,omitempty"`

	// Workflows: Workflows that must pass for this rule to pass.
	//
	// GraphQL type: [WorkflowFileReferenceInput!]!
	Workflows []*WorkflowFileReferenceInput `json:"workflows,omitempty"`
}

// X509Certificate (SCALAR): A valid x509 certificate string.
type X509Certificate string

// __Directive (OBJECT): A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
//
// In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
type __Directive struct {
	// Args: undocumented.
	//
	// Query arguments:
	//   - includeDeprecated Boolean
	Args []*__InputValue `json:"args,omitempty"`

	// Description: undocumented.
	Description string `json:"description,omitempty"`

	// IsRepeatable: undocumented.
	IsRepeatable bool `json:"isRepeatable,omitempty"`

	// Locations: undocumented.
	Locations []__DirectiveLocation `json:"locations,omitempty"`

	// Name: undocumented.
	Name string `json:"name,omitempty"`

	// OnField: undocumented.
	//
	// Deprecated: undocumented.
	OnField bool `json:"onField,omitempty"`

	// OnFragment: undocumented.
	//
	// Deprecated: undocumented.
	OnFragment bool `json:"onFragment,omitempty"`

	// OnOperation: undocumented.
	//
	// Deprecated: undocumented.
	OnOperation bool `json:"onOperation,omitempty"`
}

func (x *__Directive) GetArgs() []*__InputValue            { return x.Args }
func (x *__Directive) GetDescription() string              { return x.Description }
func (x *__Directive) GetIsRepeatable() bool               { return x.IsRepeatable }
func (x *__Directive) GetLocations() []__DirectiveLocation { return x.Locations }
func (x *__Directive) GetName() string                     { return x.Name }
func (x *__Directive) GetOnField() bool                    { return x.OnField }
func (x *__Directive) GetOnFragment() bool                 { return x.OnFragment }
func (x *__Directive) GetOnOperation() bool                { return x.OnOperation }

// __DirectiveLocation (ENUM): A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
type __DirectiveLocation string

// __DirectiveLocation_QUERY: Location adjacent to a query operation.
const __DirectiveLocation_QUERY __DirectiveLocation = "QUERY"

// __DirectiveLocation_MUTATION: Location adjacent to a mutation operation.
const __DirectiveLocation_MUTATION __DirectiveLocation = "MUTATION"

// __DirectiveLocation_SUBSCRIPTION: Location adjacent to a subscription operation.
const __DirectiveLocation_SUBSCRIPTION __DirectiveLocation = "SUBSCRIPTION"

// __DirectiveLocation_FIELD: Location adjacent to a field.
const __DirectiveLocation_FIELD __DirectiveLocation = "FIELD"

// __DirectiveLocation_FRAGMENT_DEFINITION: Location adjacent to a fragment definition.
const __DirectiveLocation_FRAGMENT_DEFINITION __DirectiveLocation = "FRAGMENT_DEFINITION"

// __DirectiveLocation_FRAGMENT_SPREAD: Location adjacent to a fragment spread.
const __DirectiveLocation_FRAGMENT_SPREAD __DirectiveLocation = "FRAGMENT_SPREAD"

// __DirectiveLocation_INLINE_FRAGMENT: Location adjacent to an inline fragment.
const __DirectiveLocation_INLINE_FRAGMENT __DirectiveLocation = "INLINE_FRAGMENT"

// __DirectiveLocation_SCHEMA: Location adjacent to a schema definition.
const __DirectiveLocation_SCHEMA __DirectiveLocation = "SCHEMA"

// __DirectiveLocation_SCALAR: Location adjacent to a scalar definition.
const __DirectiveLocation_SCALAR __DirectiveLocation = "SCALAR"

// __DirectiveLocation_OBJECT: Location adjacent to an object type definition.
const __DirectiveLocation_OBJECT __DirectiveLocation = "OBJECT"

// __DirectiveLocation_FIELD_DEFINITION: Location adjacent to a field definition.
const __DirectiveLocation_FIELD_DEFINITION __DirectiveLocation = "FIELD_DEFINITION"

// __DirectiveLocation_ARGUMENT_DEFINITION: Location adjacent to an argument definition.
const __DirectiveLocation_ARGUMENT_DEFINITION __DirectiveLocation = "ARGUMENT_DEFINITION"

// __DirectiveLocation_INTERFACE: Location adjacent to an interface definition.
const __DirectiveLocation_INTERFACE __DirectiveLocation = "INTERFACE"

// __DirectiveLocation_UNION: Location adjacent to a union definition.
const __DirectiveLocation_UNION __DirectiveLocation = "UNION"

// __DirectiveLocation_ENUM: Location adjacent to an enum definition.
const __DirectiveLocation_ENUM __DirectiveLocation = "ENUM"

// __DirectiveLocation_ENUM_VALUE: Location adjacent to an enum value definition.
const __DirectiveLocation_ENUM_VALUE __DirectiveLocation = "ENUM_VALUE"

// __DirectiveLocation_INPUT_OBJECT: Location adjacent to an input object type definition.
const __DirectiveLocation_INPUT_OBJECT __DirectiveLocation = "INPUT_OBJECT"

// __DirectiveLocation_INPUT_FIELD_DEFINITION: Location adjacent to an input object field definition.
const __DirectiveLocation_INPUT_FIELD_DEFINITION __DirectiveLocation = "INPUT_FIELD_DEFINITION"

// __DirectiveLocation_VARIABLE_DEFINITION: Location adjacent to a variable definition.
const __DirectiveLocation_VARIABLE_DEFINITION __DirectiveLocation = "VARIABLE_DEFINITION"

// __EnumValue (OBJECT): One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
type __EnumValue struct {
	// DeprecationReason: undocumented.
	DeprecationReason string `json:"deprecationReason,omitempty"`

	// Description: undocumented.
	Description string `json:"description,omitempty"`

	// IsDeprecated: undocumented.
	IsDeprecated bool `json:"isDeprecated,omitempty"`

	// Name: undocumented.
	Name string `json:"name,omitempty"`
}

func (x *__EnumValue) GetDeprecationReason() string { return x.DeprecationReason }
func (x *__EnumValue) GetDescription() string       { return x.Description }
func (x *__EnumValue) GetIsDeprecated() bool        { return x.IsDeprecated }
func (x *__EnumValue) GetName() string              { return x.Name }

// __Field (OBJECT): Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
type __Field struct {
	// Args: undocumented.
	//
	// Query arguments:
	//   - includeDeprecated Boolean
	Args []*__InputValue `json:"args,omitempty"`

	// DeprecationReason: undocumented.
	DeprecationReason string `json:"deprecationReason,omitempty"`

	// Description: undocumented.
	Description string `json:"description,omitempty"`

	// IsDeprecated: undocumented.
	IsDeprecated bool `json:"isDeprecated,omitempty"`

	// Name: undocumented.
	Name string `json:"name,omitempty"`

	// Type: undocumented.
	Type *__Type `json:"type,omitempty"`
}

func (x *__Field) GetArgs() []*__InputValue     { return x.Args }
func (x *__Field) GetDeprecationReason() string { return x.DeprecationReason }
func (x *__Field) GetDescription() string       { return x.Description }
func (x *__Field) GetIsDeprecated() bool        { return x.IsDeprecated }
func (x *__Field) GetName() string              { return x.Name }
func (x *__Field) GetType() *__Type             { return x.Type }

// __InputValue (OBJECT): Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
type __InputValue struct {
	// DefaultValue: A GraphQL-formatted string representing the default value for this input value.
	DefaultValue string `json:"defaultValue,omitempty"`

	// DeprecationReason: undocumented.
	DeprecationReason string `json:"deprecationReason,omitempty"`

	// Description: undocumented.
	Description string `json:"description,omitempty"`

	// IsDeprecated: undocumented.
	IsDeprecated bool `json:"isDeprecated,omitempty"`

	// Name: undocumented.
	Name string `json:"name,omitempty"`

	// Type: undocumented.
	Type *__Type `json:"type,omitempty"`
}

func (x *__InputValue) GetDefaultValue() string      { return x.DefaultValue }
func (x *__InputValue) GetDeprecationReason() string { return x.DeprecationReason }
func (x *__InputValue) GetDescription() string       { return x.Description }
func (x *__InputValue) GetIsDeprecated() bool        { return x.IsDeprecated }
func (x *__InputValue) GetName() string              { return x.Name }
func (x *__InputValue) GetType() *__Type             { return x.Type }

// __Schema (OBJECT): A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
type __Schema struct {
	// Description: undocumented.
	Description string `json:"description,omitempty"`

	// Directives: A list of all directives supported by this server.
	Directives []*__Directive `json:"directives,omitempty"`

	// MutationType: If this server supports mutation, the type that mutation operations will be rooted at.
	MutationType *__Type `json:"mutationType,omitempty"`

	// QueryType: The type that query operations will be rooted at.
	QueryType *__Type `json:"queryType,omitempty"`

	// SubscriptionType: If this server support subscription, the type that subscription operations will be rooted at.
	SubscriptionType *__Type `json:"subscriptionType,omitempty"`

	// Types: A list of all types supported by this server.
	Types []*__Type `json:"types,omitempty"`
}

func (x *__Schema) GetDescription() string        { return x.Description }
func (x *__Schema) GetDirectives() []*__Directive { return x.Directives }
func (x *__Schema) GetMutationType() *__Type      { return x.MutationType }
func (x *__Schema) GetQueryType() *__Type         { return x.QueryType }
func (x *__Schema) GetSubscriptionType() *__Type  { return x.SubscriptionType }
func (x *__Schema) GetTypes() []*__Type           { return x.Types }

// __Type (OBJECT): The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
//
// Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
type __Type struct {
	// Description: undocumented.
	Description string `json:"description,omitempty"`

	// EnumValues: undocumented.
	//
	// Query arguments:
	//   - includeDeprecated Boolean
	EnumValues []*__EnumValue `json:"enumValues,omitempty"`

	// Fields: undocumented.
	//
	// Query arguments:
	//   - includeDeprecated Boolean
	Fields []*__Field `json:"fields,omitempty"`

	// InputFields: undocumented.
	//
	// Query arguments:
	//   - includeDeprecated Boolean
	InputFields []*__InputValue `json:"inputFields,omitempty"`

	// Interfaces: undocumented.
	Interfaces []*__Type `json:"interfaces,omitempty"`

	// IsOneOf: undocumented.
	IsOneOf bool `json:"isOneOf,omitempty"`

	// Kind: undocumented.
	Kind __TypeKind `json:"kind,omitempty"`

	// Name: undocumented.
	Name string `json:"name,omitempty"`

	// OfType: undocumented.
	OfType *__Type `json:"ofType,omitempty"`

	// PossibleTypes: undocumented.
	PossibleTypes []*__Type `json:"possibleTypes,omitempty"`

	// SpecifiedByURL: undocumented.
	SpecifiedByURL string `json:"specifiedByURL,omitempty"`
}

func (x *__Type) GetDescription() string          { return x.Description }
func (x *__Type) GetEnumValues() []*__EnumValue   { return x.EnumValues }
func (x *__Type) GetFields() []*__Field           { return x.Fields }
func (x *__Type) GetInputFields() []*__InputValue { return x.InputFields }
func (x *__Type) GetInterfaces() []*__Type        { return x.Interfaces }
func (x *__Type) GetIsOneOf() bool                { return x.IsOneOf }
func (x *__Type) GetKind() __TypeKind             { return x.Kind }
func (x *__Type) GetName() string                 { return x.Name }
func (x *__Type) GetOfType() *__Type              { return x.OfType }
func (x *__Type) GetPossibleTypes() []*__Type     { return x.PossibleTypes }
func (x *__Type) GetSpecifiedByURL() string       { return x.SpecifiedByURL }

// __TypeKind (ENUM): An enum describing what kind of type a given `__Type` is.
type __TypeKind string

// __TypeKind_SCALAR: Indicates this type is a scalar.
const __TypeKind_SCALAR __TypeKind = "SCALAR"

// __TypeKind_OBJECT: Indicates this type is an object. `fields` and `interfaces` are valid fields.
const __TypeKind_OBJECT __TypeKind = "OBJECT"

// __TypeKind_INTERFACE: Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
const __TypeKind_INTERFACE __TypeKind = "INTERFACE"

// __TypeKind_UNION: Indicates this type is a union. `possibleTypes` is a valid field.
const __TypeKind_UNION __TypeKind = "UNION"

// __TypeKind_ENUM: Indicates this type is an enum. `enumValues` is a valid field.
const __TypeKind_ENUM __TypeKind = "ENUM"

// __TypeKind_INPUT_OBJECT: Indicates this type is an input object. `inputFields` is a valid field.
const __TypeKind_INPUT_OBJECT __TypeKind = "INPUT_OBJECT"

// __TypeKind_LIST: Indicates this type is a list. `ofType` is a valid field.
const __TypeKind_LIST __TypeKind = "LIST"

// __TypeKind_NON_NULL: Indicates this type is a non-null. `ofType` is a valid field.
const __TypeKind_NON_NULL __TypeKind = "NON_NULL"
